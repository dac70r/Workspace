
ViCAT_ML_Monitoring_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4cc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800c764  0800c764  0000d764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ce08  0800ce08  0000de08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ce10  0800ce10  0000de10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ce14  0800ce14  0000de14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000410  24000000  0800ce18  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a30  24000410  0800d228  0000e410  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000e40  0800d228  0000ee40  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e410  2**0
                  CONTENTS, READONLY
 10 .debug_info   000186d2  00000000  00000000  0000e43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d60  00000000  00000000  00026b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013b0  00000000  00000000  0002a870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f57  00000000  00000000  0002bc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c090  00000000  00000000  0002cb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f528  00000000  00000000  00068c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168535  00000000  00000000  0008812f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f0664  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005350  00000000  00000000  001f06a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000009d  00000000  00000000  001f59f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000410 	.word	0x24000410
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c74c 	.word	0x0800c74c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000414 	.word	0x24000414
 80002d4:	0800c74c 	.word	0x0800c74c

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <APPL_AckErrorInd>:
 \brief    The function is called when an error state was acknowledged by the master

*////////////////////////////////////////////////////////////////////////////////////////

void    APPL_AckErrorInd(UINT16 stateTrans)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	80fb      	strh	r3, [r7, #6]

}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr

080002fe <APPL_StartMailboxHandler>:
            until a value unequal NOERROR_INWORK is returned

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartMailboxHandler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8000302:	2300      	movs	r3, #0
}
 8000304:	4618      	mov	r0, r3
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr

0800030e <APPL_StopMailboxHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopMailboxHandler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8000312:	2300      	movs	r3, #0
}
 8000314:	4618      	mov	r0, r3
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr

0800031e <APPL_StartInputHandler>:
           the state transition immediately, in that case the application need to be complete 
           the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartInputHandler(UINT16 *pIntMask)
{
 800031e:	b480      	push	{r7}
 8000320:	b083      	sub	sp, #12
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
    return ALSTATUSCODE_NOERROR;
 8000326:	2300      	movs	r3, #0
}
 8000328:	4618      	mov	r0, r3
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <APPL_StopInputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopInputHandler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8000338:	2300      	movs	r3, #0
}
 800033a:	4618      	mov	r0, r3
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <APPL_StartOutputHandler>:
           the state transition immediately, in that case the application need to be complete 
           the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartOutputHandler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8000348:	2300      	movs	r3, #0
}
 800034a:	4618      	mov	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <APPL_StopOutputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopOutputHandler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8000358:	2300      	movs	r3, #0
}
 800035a:	4618      	mov	r0, r3
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <APPL_GenerateMapping>:

\brief    This function calculates the process data sizes from the actual SM-PDO-Assign
            and PDO mapping
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 APPL_GenerateMapping(UINT16 *pInputSize,UINT16 *pOutputSize)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b089      	sub	sp, #36	@ 0x24
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	6039      	str	r1, [r7, #0]
    UINT16 result = ALSTATUSCODE_NOERROR;
 800036e:	2300      	movs	r3, #0
 8000370:	83fb      	strh	r3, [r7, #30]
    UINT16 InputSize = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	83bb      	strh	r3, [r7, #28]
    UINT16 OutputSize = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	837b      	strh	r3, [r7, #26]

#if COE_SUPPORTED
    UINT16 PDOAssignEntryCnt = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	833b      	strh	r3, [r7, #24]
    OBJCONST TOBJECT OBJMEM * pPDO = NULL;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
    UINT16 PDOSubindex0 = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	81fb      	strh	r3, [r7, #14]
    UINT32 *pPDOEntry = NULL;
 8000386:	2300      	movs	r3, #0
 8000388:	60bb      	str	r3, [r7, #8]
    UINT16 PDOEntryCnt = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	82fb      	strh	r3, [r7, #22]
   
#if MAX_PD_OUTPUT_SIZE > 0
    /*Scan object 0x1C12 RXPDO assign*/
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 800038e:	2300      	movs	r3, #0
 8000390:	833b      	strh	r3, [r7, #24]
 8000392:	e03a      	b.n	800040a <APPL_GenerateMapping+0xa6>
    {
        pPDO = OBJ_GetObjectHandle(sRxPDOassign.aEntries[PDOAssignEntryCnt]);
 8000394:	8b3b      	ldrh	r3, [r7, #24]
 8000396:	4a4c      	ldr	r2, [pc, #304]	@ (80004c8 <APPL_GenerateMapping+0x164>)
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	4413      	add	r3, r2
 800039c:	885b      	ldrh	r3, [r3, #2]
 800039e:	4618      	mov	r0, r3
 80003a0:	f004 f8ea 	bl	8004578 <OBJ_GetObjectHandle>
 80003a4:	6138      	str	r0, [r7, #16]
        if(pPDO != NULL)
 80003a6:	693b      	ldr	r3, [r7, #16]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d026      	beq.n	80003fa <APPL_GenerateMapping+0x96>
        {
            PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	81fb      	strh	r3, [r7, #14]
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 80003b4:	2300      	movs	r3, #0
 80003b6:	82fb      	strh	r3, [r7, #22]
 80003b8:	e01a      	b.n	80003f0 <APPL_GenerateMapping+0x8c>
            {
                pPDOEntry = (UINT32 *)(((UINT16 *)pPDO->pVarPtr) + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>4));    //goto PDO entry
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	699c      	ldr	r4, [r3, #24]
 80003be:	8afb      	ldrh	r3, [r7, #22]
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	3301      	adds	r3, #1
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	6939      	ldr	r1, [r7, #16]
 80003c8:	4618      	mov	r0, r3
 80003ca:	f004 fb61 	bl	8004a90 <OBJ_GetEntryOffset>
 80003ce:	4603      	mov	r3, r0
 80003d0:	091b      	lsrs	r3, r3, #4
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	4423      	add	r3, r4
 80003d8:	60bb      	str	r3, [r7, #8]
                // we increment the expected output size depending on the mapped Entry
                OutputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	b29b      	uxth	r3, r3
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	b29a      	uxth	r2, r3
 80003e4:	8b7b      	ldrh	r3, [r7, #26]
 80003e6:	4413      	add	r3, r2
 80003e8:	837b      	strh	r3, [r7, #26]
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 80003ea:	8afb      	ldrh	r3, [r7, #22]
 80003ec:	3301      	adds	r3, #1
 80003ee:	82fb      	strh	r3, [r7, #22]
 80003f0:	8afa      	ldrh	r2, [r7, #22]
 80003f2:	89fb      	ldrh	r3, [r7, #14]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d3e0      	bcc.n	80003ba <APPL_GenerateMapping+0x56>
 80003f8:	e004      	b.n	8000404 <APPL_GenerateMapping+0xa0>
            }
        }
        else
        {
            /*assigned PDO was not found in object dictionary. return invalid mapping*/
            OutputSize = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	837b      	strh	r3, [r7, #26]
            result = ALSTATUSCODE_INVALIDOUTPUTMAPPING;
 80003fe:	2325      	movs	r3, #37	@ 0x25
 8000400:	83fb      	strh	r3, [r7, #30]
            break;
 8000402:	e007      	b.n	8000414 <APPL_GenerateMapping+0xb0>
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8000404:	8b3b      	ldrh	r3, [r7, #24]
 8000406:	3301      	adds	r3, #1
 8000408:	833b      	strh	r3, [r7, #24]
 800040a:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <APPL_GenerateMapping+0x164>)
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	8b3a      	ldrh	r2, [r7, #24]
 8000410:	429a      	cmp	r2, r3
 8000412:	d3bf      	bcc.n	8000394 <APPL_GenerateMapping+0x30>
        }
    }

    OutputSize = (OutputSize + 7) >> 3;
 8000414:	8b7b      	ldrh	r3, [r7, #26]
 8000416:	3307      	adds	r3, #7
 8000418:	10db      	asrs	r3, r3, #3
 800041a:	837b      	strh	r3, [r7, #26]
#endif

#if MAX_PD_INPUT_SIZE > 0
    if(result == 0)
 800041c:	8bfb      	ldrh	r3, [r7, #30]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d142      	bne.n	80004a8 <APPL_GenerateMapping+0x144>
    {
        /*Scan Object 0x1C13 TXPDO assign*/
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8000422:	2300      	movs	r3, #0
 8000424:	833b      	strh	r3, [r7, #24]
 8000426:	e03a      	b.n	800049e <APPL_GenerateMapping+0x13a>
        {
            pPDO = OBJ_GetObjectHandle(sTxPDOassign.aEntries[PDOAssignEntryCnt]);
 8000428:	8b3b      	ldrh	r3, [r7, #24]
 800042a:	4a28      	ldr	r2, [pc, #160]	@ (80004cc <APPL_GenerateMapping+0x168>)
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	4413      	add	r3, r2
 8000430:	885b      	ldrh	r3, [r3, #2]
 8000432:	4618      	mov	r0, r3
 8000434:	f004 f8a0 	bl	8004578 <OBJ_GetObjectHandle>
 8000438:	6138      	str	r0, [r7, #16]
            if(pPDO != NULL)
 800043a:	693b      	ldr	r3, [r7, #16]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d026      	beq.n	800048e <APPL_GenerateMapping+0x12a>
            {
                PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 8000440:	693b      	ldr	r3, [r7, #16]
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	881b      	ldrh	r3, [r3, #0]
 8000446:	81fb      	strh	r3, [r7, #14]
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8000448:	2300      	movs	r3, #0
 800044a:	82fb      	strh	r3, [r7, #22]
 800044c:	e01a      	b.n	8000484 <APPL_GenerateMapping+0x120>
                {
                    pPDOEntry = (UINT32 *)(((UINT16 *)pPDO->pVarPtr) + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>4));    //goto PDO entry
 800044e:	693b      	ldr	r3, [r7, #16]
 8000450:	699c      	ldr	r4, [r3, #24]
 8000452:	8afb      	ldrh	r3, [r7, #22]
 8000454:	b2db      	uxtb	r3, r3
 8000456:	3301      	adds	r3, #1
 8000458:	b2db      	uxtb	r3, r3
 800045a:	6939      	ldr	r1, [r7, #16]
 800045c:	4618      	mov	r0, r3
 800045e:	f004 fb17 	bl	8004a90 <OBJ_GetEntryOffset>
 8000462:	4603      	mov	r3, r0
 8000464:	091b      	lsrs	r3, r3, #4
 8000466:	b29b      	uxth	r3, r3
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	4423      	add	r3, r4
 800046c:	60bb      	str	r3, [r7, #8]
                    // we increment the expected output size depending on the mapped Entry
                    InputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	b29b      	uxth	r3, r3
 8000474:	b2db      	uxtb	r3, r3
 8000476:	b29a      	uxth	r2, r3
 8000478:	8bbb      	ldrh	r3, [r7, #28]
 800047a:	4413      	add	r3, r2
 800047c:	83bb      	strh	r3, [r7, #28]
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 800047e:	8afb      	ldrh	r3, [r7, #22]
 8000480:	3301      	adds	r3, #1
 8000482:	82fb      	strh	r3, [r7, #22]
 8000484:	8afa      	ldrh	r2, [r7, #22]
 8000486:	89fb      	ldrh	r3, [r7, #14]
 8000488:	429a      	cmp	r2, r3
 800048a:	d3e0      	bcc.n	800044e <APPL_GenerateMapping+0xea>
 800048c:	e004      	b.n	8000498 <APPL_GenerateMapping+0x134>
                }
            }
            else
            {
                /*assigned PDO was not found in object dictionary. return invalid mapping*/
                InputSize = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	83bb      	strh	r3, [r7, #28]
                result = ALSTATUSCODE_INVALIDINPUTMAPPING;
 8000492:	2324      	movs	r3, #36	@ 0x24
 8000494:	83fb      	strh	r3, [r7, #30]
                break;
 8000496:	e007      	b.n	80004a8 <APPL_GenerateMapping+0x144>
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8000498:	8b3b      	ldrh	r3, [r7, #24]
 800049a:	3301      	adds	r3, #1
 800049c:	833b      	strh	r3, [r7, #24]
 800049e:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <APPL_GenerateMapping+0x168>)
 80004a0:	881b      	ldrh	r3, [r3, #0]
 80004a2:	8b3a      	ldrh	r2, [r7, #24]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d3bf      	bcc.n	8000428 <APPL_GenerateMapping+0xc4>
            }
        }
    }
    InputSize = (InputSize + 7) >> 3;
 80004a8:	8bbb      	ldrh	r3, [r7, #28]
 80004aa:	3307      	adds	r3, #7
 80004ac:	10db      	asrs	r3, r3, #3
 80004ae:	83bb      	strh	r3, [r7, #28]
#else
    #warning "Define 'InputSize' and 'OutputSize'."
#endif
#endif

    *pInputSize = InputSize;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	8bba      	ldrh	r2, [r7, #28]
 80004b4:	801a      	strh	r2, [r3, #0]
    *pOutputSize = OutputSize;
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	8b7a      	ldrh	r2, [r7, #26]
 80004ba:	801a      	strh	r2, [r3, #0]
    return result;
 80004bc:	8bfb      	ldrh	r3, [r7, #30]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3724      	adds	r7, #36	@ 0x24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd90      	pop	{r4, r7, pc}
 80004c6:	bf00      	nop
 80004c8:	24000018 	.word	0x24000018
 80004cc:	2400001c 	.word	0x2400001c

080004d0 <APPL_InputMapping>:

\brief      This function will copies the inputs from the local memory to the ESC memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_InputMapping(UINT16* pData)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	memcpy(pData,&(((UINT16*)&IN_GENERIC0x6000)[1]),SIZEOF(IN_GENERIC0x6000)-2);
 80004d8:	4b05      	ldr	r3, [pc, #20]	@ (80004f0 <APPL_InputMapping+0x20>)
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	b29a      	uxth	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	801a      	strh	r2, [r3, #0]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	24000022 	.word	0x24000022

080004f4 <APPL_OutputMapping>:

\brief    This function will copies the outputs from the ESC memory to the local memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_OutputMapping(UINT16* pData)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	memcpy(&(((UINT16*)&OUT_GENERIC0x7000)[1]),pData,SIZEOF(OUT_GENERIC0x7000)-2);
 80004fc:	4a05      	ldr	r2, [pc, #20]	@ (8000514 <APPL_OutputMapping+0x20>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	b29b      	uxth	r3, r3
 8000504:	8013      	strh	r3, [r2, #0]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	24000026 	.word	0x24000026

08000518 <APPL_Application>:
/**
\brief    This function will called from the synchronisation ISR 
            or from the mainloop if no synchronisation is supported
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_Application(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_1);
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <main_initial>:
/**

 \brief    This is the main function

*////////////////////////////////////////////////////////////////////////////////////////
void main_initial(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
    /* initialize the Hardware and the EtherCAT Slave Controller */
    HW_Init();
 800052c:	f000 f946 	bl	80007bc <HW_Init>
    MainInit();
 8000530:	f001 f9c8 	bl	80018c4 <MainInit>

    // appInit(); // user defined application

    bRunApplication = TRUE;
 8000534:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <main_initial+0x28>)
 8000536:	2201      	movs	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
    do {
        MainLoop();
 800053a:	f001 fa33 	bl	80019a4 <MainLoop>
    } while (bRunApplication == TRUE);
 800053e:	4b04      	ldr	r3, [pc, #16]	@ (8000550 <main_initial+0x28>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d0f9      	beq.n	800053a <main_initial+0x12>

    HW_Release();
 8000546:	f000 f9ad 	bl	80008a4 <HW_Release>
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	24000852 	.word	0x24000852

08000554 <HW_SPI_TransmitReceive>:
 * @param Size : Size of Data
 * @param Timeout : Timeout period
 * @return int32_t
 */
static int32_t HW_SPI_TransmitReceive(uint8_t *pTxData, uint8_t *pRxData,
                                      uint16_t Size, uint32_t Timeout) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af02      	add	r7, sp, #8
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	4613      	mov	r3, r2
 8000562:	80fb      	strh	r3, [r7, #6]
#if SPI_ACTIVE_LOW == 1
    HAL_GPIO_WritePin(HW_SPI_ESC_CS_PORT, HW_SPI_ESC_CS_PIN, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2180      	movs	r1, #128	@ 0x80
 8000568:	480b      	ldr	r0, [pc, #44]	@ (8000598 <HW_SPI_TransmitReceive+0x44>)
 800056a:	f008 f971 	bl	8008850 <HAL_GPIO_WritePin>
#else
    HAL_GPIO_WritePin(HW_SPI_ESC_CS_PORT, HW_SPI_ESC_CS_PIN, GPIO_PIN_SET);
#endif

    int32_t errorcode = HAL_SPI_TransmitReceive(&HW_SPI_ESC_INSTANCE_H, pTxData,
 800056e:	88fa      	ldrh	r2, [r7, #6]
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	4613      	mov	r3, r2
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	68f9      	ldr	r1, [r7, #12]
 800057a:	4808      	ldr	r0, [pc, #32]	@ (800059c <HW_SPI_TransmitReceive+0x48>)
 800057c:	f00a fdfc 	bl	800b178 <HAL_SPI_TransmitReceive>
 8000580:	4603      	mov	r3, r0
 8000582:	617b      	str	r3, [r7, #20]
                                                pRxData, Size, Timeout);

#if SPI_ACTIVE_LOW == 1
    HAL_GPIO_WritePin(HW_SPI_ESC_CS_PORT, HW_SPI_ESC_CS_PIN, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2180      	movs	r1, #128	@ 0x80
 8000588:	4803      	ldr	r0, [pc, #12]	@ (8000598 <HW_SPI_TransmitReceive+0x44>)
 800058a:	f008 f961 	bl	8008850 <HAL_GPIO_WritePin>
#else
    HAL_GPIO_WritePin(HW_SPI_ESC_CS_PORT, HW_SPI_ESC_CS_PIN, GPIO_PIN_RESET);
#endif

    return errorcode;
 800058e:	697b      	ldr	r3, [r7, #20]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3718      	adds	r7, #24
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	58020800 	.word	0x58020800
 800059c:	24000bd0 	.word	0x24000bd0

080005a0 <HW_SPI_Read>:
 *
 * @param pBuf
 * @param Addr
 * @param ByteLen
 */
static void HW_SPI_Read(uint8_t *pBuf, uint16_t Addr, uint16_t ByteLen) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	807b      	strh	r3, [r7, #2]
 80005ac:	4613      	mov	r3, r2
 80005ae:	803b      	strh	r3, [r7, #0]
    uint16_t XferLen, AddrTmp, i;
    uint8_t *ptr, DataOffset = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	74fb      	strb	r3, [r7, #19]

    while (ByteLen) {
 80005b4:	e06e      	b.n	8000694 <HW_SPI_Read+0xf4>
        AddrTmp = Addr;
 80005b6:	887b      	ldrh	r3, [r7, #2]
 80005b8:	817b      	strh	r3, [r7, #10]

        /* Fragmented to specified data length per-section */
        if (ByteLen > HW_SPI_MAX_DATA_FRAGMENT_SIZE) {
 80005ba:	883b      	ldrh	r3, [r7, #0]
 80005bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80005c0:	d903      	bls.n	80005ca <HW_SPI_Read+0x2a>
            XferLen = HW_SPI_MAX_DATA_FRAGMENT_SIZE;
 80005c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005c6:	82fb      	strh	r3, [r7, #22]
 80005c8:	e001      	b.n	80005ce <HW_SPI_Read+0x2e>
        } else {
            XferLen = ByteLen;
 80005ca:	883b      	ldrh	r3, [r7, #0]
 80005cc:	82fb      	strh	r3, [r7, #22]
        }

        /* Set address, command */
        ptr = (uint8_t *)&AddrTmp;
 80005ce:	f107 030a 	add.w	r3, r7, #10
 80005d2:	60fb      	str	r3, [r7, #12]

#if ENABLE_3_BYTES_ADDR == 1
        spiTxBuf[2] = (ptr[1] & 0xe0) | (HW_SPI_READ_WITH_WAIT_CMD << 2);
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	3301      	adds	r3, #1
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	f023 031f 	bic.w	r3, r3, #31
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	f043 030c 	orr.w	r3, r3, #12
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4b2f      	ldr	r3, [pc, #188]	@ (80006a8 <HW_SPI_Read+0x108>)
 80005ec:	709a      	strb	r2, [r3, #2]
        AddrTmp = AddrTmp << 3;
 80005ee:	897b      	ldrh	r3, [r7, #10]
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	817b      	strh	r3, [r7, #10]
        spiTxBuf[0] = ptr[1];
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	785a      	ldrb	r2, [r3, #1]
 80005fa:	4b2b      	ldr	r3, [pc, #172]	@ (80006a8 <HW_SPI_Read+0x108>)
 80005fc:	701a      	strb	r2, [r3, #0]
        spiTxBuf[1] = ptr[0] | HW_SPI_ADDR_EXT_CMD;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	f043 0306 	orr.w	r3, r3, #6
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b27      	ldr	r3, [pc, #156]	@ (80006a8 <HW_SPI_Read+0x108>)
 800060a:	705a      	strb	r2, [r3, #1]
        DataOffset = 3;
 800060c:	2303      	movs	r3, #3
 800060e:	74fb      	strb	r3, [r7, #19]
        DataOffset = 2;

#endif

        /* Set dummy byte */
        spiTxBuf[DataOffset] = 0xff;
 8000610:	7cfb      	ldrb	r3, [r7, #19]
 8000612:	4a25      	ldr	r2, [pc, #148]	@ (80006a8 <HW_SPI_Read+0x108>)
 8000614:	21ff      	movs	r1, #255	@ 0xff
 8000616:	54d1      	strb	r1, [r2, r3]

        /* Set read terminal byte */
        memset(&spiTxBuf[DataOffset + 1], 0, XferLen);
 8000618:	7cfb      	ldrb	r3, [r7, #19]
 800061a:	3301      	adds	r3, #1
 800061c:	4a22      	ldr	r2, [pc, #136]	@ (80006a8 <HW_SPI_Read+0x108>)
 800061e:	4413      	add	r3, r2
 8000620:	8afa      	ldrh	r2, [r7, #22]
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f00b fff5 	bl	800c614 <memset>
        spiTxBuf[DataOffset + XferLen] = 0xff;
 800062a:	7cfa      	ldrb	r2, [r7, #19]
 800062c:	8afb      	ldrh	r3, [r7, #22]
 800062e:	4413      	add	r3, r2
 8000630:	4a1d      	ldr	r2, [pc, #116]	@ (80006a8 <HW_SPI_Read+0x108>)
 8000632:	21ff      	movs	r1, #255	@ 0xff
 8000634:	54d1      	strb	r1, [r2, r3]
        DataOffset++;
 8000636:	7cfb      	ldrb	r3, [r7, #19]
 8000638:	3301      	adds	r3, #1
 800063a:	74fb      	strb	r3, [r7, #19]

        /* Start read */
        if (HW_SPI_TransmitReceive(spiTxBuf, spiRxBuf, DataOffset + XferLen,
 800063c:	7cfb      	ldrb	r3, [r7, #19]
 800063e:	b29a      	uxth	r2, r3
 8000640:	8afb      	ldrh	r3, [r7, #22]
 8000642:	4413      	add	r3, r2
 8000644:	b29a      	uxth	r2, r3
 8000646:	230a      	movs	r3, #10
 8000648:	4918      	ldr	r1, [pc, #96]	@ (80006ac <HW_SPI_Read+0x10c>)
 800064a:	4817      	ldr	r0, [pc, #92]	@ (80006a8 <HW_SPI_Read+0x108>)
 800064c:	f7ff ff82 	bl	8000554 <HW_SPI_TransmitReceive>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d122      	bne.n	800069c <HW_SPI_Read+0xfc>
                                   HW_SPI_XFER_TIMEOUT) != 0) {
            break;
        }

        /* Store received data */
        for (i = 0; i < XferLen; i++) {
 8000656:	2300      	movs	r3, #0
 8000658:	82bb      	strh	r3, [r7, #20]
 800065a:	e00b      	b.n	8000674 <HW_SPI_Read+0xd4>
            pBuf[i] = spiRxBuf[DataOffset + i];
 800065c:	7cfa      	ldrb	r2, [r7, #19]
 800065e:	8abb      	ldrh	r3, [r7, #20]
 8000660:	441a      	add	r2, r3
 8000662:	8abb      	ldrh	r3, [r7, #20]
 8000664:	6879      	ldr	r1, [r7, #4]
 8000666:	440b      	add	r3, r1
 8000668:	4910      	ldr	r1, [pc, #64]	@ (80006ac <HW_SPI_Read+0x10c>)
 800066a:	5c8a      	ldrb	r2, [r1, r2]
 800066c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < XferLen; i++) {
 800066e:	8abb      	ldrh	r3, [r7, #20]
 8000670:	3301      	adds	r3, #1
 8000672:	82bb      	strh	r3, [r7, #20]
 8000674:	8aba      	ldrh	r2, [r7, #20]
 8000676:	8afb      	ldrh	r3, [r7, #22]
 8000678:	429a      	cmp	r2, r3
 800067a:	d3ef      	bcc.n	800065c <HW_SPI_Read+0xbc>
        }

        /* Next section */
        Addr += XferLen;
 800067c:	887a      	ldrh	r2, [r7, #2]
 800067e:	8afb      	ldrh	r3, [r7, #22]
 8000680:	4413      	add	r3, r2
 8000682:	807b      	strh	r3, [r7, #2]
        pBuf += XferLen;
 8000684:	8afb      	ldrh	r3, [r7, #22]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	607b      	str	r3, [r7, #4]
        ByteLen -= XferLen;
 800068c:	883a      	ldrh	r2, [r7, #0]
 800068e:	8afb      	ldrh	r3, [r7, #22]
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	803b      	strh	r3, [r7, #0]
    while (ByteLen) {
 8000694:	883b      	ldrh	r3, [r7, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d18d      	bne.n	80005b6 <HW_SPI_Read+0x16>
    }
}
 800069a:	e000      	b.n	800069e <HW_SPI_Read+0xfe>
            break;
 800069c:	bf00      	nop
}
 800069e:	bf00      	nop
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2400042c 	.word	0x2400042c
 80006ac:	24000630 	.word	0x24000630

080006b0 <HW_SPI_Write>:
 *
 * @param pData
 * @param Addr
 * @param ByteLen
 */
static void HW_SPI_Write(uint8_t *pData, uint16_t Addr, uint16_t ByteLen) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	807b      	strh	r3, [r7, #2]
 80006bc:	4613      	mov	r3, r2
 80006be:	803b      	strh	r3, [r7, #0]
    uint16_t XferLen, AddrTmp;
    uint8_t *ptr, DataOffset;

    while (ByteLen) {
 80006c0:	e057      	b.n	8000772 <HW_SPI_Write+0xc2>
        AddrTmp = Addr;
 80006c2:	887b      	ldrh	r3, [r7, #2]
 80006c4:	81bb      	strh	r3, [r7, #12]

        /* Fragmented to specified data length per-section */
        if (ByteLen > HW_SPI_MAX_DATA_FRAGMENT_SIZE) {
 80006c6:	883b      	ldrh	r3, [r7, #0]
 80006c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006cc:	d903      	bls.n	80006d6 <HW_SPI_Write+0x26>
            XferLen = HW_SPI_MAX_DATA_FRAGMENT_SIZE;
 80006ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006d2:	82fb      	strh	r3, [r7, #22]
 80006d4:	e006      	b.n	80006e4 <HW_SPI_Write+0x34>
        } else {
#if AX58400 == 1
            XferLen = ByteLen;
#else
            /* Avoid 3bytes access */
            XferLen = ((ByteLen == 3) ? 2 : ByteLen);
 80006d6:	883b      	ldrh	r3, [r7, #0]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d001      	beq.n	80006e0 <HW_SPI_Write+0x30>
 80006dc:	883b      	ldrh	r3, [r7, #0]
 80006de:	e000      	b.n	80006e2 <HW_SPI_Write+0x32>
 80006e0:	2302      	movs	r3, #2
 80006e2:	82fb      	strh	r3, [r7, #22]
#endif
        }

        /* Set address , command */
        ptr = (uint8_t *)&AddrTmp;
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	613b      	str	r3, [r7, #16]

#if ENABLE_3_BYTES_ADDR == 1
        spiTxBuf[2] = (ptr[1] & 0xe0) | (HW_SPI_WRITE_CMD << 2);
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	3301      	adds	r3, #1
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	f023 031f 	bic.w	r3, r3, #31
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	f043 0310 	orr.w	r3, r3, #16
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <HW_SPI_Write+0xd4>)
 8000702:	709a      	strb	r2, [r3, #2]
        AddrTmp = AddrTmp << 3;
 8000704:	89bb      	ldrh	r3, [r7, #12]
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	b29b      	uxth	r3, r3
 800070a:	81bb      	strh	r3, [r7, #12]
        spiTxBuf[0] = ptr[1];
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	785a      	ldrb	r2, [r3, #1]
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <HW_SPI_Write+0xd4>)
 8000712:	701a      	strb	r2, [r3, #0]
        spiTxBuf[1] = ptr[0] | HW_SPI_ADDR_EXT_CMD;
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	f043 0306 	orr.w	r3, r3, #6
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <HW_SPI_Write+0xd4>)
 8000720:	705a      	strb	r2, [r3, #1]
        DataOffset = 3;
 8000722:	2303      	movs	r3, #3
 8000724:	73fb      	strb	r3, [r7, #15]
        spiTxBuf[1] = ptr[0] | HW_SPI_WRITE_CMD;
        DataOffset = 2;
#endif

        /* Set transmit data bytes */
        memcpy(&(spiTxBuf[DataOffset]), pData, XferLen);
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	4a16      	ldr	r2, [pc, #88]	@ (8000784 <HW_SPI_Write+0xd4>)
 800072a:	4413      	add	r3, r2
 800072c:	8afa      	ldrh	r2, [r7, #22]
 800072e:	6879      	ldr	r1, [r7, #4]
 8000730:	4618      	mov	r0, r3
 8000732:	f00b ffb3 	bl	800c69c <memcpy>
        DataOffset++;
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	3301      	adds	r3, #1
 800073a:	73fb      	strb	r3, [r7, #15]

        /* Start write */
        if (HW_SPI_TransmitReceive(spiTxBuf, spiRxBuf,
                                   (DataOffset - 1) + XferLen,
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	b29a      	uxth	r2, r3
 8000740:	8afb      	ldrh	r3, [r7, #22]
 8000742:	4413      	add	r3, r2
 8000744:	b29b      	uxth	r3, r3
        if (HW_SPI_TransmitReceive(spiTxBuf, spiRxBuf,
 8000746:	3b01      	subs	r3, #1
 8000748:	b29a      	uxth	r2, r3
 800074a:	230a      	movs	r3, #10
 800074c:	490e      	ldr	r1, [pc, #56]	@ (8000788 <HW_SPI_Write+0xd8>)
 800074e:	480d      	ldr	r0, [pc, #52]	@ (8000784 <HW_SPI_Write+0xd4>)
 8000750:	f7ff ff00 	bl	8000554 <HW_SPI_TransmitReceive>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d10f      	bne.n	800077a <HW_SPI_Write+0xca>
                                   HW_SPI_XFER_TIMEOUT) != 0) {
            break;
        }

        Addr += XferLen;
 800075a:	887a      	ldrh	r2, [r7, #2]
 800075c:	8afb      	ldrh	r3, [r7, #22]
 800075e:	4413      	add	r3, r2
 8000760:	807b      	strh	r3, [r7, #2]
        pData += XferLen;
 8000762:	8afb      	ldrh	r3, [r7, #22]
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	4413      	add	r3, r2
 8000768:	607b      	str	r3, [r7, #4]
        ByteLen -= XferLen;
 800076a:	883a      	ldrh	r2, [r7, #0]
 800076c:	8afb      	ldrh	r3, [r7, #22]
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	803b      	strh	r3, [r7, #0]
    while (ByteLen) {
 8000772:	883b      	ldrh	r3, [r7, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d1a4      	bne.n	80006c2 <HW_SPI_Write+0x12>
    }
}
 8000778:	e000      	b.n	800077c <HW_SPI_Write+0xcc>
            break;
 800077a:	bf00      	nop
}
 800077c:	bf00      	nop
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2400042c 	.word	0x2400042c
 8000788:	24000630 	.word	0x24000630

0800078c <GetInterruptRegister>:
 * @note   The first two bytes of an access to the EtherCAT ASIC always deliver
 * the AL_Event register (0x220). It will be saved in the global "EscALEvent"
 * @param  None
 * @retval None
 */
static void GetInterruptRegister(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

    HW_EscRead((MEM_ADDR *)EscALEvent.Byte, ESC_AL_EVENT_OFFSET, 2);
 8000790:	2202      	movs	r2, #2
 8000792:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000796:	4802      	ldr	r0, [pc, #8]	@ (80007a0 <GetInterruptRegister+0x14>)
 8000798:	f000 f8a0 	bl	80008dc <HW_EscRead>

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	24000834 	.word	0x24000834

080007a4 <ISR_GetInterruptRegister>:
 * @retval None
 */
#if !INTERRUPTS_SUPPORTED
#define ISR_GetInterruptRegister GetInterruptRegister
#else
static void ISR_GetInterruptRegister(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    HW_EscReadIsr((MEM_ADDR *)EscALEvent.Byte, ESC_AL_EVENT_OFFSET, 2);
 80007a8:	2202      	movs	r2, #2
 80007aa:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80007ae:	4802      	ldr	r0, [pc, #8]	@ (80007b8 <ISR_GetInterruptRegister+0x14>)
 80007b0:	f000 f8a6 	bl	8000900 <HW_EscReadIsr>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	24000834 	.word	0x24000834

080007bc <HW_Init>:
 * @brief This function intialize the Process Data Interface (PDI) and the host
 * controller
 *
 * @return uint8_t 0 if initialization was successful
 */
uint8_t HW_Init(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
    uint16_t startTime;
    uint16_t currentTime;
    uint16_t elapsedTime;

#if DEVICE_ID_SWITCH == 1
    uint16_t bootSwitchID = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	80fb      	strh	r3, [r7, #6]
    uint16_t writtenIDValue = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	80bb      	strh	r3, [r7, #4]
#endif

    HAL_TIM_Base_Start(&HW_TIMETICK_INSTANCE_H);
 80007ca:	4833      	ldr	r0, [pc, #204]	@ (8000898 <HW_Init+0xdc>)
 80007cc:	f00b fb68 	bl	800bea0 <HAL_TIM_Base_Start>

    /* Wait ESC ready by checking EEPDONE pin goes high */
    startTime = HW_GetTimer();  // Get the starting time
 80007d0:	4b32      	ldr	r3, [pc, #200]	@ (800089c <HW_Init+0xe0>)
 80007d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	82bb      	strh	r3, [r7, #20]
    do {
        currentTime = HW_GetTimer();  // Get the current timer value
 80007d8:	4b30      	ldr	r3, [pc, #192]	@ (800089c <HW_Init+0xe0>)
 80007da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	827b      	strh	r3, [r7, #18]

        if (currentTime < startTime) {
 80007e0:	8a7a      	ldrh	r2, [r7, #18]
 80007e2:	8abb      	ldrh	r3, [r7, #20]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d206      	bcs.n	80007f6 <HW_Init+0x3a>
            // Handle timer overflow
            elapsedTime = (HW_TIMETICK_MAX_VALUE - startTime) + currentTime;
 80007e8:	8a7a      	ldrh	r2, [r7, #18]
 80007ea:	8abb      	ldrh	r3, [r7, #20]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	3b01      	subs	r3, #1
 80007f2:	82fb      	strh	r3, [r7, #22]
 80007f4:	e003      	b.n	80007fe <HW_Init+0x42>
        } else {
            elapsedTime = currentTime - startTime;
 80007f6:	8a7a      	ldrh	r2, [r7, #18]
 80007f8:	8abb      	ldrh	r3, [r7, #20]
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	82fb      	strh	r3, [r7, #22]
        }

        if (elapsedTime >= HW_EEPROM_RELOAD_TIMEOUT) {
 80007fe:	8afb      	ldrh	r3, [r7, #22]
 8000800:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000804:	4293      	cmp	r3, r2
 8000806:	d901      	bls.n	800080c <HW_Init+0x50>
            return 1;  // Timeout occurred
 8000808:	2301      	movs	r3, #1
 800080a:	e041      	b.n	8000890 <HW_Init+0xd4>
        }
    } while (HAL_GPIO_ReadPin(HW_EEPROM_PORT, HW_EEPROM_PIN) == GPIO_PIN_RESET);
 800080c:	2102      	movs	r1, #2
 800080e:	4824      	ldr	r0, [pc, #144]	@ (80008a0 <HW_Init+0xe4>)
 8000810:	f008 f806 	bl	8008820 <HAL_GPIO_ReadPin>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0de      	beq.n	80007d8 <HW_Init+0x1c>

    do {
        intMask = 0x93;
 800081a:	2393      	movs	r3, #147	@ 0x93
 800081c:	60bb      	str	r3, [r7, #8]
        HW_EscWriteDWord(intMask, ESC_AL_EVENTMASK_OFFSET);
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	2204      	movs	r2, #4
 8000824:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f87b 	bl	8000924 <HW_EscWrite>
        intMask = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
        HW_EscReadDWord(intMask, ESC_AL_EVENTMASK_OFFSET);
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	2204      	movs	r2, #4
 8000838:	f44f 7101 	mov.w	r1, #516	@ 0x204
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f84d 	bl	80008dc <HW_EscRead>
    } while (intMask != 0x93);
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	2b93      	cmp	r3, #147	@ 0x93
 8000846:	d1e8      	bne.n	800081a <HW_Init+0x5e>

    intMask = 0x00;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
    HW_EscWriteDWord(intMask, ESC_AL_EVENTMASK_OFFSET);
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	2204      	movs	r2, #4
 8000852:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8000856:	4618      	mov	r0, r3
 8000858:	f000 f864 	bl	8000924 <HW_EscWrite>
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f383 8810 	msr	PRIMASK, r3
}
 8000866:	bf00      	nop
#if DEVICE_ID_SWITCH == 1
    // read the ID from the switch
    // bootSwitchID = readDevID();

    // read the ID from station alias register in EEPROM
    HW_EscReadWord(writtenIDValue, ESC_ALIAS_ADDRESS_OFFSET);
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2202      	movs	r2, #2
 800086c:	2112      	movs	r1, #18
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f834 	bl	80008dc <HW_EscRead>

#if SW_STN_ALIAS == 1
    // If ID is not zero, write it into station alias register
    if (bootSwitchID != 0) {
 8000874:	88fb      	ldrh	r3, [r7, #6]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d009      	beq.n	800088e <HW_Init+0xd2>
#endif
        // if ID is the same as in the station alias register, do not write,
        // else write
        if (bootSwitchID != writtenIDValue) {
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	88bb      	ldrh	r3, [r7, #4]
 800087e:	429a      	cmp	r2, r3
 8000880:	d005      	beq.n	800088e <HW_Init+0xd2>
            HW_EscWriteWord(bootSwitchID, ESC_ALIAS_ADDRESS_OFFSET);
 8000882:	1dbb      	adds	r3, r7, #6
 8000884:	2202      	movs	r2, #2
 8000886:	2112      	movs	r1, #18
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f84b 	bl	8000924 <HW_EscWrite>

#if SW_STN_ALIAS == 1
    }
#endif
#endif
    return 0;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000c5c 	.word	0x24000c5c
 800089c:	40001000 	.word	0x40001000
 80008a0:	58020400 	.word	0x58020400

080008a4 <HW_Release>:
 * @brief  This function shall be implemented if hardware resources need to be
 * release when the sample application stops.
 * @param  None
 * @retval None
 */
void HW_Release(void) {}
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <HW_GetALEventRegister>:
/**
 * @brief  This function gets the current content of ALEvent register
 * @param  None
 * @retval First two Bytes of ALEvent register (0x220)
 */
uint16_t HW_GetALEventRegister(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
    GetInterruptRegister();
 80008b8:	f7ff ff68 	bl	800078c <GetInterruptRegister>
    return EscALEvent.Word;
 80008bc:	4b01      	ldr	r3, [pc, #4]	@ (80008c4 <HW_GetALEventRegister+0x10>)
 80008be:	881b      	ldrh	r3, [r3, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	24000834 	.word	0x24000834

080008c8 <HW_GetALEventRegister_Isr>:
 * interrupts service routines. The behaviour is equal to
 * "HW_GetALEventRegister()"
 * @param  None
 * @retval First two Bytes of ALEvent register (0x220)
 */
uint16_t HW_GetALEventRegister_Isr(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    ISR_GetInterruptRegister();
 80008cc:	f7ff ff6a 	bl	80007a4 <ISR_GetInterruptRegister>
    return EscALEvent.Word;
 80008d0:	4b01      	ldr	r3, [pc, #4]	@ (80008d8 <HW_GetALEventRegister_Isr+0x10>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	24000834 	.word	0x24000834

080008dc <HW_EscRead>:
 * @param  Address   EtherCAT ASIC address ( upper limit is 0x1FFF )    for
 * access.
 * @param  Len       Access size in Bytes.
 * @retval None
 */
void HW_EscRead(MEM_ADDR *pData, uint16_t Address, uint16_t Len) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	807b      	strh	r3, [r7, #2]
 80008e8:	4613      	mov	r3, r2
 80008ea:	803b      	strh	r3, [r7, #0]


    HW_SPI_Read((uint8_t *)pData, Address, Len);
 80008ec:	883a      	ldrh	r2, [r7, #0]
 80008ee:	887b      	ldrh	r3, [r7, #2]
 80008f0:	4619      	mov	r1, r3
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff fe54 	bl	80005a0 <HW_SPI_Read>

}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <HW_EscReadIsr>:
 * @param  Address     EtherCAT ASIC address ( upper limit is 0x1FFF ) for
 * access.
 * @param  Len         Access size in Bytes.
 * @retval None
 */
void HW_EscReadIsr(MEM_ADDR *pData, uint16_t Address, uint16_t Len) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	807b      	strh	r3, [r7, #2]
 800090c:	4613      	mov	r3, r2
 800090e:	803b      	strh	r3, [r7, #0]
    HW_SPI_Read((uint8_t *)pData, Address, Len);
 8000910:	883a      	ldrh	r2, [r7, #0]
 8000912:	887b      	ldrh	r3, [r7, #2]
 8000914:	4619      	mov	r1, r3
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fe42 	bl	80005a0 <HW_SPI_Read>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <HW_EscWrite>:
 * @param  Address     EtherCAT ASIC address ( upper limit is 0x1FFF ) for
 * access.
 * @param  Len         Access size in Bytes.
 * @retval None
 */
void HW_EscWrite(MEM_ADDR *pData, uint16_t Address, uint16_t Len) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	807b      	strh	r3, [r7, #2]
 8000930:	4613      	mov	r3, r2
 8000932:	803b      	strh	r3, [r7, #0]
 8000934:	2301      	movs	r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	f383 8810 	msr	PRIMASK, r3
}
 800093e:	bf00      	nop
#if AL_EVENT_ENABLED
    DISABLE_AL_EVENT_INT;
#endif

    HW_SPI_Write((uint8_t *)pData, Address, Len);
 8000940:	883a      	ldrh	r2, [r7, #0]
 8000942:	887b      	ldrh	r3, [r7, #2]
 8000944:	4619      	mov	r1, r3
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff feb2 	bl	80006b0 <HW_SPI_Write>
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f383 8810 	msr	PRIMASK, r3
}
 8000956:	bf00      	nop

#if AL_EVENT_ENABLED
    ENABLE_AL_EVENT_INT;
#endif
}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <HW_EscWriteIsr>:
 * @param  Address     EtherCAT ASIC address ( upper limit is 0x1FFF ) for
 * access.
 * @param  Len         Access size in Bytes.
 * @retval None
 */
void HW_EscWriteIsr(MEM_ADDR *pData, uint16_t Address, uint16_t Len) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	807b      	strh	r3, [r7, #2]
 800096c:	4613      	mov	r3, r2
 800096e:	803b      	strh	r3, [r7, #0]
    HW_SPI_Write((uint8_t *)pData, Address, Len);
 8000970:	883a      	ldrh	r2, [r7, #0]
 8000972:	887b      	ldrh	r3, [r7, #2]
 8000974:	4619      	mov	r1, r3
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff fe9a 	bl	80006b0 <HW_SPI_Write>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <EXTI9_5_IRQHandler>:
 * @retval None
 */
#if HW_SAME_IRQHANDLER == 1
void HW_SYNC0_SYNC1_ALEVENT_IRQHandler(void) {
#else
void HW_SYNC0_SYNC1_IRQHandler(void) {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
#endif
#if DC_SUPPORTED
    if (__HAL_GPIO_EXTI_GET_FLAG(HW_SYNC0_PIN)) {
 8000988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800098c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000990:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d007      	beq.n	80009a8 <EXTI9_5_IRQHandler+0x24>
        __HAL_GPIO_EXTI_CLEAR_FLAG(HW_SYNC0_PIN);
 8000998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800099c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        Sync0_Isr();
 80009a4:	f000 fd46 	bl	8001434 <Sync0_Isr>
    }

    if (__HAL_GPIO_EXTI_GET_FLAG(HW_SYNC1_PIN)) {
 80009a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009b0:	f003 0310 	and.w	r3, r3, #16
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d006      	beq.n	80009c6 <EXTI9_5_IRQHandler+0x42>
        __HAL_GPIO_EXTI_CLEAR_FLAG(HW_SYNC1_PIN);
 80009b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009bc:	2210      	movs	r2, #16
 80009be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        Sync1_Isr();
 80009c2:	f000 fdf1 	bl	80015a8 <Sync1_Isr>
    }
#if HW_SAME_IRQHANDLER == 0
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}

080009ca <EXTI4_IRQHandler>:
 * @brief  Interrupt service routine for AL
 * @param  None
 * @retval None
 */
#if HW_SAME_IRQHANDLER == 0
void HW_ALEVENT_IRQHandler(void) {
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
#endif
#if AL_EVENT_ENABLED
    if (__HAL_GPIO_EXTI_GET_FLAG(HW_SPI_ESC_INT_PIN)) {
 80009ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d006      	beq.n	80009ec <EXTI4_IRQHandler+0x22>
        __HAL_GPIO_EXTI_CLEAR_FLAG(HW_SPI_ESC_INT_PIN);
 80009de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009e2:	2208      	movs	r2, #8
 80009e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        PDI_Isr();
 80009e8:	f000 fc5e 	bl	80012a8 <PDI_Isr>
    }
#endif
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <Read0x10F8>:
sdosrv.h))

\brief    This function reads the object 0x10F8
*/
UINT8 Read0x10F8(UINT16 index, UINT8 subindex, UINT32 dataSize, UINT16 MBXMEM * pData, UINT8 bCompleteAccess)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60ba      	str	r2, [r7, #8]
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4603      	mov	r3, r0
 80009fc:	81fb      	strh	r3, [r7, #14]
 80009fe:	460b      	mov	r3, r1
 8000a00:	737b      	strb	r3, [r7, #13]

    if (index != 0x10F8)
 8000a02:	89fb      	ldrh	r3, [r7, #14]
 8000a04:	f241 02f8 	movw	r2, #4344	@ 0x10f8
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d001      	beq.n	8000a10 <Read0x10F8+0x20>
    {
        return ABORTIDX_PARAM_IS_INCOMPATIBLE;
 8000a0c:	230b      	movs	r3, #11
 8000a0e:	e016      	b.n	8000a3e <Read0x10F8+0x4e>
    }

    
    if (bCompleteAccess)
 8000a10:	7e3b      	ldrb	r3, [r7, #24]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <Read0x10F8+0x2a>
    {
         /* Complete Access is not supported for object 0x10F8 */
        return ABORTIDX_UNSUPPORTED_ACCESS;
 8000a16:	2305      	movs	r3, #5
 8000a18:	e011      	b.n	8000a3e <Read0x10F8+0x4e>
    }

    if (subindex > 0)
 8000a1a:	7b7b      	ldrb	r3, [r7, #13]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <Read0x10F8+0x34>
    {
        return ABORTIDX_SUBINDEX_NOT_EXISTING;
 8000a20:	2311      	movs	r3, #17
 8000a22:	e00c      	b.n	8000a3e <Read0x10F8+0x4e>
    }

    if (dataSize > 8)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	2b08      	cmp	r3, #8
 8000a28:	d901      	bls.n	8000a2e <Read0x10F8+0x3e>
    {
        return ABORTIDX_PARAM_LENGTH_TOO_LONG;
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	e007      	b.n	8000a3e <Read0x10F8+0x4e>
    }


    COE_SyncTimeStamp();
 8000a2e:	f000 f80d 	bl	8000a4c <COE_SyncTimeStamp>

    MEMCPY(pData, &u64Timestamp, dataSize);
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	4904      	ldr	r1, [pc, #16]	@ (8000a48 <Read0x10F8+0x58>)
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f00b fe30 	bl	800c69c <memcpy>
    return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	24000838 	.word	0x24000838

08000a4c <COE_SyncTimeStamp>:
/**
\brief    This function updates the local time stamp object (0x10F8) and has to be called at least every 4.2sec to detect an 32Bit DC unit overrun.
          Called from the Timer handler 
*////////////////////////////////////////////////////////////////////////////////////////
void COE_SyncTimeStamp(void)
{
 8000a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a50:	b084      	sub	sp, #16
 8000a52:	af00      	add	r7, sp, #0

    if (b32BitDc)
 8000a54:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <COE_SyncTimeStamp+0x90>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d030      	beq.n	8000abe <COE_SyncTimeStamp+0x72>
    {
        UINT32 DcTime = (UINT32)(u64Timestamp & (UINT64)0x00000000FFFFFFFF);
 8000a5c:	4b20      	ldr	r3, [pc, #128]	@ (8000ae0 <COE_SyncTimeStamp+0x94>)
 8000a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a62:	4613      	mov	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]


        HW_EscReadDWord(DcTime, ESC_SYSTEMTIME_OFFSET);
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff33 	bl	80008dc <HW_EscRead>

        /*update the lower 32Bit*/
        u64Timestamp = ((u64Timestamp & ((UINT64)0xFFFFFFFF00000000)) | (UINT64)DcTime);
 8000a76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <COE_SyncTimeStamp+0x94>)
 8000a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a7c:	2400      	movs	r4, #0
 8000a7e:	461d      	mov	r5, r3
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2200      	movs	r2, #0
 8000a84:	4698      	mov	r8, r3
 8000a86:	4691      	mov	r9, r2
 8000a88:	ea44 0a08 	orr.w	sl, r4, r8
 8000a8c:	ea45 0b09 	orr.w	fp, r5, r9
 8000a90:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <COE_SyncTimeStamp+0x94>)
 8000a92:	e9c3 ab00 	strd	sl, fp, [r3]

        if (DcTime < u32LastDc32Value)
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <COE_SyncTimeStamp+0x98>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d20a      	bcs.n	8000ab6 <COE_SyncTimeStamp+0x6a>
        {
            /*32Bit overrun*/
            u64Timestamp = u64Timestamp + ((UINT64)0x0000000100000000);
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <COE_SyncTimeStamp+0x94>)
 8000aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aa6:	1c59      	adds	r1, r3, #1
 8000aa8:	6079      	str	r1, [r7, #4]
 8000aaa:	603a      	str	r2, [r7, #0]
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <COE_SyncTimeStamp+0x94>)
 8000aae:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000ab2:	e9c3 1200 	strd	r1, r2, [r3]
        }
        
        u32LastDc32Value = DcTime;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <COE_SyncTimeStamp+0x98>)
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	e005      	b.n	8000aca <COE_SyncTimeStamp+0x7e>
    }
    else
    {
        /*The DC unit supports 64Bit => update the complete object*/
        
        HW_EscRead((MEM_ADDR *)&u64Timestamp, ESC_SYSTEMTIME_OFFSET, 8);
 8000abe:	2208      	movs	r2, #8
 8000ac0:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 8000ac4:	4806      	ldr	r0, [pc, #24]	@ (8000ae0 <COE_SyncTimeStamp+0x94>)
 8000ac6:	f7ff ff09 	bl	80008dc <HW_EscRead>
    }

    u32CheckForDcOverrunCnt = 0;
 8000aca:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <COE_SyncTimeStamp+0x9c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]

}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000ada:	bf00      	nop
 8000adc:	2400092c 	.word	0x2400092c
 8000ae0:	24000838 	.word	0x24000838
 8000ae4:	24000840 	.word	0x24000840
 8000ae8:	24000844 	.word	0x24000844

08000aec <COE_GetObjectDictionary>:
/**

 \brief    returns the pointer to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
OBJCONST TOBJECT OBJMEM * COE_GetObjectDictionary(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
    return (OBJCONST TOBJECT OBJMEM *) ObjDicList;
 8000af0:	4b03      	ldr	r3, [pc, #12]	@ (8000b00 <COE_GetObjectDictionary+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	2400084c 	.word	0x2400084c

08000b04 <COE_UpdateSyncErrorStatus>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
\brief     Update the Sync Error Indication
*////////////////////////////////////////////////////////////////////////////////////////
void COE_UpdateSyncErrorStatus(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
    if (sSyncManOutPar.u16CycleExceededCounter > 0 || sSyncManOutPar.u16SmEventMissedCounter > sErrorSettings.u16SyncErrorCounterLimit)
 8000b08:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <COE_UpdateSyncErrorStatus+0x5c>)
 8000b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d105      	bne.n	8000b1c <COE_UpdateSyncErrorStatus+0x18>
 8000b10:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <COE_UpdateSyncErrorStatus+0x5c>)
 8000b12:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8000b14:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <COE_UpdateSyncErrorStatus+0x60>)
 8000b16:	891b      	ldrh	r3, [r3, #8]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d904      	bls.n	8000b26 <COE_UpdateSyncErrorStatus+0x22>
    {
        sSyncManOutPar.u8SyncError = 1;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <COE_UpdateSyncErrorStatus+0x5c>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8000b24:	e003      	b.n	8000b2e <COE_UpdateSyncErrorStatus+0x2a>
    }
    else
    {
        sSyncManOutPar.u8SyncError = 0;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <COE_UpdateSyncErrorStatus+0x5c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }


    if (sSyncManInPar.u16CycleExceededCounter > 0 || sSyncManInPar.u16SmEventMissedCounter > sErrorSettings.u16SyncErrorCounterLimit)
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <COE_UpdateSyncErrorStatus+0x64>)
 8000b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d105      	bne.n	8000b42 <COE_UpdateSyncErrorStatus+0x3e>
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <COE_UpdateSyncErrorStatus+0x64>)
 8000b38:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <COE_UpdateSyncErrorStatus+0x60>)
 8000b3c:	891b      	ldrh	r3, [r3, #8]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d904      	bls.n	8000b4c <COE_UpdateSyncErrorStatus+0x48>
    {
        sSyncManInPar.u8SyncError = 1;
 8000b42:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <COE_UpdateSyncErrorStatus+0x64>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8000b4a:	e004      	b.n	8000b56 <COE_UpdateSyncErrorStatus+0x52>
    }
    else
    {
        sSyncManInPar.u8SyncError = 0;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <COE_UpdateSyncErrorStatus+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }

}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	240009ec 	.word	0x240009ec
 8000b64:	24000394 	.word	0x24000394
 8000b68:	24000a30 	.word	0x24000a30

08000b6c <COE_ObjInit>:
/**
 \brief     This function initialize the several objects
*////////////////////////////////////////////////////////////////////////////////////////

void COE_ObjInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

    /* initialize the Sync Manager Output parameter object 0x1C32 */

    sSyncManOutPar.subindex0         = 32;
 8000b72:	4b47      	ldr	r3, [pc, #284]	@ (8000c90 <COE_ObjInit+0x124>)
 8000b74:	2220      	movs	r2, #32
 8000b76:	801a      	strh	r2, [r3, #0]
      from the master to switch between ECAT FreeRun and ECAT Synchron Mode
        if the slave supports both modes,
        in DC mode (selected by the DC registers) this value will be overwritten
        with SYNCTYPE_DCSYNC0 or SYNCTYPE_DCSYNC1 */
     /*default mode is ECAT Synchron Mode */
    sSyncManOutPar.u16SyncType     = SYNCTYPE_FREERUN;
 8000b78:	4b45      	ldr	r3, [pc, #276]	@ (8000c90 <COE_ObjInit+0x124>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	805a      	strh	r2, [r3, #2]
    /* subindex 2 contains the cycle time of the application,
       in ECAT FreeRun mode it could be used for a timer interrupt to run the application,
        in ECAT Synchron mode it could be written from the master with its local cycle time
        that the slave can check if this cycle time is supported,
        in DC Mode this value will be overwritten with the DC cycle time register */
    sSyncManOutPar.u32CycleTime     = 0;
 8000b7e:	4b44      	ldr	r3, [pc, #272]	@ (8000c90 <COE_ObjInit+0x124>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	605a      	str	r2, [r3, #4]

    /* the subindex 4 contains the supported synchronization types */

    sSyncManOutPar.u16SyncTypesSupported    = SYNCTYPE_FREERUNSUPP            /* ECAT FreeRun Mode is supported */
 8000b84:	4b42      	ldr	r3, [pc, #264]	@ (8000c90 <COE_ObjInit+0x124>)
 8000b86:	f244 021f 	movw	r2, #16415	@ 0x401f
 8000b8a:	819a      	strh	r2, [r3, #12]

    /* subindex 5 contains the minimum cycle time the slave is able to support,
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine).
        For the sample application this value is set to MIN_PD_CYCLE_TIME */
    sSyncManOutPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 8000b8c:	4b40      	ldr	r3, [pc, #256]	@ (8000c90 <COE_ObjInit+0x124>)
 8000b8e:	4a41      	ldr	r2, [pc, #260]	@ (8000c94 <COE_ObjInit+0x128>)
 8000b90:	611a      	str	r2, [r3, #16]
    /* only for DC Mode important: subindex 6 contains the minimum delay time the slave
       needs after receiving the SM2-event before the SYNC0(SYNC1) can be received without delays
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine) */
    sSyncManOutPar.u32CalcAndCopyTime = (PD_OUTPUT_CALC_AND_COPY_TIME);
 8000b92:	4b3f      	ldr	r3, [pc, #252]	@ (8000c90 <COE_ObjInit+0x124>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]

    /*subindex 8: trigger cycle time measurement*/
    sSyncManOutPar.u16GetCycleTime = 0;
 8000b98:	4b3d      	ldr	r3, [pc, #244]	@ (8000c90 <COE_ObjInit+0x124>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	839a      	strh	r2, [r3, #28]

    /*subindex 9: time from start driving outputs until outputs are valid*/
    sSyncManOutPar.u32DelayTime = (PD_OUTPUT_DELAY_TIME);
 8000b9e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c90 <COE_ObjInit+0x124>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]

    /*subindex 11: reset the sm missed error counter*/
    sSyncManOutPar.u16SmEventMissedCounter = 0;
 8000ba4:	4b3a      	ldr	r3, [pc, #232]	@ (8000c90 <COE_ObjInit+0x124>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	851a      	strh	r2, [r3, #40]	@ 0x28

    /*subindex 12: reset the cycle exceed error counter*/
    sSyncManOutPar.u16CycleExceededCounter = 0;
 8000baa:	4b39      	ldr	r3, [pc, #228]	@ (8000c90 <COE_ObjInit+0x124>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /*subindex 32: indicates if a synchronisation error has occurred*/
    sSyncManOutPar.u8SyncError = 0;
 8000bb0:	4b37      	ldr	r3, [pc, #220]	@ (8000c90 <COE_ObjInit+0x124>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* initialize the Sync Manager Input parameter object 0x1C33 */
    sSyncManInPar.subindex0         = 32;
 8000bb8:	4b37      	ldr	r3, [pc, #220]	@ (8000c98 <COE_ObjInit+0x12c>)
 8000bba:	2220      	movs	r2, #32
 8000bbc:	801a      	strh	r2, [r3, #0]
    /* default mode is ECAT Synchron Mode, if output size > 0 the inputs are updated with the SM2-event */
    sSyncManInPar.u16SyncType         = SYNCTYPE_FREERUN;
 8000bbe:	4b36      	ldr	r3, [pc, #216]	@ (8000c98 <COE_ObjInit+0x12c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	805a      	strh	r2, [r3, #2]

    
    /* subindex 2: same as 0x1C32:02 */
    sSyncManInPar.u32CycleTime     = sSyncManOutPar.u32CycleTime;
 8000bc4:	4b32      	ldr	r3, [pc, #200]	@ (8000c90 <COE_ObjInit+0x124>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	4a33      	ldr	r2, [pc, #204]	@ (8000c98 <COE_ObjInit+0x12c>)
 8000bca:	6053      	str	r3, [r2, #4]

    /* subindex 4: same as 0x1C32:04 */
    sSyncManInPar.u16SyncTypesSupported    = sSyncManOutPar.u16SyncTypesSupported;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	@ (8000c90 <COE_ObjInit+0x124>)
 8000bce:	899a      	ldrh	r2, [r3, #12]
 8000bd0:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <COE_ObjInit+0x12c>)
 8000bd2:	819a      	strh	r2, [r3, #12]

    /* subindex 5: same as 0x1C32:05 */
    sSyncManInPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 8000bd4:	4b30      	ldr	r3, [pc, #192]	@ (8000c98 <COE_ObjInit+0x12c>)
 8000bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8000c94 <COE_ObjInit+0x128>)
 8000bd8:	611a      	str	r2, [r3, #16]
    /* subindex 6: delay read inputs, calculation and copy to SM buffer*/
    sSyncManInPar.u32CalcAndCopyTime = (PD_INPUT_CALC_AND_COPY_TIME);
 8000bda:	4b2f      	ldr	r3, [pc, #188]	@ (8000c98 <COE_ObjInit+0x12c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	615a      	str	r2, [r3, #20]
    /*subindex 8: trigger cycle time measurement*/
    sSyncManInPar.u16GetCycleTime = 0;
 8000be0:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <COE_ObjInit+0x12c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	839a      	strh	r2, [r3, #28]
    /*subindex 9: delay to prepare input latch*/
    sSyncManInPar.u32DelayTime = (PD_INPUT_DELAY_TIME);
 8000be6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c98 <COE_ObjInit+0x12c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]

    /*subindex 11: reset the sm missed error counter*/
    sSyncManInPar.u16SmEventMissedCounter = 0;
 8000bec:	4b2a      	ldr	r3, [pc, #168]	@ (8000c98 <COE_ObjInit+0x12c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	851a      	strh	r2, [r3, #40]	@ 0x28

    /*subindex 12: reset the cycle exceed error counter*/
    sSyncManInPar.u16CycleExceededCounter = 0;
 8000bf2:	4b29      	ldr	r3, [pc, #164]	@ (8000c98 <COE_ObjInit+0x12c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /*subindex 32: incremented if a synchronisation error has occurred*/
    sSyncManInPar.u8SyncError = 0;
 8000bf8:	4b27      	ldr	r3, [pc, #156]	@ (8000c98 <COE_ObjInit+0x12c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 8000c00:	4b26      	ldr	r3, [pc, #152]	@ (8000c9c <COE_ObjInit+0x130>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]

    {
    UINT16 result = COE_ObjDictionaryInit();
 8000c06:	f000 f957 	bl	8000eb8 <COE_ObjDictionaryInit>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80fb      	strh	r3, [r7, #6]
    if(result != 0)
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <COE_ObjInit+0xac>
    {
        /*clear already linked objects*/
        COE_ClearObjDictionary();
 8000c14:	f000 f90e 	bl	8000e34 <COE_ClearObjDictionary>
    }
    }

    u8PendingSdo = 0;
 8000c18:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <COE_ObjInit+0x134>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
    bStoreCompleteAccess = FALSE;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <COE_ObjInit+0x138>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
    u16StoreIndex   =   0;
 8000c24:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <COE_ObjInit+0x13c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	801a      	strh	r2, [r3, #0]
    u8StoreSubindex = 0;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <COE_ObjInit+0x140>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
    u32StoreDataSize = 0;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <COE_ObjInit+0x144>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
    pStoreData = NULL;
 8000c36:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb4 <COE_ObjInit+0x148>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
    pSdoPendFunc    = NULL;
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <COE_ObjInit+0x14c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]

    pSdoSegData = NULL;
 8000c42:	4b1e      	ldr	r3, [pc, #120]	@ (8000cbc <COE_ObjInit+0x150>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]


    {
        UINT32 EscFeature = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	603b      	str	r3, [r7, #0]
        HW_EscReadDWord(EscFeature, ESC_FEATURES_OFFSET);
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2204      	movs	r2, #4
 8000c50:	2108      	movs	r1, #8
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fe42 	bl	80008dc <HW_EscRead>
        EscFeature = SWAPDWORD(EscFeature);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	603b      	str	r3, [r7, #0]

        if ((EscFeature & ESC_DC_32BIT_MASK) > 0)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <COE_ObjInit+0x102>
        {
            b32BitDc = FALSE;
 8000c66:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <COE_ObjInit+0x154>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	e008      	b.n	8000c80 <COE_ObjInit+0x114>
        }
        else
        {
            b32BitDc = TRUE;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <COE_ObjInit+0x154>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]

            HW_EscReadDWord(u32LastDc32Value, ESC_SYSTEMTIME_OFFSET);
 8000c74:	2204      	movs	r2, #4
 8000c76:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 8000c7a:	4812      	ldr	r0, [pc, #72]	@ (8000cc4 <COE_ObjInit+0x158>)
 8000c7c:	f7ff fe2e 	bl	80008dc <HW_EscRead>
        }

        u32CheckForDcOverrunCnt = CHECK_DC_OVERRUN_IN_MS;
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <COE_ObjInit+0x15c>)
 8000c82:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000c86:	601a      	str	r2, [r3, #0]
    }
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	240009ec 	.word	0x240009ec
 8000c94:	0007a120 	.word	0x0007a120
 8000c98:	24000a30 	.word	0x24000a30
 8000c9c:	240009e5 	.word	0x240009e5
 8000ca0:	24000a74 	.word	0x24000a74
 8000ca4:	24000a75 	.word	0x24000a75
 8000ca8:	24000a78 	.word	0x24000a78
 8000cac:	24000a76 	.word	0x24000a76
 8000cb0:	24000a7c 	.word	0x24000a7c
 8000cb4:	24000a80 	.word	0x24000a80
 8000cb8:	24000a84 	.word	0x24000a84
 8000cbc:	24000a98 	.word	0x24000a98
 8000cc0:	2400092c 	.word	0x2400092c
 8000cc4:	24000840 	.word	0x24000840
 8000cc8:	24000844 	.word	0x24000844

08000ccc <COE_AddObjectToDic>:
            ALSTATUSCODE_XX add object failed

 \brief    This function adds an object to the object dictionary
 *////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_AddObjectToDic(TOBJECT OBJMEM * pNewObjEntry)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    if(pNewObjEntry != NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d062      	beq.n	8000da0 <COE_AddObjectToDic+0xd4>
    {
        if(ObjDicList == NULL)
 8000cda:	4b35      	ldr	r3, [pc, #212]	@ (8000db0 <COE_AddObjectToDic+0xe4>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10c      	bne.n	8000cfc <COE_AddObjectToDic+0x30>
        {
            /* Object dictionary is empty */
            ObjDicList = pNewObjEntry;
 8000ce2:	4a33      	ldr	r2, [pc, #204]	@ (8000db0 <COE_AddObjectToDic+0xe4>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6013      	str	r3, [r2, #0]
            ObjDicList->pNext = NULL;
 8000ce8:	4b31      	ldr	r3, [pc, #196]	@ (8000db0 <COE_AddObjectToDic+0xe4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = NULL;
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8000db0 <COE_AddObjectToDic+0xe4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
            return 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	e052      	b.n	8000da2 <COE_AddObjectToDic+0xd6>
        }
        else if(ObjDicList->Index > pNewObjEntry->Index)
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000db0 <COE_AddObjectToDic+0xe4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	891a      	ldrh	r2, [r3, #8]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	891b      	ldrh	r3, [r3, #8]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d90f      	bls.n	8000d2a <COE_AddObjectToDic+0x5e>
        {
            /*insert new object dictionary head*/
            pNewObjEntry->pPrev = NULL;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
            pNewObjEntry->pNext = ObjDicList;
 8000d10:	4b27      	ldr	r3, [pc, #156]	@ (8000db0 <COE_AddObjectToDic+0xe4>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = pNewObjEntry;
 8000d18:	4b25      	ldr	r3, [pc, #148]	@ (8000db0 <COE_AddObjectToDic+0xe4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	601a      	str	r2, [r3, #0]
            ObjDicList = pNewObjEntry;
 8000d20:	4a23      	ldr	r2, [pc, #140]	@ (8000db0 <COE_AddObjectToDic+0xe4>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6013      	str	r3, [r2, #0]
            return 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e03b      	b.n	8000da2 <COE_AddObjectToDic+0xd6>
        }
        else
        {
            TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 8000d2a:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <COE_AddObjectToDic+0xe4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	60fb      	str	r3, [r7, #12]
            while(pDicEntry != NULL)
 8000d30:	e033      	b.n	8000d9a <COE_AddObjectToDic+0xce>
            {
                if(pDicEntry->Index == pNewObjEntry->Index)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	891a      	ldrh	r2, [r3, #8]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	891b      	ldrh	r3, [r3, #8]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d101      	bne.n	8000d42 <COE_AddObjectToDic+0x76>
                {
                    /*object already exists in object dictionary*/
                    return ALSTATUSCODE_UNSPECIFIEDERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e02f      	b.n	8000da2 <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->Index > pNewObjEntry->Index)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	891a      	ldrh	r2, [r3, #8]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	891b      	ldrh	r3, [r3, #8]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d913      	bls.n	8000d76 <COE_AddObjectToDic+0xaa>
                {
                    pNewObjEntry->pPrev = pDicEntry->pPrev;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = pDicEntry;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	605a      	str	r2, [r3, #4]

                    if(pDicEntry->pPrev != NULL)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d003      	beq.n	8000d6c <COE_AddObjectToDic+0xa0>
                        pDicEntry->pPrev->pNext = pNewObjEntry;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	605a      	str	r2, [r3, #4]

                    pDicEntry->pPrev = pNewObjEntry;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	601a      	str	r2, [r3, #0]

                    return 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e015      	b.n	8000da2 <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->pNext == NULL)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10a      	bne.n	8000d94 <COE_AddObjectToDic+0xc8>
                {
                    /*Last entry reached => add object to list tail*/
                    pDicEntry->pNext = pNewObjEntry;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	605a      	str	r2, [r3, #4]
                    pNewObjEntry->pPrev = pDicEntry;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = NULL;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	605a      	str	r2, [r3, #4]
                    return 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	e006      	b.n	8000da2 <COE_AddObjectToDic+0xd6>
                }
                else
                {
                    /*The new object index is smaller than the current index. Get next object handle.*/
                    pDicEntry = pDicEntry->pNext;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	60fb      	str	r3, [r7, #12]
            while(pDicEntry != NULL)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1c8      	bne.n	8000d32 <COE_AddObjectToDic+0x66>
                }
            }
        }
    }
    return ALSTATUSCODE_UNSPECIFIEDERROR;
 8000da0:	2301      	movs	r3, #1
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2400084c 	.word	0x2400084c

08000db4 <COE_RemoveDicEntry>:
/**

 \brief    This function removes an object to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_RemoveDicEntry(UINT16 index)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]
    TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <COE_RemoveDicEntry+0x7c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	617b      	str	r3, [r7, #20]

    while(pDicEntry != NULL)
 8000dc4:	e02a      	b.n	8000e1c <COE_RemoveDicEntry+0x68>
    {
        if(pDicEntry->Index == index)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	891b      	ldrh	r3, [r3, #8]
 8000dca:	88fa      	ldrh	r2, [r7, #6]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d122      	bne.n	8000e16 <COE_RemoveDicEntry+0x62>
        {
            TOBJECT OBJMEM *pPrevEntry = pDicEntry->pPrev;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	613b      	str	r3, [r7, #16]
            TOBJECT OBJMEM *pNextEntry = pDicEntry->pNext;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	60fb      	str	r3, [r7, #12]

            if(pPrevEntry != NULL)
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d002      	beq.n	8000de8 <COE_RemoveDicEntry+0x34>
            {
                pPrevEntry->pNext = pNextEntry;
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	605a      	str	r2, [r3, #4]
            }

            if(pNextEntry != NULL)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d002      	beq.n	8000df4 <COE_RemoveDicEntry+0x40>
            {
                pNextEntry->pPrev = pPrevEntry;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	601a      	str	r2, [r3, #0]
            }

            pDicEntry->pPrev = NULL;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
            pDicEntry->pNext = NULL;
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
            /*Update Object dictionary pointer if list head was removed*/
            if(pDicEntry->Index == ObjDicList->Index)
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	891a      	ldrh	r2, [r3, #8]
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <COE_RemoveDicEntry+0x7c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	891b      	ldrh	r3, [r3, #8]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d10a      	bne.n	8000e24 <COE_RemoveDicEntry+0x70>
            {
                ObjDicList = pNextEntry;
 8000e0e:	4a08      	ldr	r2, [pc, #32]	@ (8000e30 <COE_RemoveDicEntry+0x7c>)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6013      	str	r3, [r2, #0]
            }
            return;
 8000e14:	e006      	b.n	8000e24 <COE_RemoveDicEntry+0x70>
        }

        pDicEntry = pDicEntry->pNext;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	617b      	str	r3, [r7, #20]
    while(pDicEntry != NULL)
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1d1      	bne.n	8000dc6 <COE_RemoveDicEntry+0x12>
 8000e22:	e000      	b.n	8000e26 <COE_RemoveDicEntry+0x72>
            return;
 8000e24:	bf00      	nop
    }
}
 8000e26:	371c      	adds	r7, #28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	2400084c 	.word	0x2400084c

08000e34 <COE_ClearObjDictionary>:
/**

 \brief    This function clear the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_ClearObjDictionary(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
    TOBJECT OBJMEM * pObjEntry = (TOBJECT OBJMEM *) ObjDicList;
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e70 <COE_ClearObjDictionary+0x3c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	607b      	str	r3, [r7, #4]
    UINT16 Index = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	807b      	strh	r3, [r7, #2]

    while(pObjEntry != NULL)
 8000e44:	e009      	b.n	8000e5a <COE_ClearObjDictionary+0x26>
    {
        Index = pObjEntry->Index;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	891b      	ldrh	r3, [r3, #8]
 8000e4a:	807b      	strh	r3, [r7, #2]
        pObjEntry = pObjEntry->pNext;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	607b      	str	r3, [r7, #4]

        COE_RemoveDicEntry(Index);
 8000e52:	887b      	ldrh	r3, [r7, #2]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ffad 	bl	8000db4 <COE_RemoveDicEntry>
    while(pObjEntry != NULL)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1f2      	bne.n	8000e46 <COE_ClearObjDictionary+0x12>
    }
    ObjDicList = NULL;
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <COE_ClearObjDictionary+0x3c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2400084c 	.word	0x2400084c

08000e74 <AddObjectsToObjDictionary>:


UINT16 AddObjectsToObjDictionary(TOBJECT OBJMEM * pObjEntry)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
    UINT16 result = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	81fb      	strh	r3, [r7, #14]
    TOBJECT OBJMEM * pEntry = (TOBJECT OBJMEM *)pObjEntry;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	60bb      	str	r3, [r7, #8]

    while(pEntry->Index != 0xFFFF)
 8000e84:	e00c      	b.n	8000ea0 <AddObjectsToObjDictionary+0x2c>
    {
        result = COE_AddObjectToDic(pEntry);
 8000e86:	68b8      	ldr	r0, [r7, #8]
 8000e88:	f7ff ff20 	bl	8000ccc <COE_AddObjectToDic>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	81fb      	strh	r3, [r7, #14]

        if(result != 0)
 8000e90:	89fb      	ldrh	r3, [r7, #14]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <AddObjectsToObjDictionary+0x26>
        {
            return result;
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	e009      	b.n	8000eae <AddObjectsToObjDictionary+0x3a>
        }

        pEntry++;
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	3328      	adds	r3, #40	@ 0x28
 8000e9e:	60bb      	str	r3, [r7, #8]
    while(pEntry->Index != 0xFFFF)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	891b      	ldrh	r3, [r3, #8]
 8000ea4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d1ec      	bne.n	8000e86 <AddObjectsToObjDictionary+0x12>
    }

    return result;
 8000eac:	89fb      	ldrh	r3, [r7, #14]

}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <COE_ObjDictionaryInit>:
            ALSTATUSCODE_XX create object dictionary failed

 \brief    This function initialize the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_ObjDictionaryInit(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	80fb      	strh	r3, [r7, #6]

    /*Reset object dictionary pointer*/
    ObjDicList = NULL;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <COE_ObjDictionaryInit+0x38>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]

    result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) GenObjDic);
 8000ec8:	480a      	ldr	r0, [pc, #40]	@ (8000ef4 <COE_ObjDictionaryInit+0x3c>)
 8000eca:	f7ff ffd3 	bl	8000e74 <AddObjectsToObjDictionary>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]

    if(result != 0)
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <COE_ObjDictionaryInit+0x24>
    {
        return result;
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	e005      	b.n	8000ee8 <COE_ObjDictionaryInit+0x30>
    }
    
    if(ApplicationObjDic != NULL)
    {
        result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) ApplicationObjDic);
 8000edc:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <COE_ObjDictionaryInit+0x40>)
 8000ede:	f7ff ffc9 	bl	8000e74 <AddObjectsToObjDictionary>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
    }



    return result;
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2400084c 	.word	0x2400084c
 8000ef4:	240001b4 	.word	0x240001b4
 8000ef8:	24000030 	.word	0x24000030

08000efc <COE_Main>:
 \brief    is called for background calculations which should not influence the
             ECAT_Application in synchronous modes
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Main(void)
{
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af02      	add	r7, sp, #8
     UINT8 abort = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	71fb      	strb	r3, [r7, #7]
     
    if(pSdoPendFunc != NULL)
 8000f06:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb4 <COE_Main+0xb8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d04e      	beq.n	8000fac <COE_Main+0xb0>
    {
        abort = pSdoPendFunc(u16StoreIndex,u8StoreSubindex,u32StoreDataSize,pStoreData,bStoreCompleteAccess);
 8000f0e:	4b29      	ldr	r3, [pc, #164]	@ (8000fb4 <COE_Main+0xb8>)
 8000f10:	681c      	ldr	r4, [r3, #0]
 8000f12:	4b29      	ldr	r3, [pc, #164]	@ (8000fb8 <COE_Main+0xbc>)
 8000f14:	8818      	ldrh	r0, [r3, #0]
 8000f16:	4b29      	ldr	r3, [pc, #164]	@ (8000fbc <COE_Main+0xc0>)
 8000f18:	7819      	ldrb	r1, [r3, #0]
 8000f1a:	4b29      	ldr	r3, [pc, #164]	@ (8000fc0 <COE_Main+0xc4>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b29      	ldr	r3, [pc, #164]	@ (8000fc4 <COE_Main+0xc8>)
 8000f20:	681d      	ldr	r5, [r3, #0]
 8000f22:	4b29      	ldr	r3, [pc, #164]	@ (8000fc8 <COE_Main+0xcc>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	462b      	mov	r3, r5
 8000f2a:	47a0      	blx	r4
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	71fb      	strb	r3, [r7, #7]

        if(abort != ABORTIDX_WORKING)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2bff      	cmp	r3, #255	@ 0xff
 8000f34:	d03a      	beq.n	8000fac <COE_Main+0xb0>
        {
            switch(u8PendingSdo)
 8000f36:	4b25      	ldr	r3, [pc, #148]	@ (8000fcc <COE_Main+0xd0>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	dc21      	bgt.n	8000f82 <COE_Main+0x86>
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	da16      	bge.n	8000f70 <COE_Main+0x74>
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d00d      	beq.n	8000f62 <COE_Main+0x66>
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d11b      	bne.n	8000f82 <COE_Main+0x86>
            {
                case SDO_PENDING_SEG_WRITE:
                    if(pSdoSegData)
 8000f4a:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <COE_Main+0xd4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d007      	beq.n	8000f62 <COE_Main+0x66>
                    {
                        /* the allocated buffer can be released */
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <COE_Main+0xd4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f00b faa6 	bl	800c4a8 <free>
                        pSdoSegData = NULL;
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <COE_Main+0xd4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
                    }
                case SDO_PENDING_WRITE:
                     /*send SDO Download Response*/
                    SDOS_SdoRes(abort, 0, NULL);
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2200      	movs	r2, #0
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f005 fd3b 	bl	80069e4 <SDOS_SdoRes>
                break;
 8000f6e:	e008      	b.n	8000f82 <COE_Main+0x86>

                case SDO_PENDING_SEG_READ:
                case SDO_PENDING_READ:
                    /* send SDO upload response */
                      SDOS_SdoRes(abort, u32StoreDataSize, pStoreData);
 8000f70:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <COE_Main+0xc4>)
 8000f72:	6819      	ldr	r1, [r3, #0]
 8000f74:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <COE_Main+0xc8>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f005 fd32 	bl	80069e4 <SDOS_SdoRes>
                    break;
 8000f80:	bf00      	nop

            }

            u8PendingSdo = 0;
 8000f82:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <COE_Main+0xd0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
            u16StoreIndex = 0;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <COE_Main+0xbc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	801a      	strh	r2, [r3, #0]
            u8StoreSubindex = 0;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <COE_Main+0xc0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
            u32StoreDataSize = 0;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <COE_Main+0xc4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
            pStoreData = NULL;
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <COE_Main+0xc8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
            bStoreCompleteAccess = 0;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <COE_Main+0xcc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
            pSdoPendFunc = NULL;
 8000fa6:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <COE_Main+0xb8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
        }
    }
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb4:	24000a84 	.word	0x24000a84
 8000fb8:	24000a78 	.word	0x24000a78
 8000fbc:	24000a76 	.word	0x24000a76
 8000fc0:	24000a7c 	.word	0x24000a7c
 8000fc4:	24000a80 	.word	0x24000a80
 8000fc8:	24000a75 	.word	0x24000a75
 8000fcc:	24000a74 	.word	0x24000a74
 8000fd0:	24000a98 	.word	0x24000a98

08000fd4 <PDO_InputMapping>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
\brief      This function will copies the inputs from the local memory to the ESC memory
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_InputMapping(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0

#if ((MIN_PD_CYCLE_TIME == 0) || (PD_INPUT_CALC_AND_COPY_TIME == 0))
    UINT32 u32TimeValue = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
    UINT16 ALEvent = HW_GetALEventRegister_Isr();
 8000fde:	f7ff fc73 	bl	80008c8 <HW_GetALEventRegister_Isr>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	807b      	strh	r3, [r7, #2]
    ALEvent = SWAPWORD(ALEvent);

    if (MEASUREMENT_ACTIVE)
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <PDO_InputMapping+0x80>)
 8000fe8:	8b9b      	ldrh	r3, [r3, #28]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d105      	bne.n	8000ffe <PDO_InputMapping+0x2a>
 8000ff2:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <PDO_InputMapping+0x84>)
 8000ff4:	8b9b      	ldrh	r3, [r3, #28]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <PDO_InputMapping+0x32>
    {
        u32TimeValue = GetSystemTimeDelay(0);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 f91a 	bl	8001238 <GetSystemTimeDelay>
 8001004:	6078      	str	r0, [r7, #4]




  
    APPL_InputMapping((UINT16*)aPdInputData);
 8001006:	4815      	ldr	r0, [pc, #84]	@ (800105c <PDO_InputMapping+0x88>)
 8001008:	f7ff fa62 	bl	80004d0 <APPL_InputMapping>
    HW_EscWriteIsr(((MEM_ADDR *) aPdInputData), nEscAddrInputData, nPdInputSize );
 800100c:	4b14      	ldr	r3, [pc, #80]	@ (8001060 <PDO_InputMapping+0x8c>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	4a14      	ldr	r2, [pc, #80]	@ (8001064 <PDO_InputMapping+0x90>)
 8001012:	8812      	ldrh	r2, [r2, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	4811      	ldr	r0, [pc, #68]	@ (800105c <PDO_InputMapping+0x88>)
 8001018:	f7ff fca2 	bl	8000960 <HW_EscWriteIsr>

    

#if ((MIN_PD_CYCLE_TIME == 0) || (PD_INPUT_CALC_AND_COPY_TIME == 0))

    if (MEASUREMENT_ACTIVE)
 800101c:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <PDO_InputMapping+0x80>)
 800101e:	8b9b      	ldrh	r3, [r3, #28]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b00      	cmp	r3, #0
 8001026:	d105      	bne.n	8001034 <PDO_InputMapping+0x60>
 8001028:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <PDO_InputMapping+0x84>)
 800102a:	8b9b      	ldrh	r3, [r3, #28]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00b      	beq.n	800104c <PDO_InputMapping+0x78>
    {
        u32TimeValue = GetSystemTimeDelay(u32TimeValue);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 f8ff 	bl	8001238 <GetSystemTimeDelay>
 800103a:	6078      	str	r0, [r7, #4]

#if (PD_INPUT_CALC_AND_COPY_TIME == 0)
        if (sSyncManInPar.u32CalcAndCopyTime < u32TimeValue)
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <PDO_InputMapping+0x84>)
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	429a      	cmp	r2, r3
 8001044:	d902      	bls.n	800104c <PDO_InputMapping+0x78>
        {
            sSyncManInPar.u32CalcAndCopyTime = u32TimeValue;
 8001046:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <PDO_InputMapping+0x84>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6153      	str	r3, [r2, #20]
#endif /* (MIN_PD_CYCLE_TIME == 0) */
    }

#endif /* ((MIN_PD_CYCLE_TIME == 0) || (PD_INPUT_CALC_AND_COPY_TIME == 0)) */

}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	240009ec 	.word	0x240009ec
 8001058:	24000a30 	.word	0x24000a30
 800105c:	240008b8 	.word	0x240008b8
 8001060:	24000948 	.word	0x24000948
 8001064:	2400093a 	.word	0x2400093a

08001068 <PDO_OutputMapping>:
/**
\brief    This function will copies the outputs from the ESC memory to the local memory.
        This function is only called in case of an SM2 (output process data) event.
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_OutputMapping(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
   UINT32 u32TimeValue = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
   if (MEASUREMENT_ACTIVE)
 8001072:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <PDO_OutputMapping+0x90>)
 8001074:	8b9b      	ldrh	r3, [r3, #28]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d105      	bne.n	800108a <PDO_OutputMapping+0x22>
 800107e:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <PDO_OutputMapping+0x94>)
 8001080:	8b9b      	ldrh	r3, [r3, #28]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00e      	beq.n	80010a8 <PDO_OutputMapping+0x40>
   {
#if ((MIN_PD_CYCLE_TIME == 0) || (PD_OUTPUT_CALC_AND_COPY_TIME == 0))
      u32TimeValue = GetSystemTimeDelay(0);
 800108a:	2000      	movs	r0, #0
 800108c:	f000 f8d4 	bl	8001238 <GetSystemTimeDelay>
 8001090:	6078      	str	r0, [r7, #4]
      u32MinCycleTimeStartValue = u32TimeValue;
 8001092:	4a1b      	ldr	r2, [pc, #108]	@ (8001100 <PDO_OutputMapping+0x98>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6013      	str	r3, [r2, #0]

      bMinCycleTimeMeasurementStarted = TRUE;
 8001098:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <PDO_OutputMapping+0x9c>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
      u32MinCycleTimeValue = 0;
 800109e:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <PDO_OutputMapping+0xa0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]

#endif /* ((MIN_PD_CYCLE_TIME == 0) || (PD_OUTPUT_CALC_AND_COPY_TIME == 0)) */

      HandleCycleTimeMeasurement();
 80010a4:	f000 f88a 	bl	80011bc <HandleCycleTimeMeasurement>

   }

    HW_EscReadIsr(((MEM_ADDR *)aPdOutputData), nEscAddrOutputData, nPdOutputSize );
 80010a8:	4b18      	ldr	r3, [pc, #96]	@ (800110c <PDO_OutputMapping+0xa4>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	4a18      	ldr	r2, [pc, #96]	@ (8001110 <PDO_OutputMapping+0xa8>)
 80010ae:	8812      	ldrh	r2, [r2, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4818      	ldr	r0, [pc, #96]	@ (8001114 <PDO_OutputMapping+0xac>)
 80010b4:	f7ff fc24 	bl	8000900 <HW_EscReadIsr>
    APPL_OutputMapping((UINT16*) aPdOutputData);
 80010b8:	4816      	ldr	r0, [pc, #88]	@ (8001114 <PDO_OutputMapping+0xac>)
 80010ba:	f7ff fa1b 	bl	80004f4 <APPL_OutputMapping>


#if ((MIN_PD_CYCLE_TIME == 0) || (PD_OUTPUT_CALC_AND_COPY_TIME == 0))
    if (MEASUREMENT_ACTIVE)
 80010be:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <PDO_OutputMapping+0x90>)
 80010c0:	8b9b      	ldrh	r3, [r3, #28]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d105      	bne.n	80010d6 <PDO_OutputMapping+0x6e>
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <PDO_OutputMapping+0x94>)
 80010cc:	8b9b      	ldrh	r3, [r3, #28]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00b      	beq.n	80010ee <PDO_OutputMapping+0x86>
    {
       u32TimeValue = GetSystemTimeDelay(u32TimeValue);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 f8ae 	bl	8001238 <GetSystemTimeDelay>
 80010dc:	6078      	str	r0, [r7, #4]

#if (PD_OUTPUT_CALC_AND_COPY_TIME == 0)
       if (sSyncManOutPar.u32CalcAndCopyTime < u32TimeValue)
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <PDO_OutputMapping+0x90>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d902      	bls.n	80010ee <PDO_OutputMapping+0x86>
       {
          sSyncManOutPar.u32CalcAndCopyTime = u32TimeValue;
 80010e8:	4a03      	ldr	r2, [pc, #12]	@ (80010f8 <PDO_OutputMapping+0x90>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6153      	str	r3, [r2, #20]
       /* add the first part of the min cycle time */
       u32MinCycleTimeValue = u32TimeValue;
#endif
    }
#endif /* #if ((MIN_PD_CYCLE_TIME == 0) || (PD_OUTPUT_CALC_AND_COPY_TIME == 0)) */
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	240009ec 	.word	0x240009ec
 80010fc:	24000a30 	.word	0x24000a30
 8001100:	24000864 	.word	0x24000864
 8001104:	2400086c 	.word	0x2400086c
 8001108:	24000870 	.word	0x24000870
 800110c:	24000946 	.word	0x24000946
 8001110:	2400093c 	.word	0x2400093c
 8001114:	24000874 	.word	0x24000874

08001118 <ECAT_CheckTimer>:
 \brief interrupts. In this case a local timer register is checked every ECAT_Main cycle
 \brief and the function is triggered if 1 ms is elapsed
 *////////////////////////////////////////////////////////////////////////////////////////

void ECAT_CheckTimer(void)
{
 8001118:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800111c:	af00      	add	r7, sp, #0

    /*decrement the state transition timeout counter*/
    if(bEcatWaitForAlControlRes &&  (EsmTimeoutCounter > 0))
 800111e:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <ECAT_CheckTimer+0x88>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00d      	beq.n	8001142 <ECAT_CheckTimer+0x2a>
 8001126:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <ECAT_CheckTimer+0x8c>)
 8001128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112c:	2b00      	cmp	r3, #0
 800112e:	dd08      	ble.n	8001142 <ECAT_CheckTimer+0x2a>
    {
        EsmTimeoutCounter--;
 8001130:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <ECAT_CheckTimer+0x8c>)
 8001132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001136:	b29b      	uxth	r3, r3
 8001138:	3b01      	subs	r3, #1
 800113a:	b29b      	uxth	r3, r3
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <ECAT_CheckTimer+0x8c>)
 8001140:	801a      	strh	r2, [r3, #0]
    }


    ECAT_SetLedIndication();
 8001142:	f000 fa59 	bl	80015f8 <ECAT_SetLedIndication>

    DC_CheckWatchdog();
 8001146:	f002 fa85 	bl	8003654 <DC_CheckWatchdog>



/*ECATCHANGE_START(V5.13) */
    /* Increment the counter every ms between two updates based on the system time (32Bit overrun is handled in COE_SyncTimeStamp) */
    if (!b32BitDc || ((u64Timestamp & 0xFFFFFFFF) <= 4293000000UL))
 800114a:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <ECAT_CheckTimer+0x90>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d009      	beq.n	8001166 <ECAT_CheckTimer+0x4e>
 8001152:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <ECAT_CheckTimer+0x94>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	4614      	mov	r4, r2
 800115a:	2500      	movs	r5, #0
 800115c:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <ECAT_CheckTimer+0x98>)
 800115e:	429c      	cmp	r4, r3
 8001160:	f175 0300 	sbcs.w	r3, r5, #0
 8001164:	d20b      	bcs.n	800117e <ECAT_CheckTimer+0x66>
/*ECATCHANGE_END(V5.13) */
    {

        /* the timestamp is stored in ns */
        u64Timestamp = u64Timestamp + 1000000;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <ECAT_CheckTimer+0x94>)
 8001168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116c:	4911      	ldr	r1, [pc, #68]	@ (80011b4 <ECAT_CheckTimer+0x9c>)
 800116e:	eb12 0801 	adds.w	r8, r2, r1
 8001172:	f143 0900 	adc.w	r9, r3, #0
 8001176:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <ECAT_CheckTimer+0x94>)
 8001178:	e9c3 8900 	strd	r8, r9, [r3]
 800117c:	e007      	b.n	800118e <ECAT_CheckTimer+0x76>

    }
    else if(b32BitDc)
 800117e:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <ECAT_CheckTimer+0x90>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <ECAT_CheckTimer+0x76>
    {
        /* in case of a 32Bit DC and almost expired time stamp check for a DC overrun*/
        u32CheckForDcOverrunCnt = CHECK_DC_OVERRUN_IN_MS;
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <ECAT_CheckTimer+0xa0>)
 8001188:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800118c:	601a      	str	r2, [r3, #0]
    }

    u32CheckForDcOverrunCnt++;
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <ECAT_CheckTimer+0xa0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	4a08      	ldr	r2, [pc, #32]	@ (80011b8 <ECAT_CheckTimer+0xa0>)
 8001196:	6013      	str	r3, [r2, #0]


}
 8001198:	bf00      	nop
 800119a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800119e:	bf00      	nop
 80011a0:	24000934 	.word	0x24000934
 80011a4:	24000912 	.word	0x24000912
 80011a8:	2400092c 	.word	0x2400092c
 80011ac:	24000838 	.word	0x24000838
 80011b0:	ffe1fb41 	.word	0xffe1fb41
 80011b4:	000f4240 	.word	0x000f4240
 80011b8:	24000844 	.word	0x24000844

080011bc <HandleCycleTimeMeasurement>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
\brief    In case of non DC synchronization the cycle time measurement is started and 0x1C3.2 (Cycle time) is updated
*////////////////////////////////////////////////////////////////////////////////////////
void HandleCycleTimeMeasurement(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
    if (!bDcSyncActive) //no DC sync configured (cycle time measurement 0x1C3x.2 is only available in no DC sync modes)
 80011c0:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <HandleCycleTimeMeasurement+0x6c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d12d      	bne.n	8001224 <HandleCycleTimeMeasurement+0x68>
    {
        if (u32CycleTimeStartValue > 0)
 80011c8:	4b18      	ldr	r3, [pc, #96]	@ (800122c <HandleCycleTimeMeasurement+0x70>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d023      	beq.n	8001218 <HandleCycleTimeMeasurement+0x5c>
        {
            /* bus cycle completed*/
            u32CycleTimeStartValue = GetSystemTimeDelay(u32CycleTimeStartValue);
 80011d0:	4b16      	ldr	r3, [pc, #88]	@ (800122c <HandleCycleTimeMeasurement+0x70>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 f82f 	bl	8001238 <GetSystemTimeDelay>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a13      	ldr	r2, [pc, #76]	@ (800122c <HandleCycleTimeMeasurement+0x70>)
 80011de:	6013      	str	r3, [r2, #0]

            if ((sSyncManOutPar.u32CycleTime == 0) || (sSyncManOutPar.u32CycleTime > u32CycleTimeStartValue))
 80011e0:	4b13      	ldr	r3, [pc, #76]	@ (8001230 <HandleCycleTimeMeasurement+0x74>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d005      	beq.n	80011f4 <HandleCycleTimeMeasurement+0x38>
 80011e8:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <HandleCycleTimeMeasurement+0x74>)
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <HandleCycleTimeMeasurement+0x70>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d903      	bls.n	80011fc <HandleCycleTimeMeasurement+0x40>
            {
                    sSyncManOutPar.u32CycleTime = u32CycleTimeStartValue;
 80011f4:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <HandleCycleTimeMeasurement+0x70>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <HandleCycleTimeMeasurement+0x74>)
 80011fa:	6053      	str	r3, [r2, #4]
            }

            if ((sSyncManInPar.u32CycleTime == 0) || (sSyncManInPar.u32CycleTime > u32CycleTimeStartValue))
 80011fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <HandleCycleTimeMeasurement+0x78>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <HandleCycleTimeMeasurement+0x54>
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <HandleCycleTimeMeasurement+0x78>)
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4b08      	ldr	r3, [pc, #32]	@ (800122c <HandleCycleTimeMeasurement+0x70>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d903      	bls.n	8001218 <HandleCycleTimeMeasurement+0x5c>
            {
                    sSyncManInPar.u32CycleTime = u32CycleTimeStartValue;
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HandleCycleTimeMeasurement+0x70>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	@ (8001234 <HandleCycleTimeMeasurement+0x78>)
 8001216:	6053      	str	r3, [r2, #4]
            }
        }
        /* get next start value */
        u32CycleTimeStartValue = GetSystemTimeDelay(0);
 8001218:	2000      	movs	r0, #0
 800121a:	f000 f80d 	bl	8001238 <GetSystemTimeDelay>
 800121e:	4603      	mov	r3, r0
 8001220:	4a02      	ldr	r2, [pc, #8]	@ (800122c <HandleCycleTimeMeasurement+0x70>)
 8001222:	6013      	str	r3, [r2, #0]
        
    }/* No DC sync configured */
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	24000910 	.word	0x24000910
 800122c:	24000860 	.word	0x24000860
 8001230:	240009ec 	.word	0x240009ec
 8001234:	24000a30 	.word	0x24000a30

08001238 <GetSystemTimeDelay>:
\brief    Calculates the difference between the old and current system time value in ns.
          NOTE: This function only handles a 32Bit system time values (therefore the maximum delay about 4sec).
*////////////////////////////////////////////////////////////////////////////////////////

UINT32 GetSystemTimeDelay(UINT32 u32StartTime)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
   UINT32 u32CurValue = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
   UINT32 u32Delta = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]

   
   HW_EscReadDWordIsr(u32CurValue, ESC_SYSTEMTIME_OFFSET);
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	2204      	movs	r2, #4
 800124e:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fb54 	bl	8000900 <HW_EscReadIsr>

   if (u32CurValue > 0)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00d      	beq.n	800127a <GetSystemTimeDelay+0x42>
   {
      if (u32StartTime <= u32CurValue)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	429a      	cmp	r2, r3
 8001264:	d804      	bhi.n	8001270 <GetSystemTimeDelay+0x38>
      {
         u32Delta = u32CurValue - u32StartTime;
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	e004      	b.n	800127a <GetSystemTimeDelay+0x42>
      }
      else
      {
         //The 32Bit timer is wrapped around
         u32Delta = u32CurValue + (0xFFFFFFFF - u32StartTime);
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	3b01      	subs	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
      }
   }// current value successfully read out

   if (u32StartTime > 0)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00c      	beq.n	800129a <GetSystemTimeDelay+0x62>
   {

       /*the difference between two timestamps are calculated => subtract measurement failure*/
       if (u32SystemTimeReadFailure < u32Delta)
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <GetSystemTimeDelay+0x6c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	429a      	cmp	r2, r3
 8001288:	d905      	bls.n	8001296 <GetSystemTimeDelay+0x5e>
       {
           u32Delta = u32Delta - u32SystemTimeReadFailure;
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <GetSystemTimeDelay+0x6c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e001      	b.n	800129a <GetSystemTimeDelay+0x62>
       }
       else
       {
           /*set the delta to 0 if the measurement failure is greater than the calculated difference*/
           u32Delta = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
       }
   }
   return u32Delta;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	24000868 	.word	0x24000868

080012a8 <PDI_Isr>:

/*ECATCHANGE_START(V5.13) ECAT1*/
/*ECATCHANGE_END(V5.13) ECAT1*/
void PDI_Isr(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
    /*ECATCHANGE_START(V5.13) ECAT1*/
    BOOL SyncAcknowledgePending = FALSE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	71fb      	strb	r3, [r7, #7]

    /* get the AL event register */
    UINT16  ALEvent = HW_GetALEventRegister_Isr();
 80012b2:	f7ff fb09 	bl	80008c8 <HW_GetALEventRegister_Isr>
 80012b6:	4603      	mov	r3, r0
 80012b8:	80bb      	strh	r3, [r7, #4]
    ALEvent = SWAPWORD(ALEvent);


    /* Check if Sync1 Isr has to be called */

    if (ALEvent & SYNC1_EVENT)
 80012ba:	88bb      	ldrh	r3, [r7, #4]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <PDI_Isr+0x24>
    {
        Sync1_Isr();
 80012c4:	f000 f970 	bl	80015a8 <Sync1_Isr>

        SyncAcknowledgePending = TRUE;
 80012c8:	2301      	movs	r3, #1
 80012ca:	71fb      	strb	r3, [r7, #7]
    }
    /*ECATCHANGE_END(V5.13) ECAT1*/
    

    if(bEscIntEnabled)
 80012cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001400 <PDI_Isr+0x158>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d07a      	beq.n	80013ca <PDI_Isr+0x122>
    {
        if ( ALEvent & PROCESS_OUTPUT_EVENT )
 80012d4:	88bb      	ldrh	r3, [r7, #4]
 80012d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d036      	beq.n	800134c <PDI_Isr+0xa4>
        {
            if(bDcRunning && bDcSyncActive)
 80012de:	4b49      	ldr	r3, [pc, #292]	@ (8001404 <PDI_Isr+0x15c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <PDI_Isr+0x4c>
 80012e6:	4b48      	ldr	r3, [pc, #288]	@ (8001408 <PDI_Isr+0x160>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <PDI_Isr+0x4c>
            {
                /* Reset SM/Sync0 counter. Will be incremented on every Sync0 event*/
                u16SmSync0Counter = 0;
 80012ee:	4b47      	ldr	r3, [pc, #284]	@ (800140c <PDI_Isr+0x164>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	801a      	strh	r2, [r3, #0]
            }
            if(sSyncManOutPar.u16SmEventMissedCounter > 0)
 80012f4:	4b46      	ldr	r3, [pc, #280]	@ (8001410 <PDI_Isr+0x168>)
 80012f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <PDI_Isr+0x60>
            {
                sSyncManOutPar.u16SmEventMissedCounter--;
 80012fc:	4b44      	ldr	r3, [pc, #272]	@ (8001410 <PDI_Isr+0x168>)
 80012fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001300:	3b01      	subs	r3, #1
 8001302:	b29a      	uxth	r2, r3
 8001304:	4b42      	ldr	r3, [pc, #264]	@ (8001410 <PDI_Isr+0x168>)
 8001306:	851a      	strh	r2, [r3, #40]	@ 0x28
            }

            sSyncManInPar.u16SmEventMissedCounter = sSyncManOutPar.u16SmEventMissedCounter;
 8001308:	4b41      	ldr	r3, [pc, #260]	@ (8001410 <PDI_Isr+0x168>)
 800130a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800130c:	4b41      	ldr	r3, [pc, #260]	@ (8001414 <PDI_Isr+0x16c>)
 800130e:	851a      	strh	r2, [r3, #40]	@ 0x28



        /* Outputs were updated, set flag for watchdog monitoring */
        bEcatFirstOutputsReceived = TRUE;
 8001310:	4b41      	ldr	r3, [pc, #260]	@ (8001418 <PDI_Isr+0x170>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]


        /*
            handle output process data event
        */
        if ( bEcatOutputUpdateRunning )
 8001316:	4b41      	ldr	r3, [pc, #260]	@ (800141c <PDI_Isr+0x174>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <PDI_Isr+0x7c>
        {
            /* slave is in OP, update the outputs */
            PDO_OutputMapping();
 800131e:	f7ff fea3 	bl	8001068 <PDO_OutputMapping>
 8001322:	e013      	b.n	800134c <PDI_Isr+0xa4>
        }
        else
        {
            /* Just acknowledge the process data event in the INIT,PreOP and SafeOP state */
            HW_EscReadWordIsr(u16dummy,nEscAddrOutputData);
 8001324:	4b3e      	ldr	r3, [pc, #248]	@ (8001420 <PDI_Isr+0x178>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	2202      	movs	r2, #2
 800132a:	4619      	mov	r1, r3
 800132c:	483d      	ldr	r0, [pc, #244]	@ (8001424 <PDI_Isr+0x17c>)
 800132e:	f7ff fae7 	bl	8000900 <HW_EscReadIsr>
            HW_EscReadWordIsr(u16dummy,(nEscAddrOutputData+nPdOutputSize-2));
 8001332:	4b3b      	ldr	r3, [pc, #236]	@ (8001420 <PDI_Isr+0x178>)
 8001334:	881a      	ldrh	r2, [r3, #0]
 8001336:	4b3c      	ldr	r3, [pc, #240]	@ (8001428 <PDI_Isr+0x180>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	4413      	add	r3, r2
 800133c:	b29b      	uxth	r3, r3
 800133e:	3b02      	subs	r3, #2
 8001340:	b29b      	uxth	r3, r3
 8001342:	2202      	movs	r2, #2
 8001344:	4619      	mov	r1, r3
 8001346:	4837      	ldr	r0, [pc, #220]	@ (8001424 <PDI_Isr+0x17c>)
 8001348:	f7ff fada 	bl	8000900 <HW_EscReadIsr>
        }

        /*
            Call ECAT_Application() in SM Sync mode
        */
        if (sSyncManOutPar.u16SyncType == SYNCTYPE_SM_SYNCHRON)
 800134c:	4b30      	ldr	r3, [pc, #192]	@ (8001410 <PDI_Isr+0x168>)
 800134e:	885b      	ldrh	r3, [r3, #2]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d101      	bne.n	8001358 <PDI_Isr+0xb0>
        {
            /* The Application is synchronized to process data Sync Manager event*/
            ECAT_Application();
 8001354:	f000 fba6 	bl	8001aa4 <ECAT_Application>
        }

/*ECATCHANGE_START(V5.13) ECAT 5*/
    if ( (bEcatInputUpdateRunning == TRUE) && (nPdInputSize > 0)
 8001358:	4b34      	ldr	r3, [pc, #208]	@ (800142c <PDI_Isr+0x184>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d10d      	bne.n	800137c <PDI_Isr+0xd4>
 8001360:	4b33      	ldr	r3, [pc, #204]	@ (8001430 <PDI_Isr+0x188>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d009      	beq.n	800137c <PDI_Isr+0xd4>
/*ECATCHANGE_END(V5.13) ECAT 5*/
       && ((sSyncManInPar.u16SyncType == SYNCTYPE_SM_SYNCHRON) || (sSyncManInPar.u16SyncType == SYNCTYPE_SM2_SYNCHRON))
 8001368:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <PDI_Isr+0x16c>)
 800136a:	885b      	ldrh	r3, [r3, #2]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d003      	beq.n	8001378 <PDI_Isr+0xd0>
 8001370:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <PDI_Isr+0x16c>)
 8001372:	885b      	ldrh	r3, [r3, #2]
 8001374:	2b22      	cmp	r3, #34	@ 0x22
 8001376:	d101      	bne.n	800137c <PDI_Isr+0xd4>
        )
    {
        /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
        PDO_InputMapping();
 8001378:	f7ff fe2c 	bl	8000fd4 <PDO_InputMapping>

    /*
      Check if cycle exceed
    */
    /*if next SM event was triggered during runtime increment cycle exceed counter*/
    ALEvent = HW_GetALEventRegister_Isr();
 800137c:	f7ff faa4 	bl	80008c8 <HW_GetALEventRegister_Isr>
 8001380:	4603      	mov	r3, r0
 8001382:	80bb      	strh	r3, [r7, #4]
    ALEvent = SWAPWORD(ALEvent);

    if ( ALEvent & PROCESS_OUTPUT_EVENT )
 8001384:	88bb      	ldrh	r3, [r7, #4]
 8001386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800138a:	2b00      	cmp	r3, #0
 800138c:	d01d      	beq.n	80013ca <PDI_Isr+0x122>
    {
        sSyncManOutPar.u16CycleExceededCounter++;
 800138e:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <PDI_Isr+0x168>)
 8001390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001392:	3301      	adds	r3, #1
 8001394:	b29a      	uxth	r2, r3
 8001396:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <PDI_Isr+0x168>)
 8001398:	855a      	strh	r2, [r3, #42]	@ 0x2a
        sSyncManInPar.u16CycleExceededCounter = sSyncManOutPar.u16CycleExceededCounter;
 800139a:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <PDI_Isr+0x168>)
 800139c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800139e:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <PDI_Isr+0x16c>)
 80013a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Acknowledge the process data event*/
            HW_EscReadWordIsr(u16dummy,nEscAddrOutputData);
 80013a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <PDI_Isr+0x178>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	2202      	movs	r2, #2
 80013a8:	4619      	mov	r1, r3
 80013aa:	481e      	ldr	r0, [pc, #120]	@ (8001424 <PDI_Isr+0x17c>)
 80013ac:	f7ff faa8 	bl	8000900 <HW_EscReadIsr>
            HW_EscReadWordIsr(u16dummy,(nEscAddrOutputData+nPdOutputSize-2));
 80013b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <PDI_Isr+0x178>)
 80013b2:	881a      	ldrh	r2, [r3, #0]
 80013b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <PDI_Isr+0x180>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	4413      	add	r3, r2
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	3b02      	subs	r3, #2
 80013be:	b29b      	uxth	r3, r3
 80013c0:	2202      	movs	r2, #2
 80013c2:	4619      	mov	r1, r3
 80013c4:	4817      	ldr	r0, [pc, #92]	@ (8001424 <PDI_Isr+0x17c>)
 80013c6:	f7ff fa9b 	bl	8000900 <HW_EscReadIsr>
    }
    } //if(bEscIntEnabled)

      /*ECATCHANGE_START(V5.13) ECAT1*/
    if (ALEvent & SYNC0_EVENT)
 80013ca:	88bb      	ldrh	r3, [r7, #4]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <PDI_Isr+0x134>
    {
        Sync0_Isr();
 80013d4:	f000 f82e 	bl	8001434 <Sync0_Isr>

        SyncAcknowledgePending = TRUE;
 80013d8:	2301      	movs	r3, #1
 80013da:	71fb      	strb	r3, [r7, #7]
    }

    /* Read Sync0/1 Status Register to acknowledge the event bit in the AL Event register */
    if (SyncAcknowledgePending)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d008      	beq.n	80013f4 <PDI_Isr+0x14c>
    {
        volatile UINT32 SyncState = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	603b      	str	r3, [r7, #0]
        HW_EscReadDWord(SyncState, ESC_DC_SYNC_STATUS);
 80013e6:	463b      	mov	r3, r7
 80013e8:	2204      	movs	r2, #4
 80013ea:	f640 118c 	movw	r1, #2444	@ 0x98c
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fa74 	bl	80008dc <HW_EscRead>

    }
    /*ECATCHANGE_END(V5.13) ECAT1*/

    COE_UpdateSyncErrorStatus();
 80013f4:	f7ff fb86 	bl	8000b04 <COE_UpdateSyncErrorStatus>

}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	2400092d 	.word	0x2400092d
 8001404:	24000914 	.word	0x24000914
 8001408:	24000910 	.word	0x24000910
 800140c:	24000916 	.word	0x24000916
 8001410:	240009ec 	.word	0x240009ec
 8001414:	24000a30 	.word	0x24000a30
 8001418:	2400090e 	.word	0x2400090e
 800141c:	2400090c 	.word	0x2400090c
 8001420:	24000946 	.word	0x24000946
 8001424:	2400094c 	.word	0x2400094c
 8001428:	2400093c 	.word	0x2400093c
 800142c:	2400090d 	.word	0x2400090d
 8001430:	2400093a 	.word	0x2400093a

08001434 <Sync0_Isr>:

void Sync0_Isr(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
     Sync0WdCounter = 0;
 800143a:	4b4f      	ldr	r3, [pc, #316]	@ (8001578 <Sync0_Isr+0x144>)
 800143c:	2200      	movs	r2, #0
 800143e:	801a      	strh	r2, [r3, #0]

    if(bDcSyncActive)
 8001440:	4b4e      	ldr	r3, [pc, #312]	@ (800157c <Sync0_Isr+0x148>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 8091 	beq.w	800156c <Sync0_Isr+0x138>
    {
/*ECATCHANGE_START(V5.13) ECAT 6*/
        BOOL bCallInputMapping = FALSE;
 800144a:	2300      	movs	r3, #0
 800144c:	71fb      	strb	r3, [r7, #7]
/*ECATCHANGE_END(V5.13) ECAT 6*/

/*ECATCHANGE_START(V5.13) ECAT 6*/
        if ((bEcatInputUpdateRunning == TRUE) && (LatchInputSync0Value > 0) && (nPdInputSize > 0))
 800144e:	4b4c      	ldr	r3, [pc, #304]	@ (8001580 <Sync0_Isr+0x14c>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d11b      	bne.n	800148e <Sync0_Isr+0x5a>
 8001456:	4b4b      	ldr	r3, [pc, #300]	@ (8001584 <Sync0_Isr+0x150>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d017      	beq.n	800148e <Sync0_Isr+0x5a>
 800145e:	4b4a      	ldr	r3, [pc, #296]	@ (8001588 <Sync0_Isr+0x154>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d013      	beq.n	800148e <Sync0_Isr+0x5a>
        {
            if(LatchInputSync0Value > LatchInputSync0Counter) /* Inputs shall be latched on a specific Sync0 event */
 8001466:	4b47      	ldr	r3, [pc, #284]	@ (8001584 <Sync0_Isr+0x150>)
 8001468:	881a      	ldrh	r2, [r3, #0]
 800146a:	4b48      	ldr	r3, [pc, #288]	@ (800158c <Sync0_Isr+0x158>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d905      	bls.n	800147e <Sync0_Isr+0x4a>
            {
                LatchInputSync0Counter++;
 8001472:	4b46      	ldr	r3, [pc, #280]	@ (800158c <Sync0_Isr+0x158>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	b29a      	uxth	r2, r3
 800147a:	4b44      	ldr	r3, [pc, #272]	@ (800158c <Sync0_Isr+0x158>)
 800147c:	801a      	strh	r2, [r3, #0]
            }

            if (LatchInputSync0Value == LatchInputSync0Counter)
 800147e:	4b41      	ldr	r3, [pc, #260]	@ (8001584 <Sync0_Isr+0x150>)
 8001480:	881a      	ldrh	r2, [r3, #0]
 8001482:	4b42      	ldr	r3, [pc, #264]	@ (800158c <Sync0_Isr+0x158>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d101      	bne.n	800148e <Sync0_Isr+0x5a>
            {
                bCallInputMapping = TRUE;
 800148a:	2301      	movs	r3, #1
 800148c:	71fb      	strb	r3, [r7, #7]
            }
        }
/*ECATCHANGE_END(V5.13) ECAT 6*/

        if(u16SmSync0Value > 0)
 800148e:	4b40      	ldr	r3, [pc, #256]	@ (8001590 <Sync0_Isr+0x15c>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d05c      	beq.n	8001550 <Sync0_Isr+0x11c>
        {
           /* Check if Sm-Sync sequence is invalid */
           if (u16SmSync0Counter > u16SmSync0Value)
 8001496:	4b3f      	ldr	r3, [pc, #252]	@ (8001594 <Sync0_Isr+0x160>)
 8001498:	881a      	ldrh	r2, [r3, #0]
 800149a:	4b3d      	ldr	r3, [pc, #244]	@ (8001590 <Sync0_Isr+0x15c>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d923      	bls.n	80014ea <Sync0_Isr+0xb6>
           {
              if ((nPdOutputSize > 0) && (sSyncManOutPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 80014a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001598 <Sync0_Isr+0x164>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <Sync0_Isr+0x8e>
 80014aa:	4b3c      	ldr	r3, [pc, #240]	@ (800159c <Sync0_Isr+0x168>)
 80014ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80014ae:	4b3c      	ldr	r3, [pc, #240]	@ (80015a0 <Sync0_Isr+0x16c>)
 80014b0:	891b      	ldrh	r3, [r3, #8]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d805      	bhi.n	80014c2 <Sync0_Isr+0x8e>
              {
                 sSyncManOutPar.u16SmEventMissedCounter = sSyncManOutPar.u16SmEventMissedCounter + 3;
 80014b6:	4b39      	ldr	r3, [pc, #228]	@ (800159c <Sync0_Isr+0x168>)
 80014b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ba:	3303      	adds	r3, #3
 80014bc:	b29a      	uxth	r2, r3
 80014be:	4b37      	ldr	r3, [pc, #220]	@ (800159c <Sync0_Isr+0x168>)
 80014c0:	851a      	strh	r2, [r3, #40]	@ 0x28
              }

               if ((nPdInputSize > 0) && (nPdOutputSize == 0) && (sSyncManInPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 80014c2:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <Sync0_Isr+0x154>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00f      	beq.n	80014ea <Sync0_Isr+0xb6>
 80014ca:	4b33      	ldr	r3, [pc, #204]	@ (8001598 <Sync0_Isr+0x164>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10b      	bne.n	80014ea <Sync0_Isr+0xb6>
 80014d2:	4b34      	ldr	r3, [pc, #208]	@ (80015a4 <Sync0_Isr+0x170>)
 80014d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80014d6:	4b32      	ldr	r3, [pc, #200]	@ (80015a0 <Sync0_Isr+0x16c>)
 80014d8:	891b      	ldrh	r3, [r3, #8]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d805      	bhi.n	80014ea <Sync0_Isr+0xb6>
               {
                   sSyncManInPar.u16SmEventMissedCounter = sSyncManInPar.u16SmEventMissedCounter + 3;
 80014de:	4b31      	ldr	r3, [pc, #196]	@ (80015a4 <Sync0_Isr+0x170>)
 80014e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014e2:	3303      	adds	r3, #3
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4b2f      	ldr	r3, [pc, #188]	@ (80015a4 <Sync0_Isr+0x170>)
 80014e8:	851a      	strh	r2, [r3, #40]	@ 0x28
               }

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
 80014ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <Sync0_Isr+0x164>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d120      	bne.n	8001534 <Sync0_Isr+0x100>
 80014f2:	4b25      	ldr	r3, [pc, #148]	@ (8001588 <Sync0_Isr+0x154>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d01c      	beq.n	8001534 <Sync0_Isr+0x100>
           {
              /* Input only with DC, check if the last input data was read*/
              UINT16  ALEvent = HW_GetALEventRegister_Isr();
 80014fa:	f7ff f9e5 	bl	80008c8 <HW_GetALEventRegister_Isr>
 80014fe:	4603      	mov	r3, r0
 8001500:	80bb      	strh	r3, [r7, #4]
              ALEvent = SWAPWORD(ALEvent);

              if ((ALEvent & PROCESS_INPUT_EVENT) == 0)
 8001502:	88bb      	ldrh	r3, [r7, #4]
 8001504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10c      	bne.n	8001526 <Sync0_Isr+0xf2>
              {

                 /* no input data was read by the master, increment the sm missed counter*/
                if (u16SmSync0Counter <= u16SmSync0Value)
 800150c:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <Sync0_Isr+0x160>)
 800150e:	881a      	ldrh	r2, [r3, #0]
 8001510:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <Sync0_Isr+0x15c>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d81a      	bhi.n	800154e <Sync0_Isr+0x11a>
                {
                    u16SmSync0Counter++;
 8001518:	4b1e      	ldr	r3, [pc, #120]	@ (8001594 <Sync0_Isr+0x160>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <Sync0_Isr+0x160>)
 8001522:	801a      	strh	r2, [r3, #0]
           {
 8001524:	e013      	b.n	800154e <Sync0_Isr+0x11a>
                }
              }
              else
              {
                 /* Reset SM/Sync0 counter*/
                 u16SmSync0Counter = 0;
 8001526:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <Sync0_Isr+0x160>)
 8001528:	2200      	movs	r2, #0
 800152a:	801a      	strh	r2, [r3, #0]

                 sSyncManInPar.u16SmEventMissedCounter = 0;
 800152c:	4b1d      	ldr	r3, [pc, #116]	@ (80015a4 <Sync0_Isr+0x170>)
 800152e:	2200      	movs	r2, #0
 8001530:	851a      	strh	r2, [r3, #40]	@ 0x28
           {
 8001532:	e00c      	b.n	800154e <Sync0_Isr+0x11a>

              }
           }
           else if (u16SmSync0Counter <= u16SmSync0Value)
 8001534:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <Sync0_Isr+0x160>)
 8001536:	881a      	ldrh	r2, [r3, #0]
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <Sync0_Isr+0x15c>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d807      	bhi.n	8001550 <Sync0_Isr+0x11c>
           {

               u16SmSync0Counter++;
 8001540:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <Sync0_Isr+0x160>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	b29a      	uxth	r2, r3
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <Sync0_Isr+0x160>)
 800154a:	801a      	strh	r2, [r3, #0]
 800154c:	e000      	b.n	8001550 <Sync0_Isr+0x11c>
           {
 800154e:	bf00      	nop
           }
        }//SM -Sync monitoring enabled


        /* Application is synchronized to SYNC0 event*/
        ECAT_Application();
 8001550:	f000 faa8 	bl	8001aa4 <ECAT_Application>

/*ECATCHANGE_START(V5.13) ECAT 6*/
        if (bCallInputMapping == TRUE)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d108      	bne.n	800156c <Sync0_Isr+0x138>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 800155a:	f7ff fd3b 	bl	8000fd4 <PDO_InputMapping>

            if(LatchInputSync0Value == 1)
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <Sync0_Isr+0x150>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d102      	bne.n	800156c <Sync0_Isr+0x138>
            {
                /* if inputs are latched on every Sync0 event (otherwise the counter is reset on the next Sync1 event) */
                LatchInputSync0Counter = 0;
 8001566:	4b09      	ldr	r3, [pc, #36]	@ (800158c <Sync0_Isr+0x158>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
        }
/*ECATCHANGE_END(V5.13) ECAT 6*/

    }

    COE_UpdateSyncErrorStatus();
 800156c:	f7ff faca 	bl	8000b04 <COE_UpdateSyncErrorStatus>

}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	24000920 	.word	0x24000920
 800157c:	24000910 	.word	0x24000910
 8001580:	2400090d 	.word	0x2400090d
 8001584:	24000928 	.word	0x24000928
 8001588:	2400093a 	.word	0x2400093a
 800158c:	2400092a 	.word	0x2400092a
 8001590:	24000918 	.word	0x24000918
 8001594:	24000916 	.word	0x24000916
 8001598:	2400093c 	.word	0x2400093c
 800159c:	240009ec 	.word	0x240009ec
 80015a0:	24000394 	.word	0x24000394
 80015a4:	24000a30 	.word	0x24000a30

080015a8 <Sync1_Isr>:

void Sync1_Isr(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
    Sync1WdCounter = 0;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <Sync1_Isr+0x38>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	801a      	strh	r2, [r3, #0]

    /*ECATCHANGE_START(V5.13) ECAT 5*/
    if ( (bEcatInputUpdateRunning == TRUE) && (nPdInputSize > 0)
 80015b2:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <Sync1_Isr+0x3c>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d10d      	bne.n	80015d6 <Sync1_Isr+0x2e>
 80015ba:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <Sync1_Isr+0x40>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d009      	beq.n	80015d6 <Sync1_Isr+0x2e>
/*ECATCHANGE_END(V5.13) ECAT 5*/
            && (sSyncManInPar.u16SyncType == SYNCTYPE_DCSYNC1)
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <Sync1_Isr+0x44>)
 80015c4:	885b      	ldrh	r3, [r3, #2]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d105      	bne.n	80015d6 <Sync1_Isr+0x2e>
            && (LatchInputSync0Value == 0)) /* Inputs are latched on Sync1 (LatchInputSync0Value == 0), if LatchInputSync0Value > 0 inputs are latched with Sync0 */
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <Sync1_Isr+0x48>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <Sync1_Isr+0x2e>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 80015d2:	f7ff fcff 	bl	8000fd4 <PDO_InputMapping>
        }

        /* Reset Sync0 latch counter (to start next Sync0 latch cycle) */
        LatchInputSync0Counter = 0;
 80015d6:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <Sync1_Isr+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	801a      	strh	r2, [r3, #0]
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	24000924 	.word	0x24000924
 80015e4:	2400090d 	.word	0x2400090d
 80015e8:	2400093a 	.word	0x2400093a
 80015ec:	24000a30 	.word	0x24000a30
 80015f0:	24000928 	.word	0x24000928
 80015f4:	2400092a 	.word	0x2400092a

080015f8 <ECAT_SetLedIndication>:
 \brief    This function shall called within a 1ms cycle.
        Set Run and Error Led depending on the Led state

*////////////////////////////////////////////////////////////////////////////////////////
void ECAT_SetLedIndication(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0

    static UINT8 u8PrevErrorLed = LED_OFF ;
    static UINT8 u8PrevRunLed = LED_OFF ;

    // this code should be called every ms in average
    if ( bEcatOutputUpdateRunning )
 80015fe:	4b96      	ldr	r3, [pc, #600]	@ (8001858 <ECAT_SetLedIndication+0x260>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d006      	beq.n	8001614 <ECAT_SetLedIndication+0x1c>
    {
        // in OP the EtherCAT state LED is always 1 and ErrorLED is 0
        bEtherCATRunLed = TRUE;
 8001606:	4b95      	ldr	r3, [pc, #596]	@ (800185c <ECAT_SetLedIndication+0x264>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
        bEtherCATErrorLed = FALSE;
 800160c:	4b94      	ldr	r3, [pc, #592]	@ (8001860 <ECAT_SetLedIndication+0x268>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
        }
    }    

    /* set the EtherCAT-LED */
    // HW_SetLed(((UINT8)bEtherCATRunLed),((UINT8)bEtherCATErrorLed));
}
 8001612:	e149      	b.n	80018a8 <ECAT_SetLedIndication+0x2b0>
        ms++;
 8001614:	4b93      	ldr	r3, [pc, #588]	@ (8001864 <ECAT_SetLedIndication+0x26c>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	4b91      	ldr	r3, [pc, #580]	@ (8001864 <ECAT_SetLedIndication+0x26c>)
 800161e:	801a      	strh	r2, [r3, #0]
        if(ms == 50 || ms == 100 ||ms == 150 ||ms == 200)    //set flickering LED if required
 8001620:	4b90      	ldr	r3, [pc, #576]	@ (8001864 <ECAT_SetLedIndication+0x26c>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	2b32      	cmp	r3, #50	@ 0x32
 8001626:	d00c      	beq.n	8001642 <ECAT_SetLedIndication+0x4a>
 8001628:	4b8e      	ldr	r3, [pc, #568]	@ (8001864 <ECAT_SetLedIndication+0x26c>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	2b64      	cmp	r3, #100	@ 0x64
 800162e:	d008      	beq.n	8001642 <ECAT_SetLedIndication+0x4a>
 8001630:	4b8c      	ldr	r3, [pc, #560]	@ (8001864 <ECAT_SetLedIndication+0x26c>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	2b96      	cmp	r3, #150	@ 0x96
 8001636:	d004      	beq.n	8001642 <ECAT_SetLedIndication+0x4a>
 8001638:	4b8a      	ldr	r3, [pc, #552]	@ (8001864 <ECAT_SetLedIndication+0x26c>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	2bc8      	cmp	r3, #200	@ 0xc8
 800163e:	f040 8133 	bne.w	80018a8 <ECAT_SetLedIndication+0x2b0>
            switch ( nAlStatus & STATE_MASK)
 8001642:	4b89      	ldr	r3, [pc, #548]	@ (8001868 <ECAT_SetLedIndication+0x270>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b01      	subs	r3, #1
 800164c:	2b07      	cmp	r3, #7
 800164e:	d827      	bhi.n	80016a0 <ECAT_SetLedIndication+0xa8>
 8001650:	a201      	add	r2, pc, #4	@ (adr r2, 8001658 <ECAT_SetLedIndication+0x60>)
 8001652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001656:	bf00      	nop
 8001658:	08001679 	.word	0x08001679
 800165c:	08001681 	.word	0x08001681
 8001660:	08001699 	.word	0x08001699
 8001664:	08001689 	.word	0x08001689
 8001668:	080016a1 	.word	0x080016a1
 800166c:	080016a1 	.word	0x080016a1
 8001670:	080016a1 	.word	0x080016a1
 8001674:	08001691 	.word	0x08001691
                u8EcatRunLed = LED_OFF;
 8001678:	4b7c      	ldr	r3, [pc, #496]	@ (800186c <ECAT_SetLedIndication+0x274>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
                break;
 800167e:	e013      	b.n	80016a8 <ECAT_SetLedIndication+0xb0>
                u8EcatRunLed = LED_BLINKING;
 8001680:	4b7a      	ldr	r3, [pc, #488]	@ (800186c <ECAT_SetLedIndication+0x274>)
 8001682:	2240      	movs	r2, #64	@ 0x40
 8001684:	701a      	strb	r2, [r3, #0]
                break;
 8001686:	e00f      	b.n	80016a8 <ECAT_SetLedIndication+0xb0>
                u8EcatRunLed = LED_SINGLEFLASH;
 8001688:	4b78      	ldr	r3, [pc, #480]	@ (800186c <ECAT_SetLedIndication+0x274>)
 800168a:	2241      	movs	r2, #65	@ 0x41
 800168c:	701a      	strb	r2, [r3, #0]
                break;
 800168e:	e00b      	b.n	80016a8 <ECAT_SetLedIndication+0xb0>
                u8EcatRunLed = LED_ON;
 8001690:	4b76      	ldr	r3, [pc, #472]	@ (800186c <ECAT_SetLedIndication+0x274>)
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
                break;
 8001696:	e007      	b.n	80016a8 <ECAT_SetLedIndication+0xb0>
                u8EcatRunLed = LED_FLICKERING;
 8001698:	4b74      	ldr	r3, [pc, #464]	@ (800186c <ECAT_SetLedIndication+0x274>)
 800169a:	2260      	movs	r2, #96	@ 0x60
 800169c:	701a      	strb	r2, [r3, #0]
                break;
 800169e:	e003      	b.n	80016a8 <ECAT_SetLedIndication+0xb0>
                u8EcatRunLed = LED_OFF;
 80016a0:	4b72      	ldr	r3, [pc, #456]	@ (800186c <ECAT_SetLedIndication+0x274>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
            break;
 80016a6:	bf00      	nop
            if((u8EcatRunLed & 0x20) || ms == 200)    //if fast flag or slow cycle event
 80016a8:	4b70      	ldr	r3, [pc, #448]	@ (800186c <ECAT_SetLedIndication+0x274>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	f003 0320 	and.w	r3, r3, #32
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d103      	bne.n	80016bc <ECAT_SetLedIndication+0xc4>
 80016b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001864 <ECAT_SetLedIndication+0x26c>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	2bc8      	cmp	r3, #200	@ 0xc8
 80016ba:	d166      	bne.n	800178a <ECAT_SetLedIndication+0x192>
                UINT8 NumFlashes = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	71fb      	strb	r3, [r7, #7]
                if ((u8EcatRunLed  & 0x1F) > 0)
 80016c0:	4b6a      	ldr	r3, [pc, #424]	@ (800186c <ECAT_SetLedIndication+0x274>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	dd08      	ble.n	80016de <ECAT_SetLedIndication+0xe6>
                    NumFlashes = (u8EcatRunLed & 0x1F)+((u8EcatRunLed & 0x1F)-1);    //total number
 80016cc:	4b67      	ldr	r3, [pc, #412]	@ (800186c <ECAT_SetLedIndication+0x274>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	3b01      	subs	r3, #1
 80016dc:	71fb      	strb	r3, [r7, #7]
                if(u8EcatRunLed != u8PrevRunLed)    //state changed start with active LED
 80016de:	4b63      	ldr	r3, [pc, #396]	@ (800186c <ECAT_SetLedIndication+0x274>)
 80016e0:	781a      	ldrb	r2, [r3, #0]
 80016e2:	4b63      	ldr	r3, [pc, #396]	@ (8001870 <ECAT_SetLedIndication+0x278>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d00f      	beq.n	800170a <ECAT_SetLedIndication+0x112>
                    if(u8EcatRunLed & 0x80)    //invert flag enable?
 80016ea:	4b60      	ldr	r3, [pc, #384]	@ (800186c <ECAT_SetLedIndication+0x274>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	da03      	bge.n	80016fc <ECAT_SetLedIndication+0x104>
                            bEtherCATRunLed = FALSE;
 80016f4:	4b59      	ldr	r3, [pc, #356]	@ (800185c <ECAT_SetLedIndication+0x264>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
 80016fa:	e002      	b.n	8001702 <ECAT_SetLedIndication+0x10a>
                        bEtherCATRunLed = TRUE;
 80016fc:	4b57      	ldr	r3, [pc, #348]	@ (800185c <ECAT_SetLedIndication+0x264>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
                    RunCounter = 1;
 8001702:	4b5c      	ldr	r3, [pc, #368]	@ (8001874 <ECAT_SetLedIndication+0x27c>)
 8001704:	2201      	movs	r2, #1
 8001706:	801a      	strh	r2, [r3, #0]
 8001708:	e03b      	b.n	8001782 <ECAT_SetLedIndication+0x18a>
                    if(u8EcatRunLed & 0x40)    //toggle LED bit on
 800170a:	4b58      	ldr	r3, [pc, #352]	@ (800186c <ECAT_SetLedIndication+0x274>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001712:	2b00      	cmp	r3, #0
 8001714:	d02e      	beq.n	8001774 <ECAT_SetLedIndication+0x17c>
                        bEtherCATRunLed = !bEtherCATRunLed;
 8001716:	4b51      	ldr	r3, [pc, #324]	@ (800185c <ECAT_SetLedIndication+0x264>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	bf0c      	ite	eq
 800171e:	2301      	moveq	r3, #1
 8001720:	2300      	movne	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	461a      	mov	r2, r3
 8001726:	4b4d      	ldr	r3, [pc, #308]	@ (800185c <ECAT_SetLedIndication+0x264>)
 8001728:	701a      	strb	r2, [r3, #0]
                        if(NumFlashes)    //NumFlashes defined => limited LED toggle
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d028      	beq.n	8001782 <ECAT_SetLedIndication+0x18a>
                            RunCounter++;
 8001730:	4b50      	ldr	r3, [pc, #320]	@ (8001874 <ECAT_SetLedIndication+0x27c>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	b29a      	uxth	r2, r3
 8001738:	4b4e      	ldr	r3, [pc, #312]	@ (8001874 <ECAT_SetLedIndication+0x27c>)
 800173a:	801a      	strh	r2, [r3, #0]
                            if(RunCounter > NumFlashes)    //toggle led finished
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	b29a      	uxth	r2, r3
 8001740:	4b4c      	ldr	r3, [pc, #304]	@ (8001874 <ECAT_SetLedIndication+0x27c>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d21c      	bcs.n	8001782 <ECAT_SetLedIndication+0x18a>
                                if(u8EcatRunLed & 0x80)    //invert flag enable?
 8001748:	4b48      	ldr	r3, [pc, #288]	@ (800186c <ECAT_SetLedIndication+0x274>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b25b      	sxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	da03      	bge.n	800175a <ECAT_SetLedIndication+0x162>
                                    bEtherCATRunLed = TRUE;
 8001752:	4b42      	ldr	r3, [pc, #264]	@ (800185c <ECAT_SetLedIndication+0x264>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	e002      	b.n	8001760 <ECAT_SetLedIndication+0x168>
                                    bEtherCATRunLed = FALSE;
 800175a:	4b40      	ldr	r3, [pc, #256]	@ (800185c <ECAT_SetLedIndication+0x264>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
                                if(RunCounter >= (NumFlashes+5))        //toggle time + 5 cycles low
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	3304      	adds	r3, #4
 8001764:	4a43      	ldr	r2, [pc, #268]	@ (8001874 <ECAT_SetLedIndication+0x27c>)
 8001766:	8812      	ldrh	r2, [r2, #0]
 8001768:	4293      	cmp	r3, r2
 800176a:	da0a      	bge.n	8001782 <ECAT_SetLedIndication+0x18a>
                                    RunCounter = 0;
 800176c:	4b41      	ldr	r3, [pc, #260]	@ (8001874 <ECAT_SetLedIndication+0x27c>)
 800176e:	2200      	movs	r2, #0
 8001770:	801a      	strh	r2, [r3, #0]
 8001772:	e006      	b.n	8001782 <ECAT_SetLedIndication+0x18a>
                        bEtherCATRunLed = (u8EcatRunLed & 0x01);
 8001774:	4b3d      	ldr	r3, [pc, #244]	@ (800186c <ECAT_SetLedIndication+0x274>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b37      	ldr	r3, [pc, #220]	@ (800185c <ECAT_SetLedIndication+0x264>)
 8001780:	701a      	strb	r2, [r3, #0]
                u8PrevRunLed = u8EcatRunLed;
 8001782:	4b3a      	ldr	r3, [pc, #232]	@ (800186c <ECAT_SetLedIndication+0x274>)
 8001784:	781a      	ldrb	r2, [r3, #0]
 8001786:	4b3a      	ldr	r3, [pc, #232]	@ (8001870 <ECAT_SetLedIndication+0x278>)
 8001788:	701a      	strb	r2, [r3, #0]
            if((u8EcatErrorLed & 0x20) || ms == 200)    //if fast flag or slow cycle event
 800178a:	4b3b      	ldr	r3, [pc, #236]	@ (8001878 <ECAT_SetLedIndication+0x280>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	f003 0320 	and.w	r3, r3, #32
 8001792:	2b00      	cmp	r3, #0
 8001794:	d103      	bne.n	800179e <ECAT_SetLedIndication+0x1a6>
 8001796:	4b33      	ldr	r3, [pc, #204]	@ (8001864 <ECAT_SetLedIndication+0x26c>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	2bc8      	cmp	r3, #200	@ 0xc8
 800179c:	d17d      	bne.n	800189a <ECAT_SetLedIndication+0x2a2>
                UINT8 NumFlashes = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	71bb      	strb	r3, [r7, #6]
                if ((u8EcatErrorLed  & 0x1F) > 0)
 80017a2:	4b35      	ldr	r3, [pc, #212]	@ (8001878 <ECAT_SetLedIndication+0x280>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	dd08      	ble.n	80017c0 <ECAT_SetLedIndication+0x1c8>
                    NumFlashes = (u8EcatErrorLed & 0x1F)+((u8EcatErrorLed & 0x1F)-1);    //total number
 80017ae:	4b32      	ldr	r3, [pc, #200]	@ (8001878 <ECAT_SetLedIndication+0x280>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	3b01      	subs	r3, #1
 80017be:	71bb      	strb	r3, [r7, #6]
                if(u8EcatErrorLed != u8PrevErrorLed)    //state changed start with active LED
 80017c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001878 <ECAT_SetLedIndication+0x280>)
 80017c2:	781a      	ldrb	r2, [r3, #0]
 80017c4:	4b2d      	ldr	r3, [pc, #180]	@ (800187c <ECAT_SetLedIndication+0x284>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d00f      	beq.n	80017ec <ECAT_SetLedIndication+0x1f4>
                    if(u8EcatErrorLed & 0x80)    //invert flag enable?
 80017cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001878 <ECAT_SetLedIndication+0x280>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	da03      	bge.n	80017de <ECAT_SetLedIndication+0x1e6>
                        bEtherCATErrorLed = FALSE;
 80017d6:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <ECAT_SetLedIndication+0x268>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
 80017dc:	e002      	b.n	80017e4 <ECAT_SetLedIndication+0x1ec>
                        bEtherCATErrorLed = TRUE;
 80017de:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <ECAT_SetLedIndication+0x268>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
                    ErrorCounter = 1;
 80017e4:	4b26      	ldr	r3, [pc, #152]	@ (8001880 <ECAT_SetLedIndication+0x288>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	801a      	strh	r2, [r3, #0]
 80017ea:	e052      	b.n	8001892 <ECAT_SetLedIndication+0x29a>
                    if(u8EcatErrorLed & 0x40)    //toggle LED bit on
 80017ec:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <ECAT_SetLedIndication+0x280>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d045      	beq.n	8001884 <ECAT_SetLedIndication+0x28c>
                        bEtherCATErrorLed = !bEtherCATErrorLed;
 80017f8:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <ECAT_SetLedIndication+0x268>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf0c      	ite	eq
 8001800:	2301      	moveq	r3, #1
 8001802:	2300      	movne	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	461a      	mov	r2, r3
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <ECAT_SetLedIndication+0x268>)
 800180a:	701a      	strb	r2, [r3, #0]
                        if(NumFlashes)    //NumFlashes defined => limited LED toggle
 800180c:	79bb      	ldrb	r3, [r7, #6]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d03f      	beq.n	8001892 <ECAT_SetLedIndication+0x29a>
                            ErrorCounter++;
 8001812:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <ECAT_SetLedIndication+0x288>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <ECAT_SetLedIndication+0x288>)
 800181c:	801a      	strh	r2, [r3, #0]
                            if(ErrorCounter > NumFlashes)    //toggle led finished
 800181e:	79bb      	ldrb	r3, [r7, #6]
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <ECAT_SetLedIndication+0x288>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d233      	bcs.n	8001892 <ECAT_SetLedIndication+0x29a>
                                if(u8EcatErrorLed & 0x80)    //invert flag enable?
 800182a:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <ECAT_SetLedIndication+0x280>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b25b      	sxtb	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	da03      	bge.n	800183c <ECAT_SetLedIndication+0x244>
                                    bEtherCATErrorLed = TRUE;
 8001834:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <ECAT_SetLedIndication+0x268>)
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
 800183a:	e002      	b.n	8001842 <ECAT_SetLedIndication+0x24a>
                                    bEtherCATErrorLed = FALSE;
 800183c:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <ECAT_SetLedIndication+0x268>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
                                if(ErrorCounter >= (NumFlashes+5))        //toggle time + 5 cycles low
 8001842:	79bb      	ldrb	r3, [r7, #6]
 8001844:	3304      	adds	r3, #4
 8001846:	4a0e      	ldr	r2, [pc, #56]	@ (8001880 <ECAT_SetLedIndication+0x288>)
 8001848:	8812      	ldrh	r2, [r2, #0]
 800184a:	4293      	cmp	r3, r2
 800184c:	da21      	bge.n	8001892 <ECAT_SetLedIndication+0x29a>
                                    ErrorCounter = 0;
 800184e:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <ECAT_SetLedIndication+0x288>)
 8001850:	2200      	movs	r2, #0
 8001852:	801a      	strh	r2, [r3, #0]
 8001854:	e01d      	b.n	8001892 <ECAT_SetLedIndication+0x29a>
 8001856:	bf00      	nop
 8001858:	2400090c 	.word	0x2400090c
 800185c:	24000850 	.word	0x24000850
 8001860:	24000851 	.word	0x24000851
 8001864:	240008fe 	.word	0x240008fe
 8001868:	24000942 	.word	0x24000942
 800186c:	24000939 	.word	0x24000939
 8001870:	24000900 	.word	0x24000900
 8001874:	24000902 	.word	0x24000902
 8001878:	24000938 	.word	0x24000938
 800187c:	24000904 	.word	0x24000904
 8001880:	24000906 	.word	0x24000906
                        bEtherCATErrorLed = (u8EcatErrorLed & 0x01);
 8001884:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <ECAT_SetLedIndication+0x2bc>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <ECAT_SetLedIndication+0x2c0>)
 8001890:	701a      	strb	r2, [r3, #0]
                u8PrevErrorLed = u8EcatErrorLed;
 8001892:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <ECAT_SetLedIndication+0x2bc>)
 8001894:	781a      	ldrb	r2, [r3, #0]
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <ECAT_SetLedIndication+0x2c4>)
 8001898:	701a      	strb	r2, [r3, #0]
            if(ms == 200)
 800189a:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <ECAT_SetLedIndication+0x2c8>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	2bc8      	cmp	r3, #200	@ 0xc8
 80018a0:	d102      	bne.n	80018a8 <ECAT_SetLedIndication+0x2b0>
                ms = 0;
 80018a2:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <ECAT_SetLedIndication+0x2c8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	801a      	strh	r2, [r3, #0]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	24000938 	.word	0x24000938
 80018b8:	24000851 	.word	0x24000851
 80018bc:	24000904 	.word	0x24000904
 80018c0:	240008fe 	.word	0x240008fe

080018c4 <MainInit>:
 \brief    This function initialize the EtherCAT Sample Code

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 MainInit(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
    UINT16 Error = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	817b      	strh	r3, [r7, #10]




    /* ECATCHANGE_START(V5.13) COE4*/
    pAPPL_CoeReadInd = NULL;
 80018ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001984 <MainInit+0xc0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
    pAPPL_CoeWriteInd = NULL;
 80018d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001988 <MainInit+0xc4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
    /* ECATCHANGE_END(V5.13) COE4*/

    pAPPL_MainLoop = NULL;
 80018da:	4b2c      	ldr	r3, [pc, #176]	@ (800198c <MainInit+0xc8>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

    /* initialize the EtherCAT Slave Interface */
    ECAT_Init();
 80018e0:	f001 ff9e 	bl	8003820 <ECAT_Init>
    /* initialize the objects */
    COE_ObjInit();
 80018e4:	f7ff f942 	bl	8000b6c <COE_ObjInit>


    /*indicate that the slave stack initialization finished*/
    bInitFinished = TRUE;
 80018e8:	4b29      	ldr	r3, [pc, #164]	@ (8001990 <MainInit+0xcc>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]


    bMinCycleTimeMeasurementStarted = FALSE;
 80018ee:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <MainInit+0xd0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
    u32CycleTimeStartValue = 0;
 80018f4:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <MainInit+0xd4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
    u32MinCycleTimeStartValue = 0;
 80018fa:	4b28      	ldr	r3, [pc, #160]	@ (800199c <MainInit+0xd8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

    u32SystemTimeReadFailure = 0;
 8001900:	4b27      	ldr	r3, [pc, #156]	@ (80019a0 <MainInit+0xdc>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]

    /* Get the System Time read failure */
    {
       UINT32 u32TimeValue = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
       UINT32 u32Cnt = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
       UINT32 u32Delta = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]

       while (u32Cnt < 1000)
 8001912:	e02e      	b.n	8001972 <MainInit+0xae>
       {
           HW_EscReadDWordIsr(u32TimeValue, ESC_SYSTEMTIME_OFFSET);
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	2204      	movs	r2, #4
 8001918:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe ffef 	bl	8000900 <HW_EscReadIsr>
           HW_EscReadDWordIsr(u32Delta, ESC_SYSTEMTIME_OFFSET);
 8001922:	463b      	mov	r3, r7
 8001924:	2204      	movs	r2, #4
 8001926:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe ffe8 	bl	8000900 <HW_EscReadIsr>

            if (u32TimeValue <= u32Delta)
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d804      	bhi.n	8001942 <MainInit+0x7e>
            {
                    u32Delta = u32Delta - u32TimeValue;
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	e004      	b.n	800194c <MainInit+0x88>
            }
            else
            {
                //The 32Bit timer is wrapped around
                u32Delta = u32Delta + (0xFFFFFFFF - u32TimeValue);
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	3b01      	subs	r3, #1
 800194a:	603b      	str	r3, [r7, #0]
            }


            if (u32SystemTimeReadFailure == 0)
 800194c:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <MainInit+0xdc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d103      	bne.n	800195c <MainInit+0x98>
            {
                u32SystemTimeReadFailure = u32Delta;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	4a12      	ldr	r2, [pc, #72]	@ (80019a0 <MainInit+0xdc>)
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e007      	b.n	800196c <MainInit+0xa8>
            }
            else if (u32SystemTimeReadFailure > u32Delta)
 800195c:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <MainInit+0xdc>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d902      	bls.n	800196c <MainInit+0xa8>
            {
                u32SystemTimeReadFailure = u32Delta;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <MainInit+0xdc>)
 800196a:	6013      	str	r3, [r2, #0]
            }

          u32Cnt++;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3301      	adds	r3, #1
 8001970:	60fb      	str	r3, [r7, #12]
       while (u32Cnt < 1000)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001978:	d3cc      	bcc.n	8001914 <MainInit+0x50>




/*Application Init need to be called from the application layer*/
     return Error;
 800197a:	897b      	ldrh	r3, [r7, #10]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	24000854 	.word	0x24000854
 8001988:	24000858 	.word	0x24000858
 800198c:	2400085c 	.word	0x2400085c
 8001990:	240008fc 	.word	0x240008fc
 8001994:	2400086c 	.word	0x2400086c
 8001998:	24000860 	.word	0x24000860
 800199c:	24000864 	.word	0x24000864
 80019a0:	24000868 	.word	0x24000868

080019a4 <MainLoop>:
 \brief    This function shall be called cyclically from main

*////////////////////////////////////////////////////////////////////////////////////////

void MainLoop(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
    
    /*return if initialization not finished */
    if(bInitFinished == FALSE)
 80019aa:	4b33      	ldr	r3, [pc, #204]	@ (8001a78 <MainLoop+0xd4>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d05d      	beq.n	8001a6e <MainLoop+0xca>

        /* FreeRun-Mode:  bEscIntEnabled = FALSE, bDcSyncActive = FALSE
           Synchron-Mode: bEscIntEnabled = TRUE, bDcSyncActive = FALSE
           DC-Mode:       bEscIntEnabled = TRUE, bDcSyncActive = TRUE */
        if (
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 80019b2:	4b32      	ldr	r3, [pc, #200]	@ (8001a7c <MainLoop+0xd8>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
        if (
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <MainLoop+0x1e>
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 80019ba:	4b31      	ldr	r3, [pc, #196]	@ (8001a80 <MainLoop+0xdc>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d132      	bne.n	8001a28 <MainLoop+0x84>
          && !bDcSyncActive                                               /* DC-Synchronous */
 80019c2:	4b30      	ldr	r3, [pc, #192]	@ (8001a84 <MainLoop+0xe0>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d12e      	bne.n	8001a28 <MainLoop+0x84>
               from the ESC interrupt routine,
               in ECAT Synchron Mode it should be additionally checked, if the SM-event is received
               at least once (bEcatFirstOutputsReceived = 1), otherwise no interrupt is generated
               and the function ECAT_Application has to be called here (with interrupts disabled,
               because the SM-event could be generated while executing ECAT_Application) */
            if ( !bEscIntEnabled )
 80019ca:	4b2c      	ldr	r3, [pc, #176]	@ (8001a7c <MainLoop+0xd8>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d11e      	bne.n	8001a10 <MainLoop+0x6c>
            {
                /* application is running in ECAT FreeRun Mode,
                   first we have to check, if outputs were received */
                UINT16 ALEvent = HW_GetALEventRegister();
 80019d2:	f7fe ff6f 	bl	80008b4 <HW_GetALEventRegister>
 80019d6:	4603      	mov	r3, r0
 80019d8:	80fb      	strh	r3, [r7, #6]
                ALEvent = SWAPWORD(ALEvent);

                if ( ALEvent & PROCESS_OUTPUT_EVENT )
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d009      	beq.n	80019f8 <MainLoop+0x54>
                {
                    /* set the flag for the state machine behavior */
                    bEcatFirstOutputsReceived = TRUE;
 80019e4:	4b26      	ldr	r3, [pc, #152]	@ (8001a80 <MainLoop+0xdc>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	701a      	strb	r2, [r3, #0]
                    if ( bEcatOutputUpdateRunning )
 80019ea:	4b27      	ldr	r3, [pc, #156]	@ (8001a88 <MainLoop+0xe4>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00e      	beq.n	8001a10 <MainLoop+0x6c>
                    {
                        /* update the outputs */
                        PDO_OutputMapping();
 80019f2:	f7ff fb39 	bl	8001068 <PDO_OutputMapping>
 80019f6:	e00b      	b.n	8001a10 <MainLoop+0x6c>
                    }
                }
                else if ( nPdOutputSize == 0 )
 80019f8:	4b24      	ldr	r3, [pc, #144]	@ (8001a8c <MainLoop+0xe8>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d107      	bne.n	8001a10 <MainLoop+0x6c>
                {
                    /* if no outputs are transmitted, the watchdog must be reset, when the inputs were read */
                    if ( ALEvent & PROCESS_INPUT_EVENT )
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <MainLoop+0x6c>
                    {
                        /* Outputs were updated, set flag for watchdog monitoring */
                        bEcatFirstOutputsReceived = TRUE;
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a80 <MainLoop+0xdc>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            DISABLE_ESC_INT();
             ECAT_Application();
 8001a10:	f000 f848 	bl	8001aa4 <ECAT_Application>

/*ECATCHANGE_START(V5.13) ECAT 5*/
             if ( (bEcatInputUpdateRunning  == TRUE) && (nPdInputSize > 0))
 8001a14:	4b1e      	ldr	r3, [pc, #120]	@ (8001a90 <MainLoop+0xec>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d105      	bne.n	8001a28 <MainLoop+0x84>
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a94 <MainLoop+0xf0>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MainLoop+0x84>
/*ECATCHANGE_END(V5.13) ECAT 5*/
             {
                /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
                PDO_InputMapping();
 8001a24:	f7ff fad6 	bl	8000fd4 <PDO_InputMapping>
            ENABLE_ESC_INT();
        }

        /* there is no interrupt routine for the hardware timer so check the timer register if the desired cycle elapsed*/
        {
            UINT32 CurTimer = (UINT32)HW_GetTimer();
 8001a28:	4b1b      	ldr	r3, [pc, #108]	@ (8001a98 <MainLoop+0xf4>)
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2c:	085b      	lsrs	r3, r3, #1
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	603b      	str	r3, [r7, #0]

            if(CurTimer>= ECAT_TIMER_INC_P_MS)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f5b3 7f1c 	cmp.w	r3, #624	@ 0x270
 8001a38:	d904      	bls.n	8001a44 <MainLoop+0xa0>
            {
                ECAT_CheckTimer();
 8001a3a:	f7ff fb6d 	bl	8001118 <ECAT_CheckTimer>

                HW_ClearTimer();
 8001a3e:	4b16      	ldr	r3, [pc, #88]	@ (8001a98 <MainLoop+0xf4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	625a      	str	r2, [r3, #36]	@ 0x24
            }
        }

        if (u32CheckForDcOverrunCnt >= CHECK_DC_OVERRUN_IN_MS)
 8001a44:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <MainLoop+0xf8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001a4c:	d301      	bcc.n	8001a52 <MainLoop+0xae>
        {
            COE_SyncTimeStamp();
 8001a4e:	f7fe fffd 	bl	8000a4c <COE_SyncTimeStamp>
        }

        /* call EtherCAT functions */
        ECAT_Main();
 8001a52:	f001 ff97 	bl	8003984 <ECAT_Main>

        /* call lower prior application part */
       COE_Main();
 8001a56:	f7ff fa51 	bl	8000efc <COE_Main>
       CheckIfEcatError();
 8001a5a:	f001 fe8f 	bl	800377c <CheckIfEcatError>


    if (pAPPL_MainLoop != NULL)
 8001a5e:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <MainLoop+0xfc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <MainLoop+0xcc>
    {
        pAPPL_MainLoop();
 8001a66:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <MainLoop+0xfc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4798      	blx	r3
 8001a6c:	e000      	b.n	8001a70 <MainLoop+0xcc>
        return;
 8001a6e:	bf00      	nop
    }
}
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	240008fc 	.word	0x240008fc
 8001a7c:	2400092d 	.word	0x2400092d
 8001a80:	2400090e 	.word	0x2400090e
 8001a84:	24000910 	.word	0x24000910
 8001a88:	2400090c 	.word	0x2400090c
 8001a8c:	2400093c 	.word	0x2400093c
 8001a90:	2400090d 	.word	0x2400090d
 8001a94:	2400093a 	.word	0x2400093a
 8001a98:	40001000 	.word	0x40001000
 8001a9c:	24000844 	.word	0x24000844
 8001aa0:	2400085c 	.word	0x2400085c

08001aa4 <ECAT_Application>:
/**
 \brief    ECAT_Application (prev. SSC versions "COE_Application")
 this function calculates and the physical process signals and triggers the input mapping
*////////////////////////////////////////////////////////////////////////////////////////
void ECAT_Application(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
            u32MinCycleTimeValue = 0;
        }
    } /* measurement started*/
#endif /* (MIN_PD_CYCLE_TIME == 0)*/

    if (MEASUREMENT_ACTIVE)
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <ECAT_Application+0x30>)
 8001aaa:	8b9b      	ldrh	r3, [r3, #28]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <ECAT_Application+0x1c>
 8001ab4:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <ECAT_Application+0x34>)
 8001ab6:	8b9b      	ldrh	r3, [r3, #28]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <ECAT_Application+0x28>
    {
        if (nPdOutputSize == 0)
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <ECAT_Application+0x38>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <ECAT_Application+0x28>
        {
            /* in case of an input only device the cycle starts with an ECAT_Application call*/
            HandleCycleTimeMeasurement();
 8001ac8:	f7ff fb78 	bl	80011bc <HandleCycleTimeMeasurement>


    /*ECATCHANGE_START(V5.13) CIA402 4*/
    /*decouple CIA402 application from ESM*/
    /*ECATCHANGE_END(V5.13) CIA402 4*/
    APPL_Application();
 8001acc:	f7fe fd24 	bl	8000518 <APPL_Application>
            }
        }

    }/* measurement started*/
#endif /* #if MIN_PD_CYCLE_TIME == 0 */
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	240009ec 	.word	0x240009ec
 8001ad8:	24000a30 	.word	0x24000a30
 8001adc:	2400093c 	.word	0x2400093c

08001ae0 <COE_Init>:

 \brief    This function intialize the CoE Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Init(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
    pCoeSendStored = 0;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <COE_Init+0x1c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
    nSdoInfoFragmentsLeft = 0;
 8001aea:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <COE_Init+0x20>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	801a      	strh	r2, [r3, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	24000908 	.word	0x24000908
 8001b00:	24000a9c 	.word	0x24000a9c

08001b04 <COE_ServiceInd>:
 \brief    This function is called when a CoE (CAN application layer over EtherCAT) service is received from
             the master.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 COE_ServiceInd(TCOEMBX MBXMEM *pCoeMbx)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]

    switch ((pCoeMbx->CoeHeader & COEHEADER_COESERVICEMASK) >> COEHEADER_COESERVICESHIFT)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	88db      	ldrh	r3, [r3, #6]
 8001b14:	0b1b      	lsrs	r3, r3, #12
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	2b07      	cmp	r3, #7
 8001b1c:	d821      	bhi.n	8001b62 <COE_ServiceInd+0x5e>
 8001b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b24 <COE_ServiceInd+0x20>)
 8001b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b24:	08001b5d 	.word	0x08001b5d
 8001b28:	08001b45 	.word	0x08001b45
 8001b2c:	08001b5d 	.word	0x08001b5d
 8001b30:	08001b5d 	.word	0x08001b5d
 8001b34:	08001b5d 	.word	0x08001b5d
 8001b38:	08001b5d 	.word	0x08001b5d
 8001b3c:	08001b5d 	.word	0x08001b5d
 8001b40:	08001b51 	.word	0x08001b51
    {
    case COESERVICE_SDOREQUEST:
        /* SDO-Request received, call SDOS_SdoInd to process the SDO-Request
           if an existing SDO-Stack shall be used, the corresponding function
            should be called */
        result = SDOS_SdoInd( (TINITSDOMBX MBXMEM *) pCoeMbx );
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f004 fc67 	bl	8006418 <SDOS_SdoInd>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	73fb      	strb	r3, [r7, #15]
        break;
 8001b4e:	e00b      	b.n	8001b68 <COE_ServiceInd+0x64>

    case COESERVICE_SDOINFO:
        /* SDO-Information Request received, call SDOS_SdoInfoInd to process the SDO-Request */
        result = SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pCoeMbx );
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f005 f83b 	bl	8006bcc <SDOS_SdoInfoInd>
 8001b56:	4603      	mov	r3, r0
 8001b58:	73fb      	strb	r3, [r7, #15]
        /*NOERROR_INWORK is never returned by SDOS_SdoInfoInd() => delete return code handling*/
        break;
 8001b5a:	e005      	b.n	8001b68 <COE_ServiceInd+0x64>
    case COESERVICE_TXPDO:
    case COESERVICE_RXPDO:
    case COESERVICE_TXPDOREMREQ:
    case COESERVICE_RXPDOREMREQ:
        /* these CoE services are not supported yet */
        result = MBXERR_SERVICENOTSUPPORTED;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	73fb      	strb	r3, [r7, #15]
        break;
 8001b60:	e002      	b.n	8001b68 <COE_ServiceInd+0x64>

    default:
        result = MBXERR_INVALIDHEADER;
 8001b62:	2305      	movs	r3, #5
 8001b64:	73fb      	strb	r3, [r7, #15]
        break;
 8001b66:	bf00      	nop
    }
    return result;
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop

08001b74 <COE_ContinueInd>:
 \brief    This function is called when a CoE service to be sent is stored and can
 \brief  be put in the send mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 COE_ContinueInd(TMBX MBXMEM * pMbx)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
    if (pCoeSendStored)
 8001b7c:	4b13      	ldr	r3, [pc, #76]	@ (8001bcc <COE_ContinueInd+0x58>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00c      	beq.n	8001b9e <COE_ContinueInd+0x2a>
    {
        /* send the stored CoE service which could not be sent before */
/*ECATCHANGE_START(V5.13) COE8*/
        if (MBX_MailboxSendReq(pCoeSendStored, COE_SERVICE) == 0)
 8001b84:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <COE_ContinueInd+0x58>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2102      	movs	r1, #2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fafa 	bl	8004184 <MBX_MailboxSendReq>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d115      	bne.n	8001bc2 <COE_ContinueInd+0x4e>
        {
            pCoeSendStored = 0;
 8001b96:	4b0d      	ldr	r3, [pc, #52]	@ (8001bcc <COE_ContinueInd+0x58>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e011      	b.n	8001bc2 <COE_ContinueInd+0x4e>
    }
    else
    {
        /* send the next fragment of the last CoE service (only for SDO-Information possible) */
        /* in mailbox queue mode pMbx is always 0, so a mailbox buffer shall be get */
        pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(SIZEOF(TMBX));
 8001b9e:	2080      	movs	r0, #128	@ 0x80
 8001ba0:	f00a fc7a 	bl	800c498 <malloc>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	607b      	str	r3, [r7, #4]
        /* it shall be checked if a valid pointer was returned */
        if (pMbx == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <COE_ContinueInd+0x3e>
        {
            return MBXERR_NOMOREMEMORY;
 8001bae:	2307      	movs	r3, #7
 8001bb0:	e008      	b.n	8001bc4 <COE_ContinueInd+0x50>
        }
        else
        {
            /* copy the stored SDO-Info-Header in the request */
            MBXMEMCPY(pMbx, aSdoInfoHeader, SDO_INFO_HEADER_BYTE_SIZE);
 8001bb2:	220e      	movs	r2, #14
 8001bb4:	4906      	ldr	r1, [pc, #24]	@ (8001bd0 <COE_ContinueInd+0x5c>)
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f00a fd70 	bl	800c69c <memcpy>
            /* call SDOS_SdoInfoInd to generate and send the next fragment */
            SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pMbx );
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f005 f805 	bl	8006bcc <SDOS_SdoInfoInd>
        }
    }

    return 0;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	24000908 	.word	0x24000908
 8001bd0:	24000a88 	.word	0x24000a88

08001bd4 <ResetALEventMask>:
 \param    intMask        interrupt mask (disabled interrupt shall be zero)

 \brief    This function makes an logical and with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void ResetALEventMask(UINT16 intMask)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8001bde:	f107 030e 	add.w	r3, r7, #14
 8001be2:	2202      	movs	r2, #2
 8001be4:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fe77 	bl	80008dc <HW_EscRead>
    
    mask &= intMask;
 8001bee:	89fa      	ldrh	r2, [r7, #14]
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	81fb      	strh	r3, [r7, #14]


    DISABLE_ESC_INT();


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8001bf8:	f107 030e 	add.w	r3, r7, #14
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fe8e 	bl	8000924 <HW_EscWrite>
    ENABLE_ESC_INT();
}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <SetALEventMask>:
 \param    intMask        interrupt mask (enabled interrupt shall be one)

  \brief    This function makes an logical or with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void SetALEventMask(UINT16 intMask)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8001c1a:	f107 030e 	add.w	r3, r7, #14
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fe59 	bl	80008dc <HW_EscRead>
    

    mask |= intMask;
 8001c2a:	89fa      	ldrh	r2, [r7, #14]
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	81fb      	strh	r3, [r7, #14]

    DISABLE_ESC_INT();


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8001c34:	f107 030e 	add.w	r3, r7, #14
 8001c38:	2202      	movs	r2, #2
 8001c3a:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fe70 	bl	8000924 <HW_EscWrite>
    ENABLE_ESC_INT();
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <UpdateEEPROMLoadedState>:
/**

\brief    This function reads the EEPROM loaded state
*////////////////////////////////////////////////////////////////////////////////////////
void UpdateEEPROMLoadedState(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
    UINT16 TmpVar = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	80fb      	strh	r3, [r7, #6]
    //read EEPROM loaded information
    HW_EscReadWord(TmpVar, ESC_EEPROM_CONTROL_OFFSET);
 8001c56:	1dbb      	adds	r3, r7, #6
 8001c58:	2202      	movs	r2, #2
 8001c5a:	f240 5102 	movw	r1, #1282	@ 0x502
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fe3c 	bl	80008dc <HW_EscRead>
    TmpVar = SWAPWORD(TmpVar);
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	80fb      	strh	r3, [r7, #6]


    if (((TmpVar & ESC_EEPROM_ERROR_CRC) > 0)
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	dc04      	bgt.n	8001c7c <UpdateEEPROMLoadedState+0x30>
        || ((TmpVar & ESC_EEPROM_ERROR_LOAD) > 0))
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	dd03      	ble.n	8001c84 <UpdateEEPROMLoadedState+0x38>
    {
        EepromLoaded = FALSE;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <UpdateEEPROMLoadedState+0x48>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
 8001c82:	e003      	b.n	8001c8c <UpdateEEPROMLoadedState+0x40>
    }
    else
    {
        EepromLoaded = TRUE;
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <UpdateEEPROMLoadedState+0x48>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
    }
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	24000958 	.word	0x24000958

08001c98 <GetSyncMan>:
 \brief    This function is called to read the SYNC Manager channel descriptions of the
             process data SYNC Managers.
*////////////////////////////////////////////////////////////////////////////////////////

TSYNCMAN ESCMEM * GetSyncMan( UINT8 channel )
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
    HW_EscRead((MEM_ADDR *)&SyncManInfo, ESC_SYNCMAN_REG_OFFSET + (channel * SIZEOF_SM_REGISTER), SIZEOF_SM_REGISTER );
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	2208      	movs	r2, #8
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4804      	ldr	r0, [pc, #16]	@ (8001cc4 <GetSyncMan+0x2c>)
 8001cb4:	f7fe fe12 	bl	80008dc <HW_EscRead>



    return &SyncManInfo;
 8001cb8:	4b02      	ldr	r3, [pc, #8]	@ (8001cc4 <GetSyncMan+0x2c>)
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	24000950 	.word	0x24000950

08001cc8 <DisableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function disables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void DisableSyncManChannel(UINT8 channel)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    //The register 0x806 is only readable from PDI => writing 0 is valid
    VARVOLATILE UINT16 smStatus = SM_SETTING_PDI_DISABLE;
 8001cd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cd6:	81bb      	strh	r3, [r7, #12]
    Offset = (ESC_SYNCMAN_ACTIVE_OFFSET + (SIZEOF_SM_REGISTER*channel));
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	f603 0306 	addw	r3, r3, #2054	@ 0x806
 8001ce4:	81fb      	strh	r3, [r7, #14]


    HW_EscWriteWord(smStatus,Offset);
 8001ce6:	89f9      	ldrh	r1, [r7, #14]
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	2202      	movs	r2, #2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fe18 	bl	8000924 <HW_EscWrite>
    
    /*wait until SyncManager is disabled*/
    do
    {
        HW_EscReadWord(smStatus, Offset);
 8001cf4:	89f9      	ldrh	r1, [r7, #14]
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fded 	bl	80008dc <HW_EscRead>
    }while(!(smStatus & SM_SETTING_PDI_DISABLE));
 8001d02:	89bb      	ldrh	r3, [r7, #12]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f2      	beq.n	8001cf4 <DisableSyncManChannel+0x2c>
}
 8001d0e:	bf00      	nop
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <EnableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function enables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void EnableSyncManChannel(UINT8 channel)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    //The register 0x806 is only readable from PDI => writing 0 is valid
    VARVOLATILE UINT16 smStatus = 0x0000;
 8001d22:	2300      	movs	r3, #0
 8001d24:	81bb      	strh	r3, [r7, #12]
    Offset = (ESC_SYNCMAN_ACTIVE_OFFSET + (SIZEOF_SM_REGISTER*channel));
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f603 0306 	addw	r3, r3, #2054	@ 0x806
 8001d32:	81fb      	strh	r3, [r7, #14]


    HW_EscWriteWord(smStatus,Offset);
 8001d34:	89f9      	ldrh	r1, [r7, #14]
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fdf1 	bl	8000924 <HW_EscWrite>
    
    /*wait until SyncManager is enabled*/
    do
    {
        HW_EscReadWord(smStatus,Offset);
 8001d42:	89f9      	ldrh	r1, [r7, #14]
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	2202      	movs	r2, #2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fdc6 	bl	80008dc <HW_EscRead>

    }while((smStatus & SM_SETTING_PDI_DISABLE));
 8001d50:	89bb      	ldrh	r3, [r7, #12]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f2      	bne.n	8001d42 <EnableSyncManChannel+0x2a>
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <CheckSmSettings>:
 \brief    This function checks all SM channels

*////////////////////////////////////////////////////////////////////////////////////////

UINT8    CheckSmSettings(UINT8 maxChannel)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
    UINT8 i;
    UINT8 result = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	75bb      	strb	r3, [r7, #22]
    TSYNCMAN ESCMEM *pSyncMan;
    UINT16 SMLength = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	82bb      	strh	r3, [r7, #20]
    UINT16 SMAddress = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	827b      	strh	r3, [r7, #18]


        //Check if max address defines are within the available ESC address range
        if ((nMaxEscAddress < MAX_PD_WRITE_ADDRESS)
 8001d7e:	4b91      	ldr	r3, [pc, #580]	@ (8001fc4 <CheckSmSettings+0x25c>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	f642 72fe 	movw	r2, #12286	@ 0x2ffe
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d911      	bls.n	8001dae <CheckSmSettings+0x46>
            || (nMaxEscAddress < MAX_PD_READ_ADDRESS)
 8001d8a:	4b8e      	ldr	r3, [pc, #568]	@ (8001fc4 <CheckSmSettings+0x25c>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	f642 72fe 	movw	r2, #12286	@ 0x2ffe
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d90b      	bls.n	8001dae <CheckSmSettings+0x46>
            || (nMaxEscAddress < MAX_MBX_WRITE_ADDRESS)
 8001d96:	4b8b      	ldr	r3, [pc, #556]	@ (8001fc4 <CheckSmSettings+0x25c>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	f642 72fe 	movw	r2, #12286	@ 0x2ffe
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d905      	bls.n	8001dae <CheckSmSettings+0x46>
            || (nMaxEscAddress < MAX_MBX_READ_ADDRESS))
 8001da2:	4b88      	ldr	r3, [pc, #544]	@ (8001fc4 <CheckSmSettings+0x25c>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	f642 72fe 	movw	r2, #12286	@ 0x2ffe
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d801      	bhi.n	8001db2 <CheckSmSettings+0x4a>
        {
            /*The defines for maximum SM addresses are invalid for the used ESC (change the defines in the file ecat_def.h or the SSC Tool)
            It may be also required to adapt the SM settings in the ESI file*/


                return ALSTATUSCODE_NOVALIDFIRMWARE;
 8001dae:	2314      	movs	r3, #20
 8001db0:	e186      	b.n	80020c0 <CheckSmSettings+0x358>
        }

    /* check the Sync Manager Parameter for the Receive Mailbox (Sync Manager Channel 0) */
    pSyncMan = GetSyncMan(MAILBOX_WRITE);
 8001db2:	2000      	movs	r0, #0
 8001db4:	f7ff ff70 	bl	8001c98 <GetSyncMan>
 8001db8:	60f8      	str	r0, [r7, #12]

    SMLength = pSyncMan->Length;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	885b      	ldrh	r3, [r3, #2]
 8001dbe:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	827b      	strh	r3, [r7, #18]



    if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	88db      	ldrh	r3, [r3, #6]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <CheckSmSettings+0x70>
    {
        /* receive mailbox is not enabled */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001dd2:	2316      	movs	r3, #22
 8001dd4:	75bb      	strb	r3, [r7, #22]
 8001dd6:	e02a      	b.n	8001e2e <CheckSmSettings+0xc6>
    }
    else if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_WRITE_VALUE)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	889b      	ldrh	r3, [r3, #4]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d002      	beq.n	8001dea <CheckSmSettings+0x82>
    {
        /* receive mailbox is not writable by the master*/
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001de4:	2316      	movs	r3, #22
 8001de6:	75bb      	strb	r3, [r7, #22]
 8001de8:	e021      	b.n	8001e2e <CheckSmSettings+0xc6>
    }
    else if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	889b      	ldrh	r3, [r3, #4]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <CheckSmSettings+0x94>
    {
        /* receive mailbox is not in one buffer mode */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001df6:	2316      	movs	r3, #22
 8001df8:	75bb      	strb	r3, [r7, #22]
 8001dfa:	e018      	b.n	8001e2e <CheckSmSettings+0xc6>
    }
    else if (SMLength < MIN_MBX_SIZE)
 8001dfc:	8abb      	ldrh	r3, [r7, #20]
 8001dfe:	2b23      	cmp	r3, #35	@ 0x23
 8001e00:	d802      	bhi.n	8001e08 <CheckSmSettings+0xa0>
    {
        /* receive mailbox size is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001e02:	2316      	movs	r3, #22
 8001e04:	75bb      	strb	r3, [r7, #22]
 8001e06:	e012      	b.n	8001e2e <CheckSmSettings+0xc6>
    }
    else if (SMLength > MAX_MBX_SIZE)
 8001e08:	8abb      	ldrh	r3, [r7, #20]
 8001e0a:	2b80      	cmp	r3, #128	@ 0x80
 8001e0c:	d902      	bls.n	8001e14 <CheckSmSettings+0xac>
    {
        /* receive mailbox size is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001e0e:	2316      	movs	r3, #22
 8001e10:	75bb      	strb	r3, [r7, #22]
 8001e12:	e00c      	b.n	8001e2e <CheckSmSettings+0xc6>
    }
    else if (SMAddress < MIN_MBX_WRITE_ADDRESS)
 8001e14:	8a7b      	ldrh	r3, [r7, #18]
 8001e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e1a:	d202      	bcs.n	8001e22 <CheckSmSettings+0xba>
    {
        /* receive mailbox address is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001e1c:	2316      	movs	r3, #22
 8001e1e:	75bb      	strb	r3, [r7, #22]
 8001e20:	e005      	b.n	8001e2e <CheckSmSettings+0xc6>
    }
    else if (SMAddress > MAX_MBX_WRITE_ADDRESS)
 8001e22:	8a7b      	ldrh	r3, [r7, #18]
 8001e24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001e28:	d301      	bcc.n	8001e2e <CheckSmSettings+0xc6>
    {
        /* receive mailbox address is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001e2a:	2316      	movs	r3, #22
 8001e2c:	75bb      	strb	r3, [r7, #22]
    }


    if ( result == 0 )
 8001e2e:	7dbb      	ldrb	r3, [r7, #22]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d13d      	bne.n	8001eb0 <CheckSmSettings+0x148>
    {
        /* check the Sync Manager Parameter for the Send Mailbox (Sync Manager Channel 1) */
        pSyncMan = GetSyncMan(MAILBOX_READ);
 8001e34:	2001      	movs	r0, #1
 8001e36:	f7ff ff2f 	bl	8001c98 <GetSyncMan>
 8001e3a:	60f8      	str	r0, [r7, #12]

    SMLength = pSyncMan->Length;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	885b      	ldrh	r3, [r3, #2]
 8001e40:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	827b      	strh	r3, [r7, #18]


    if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	88db      	ldrh	r3, [r3, #6]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <CheckSmSettings+0xf2>
    {
        /* send mailbox is not enabled */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001e54:	2316      	movs	r3, #22
 8001e56:	75bb      	strb	r3, [r7, #22]
 8001e58:	e02a      	b.n	8001eb0 <CheckSmSettings+0x148>
    }
    else if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_READ_VALUE)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	889b      	ldrh	r3, [r3, #4]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <CheckSmSettings+0x104>
    {
        /* receive mailbox is not readable by the master*/
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001e66:	2316      	movs	r3, #22
 8001e68:	75bb      	strb	r3, [r7, #22]
 8001e6a:	e021      	b.n	8001eb0 <CheckSmSettings+0x148>
    }
    else if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	889b      	ldrh	r3, [r3, #4]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <CheckSmSettings+0x116>
    {
        /* receive mailbox is not in one buffer mode */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001e78:	2316      	movs	r3, #22
 8001e7a:	75bb      	strb	r3, [r7, #22]
 8001e7c:	e018      	b.n	8001eb0 <CheckSmSettings+0x148>
    }
    else if (SMLength < MIN_MBX_SIZE)
 8001e7e:	8abb      	ldrh	r3, [r7, #20]
 8001e80:	2b23      	cmp	r3, #35	@ 0x23
 8001e82:	d802      	bhi.n	8001e8a <CheckSmSettings+0x122>
    {
        /* send mailbox size is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001e84:	2316      	movs	r3, #22
 8001e86:	75bb      	strb	r3, [r7, #22]
 8001e88:	e012      	b.n	8001eb0 <CheckSmSettings+0x148>
    }
    else if (SMLength > MAX_MBX_SIZE)
 8001e8a:	8abb      	ldrh	r3, [r7, #20]
 8001e8c:	2b80      	cmp	r3, #128	@ 0x80
 8001e8e:	d902      	bls.n	8001e96 <CheckSmSettings+0x12e>
    {
        /* send mailbox size is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001e90:	2316      	movs	r3, #22
 8001e92:	75bb      	strb	r3, [r7, #22]
 8001e94:	e00c      	b.n	8001eb0 <CheckSmSettings+0x148>
    }
    else if (SMAddress < MIN_MBX_READ_ADDRESS)
 8001e96:	8a7b      	ldrh	r3, [r7, #18]
 8001e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e9c:	d202      	bcs.n	8001ea4 <CheckSmSettings+0x13c>
    {
        /* send mailbox address is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001e9e:	2316      	movs	r3, #22
 8001ea0:	75bb      	strb	r3, [r7, #22]
 8001ea2:	e005      	b.n	8001eb0 <CheckSmSettings+0x148>
    }
    else if (SMAddress > MAX_MBX_READ_ADDRESS)
 8001ea4:	8a7b      	ldrh	r3, [r7, #18]
 8001ea6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001eaa:	d301      	bcc.n	8001eb0 <CheckSmSettings+0x148>
    {
        /* send mailbox address is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001eac:	2316      	movs	r3, #22
 8001eae:	75bb      	strb	r3, [r7, #22]
    }
    }

    if ( result == 0 && maxChannel > PROCESS_DATA_IN )
 8001eb0:	7dbb      	ldrb	r3, [r7, #22]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d169      	bne.n	8001f8a <CheckSmSettings+0x222>
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d966      	bls.n	8001f8a <CheckSmSettings+0x222>
    {
        /* b3BufferMode is only set, if inputs and outputs are running in 3-Buffer-Mode when leaving this function */
        b3BufferMode = TRUE;
 8001ebc:	4b42      	ldr	r3, [pc, #264]	@ (8001fc8 <CheckSmSettings+0x260>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
        /* check the Sync Manager Parameter for the Inputs (Sync Manager Channel 2 (0 in case if no mailbox is supported)) */
        pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 8001ec2:	2003      	movs	r0, #3
 8001ec4:	f7ff fee8 	bl	8001c98 <GetSyncMan>
 8001ec8:	60f8      	str	r0, [r7, #12]

    SMLength = pSyncMan->Length;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	885b      	ldrh	r3, [r3, #2]
 8001ece:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	827b      	strh	r3, [r7, #18]



    if ((pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	88db      	ldrh	r3, [r3, #6]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <CheckSmSettings+0x186>
 8001ee2:	8abb      	ldrh	r3, [r7, #20]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <CheckSmSettings+0x186>
    {
        /* the SM3 size is 0 and the SM3 is active */
        result = SYNCMANCHSETTINGS + 1;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	75bb      	strb	r3, [r7, #22]
 8001eec:	e048      	b.n	8001f80 <CheckSmSettings+0x218>
    }
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	88db      	ldrh	r3, [r3, #6]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d039      	beq.n	8001f6e <CheckSmSettings+0x206>
        {
            /* Sync Manager Channel 3 is active, input size has to greater 0 */
                if (SMLength != nPdInputSize || nPdInputSize == 0 || SMLength > MAX_PD_INPUT_SIZE)
 8001efa:	4b34      	ldr	r3, [pc, #208]	@ (8001fcc <CheckSmSettings+0x264>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	8aba      	ldrh	r2, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d106      	bne.n	8001f12 <CheckSmSettings+0x1aa>
 8001f04:	4b31      	ldr	r3, [pc, #196]	@ (8001fcc <CheckSmSettings+0x264>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <CheckSmSettings+0x1aa>
 8001f0c:	8abb      	ldrh	r3, [r7, #20]
 8001f0e:	2b44      	cmp	r3, #68	@ 0x44
 8001f10:	d902      	bls.n	8001f18 <CheckSmSettings+0x1b0>
                {
                    /* sizes don't match */
                    result = SYNCMANCHSIZE + 1;
 8001f12:	2301      	movs	r3, #1
 8001f14:	75bb      	strb	r3, [r7, #22]
 8001f16:	e033      	b.n	8001f80 <CheckSmSettings+0x218>
                }
                else
                {
                    /* sizes matches */
                    if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_READ_VALUE)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	889b      	ldrh	r3, [r3, #4]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d121      	bne.n	8001f68 <CheckSmSettings+0x200>
                    {
                        /* settings match */
                        if (((nAlStatus == STATE_PREOP) && (SMAddress >= MIN_PD_READ_ADDRESS) && (SMAddress <= MAX_PD_READ_ADDRESS))
 8001f24:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd0 <CheckSmSettings+0x268>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d107      	bne.n	8001f3c <CheckSmSettings+0x1d4>
 8001f2c:	8a7b      	ldrh	r3, [r7, #18]
 8001f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f32:	d303      	bcc.n	8001f3c <CheckSmSettings+0x1d4>
 8001f34:	8a7b      	ldrh	r3, [r7, #18]
 8001f36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001f3a:	d308      	bcc.n	8001f4e <CheckSmSettings+0x1e6>
                            || ((nAlStatus != STATE_PREOP) && (SMAddress == nEscAddrInputData))
 8001f3c:	4b24      	ldr	r3, [pc, #144]	@ (8001fd0 <CheckSmSettings+0x268>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d00e      	beq.n	8001f62 <CheckSmSettings+0x1fa>
 8001f44:	4b23      	ldr	r3, [pc, #140]	@ (8001fd4 <CheckSmSettings+0x26c>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	8a7a      	ldrh	r2, [r7, #18]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d109      	bne.n	8001f62 <CheckSmSettings+0x1fa>
                            )
                        {
                            /* addresses match */

                                if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	889b      	ldrh	r3, [r3, #4]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d012      	beq.n	8001f80 <CheckSmSettings+0x218>
                                {
                                    /* inputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                                    b3BufferMode = FALSE;
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc8 <CheckSmSettings+0x260>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
                                if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8001f60:	e00e      	b.n	8001f80 <CheckSmSettings+0x218>
                                }
                        }
                        else
                        {
                            /* input address is out of the allowed area or has changed in SAFEOP or OP */
                            result = SYNCMANCHADDRESS + 1;
 8001f62:	2302      	movs	r3, #2
 8001f64:	75bb      	strb	r3, [r7, #22]
 8001f66:	e00b      	b.n	8001f80 <CheckSmSettings+0x218>
                        }
                    }
                    else
                    {
                        /* input settings do not match */
                        result = SYNCMANCHSETTINGS + 1;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	75bb      	strb	r3, [r7, #22]
 8001f6c:	e008      	b.n	8001f80 <CheckSmSettings+0x218>
                    }
                }
        }
        else if (SMLength != 0 || nPdInputSize != 0)
 8001f6e:	8abb      	ldrh	r3, [r7, #20]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d103      	bne.n	8001f7c <CheckSmSettings+0x214>
 8001f74:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <CheckSmSettings+0x264>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <CheckSmSettings+0x218>
        {
            /* input size is not zero although the SM3 channel is not enabled */
            result = SYNCMANCHSIZE + 1;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	75bb      	strb	r3, [r7, #22]
        }



        if ( result != 0 )
 8001f80:	7dbb      	ldrb	r3, [r7, #22]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <CheckSmSettings+0x222>
        {
            result = ALSTATUSCODE_INVALIDSMINCFG;
 8001f86:	231e      	movs	r3, #30
 8001f88:	75bb      	strb	r3, [r7, #22]
        }
    }


//    else
    if (result == 0 && maxChannel > PROCESS_DATA_OUT)
 8001f8a:	7dbb      	ldrb	r3, [r7, #22]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d17f      	bne.n	8002090 <CheckSmSettings+0x328>
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d97c      	bls.n	8002090 <CheckSmSettings+0x328>
    {
        /* check the Sync Manager Parameter for the Outputs (Sync Manager Channel 2) */
        pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 8001f96:	2002      	movs	r0, #2
 8001f98:	f7ff fe7e 	bl	8001c98 <GetSyncMan>
 8001f9c:	60f8      	str	r0, [r7, #12]

    SMLength = pSyncMan->Length;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	885b      	ldrh	r3, [r3, #2]
 8001fa2:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	827b      	strh	r3, [r7, #18]



    if ((pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	88db      	ldrh	r3, [r3, #6]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d010      	beq.n	8001fd8 <CheckSmSettings+0x270>
 8001fb6:	8abb      	ldrh	r3, [r7, #20]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10d      	bne.n	8001fd8 <CheckSmSettings+0x270>
    {
        /* the SM2 size is 0 and the SM2 is active */
        result = SYNCMANCHSETTINGS + 1;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	75bb      	strb	r3, [r7, #22]
 8001fc0:	e061      	b.n	8002086 <CheckSmSettings+0x31e>
 8001fc2:	bf00      	nop
 8001fc4:	24000940 	.word	0x24000940
 8001fc8:	2400092e 	.word	0x2400092e
 8001fcc:	2400093a 	.word	0x2400093a
 8001fd0:	24000942 	.word	0x24000942
 8001fd4:	24000948 	.word	0x24000948
    }
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	88db      	ldrh	r3, [r3, #6]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d047      	beq.n	8002074 <CheckSmSettings+0x30c>
        {
            /* Sync Manager Channel 2 is active, output size has to greater 0 */
            if ( SMLength == nPdOutputSize && nPdOutputSize != 0 && SMLength <= ((UINT16)MAX_PD_OUTPUT_SIZE))
 8001fe4:	4b38      	ldr	r3, [pc, #224]	@ (80020c8 <CheckSmSettings+0x360>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	8aba      	ldrh	r2, [r7, #20]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d13f      	bne.n	800206e <CheckSmSettings+0x306>
 8001fee:	4b36      	ldr	r3, [pc, #216]	@ (80020c8 <CheckSmSettings+0x360>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d03b      	beq.n	800206e <CheckSmSettings+0x306>
 8001ff6:	8abb      	ldrh	r3, [r7, #20]
 8001ff8:	2b44      	cmp	r3, #68	@ 0x44
 8001ffa:	d838      	bhi.n	800206e <CheckSmSettings+0x306>
            {
                /* sizes match */
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	889b      	ldrh	r3, [r3, #4]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b04      	cmp	r3, #4
 8002006:	d12e      	bne.n	8002066 <CheckSmSettings+0x2fe>
                {
                    /* settings match */
                    if ( ( ( nAlStatus == STATE_PREOP )&&( SMAddress >= MIN_PD_WRITE_ADDRESS )&&( SMAddress <= MAX_PD_WRITE_ADDRESS ) )
 8002008:	4b30      	ldr	r3, [pc, #192]	@ (80020cc <CheckSmSettings+0x364>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d107      	bne.n	8002020 <CheckSmSettings+0x2b8>
 8002010:	8a7b      	ldrh	r3, [r7, #18]
 8002012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002016:	d303      	bcc.n	8002020 <CheckSmSettings+0x2b8>
 8002018:	8a7b      	ldrh	r3, [r7, #18]
 800201a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800201e:	d308      	bcc.n	8002032 <CheckSmSettings+0x2ca>
                       ||( ( nAlStatus != STATE_PREOP )&&( SMAddress == nEscAddrOutputData ) )
 8002020:	4b2a      	ldr	r3, [pc, #168]	@ (80020cc <CheckSmSettings+0x364>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d01b      	beq.n	8002060 <CheckSmSettings+0x2f8>
 8002028:	4b29      	ldr	r3, [pc, #164]	@ (80020d0 <CheckSmSettings+0x368>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	8a7a      	ldrh	r2, [r7, #18]
 800202e:	429a      	cmp	r2, r3
 8002030:	d116      	bne.n	8002060 <CheckSmSettings+0x2f8>
                        )
                    {
                        /* addresses match */
                        {
                            /* check, if watchdog trigger is enabled */
                            if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_WATCHDOG_VALUE)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	889b      	ldrh	r3, [r3, #4]
 8002036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <CheckSmSettings+0x2de>
                            {
                                bWdTrigger = TRUE;
 800203e:	4b25      	ldr	r3, [pc, #148]	@ (80020d4 <CheckSmSettings+0x36c>)
 8002040:	2201      	movs	r2, #1
 8002042:	701a      	strb	r2, [r3, #0]
 8002044:	e002      	b.n	800204c <CheckSmSettings+0x2e4>
                            }
                            else
                            {
                                bWdTrigger = FALSE;
 8002046:	4b23      	ldr	r3, [pc, #140]	@ (80020d4 <CheckSmSettings+0x36c>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
                            }

                            if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	889b      	ldrh	r3, [r3, #4]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d009      	beq.n	800206c <CheckSmSettings+0x304>
                            {
                                /* outputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                                b3BufferMode = FALSE;
 8002058:	4b1f      	ldr	r3, [pc, #124]	@ (80020d8 <CheckSmSettings+0x370>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
                            if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE)
 800205e:	e005      	b.n	800206c <CheckSmSettings+0x304>
                        }
                    }
                    else
                    {
                        /* output address is out of the allowed area or has changed in SAFEOP or OP */
                        result = SYNCMANCHADDRESS + 1;
 8002060:	2302      	movs	r3, #2
 8002062:	75bb      	strb	r3, [r7, #22]
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 8002064:	e00f      	b.n	8002086 <CheckSmSettings+0x31e>
                    }
                }
                else
                {
                    /* output settings do not match */
                    result = SYNCMANCHSETTINGS + 1;
 8002066:	2303      	movs	r3, #3
 8002068:	75bb      	strb	r3, [r7, #22]
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 800206a:	e00c      	b.n	8002086 <CheckSmSettings+0x31e>
 800206c:	e00b      	b.n	8002086 <CheckSmSettings+0x31e>
                }
            }
            else
            {
                /* output sizes don't match */
                result = SYNCMANCHSIZE + 1;
 800206e:	2301      	movs	r3, #1
 8002070:	75bb      	strb	r3, [r7, #22]
 8002072:	e008      	b.n	8002086 <CheckSmSettings+0x31e>
            }
        }
        else if (SMLength != 0 || nPdOutputSize != 0)
 8002074:	8abb      	ldrh	r3, [r7, #20]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d103      	bne.n	8002082 <CheckSmSettings+0x31a>
 800207a:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <CheckSmSettings+0x360>)
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <CheckSmSettings+0x31e>
        {
            /* output size is not zero although the SM2 channel is not enabled */
            result = SYNCMANCHSIZE + 1;
 8002082:	2301      	movs	r3, #1
 8002084:	75bb      	strb	r3, [r7, #22]
        }

        if ( result != 0 )
 8002086:	7dbb      	ldrb	r3, [r7, #22]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <CheckSmSettings+0x328>
        {
            result = ALSTATUSCODE_INVALIDSMOUTCFG;
 800208c:	231d      	movs	r3, #29
 800208e:	75bb      	strb	r3, [r7, #22]
        }
    }


    if ( result == 0 )
 8002090:	7dbb      	ldrb	r3, [r7, #22]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d113      	bne.n	80020be <CheckSmSettings+0x356>
    {
        /* the Enable-Byte of the rest of the SM channels has to be read to acknowledge the SM-Change-Interrupt */
        for (i = maxChannel; i < nMaxSyncMan; i++)
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	75fb      	strb	r3, [r7, #23]
 800209a:	e00b      	b.n	80020b4 <CheckSmSettings+0x34c>
        {
            pSyncMan = GetSyncMan(i);
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fdfa 	bl	8001c98 <GetSyncMan>
 80020a4:	60f8      	str	r0, [r7, #12]
            SMActivate = pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET];
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	88da      	ldrh	r2, [r3, #6]
 80020aa:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <CheckSmSettings+0x374>)
 80020ac:	801a      	strh	r2, [r3, #0]
        for (i = maxChannel; i < nMaxSyncMan; i++)
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
 80020b0:	3301      	adds	r3, #1
 80020b2:	75fb      	strb	r3, [r7, #23]
 80020b4:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <CheckSmSettings+0x378>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	7dfa      	ldrb	r2, [r7, #23]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3ee      	bcc.n	800209c <CheckSmSettings+0x334>
        }
    }
    return result;
 80020be:	7dbb      	ldrb	r3, [r7, #22]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	2400093c 	.word	0x2400093c
 80020cc:	24000942 	.word	0x24000942
 80020d0:	24000946 	.word	0x24000946
 80020d4:	2400090f 	.word	0x2400090f
 80020d8:	2400092e 	.word	0x2400092e
 80020dc:	2400094e 	.word	0x2400094e
 80020e0:	2400093e 	.word	0x2400093e

080020e4 <StartInputHandler>:
 \brief  and the AL Event Mask register will be set

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartInputHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08e      	sub	sp, #56	@ 0x38
 80020e8:	af00      	add	r7, sp, #0
    TSYNCMAN ESCMEM * pSyncMan;

    UINT16        dcControl;

    UINT16     wdiv = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	823b      	strh	r3, [r7, #16]
    UINT16     wd = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	81fb      	strh	r3, [r7, #14]
    UINT32     cycleTimeSync0 = 0; /* Sync0 cycle time */
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
    UINT32     shiftTimeSync1 = 0; /* Delay between the Sync0 and Sycn1 signal. A new Sync1 cycle starts on the next Sync0 signal after Sync1 signal.*/
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
    BOOL bSubordinatedCycles = FALSE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    UINT16    nPdInputBuffer = 3;
 8002100:	2303      	movs	r3, #3
 8002102:	86bb      	strh	r3, [r7, #52]	@ 0x34

    UINT16    nPdOutputBuffer = 3;
 8002104:	2303      	movs	r3, #3
 8002106:	867b      	strh	r3, [r7, #50]	@ 0x32

    UINT16 SyncType0x1C32 = 0; /* Helper variable for sync type for SM2 (required if no CoE is supported or no output process data available)*/
 8002108:	2300      	movs	r3, #0
 800210a:	863b      	strh	r3, [r7, #48]	@ 0x30
    UINT16 SyncType0x1C33 = 0; /* Helper variable for sync type for SM3 (required if no CoE is supported or no input process data available)*/
 800210c:	2300      	movs	r3, #0
 800210e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    UINT16 u16MinSuppSyncType = 0xFFFF;  /* Minimum supported Sync Types */
 8002110:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002114:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    u16MinSuppSyncType &= sSyncManOutPar.u16SyncTypesSupported;
 8002116:	4b9b      	ldr	r3, [pc, #620]	@ (8002384 <StartInputHandler+0x2a0>)
 8002118:	899a      	ldrh	r2, [r3, #12]
 800211a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800211c:	4013      	ands	r3, r2
 800211e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    u16MinSuppSyncType &= sSyncManInPar.u16SyncTypesSupported;
 8002120:	4b99      	ldr	r3, [pc, #612]	@ (8002388 <StartInputHandler+0x2a4>)
 8002122:	899a      	ldrh	r2, [r3, #12]
 8002124:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002126:	4013      	ands	r3, r2
 8002128:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    u16ALEventMask = 0;
 800212a:	4b98      	ldr	r3, [pc, #608]	@ (800238c <StartInputHandler+0x2a8>)
 800212c:	2200      	movs	r2, #0
 800212e:	801a      	strh	r2, [r3, #0]


    /* 
        --- Check if SyncManager areas overlapping --- 
    */
    bEcatFirstOutputsReceived = FALSE;
 8002130:	4b97      	ldr	r3, [pc, #604]	@ (8002390 <StartInputHandler+0x2ac>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]

    /* get a pointer to the Sync Manager Channel 2 (Outputs) */
    pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 8002136:	2002      	movs	r0, #2
 8002138:	f7ff fdae 	bl	8001c98 <GetSyncMan>
 800213c:	62b8      	str	r0, [r7, #40]	@ 0x28
    /* store the address of the Sync Manager Channel 2 (Outputs) */
    nEscAddrOutputData = pSyncMan->PhysicalStartAddress;
 800213e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002140:	881a      	ldrh	r2, [r3, #0]
 8002142:	4b94      	ldr	r3, [pc, #592]	@ (8002394 <StartInputHandler+0x2b0>)
 8002144:	801a      	strh	r2, [r3, #0]
    /* get the number of output buffer used for calculating the address areas */
    if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8002146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002148:	889b      	ldrh	r3, [r3, #4]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <StartInputHandler+0x72>
    {
       nPdOutputBuffer = 1;
 8002152:	2301      	movs	r3, #1
 8002154:	867b      	strh	r3, [r7, #50]	@ 0x32
    }


    /* get a pointer to the Sync Manager Channel 3 (Inputs) */
    pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 8002156:	2003      	movs	r0, #3
 8002158:	f7ff fd9e 	bl	8001c98 <GetSyncMan>
 800215c:	62b8      	str	r0, [r7, #40]	@ 0x28
    /* store the address of the Sync Manager Channel 3 (Inputs)*/
    nEscAddrInputData = pSyncMan->PhysicalStartAddress;
 800215e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002160:	881a      	ldrh	r2, [r3, #0]
 8002162:	4b8d      	ldr	r3, [pc, #564]	@ (8002398 <StartInputHandler+0x2b4>)
 8002164:	801a      	strh	r2, [r3, #0]


    /* get the number of input buffer used for calculating the address areas */
    if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8002166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002168:	889b      	ldrh	r3, [r3, #4]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <StartInputHandler+0x92>
    {
        nPdInputBuffer = 1;
 8002172:	2301      	movs	r3, #1
 8002174:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    /* it has be checked if the Sync Manager memory areas for Inputs and Outputs will not overlap
       the Sync Manager memory areas for the Mailbox */

    if (((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrSendMbx && (nEscAddrInputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8002176:	4b88      	ldr	r3, [pc, #544]	@ (8002398 <StartInputHandler+0x2b4>)
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	4b87      	ldr	r3, [pc, #540]	@ (800239c <StartInputHandler+0x2b8>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	4413      	add	r3, r2
 800218a:	4a85      	ldr	r2, [pc, #532]	@ (80023a0 <StartInputHandler+0x2bc>)
 800218c:	8812      	ldrh	r2, [r2, #0]
 800218e:	4293      	cmp	r3, r2
 8002190:	dd0a      	ble.n	80021a8 <StartInputHandler+0xc4>
 8002192:	4b81      	ldr	r3, [pc, #516]	@ (8002398 <StartInputHandler+0x2b4>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	4b81      	ldr	r3, [pc, #516]	@ (80023a0 <StartInputHandler+0x2bc>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	4619      	mov	r1, r3
 800219e:	4b81      	ldr	r3, [pc, #516]	@ (80023a4 <StartInputHandler+0x2c0>)
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	440b      	add	r3, r1
 80021a4:	429a      	cmp	r2, r3
 80021a6:	db18      	blt.n	80021da <StartInputHandler+0xf6>
       || ((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrReceiveMbx && (nEscAddrInputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 80021a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002398 <StartInputHandler+0x2b4>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b7b      	ldr	r3, [pc, #492]	@ (800239c <StartInputHandler+0x2b8>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	4619      	mov	r1, r3
 80021b4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	4a7a      	ldr	r2, [pc, #488]	@ (80023a8 <StartInputHandler+0x2c4>)
 80021be:	8812      	ldrh	r2, [r2, #0]
 80021c0:	4293      	cmp	r3, r2
 80021c2:	dd0c      	ble.n	80021de <StartInputHandler+0xfa>
 80021c4:	4b74      	ldr	r3, [pc, #464]	@ (8002398 <StartInputHandler+0x2b4>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b77      	ldr	r3, [pc, #476]	@ (80023a8 <StartInputHandler+0x2c4>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	4619      	mov	r1, r3
 80021d0:	4b76      	ldr	r3, [pc, #472]	@ (80023ac <StartInputHandler+0x2c8>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	440b      	add	r3, r1
 80021d6:	429a      	cmp	r2, r3
 80021d8:	da01      	bge.n	80021de <StartInputHandler+0xfa>
        )
    {
        return ALSTATUSCODE_INVALIDSMINCFG;
 80021da:	231e      	movs	r3, #30
 80021dc:	e378      	b.n	80028d0 <StartInputHandler+0x7ec>
    }

    if (
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 80021de:	4b6d      	ldr	r3, [pc, #436]	@ (8002394 <StartInputHandler+0x2b0>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	4b72      	ldr	r3, [pc, #456]	@ (80023b0 <StartInputHandler+0x2cc>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	4619      	mov	r1, r3
 80021ea:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	4a6b      	ldr	r2, [pc, #428]	@ (80023a0 <StartInputHandler+0x2bc>)
 80021f4:	8812      	ldrh	r2, [r2, #0]
    if (
 80021f6:	4293      	cmp	r3, r2
 80021f8:	dd0a      	ble.n	8002210 <StartInputHandler+0x12c>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 80021fa:	4b66      	ldr	r3, [pc, #408]	@ (8002394 <StartInputHandler+0x2b0>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	4b67      	ldr	r3, [pc, #412]	@ (80023a0 <StartInputHandler+0x2bc>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
 8002206:	4b67      	ldr	r3, [pc, #412]	@ (80023a4 <StartInputHandler+0x2c0>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	440b      	add	r3, r1
 800220c:	429a      	cmp	r2, r3
 800220e:	db31      	blt.n	8002274 <StartInputHandler+0x190>
        ||((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrReceiveMbx && (nEscAddrOutputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 8002210:	4b60      	ldr	r3, [pc, #384]	@ (8002394 <StartInputHandler+0x2b0>)
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b66      	ldr	r3, [pc, #408]	@ (80023b0 <StartInputHandler+0x2cc>)
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	4619      	mov	r1, r3
 800221c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	4a60      	ldr	r2, [pc, #384]	@ (80023a8 <StartInputHandler+0x2c4>)
 8002226:	8812      	ldrh	r2, [r2, #0]
 8002228:	4293      	cmp	r3, r2
 800222a:	dd0a      	ble.n	8002242 <StartInputHandler+0x15e>
 800222c:	4b59      	ldr	r3, [pc, #356]	@ (8002394 <StartInputHandler+0x2b0>)
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b5d      	ldr	r3, [pc, #372]	@ (80023a8 <StartInputHandler+0x2c4>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	4619      	mov	r1, r3
 8002238:	4b5c      	ldr	r3, [pc, #368]	@ (80023ac <StartInputHandler+0x2c8>)
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	440b      	add	r3, r1
 800223e:	429a      	cmp	r2, r3
 8002240:	db18      	blt.n	8002274 <StartInputHandler+0x190>
        ||
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 8002242:	4b54      	ldr	r3, [pc, #336]	@ (8002394 <StartInputHandler+0x2b0>)
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	4b59      	ldr	r3, [pc, #356]	@ (80023b0 <StartInputHandler+0x2cc>)
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	4413      	add	r3, r2
 8002256:	4a50      	ldr	r2, [pc, #320]	@ (8002398 <StartInputHandler+0x2b4>)
 8002258:	8812      	ldrh	r2, [r2, #0]
        ||
 800225a:	4293      	cmp	r3, r2
 800225c:	dd0c      	ble.n	8002278 <StartInputHandler+0x194>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 800225e:	4b4d      	ldr	r3, [pc, #308]	@ (8002394 <StartInputHandler+0x2b0>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	4b4c      	ldr	r3, [pc, #304]	@ (8002398 <StartInputHandler+0x2b4>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	4b4c      	ldr	r3, [pc, #304]	@ (800239c <StartInputHandler+0x2b8>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	440b      	add	r3, r1
 8002270:	429a      	cmp	r2, r3
 8002272:	da01      	bge.n	8002278 <StartInputHandler+0x194>
        )
    {

        /* Sync Manager Channel 2 memory area (Outputs) overlaps the Sync Manager memory areas for the Mailbox
           or the Sync Manager Channel 3 memory area (Inputs) */
        return ALSTATUSCODE_INVALIDSMOUTCFG;
 8002274:	231d      	movs	r3, #29
 8002276:	e32b      	b.n	80028d0 <StartInputHandler+0x7ec>
        --- Check configured synchronization ---
    */

    /* Get the DC Control/Activation register value*/
    /*Read registers 0x980:0x981 (corresponding masks are adapted)*/
    HW_EscReadWord(dcControl, ESC_DC_UNIT_CONTROL_OFFSET);
 8002278:	f107 0312 	add.w	r3, r7, #18
 800227c:	2202      	movs	r2, #2
 800227e:	f44f 6118 	mov.w	r1, #2432	@ 0x980
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe fb2a 	bl	80008dc <HW_EscRead>
    dcControl = SWAPWORD(dcControl);
 8002288:	8a7b      	ldrh	r3, [r7, #18]
 800228a:	827b      	strh	r3, [r7, #18]

    // Cycle time for Sync0
        HW_EscReadDWord(cycleTimeSync0, ESC_DC_SYNC0_CYCLETIME_OFFSET);
 800228c:	f107 0308 	add.w	r3, r7, #8
 8002290:	2204      	movs	r2, #4
 8002292:	f44f 611a 	mov.w	r1, #2464	@ 0x9a0
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fb20 	bl	80008dc <HW_EscRead>
        cycleTimeSync0 = SWAPDWORD(cycleTimeSync0);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	60bb      	str	r3, [r7, #8]

    // Cycle time for Sync1
        HW_EscReadDWord(shiftTimeSync1, ESC_DC_SYNC1_CYCLETIME_OFFSET);
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2204      	movs	r2, #4
 80022a4:	f640 11a4 	movw	r1, #2468	@ 0x9a4
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fb17 	bl	80008dc <HW_EscRead>
        shiftTimeSync1 = SWAPDWORD(shiftTimeSync1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	607b      	str	r3, [r7, #4]


    SyncType0x1C32 = sSyncManOutPar.u16SyncType;
 80022b2:	4b34      	ldr	r3, [pc, #208]	@ (8002384 <StartInputHandler+0x2a0>)
 80022b4:	885b      	ldrh	r3, [r3, #2]
 80022b6:	863b      	strh	r3, [r7, #48]	@ 0x30
    SyncType0x1C33 = sSyncManInPar.u16SyncType;
 80022b8:	4b33      	ldr	r3, [pc, #204]	@ (8002388 <StartInputHandler+0x2a4>)
 80022ba:	885b      	ldrh	r3, [r3, #2]
 80022bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    /* check general DC register plausibility and if configuration is supported
       - 0x981 DC Active
       - 0x9A0:0x9A3 Sync0 Cycle
       - 0x9A4:0x9A7 Sync1 Cycle
    */
    if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) != 0)
 80022be:	8a7b      	ldrh	r3, [r7, #18]
 80022c0:	f403 6310 	and.w	r3, r3, #2304	@ 0x900
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d079      	beq.n	80023bc <StartInputHandler+0x2d8>
    {
        /* DC unit is active at least one Sync signal shall be generated */
        if((dcControl & (ESC_DC_SYNC0_ACTIVE_MASK | ESC_DC_SYNC1_ACTIVE_MASK)) == 0)
 80022c8:	8a7b      	ldrh	r3, [r7, #18]
 80022ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <StartInputHandler+0x1f2>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 80022d2:	2330      	movs	r3, #48	@ 0x30
 80022d4:	e2fc      	b.n	80028d0 <StartInputHandler+0x7ec>
        }

        /* If Sync1 shall only be active if also Sync0 will be generated*/
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 80022d6:	8a7b      	ldrh	r3, [r7, #18]
 80022d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d106      	bne.n	80022ee <StartInputHandler+0x20a>
            && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 80022e0:	8a7b      	ldrh	r3, [r7, #18]
 80022e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <StartInputHandler+0x20a>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 80022ea:	2330      	movs	r3, #48	@ 0x30
 80022ec:	e2f0      	b.n	80028d0 <StartInputHandler+0x7ec>
        }

        if(u16MinSuppSyncType != 0)
 80022ee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d015      	beq.n	8002320 <StartInputHandler+0x23c>
        {
            if((((u16MinSuppSyncType & SYNCTYPE_DCSYNC0SUPP) == 0) && ((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0))
 80022f4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d104      	bne.n	8002308 <StartInputHandler+0x224>
 80022fe:	8a7b      	ldrh	r3, [r7, #18]
 8002300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <StartInputHandler+0x238>
                ||(((u16MinSuppSyncType & SYNCTYPE_DCSYNC1SUPP) == 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)))
 8002308:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <StartInputHandler+0x23c>
 8002312:	8a7b      	ldrh	r3, [r7, #18]
 8002314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <StartInputHandler+0x23c>
            {
                /* Sync0 is not supported but will be generated*/
                return ALSTATUSCODE_DCINVALIDSYNCCFG;                   
 800231c:	2330      	movs	r3, #48	@ 0x30
 800231e:	e2d7      	b.n	80028d0 <StartInputHandler+0x7ec>
    }
        }

        {
            UINT32 curMinCycleTime = MIN_PD_CYCLE_TIME;
 8002320:	4b24      	ldr	r3, [pc, #144]	@ (80023b4 <StartInputHandler+0x2d0>)
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
            curMinCycleTime = sSyncManOutPar.u32MinCycleTime;
 8002324:	4b17      	ldr	r3, [pc, #92]	@ (8002384 <StartInputHandler+0x2a0>)
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24

            /*Check if Sync0 cycle time is supported*/
            if (cycleTimeSync0 != 0 && (cycleTimeSync0 < curMinCycleTime || cycleTimeSync0 > MAX_PD_CYCLE_TIME))
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d009      	beq.n	8002344 <StartInputHandler+0x260>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002334:	429a      	cmp	r2, r3
 8002336:	d803      	bhi.n	8002340 <StartInputHandler+0x25c>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4a1f      	ldr	r2, [pc, #124]	@ (80023b8 <StartInputHandler+0x2d4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <StartInputHandler+0x260>
            {
                    return ALSTATUSCODE_DCSYNC0CYCLETIME;
 8002340:	2336      	movs	r3, #54	@ 0x36
 8002342:	e2c5      	b.n	80028d0 <StartInputHandler+0x7ec>
            }
        }


        /* Check if Subordinated cycles are configured */
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 8002344:	8a7b      	ldrh	r3, [r7, #18]
 8002346:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00e      	beq.n	800236c <StartInputHandler+0x288>
 800234e:	8a7b      	ldrh	r3, [r7, #18]
 8002350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <StartInputHandler+0x288>
        {
            /* For Subordinated cycles both Sync signals shall be active and Sync0 is not configured in single shot (cycle time == 0)*/
            if((shiftTimeSync1 > 0) && (shiftTimeSync1 >= cycleTimeSync0))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <StartInputHandler+0x288>
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	429a      	cmp	r2, r3
 8002364:	d302      	bcc.n	800236c <StartInputHandler+0x288>
            {
                bSubordinatedCycles = TRUE;
 8002366:	2301      	movs	r3, #1
 8002368:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }
        }

        /* Dump an error if subordinated cycles are configured but not supported */
        if(bSubordinatedCycles && ((u16MinSuppSyncType & SYNCTYPE_SUBCYCLESUPP) == 0))
 800236c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002370:	2b00      	cmp	r3, #0
 8002372:	d023      	beq.n	80023bc <StartInputHandler+0x2d8>
 8002374:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	d11e      	bne.n	80023bc <StartInputHandler+0x2d8>
        {
             return ALSTATUSCODE_DCINVALIDSYNCCFG;
 800237e:	2330      	movs	r3, #48	@ 0x30
 8002380:	e2a6      	b.n	80028d0 <StartInputHandler+0x7ec>
 8002382:	bf00      	nop
 8002384:	240009ec 	.word	0x240009ec
 8002388:	24000a30 	.word	0x24000a30
 800238c:	2400094a 	.word	0x2400094a
 8002390:	2400090e 	.word	0x2400090e
 8002394:	24000946 	.word	0x24000946
 8002398:	24000948 	.word	0x24000948
 800239c:	2400093a 	.word	0x2400093a
 80023a0:	24000964 	.word	0x24000964
 80023a4:	2400095e 	.word	0x2400095e
 80023a8:	24000962 	.word	0x24000962
 80023ac:	24000960 	.word	0x24000960
 80023b0:	2400093c 	.word	0x2400093c
 80023b4:	0007a120 	.word	0x0007a120
 80023b8:	c3500000 	.word	0xc3500000


    /*
        Check if the user configured Sync Type matches the DC register values (if the Sync Type is supported was already checked in the object write function)
    */
    if(bSyncSetByUser)
 80023bc:	4b84      	ldr	r3, [pc, #528]	@ (80025d0 <StartInputHandler+0x4ec>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d02c      	beq.n	800241e <StartInputHandler+0x33a>
    {
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 80023c4:	8a7b      	ldrh	r3, [r7, #18]
 80023c6:	f403 6310 	and.w	r3, r3, #2304	@ 0x900
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10d      	bne.n	80023ea <StartInputHandler+0x306>
        {
            /* DC out unit not enabled => no DC mode shall be set */
            if((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 80023ce:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d008      	beq.n	80023e6 <StartInputHandler+0x302>
 80023d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d005      	beq.n	80023e6 <StartInputHandler+0x302>
                ||(SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))
 80023da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d002      	beq.n	80023e6 <StartInputHandler+0x302>
 80023e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d15f      	bne.n	80024a6 <StartInputHandler+0x3c2>
            {
                return ALSTATUSCODE_DCINVALIDSYNCCFG;
 80023e6:	2330      	movs	r3, #48	@ 0x30
 80023e8:	e272      	b.n	80028d0 <StartInputHandler+0x7ec>
            }
        } //if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
    else
    {
            if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)
 80023ea:	8a7b      	ldrh	r3, [r7, #18]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d107      	bne.n	8002404 <StartInputHandler+0x320>
            {
                /* No Sync 1 is generated => No Sync1 Sync Type shall configured*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC1)
 80023f4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d002      	beq.n	8002400 <StartInputHandler+0x31c>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC1))
 80023fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d101      	bne.n	8002404 <StartInputHandler+0x320>
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8002400:	2330      	movs	r3, #48	@ 0x30
 8002402:	e265      	b.n	80028d0 <StartInputHandler+0x7ec>
                }
            } //if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)

            if((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 8002404:	8a7b      	ldrh	r3, [r7, #18]
 8002406:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800240a:	2b00      	cmp	r3, #0
 800240c:	d14b      	bne.n	80024a6 <StartInputHandler+0x3c2>
            {
                /* No Sync 0 is generated => No Sync0 Sync Type shall configured*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC0)
 800240e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002410:	2b02      	cmp	r3, #2
 8002412:	d002      	beq.n	800241a <StartInputHandler+0x336>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC0))
 8002414:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002416:	2b02      	cmp	r3, #2
 8002418:	d145      	bne.n	80024a6 <StartInputHandler+0x3c2>
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 800241a:	2330      	movs	r3, #48	@ 0x30
 800241c:	e258      	b.n	80028d0 <StartInputHandler+0x7ec>
        }
    } //if(bSyncSetByUser)
    else
    {
        /* No Sync Type selected by user => Configure Sync Type based on DC register values*/
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 800241e:	8a7b      	ldrh	r3, [r7, #18]
 8002420:	f403 6310 	and.w	r3, r3, #2304	@ 0x900
 8002424:	2b00      	cmp	r3, #0
 8002426:	d11d      	bne.n	8002464 <StartInputHandler+0x380>
        {
            /* Activation or auto activation of the Sync Out Unit is disabled => Free Run or SM Sync is configured*/

            /* AL Event enabled => Configure SM Sync*/
            if (nPdOutputSize > 0)
 8002428:	4b6a      	ldr	r3, [pc, #424]	@ (80025d4 <StartInputHandler+0x4f0>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00b      	beq.n	8002448 <StartInputHandler+0x364>
            {
                SyncType0x1C32 = SYNCTYPE_SM_SYNCHRON;
 8002430:	2301      	movs	r3, #1
 8002432:	863b      	strh	r3, [r7, #48]	@ 0x30
                
                if (nPdInputSize > 0)
 8002434:	4b68      	ldr	r3, [pc, #416]	@ (80025d8 <StartInputHandler+0x4f4>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <StartInputHandler+0x35e>
                {
                    SyncType0x1C33 = SYNCTYPE_SM2_SYNCHRON;
 800243c:	2322      	movs	r3, #34	@ 0x22
 800243e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002440:	e031      	b.n	80024a6 <StartInputHandler+0x3c2>
                }
                else
                {
                    SyncType0x1C33 = SYNCTYPE_FREERUN;
 8002442:	2300      	movs	r3, #0
 8002444:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002446:	e02e      	b.n	80024a6 <StartInputHandler+0x3c2>
                }
            }
            else if (nPdInputSize > 0)
 8002448:	4b63      	ldr	r3, [pc, #396]	@ (80025d8 <StartInputHandler+0x4f4>)
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d004      	beq.n	800245a <StartInputHandler+0x376>
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8002450:	2300      	movs	r3, #0
 8002452:	863b      	strh	r3, [r7, #48]	@ 0x30
                SyncType0x1C33 = SYNCTYPE_SM_SYNCHRON;
 8002454:	2301      	movs	r3, #1
 8002456:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002458:	e025      	b.n	80024a6 <StartInputHandler+0x3c2>
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 800245a:	2300      	movs	r3, #0
 800245c:	863b      	strh	r3, [r7, #48]	@ 0x30
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 800245e:	2300      	movs	r3, #0
 8002460:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002462:	e020      	b.n	80024a6 <StartInputHandler+0x3c2>
            }

        }
        else
        {
            if (nPdOutputSize > 0)
 8002464:	4b5b      	ldr	r3, [pc, #364]	@ (80025d4 <StartInputHandler+0x4f0>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d009      	beq.n	8002480 <StartInputHandler+0x39c>
            {
                /* Sync Signal generation is active*/
                if (bSubordinatedCycles)
 800246c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <StartInputHandler+0x396>
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC1;
 8002474:	2303      	movs	r3, #3
 8002476:	863b      	strh	r3, [r7, #48]	@ 0x30
 8002478:	e004      	b.n	8002484 <StartInputHandler+0x3a0>
                }
                else
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC0;
 800247a:	2302      	movs	r3, #2
 800247c:	863b      	strh	r3, [r7, #48]	@ 0x30
 800247e:	e001      	b.n	8002484 <StartInputHandler+0x3a0>
                }
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8002480:	2300      	movs	r3, #0
 8002482:	863b      	strh	r3, [r7, #48]	@ 0x30
            }


            if (nPdInputSize > 0)
 8002484:	4b54      	ldr	r3, [pc, #336]	@ (80025d8 <StartInputHandler+0x4f4>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <StartInputHandler+0x3be>
            {
                if ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)
 800248c:	8a7b      	ldrh	r3, [r7, #18]
 800248e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <StartInputHandler+0x3b8>
                {
                    /* If Sync1 is available the inputs will always be mapped with Sync1 */
                    SyncType0x1C33 = SYNCTYPE_DCSYNC1;
 8002496:	2303      	movs	r3, #3
 8002498:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800249a:	e004      	b.n	80024a6 <StartInputHandler+0x3c2>
                }
                else
                {
                    /* Map Inputs based on Sync0*/
                    SyncType0x1C33 = SYNCTYPE_DCSYNC0;
 800249c:	2302      	movs	r3, #2
 800249e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80024a0:	e001      	b.n	80024a6 <StartInputHandler+0x3c2>
                }
            }
            else
            {
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 80024a2:	2300      	movs	r3, #0
 80024a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    /* Update Cycle time entries if DC Sync Mode enabled */
    if(SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 80024a6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d10c      	bne.n	80024c6 <StartInputHandler+0x3e2>
    {
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4a4b      	ldr	r2, [pc, #300]	@ (80025dc <StartInputHandler+0x4f8>)
 80024b0:	6253      	str	r3, [r2, #36]	@ 0x24
        sSyncManOutPar.u32CycleTime = (UINT32)cycleTimeSync0;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	4a49      	ldr	r2, [pc, #292]	@ (80025dc <StartInputHandler+0x4f8>)
 80024b6:	6053      	str	r3, [r2, #4]

        sSyncManInPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4a49      	ldr	r2, [pc, #292]	@ (80025e0 <StartInputHandler+0x4fc>)
 80024bc:	6253      	str	r3, [r2, #36]	@ 0x24
        sSyncManInPar.u32CycleTime = (UINT32)cycleTimeSync0;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4a47      	ldr	r2, [pc, #284]	@ (80025e0 <StartInputHandler+0x4fc>)
 80024c2:	6053      	str	r3, [r2, #4]
 80024c4:	e00e      	b.n	80024e4 <StartInputHandler+0x400>
    }
    else if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 80024c6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d10b      	bne.n	80024e4 <StartInputHandler+0x400>
    {
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4a43      	ldr	r2, [pc, #268]	@ (80025dc <StartInputHandler+0x4f8>)
 80024d0:	6253      	str	r3, [r2, #36]	@ 0x24
        sSyncManOutPar.u32CycleTime = (UINT32)cycleTimeSync0;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	4a41      	ldr	r2, [pc, #260]	@ (80025dc <StartInputHandler+0x4f8>)
 80024d6:	6053      	str	r3, [r2, #4]

        sSyncManInPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4a41      	ldr	r2, [pc, #260]	@ (80025e0 <StartInputHandler+0x4fc>)
 80024dc:	6253      	str	r3, [r2, #36]	@ 0x24
        sSyncManInPar.u32CycleTime = (UINT32)cycleTimeSync0;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4a3f      	ldr	r2, [pc, #252]	@ (80025e0 <StartInputHandler+0x4fc>)
 80024e2:	6053      	str	r3, [r2, #4]
    }

    /* Set global flags based on Sync Type */
    if ( !b3BufferMode )
 80024e4:	4b3f      	ldr	r3, [pc, #252]	@ (80025e4 <StartInputHandler+0x500>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d107      	bne.n	80024fc <StartInputHandler+0x418>
    {
        /* 1-Buffer-Mode configured => For free run it shall be 3Buffer mode*/
        if (( SyncType0x1C32 == SYNCTYPE_FREERUN ) || ( SyncType0x1C33 == SYNCTYPE_FREERUN ))
 80024ec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <StartInputHandler+0x414>
 80024f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <StartInputHandler+0x418>
        {
                return ALSTATUSCODE_FREERUNNEEDS3BUFFERMODE;
 80024f8:	2329      	movs	r3, #41	@ 0x29
 80024fa:	e1e9      	b.n	80028d0 <StartInputHandler+0x7ec>
        }
    }

    /* If no free run is supported the EscInt is always enabled*/
        if (( SyncType0x1C32 != SYNCTYPE_FREERUN ) || ( SyncType0x1C33 != SYNCTYPE_FREERUN ))
 80024fc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <StartInputHandler+0x424>
 8002502:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <StartInputHandler+0x42a>
        {
        /* ECAT Synchron Mode, the ESC interrupt is enabled */
        bEscIntEnabled = TRUE;
 8002508:	4b37      	ldr	r3, [pc, #220]	@ (80025e8 <StartInputHandler+0x504>)
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
    }

        /* Update value for AL Event Mask register (0x204) */
        if(bEscIntEnabled)
 800250e:	4b36      	ldr	r3, [pc, #216]	@ (80025e8 <StartInputHandler+0x504>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d010      	beq.n	8002538 <StartInputHandler+0x454>
        {
            if(nPdOutputSize > 0)
 8002516:	4b2f      	ldr	r3, [pc, #188]	@ (80025d4 <StartInputHandler+0x4f0>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d004      	beq.n	8002528 <StartInputHandler+0x444>
            {
                u16ALEventMask = PROCESS_OUTPUT_EVENT;
 800251e:	4b33      	ldr	r3, [pc, #204]	@ (80025ec <StartInputHandler+0x508>)
 8002520:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002524:	801a      	strh	r2, [r3, #0]
 8002526:	e007      	b.n	8002538 <StartInputHandler+0x454>
            }
            else if(nPdInputSize > 0)
 8002528:	4b2b      	ldr	r3, [pc, #172]	@ (80025d8 <StartInputHandler+0x4f4>)
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <StartInputHandler+0x454>
            {
                u16ALEventMask = PROCESS_INPUT_EVENT;
 8002530:	4b2e      	ldr	r3, [pc, #184]	@ (80025ec <StartInputHandler+0x508>)
 8002532:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002536:	801a      	strh	r2, [r3, #0]
            }

        }

        if ((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 8002538:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800253a:	2b02      	cmp	r3, #2
 800253c:	d008      	beq.n	8002550 <StartInputHandler+0x46c>
 800253e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002540:	2b03      	cmp	r3, #3
 8002542:	d005      	beq.n	8002550 <StartInputHandler+0x46c>
            || (SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))/* Sync to Sync0 or Sync1 is enabled*/
 8002544:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002546:	2b02      	cmp	r3, #2
 8002548:	d002      	beq.n	8002550 <StartInputHandler+0x46c>
 800254a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800254c:	2b03      	cmp	r3, #3
 800254e:	d109      	bne.n	8002564 <StartInputHandler+0x480>
        {
            /* slave is running in DC-mode */
            bDcSyncActive = TRUE;
 8002550:	4b27      	ldr	r3, [pc, #156]	@ (80025f0 <StartInputHandler+0x50c>)
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]

            /*In case of an Input only application with DC no PDI Isr handling is required*/
            if (nPdOutputSize == 0)
 8002556:	4b1f      	ldr	r3, [pc, #124]	@ (80025d4 <StartInputHandler+0x4f0>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d102      	bne.n	8002564 <StartInputHandler+0x480>
            {
               u16ALEventMask = 0;
 800255e:	4b23      	ldr	r3, [pc, #140]	@ (80025ec <StartInputHandler+0x508>)
 8002560:	2200      	movs	r2, #0
 8002562:	801a      	strh	r2, [r3, #0]
            }
        }



    sSyncManOutPar.u16SyncType = SyncType0x1C32;
 8002564:	4a1d      	ldr	r2, [pc, #116]	@ (80025dc <StartInputHandler+0x4f8>)
 8002566:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002568:	8053      	strh	r3, [r2, #2]
    sSyncManInPar.u16SyncType = SyncType0x1C33;
 800256a:	4a1d      	ldr	r2, [pc, #116]	@ (80025e0 <StartInputHandler+0x4fc>)
 800256c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800256e:	8053      	strh	r3, [r2, #2]

    /* Calculate number of Sync0 events within one SM cycle and the Sync0 events on which the inputs has to be latched*/
    LatchInputSync0Value = 0;
 8002570:	4b20      	ldr	r3, [pc, #128]	@ (80025f4 <StartInputHandler+0x510>)
 8002572:	2200      	movs	r2, #0
 8002574:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 8002576:	4b20      	ldr	r3, [pc, #128]	@ (80025f8 <StartInputHandler+0x514>)
 8002578:	2200      	movs	r2, #0
 800257a:	801a      	strh	r2, [r3, #0]
    u16SmSync0Value = 0;
 800257c:	4b1f      	ldr	r3, [pc, #124]	@ (80025fc <StartInputHandler+0x518>)
 800257e:	2200      	movs	r2, #0
 8002580:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 8002582:	4b1f      	ldr	r3, [pc, #124]	@ (8002600 <StartInputHandler+0x51c>)
 8002584:	2200      	movs	r2, #0
 8002586:	801a      	strh	r2, [r3, #0]


    if(bSubordinatedCycles == TRUE)
 8002588:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800258c:	2b01      	cmp	r3, #1
 800258e:	d153      	bne.n	8002638 <StartInputHandler+0x554>
    {
        
        UINT32 cycleTimeSync1 = (shiftTimeSync1 + cycleTimeSync0);
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	4413      	add	r3, r2
 8002596:	623b      	str	r3, [r7, #32]


        /* get the number of Sync0 event within on SM cycle */
        if(shiftTimeSync1 >= cycleTimeSync0)
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	429a      	cmp	r2, r3
 800259e:	d331      	bcc.n	8002604 <StartInputHandler+0x520>
        {

            u16SmSync0Value = (UINT16)(cycleTimeSync1 / cycleTimeSync0);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	6a3a      	ldr	r2, [r7, #32]
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	4b14      	ldr	r3, [pc, #80]	@ (80025fc <StartInputHandler+0x518>)
 80025ac:	801a      	strh	r2, [r3, #0]
            
            if((cycleTimeSync1 % cycleTimeSync0) == 0)
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80025b6:	fb01 f202 	mul.w	r2, r1, r2
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d124      	bne.n	800260a <StartInputHandler+0x526>
            {
                /* if the Sync1cycletime/Sync0cycletime ratio is even one additional tick */
                u16SmSync0Value ++;
 80025c0:	4b0e      	ldr	r3, [pc, #56]	@ (80025fc <StartInputHandler+0x518>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	3301      	adds	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	4b0c      	ldr	r3, [pc, #48]	@ (80025fc <StartInputHandler+0x518>)
 80025ca:	801a      	strh	r2, [r3, #0]
 80025cc:	e01d      	b.n	800260a <StartInputHandler+0x526>
 80025ce:	bf00      	nop
 80025d0:	240009e5 	.word	0x240009e5
 80025d4:	2400093c 	.word	0x2400093c
 80025d8:	2400093a 	.word	0x2400093a
 80025dc:	240009ec 	.word	0x240009ec
 80025e0:	24000a30 	.word	0x24000a30
 80025e4:	2400092e 	.word	0x2400092e
 80025e8:	2400092d 	.word	0x2400092d
 80025ec:	2400094a 	.word	0x2400094a
 80025f0:	24000910 	.word	0x24000910
 80025f4:	24000928 	.word	0x24000928
 80025f8:	2400092a 	.word	0x2400092a
 80025fc:	24000918 	.word	0x24000918
 8002600:	24000916 	.word	0x24000916
            }
        }
        else
        {
            u16SmSync0Value = 1;
 8002604:	4b8c      	ldr	r3, [pc, #560]	@ (8002838 <StartInputHandler+0x754>)
 8002606:	2201      	movs	r2, #1
 8002608:	801a      	strh	r2, [r3, #0]
        }

        /* Calculate the Sync0 tick on which the inputs shall be latched (last Sync0 before the next Sync1 event)*/
        LatchInputSync0Value = (UINT16) (cycleTimeSync1 / cycleTimeSync0);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	6a3a      	ldr	r2, [r7, #32]
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	b29a      	uxth	r2, r3
 8002614:	4b89      	ldr	r3, [pc, #548]	@ (800283c <StartInputHandler+0x758>)
 8002616:	801a      	strh	r2, [r3, #0]

        if ((cycleTimeSync1 % cycleTimeSync0) > 0)
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002620:	fb01 f202 	mul.w	r2, r1, r2
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d012      	beq.n	8002650 <StartInputHandler+0x56c>
        {
            LatchInputSync0Value++;
 800262a:	4b84      	ldr	r3, [pc, #528]	@ (800283c <StartInputHandler+0x758>)
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	3301      	adds	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	4b82      	ldr	r3, [pc, #520]	@ (800283c <StartInputHandler+0x758>)
 8002634:	801a      	strh	r2, [r3, #0]
 8002636:	e00b      	b.n	8002650 <StartInputHandler+0x56c>
        }

    }
    else 
    {
        if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 8002638:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800263a:	2b02      	cmp	r3, #2
 800263c:	d102      	bne.n	8002644 <StartInputHandler+0x560>
        {
            /* if SyncType of 0x1C32 is 2 the Sync0 event is trigger once during a SM cycle */
            u16SmSync0Value = 1;
 800263e:	4b7e      	ldr	r3, [pc, #504]	@ (8002838 <StartInputHandler+0x754>)
 8002640:	2201      	movs	r2, #1
 8002642:	801a      	strh	r2, [r3, #0]
        }   

        if(SyncType0x1C33 != SYNCTYPE_DCSYNC1)
 8002644:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002646:	2b03      	cmp	r3, #3
 8002648:	d002      	beq.n	8002650 <StartInputHandler+0x56c>
        {
            LatchInputSync0Value = 1;
 800264a:	4b7c      	ldr	r3, [pc, #496]	@ (800283c <StartInputHandler+0x758>)
 800264c:	2201      	movs	r2, #1
 800264e:	801a      	strh	r2, [r3, #0]
    }



    /* reset the error counter indicating synchronization problems */
    sCycleDiag.syncFailedCounter = 0;
 8002650:	4b7b      	ldr	r3, [pc, #492]	@ (8002840 <StartInputHandler+0x75c>)
 8002652:	2200      	movs	r2, #0
 8002654:	801a      	strh	r2, [r3, #0]
    /*
        --- Check watchdog settings ---
    */

    /*get the watchdog time (register 0x420). if value is > 0 watchdog is active*/
    HW_EscReadWord(wd, ESC_PD_WD_TIME);
 8002656:	f107 030e 	add.w	r3, r7, #14
 800265a:	2202      	movs	r2, #2
 800265c:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe f93b 	bl	80008dc <HW_EscRead>
    wd = SWAPWORD(wd);
 8002666:	89fb      	ldrh	r3, [r7, #14]
 8002668:	81fb      	strh	r3, [r7, #14]

    if (nPdOutputSize > 0 &&  wd != 0 )
 800266a:	4b76      	ldr	r3, [pc, #472]	@ (8002844 <StartInputHandler+0x760>)
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d02f      	beq.n	80026d2 <StartInputHandler+0x5ee>
 8002672:	89fb      	ldrh	r3, [r7, #14]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d02c      	beq.n	80026d2 <StartInputHandler+0x5ee>
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	2202      	movs	r2, #2
 800267e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe f92a 	bl	80008dc <HW_EscRead>
    wdiv = SWAPWORD(wdiv);
 8002688:	8a3b      	ldrh	r3, [r7, #16]
 800268a:	823b      	strh	r3, [r7, #16]
        if ( wdiv != 0 )
 800268c:	8a3b      	ldrh	r3, [r7, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d019      	beq.n	80026c6 <StartInputHandler+0x5e2>
        {
            /* the ESC subtracts 2 in register 0x400 so it has to be added here */
            UINT32 d = wdiv+2;
 8002692:	8a3b      	ldrh	r3, [r7, #16]
 8002694:	3302      	adds	r3, #2
 8002696:	61fb      	str	r3, [r7, #28]


            d *= wd;
 8002698:	89fb      	ldrh	r3, [r7, #14]
 800269a:	461a      	mov	r2, r3
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	61fb      	str	r3, [r7, #28]
            /* store watchdog in ms in variable EcatWdValue */
            /* watchdog value has to be rounded up */
            d = (INT32)(d + 24999);
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	f246 13a7 	movw	r3, #24999	@ 0x61a7
 80026aa:	4413      	add	r3, r2
 80026ac:	61fb      	str	r3, [r7, #28]
            d /= 25000;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	08db      	lsrs	r3, r3, #3
 80026b2:	4a65      	ldr	r2, [pc, #404]	@ (8002848 <StartInputHandler+0x764>)
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	61fb      	str	r3, [r7, #28]
            EcatWdValue = (UINT16) d;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	4b62      	ldr	r3, [pc, #392]	@ (800284c <StartInputHandler+0x768>)
 80026c2:	801a      	strh	r2, [r3, #0]
        if ( wdiv != 0 )
 80026c4:	e00a      	b.n	80026dc <StartInputHandler+0x5f8>
        }
        else
        {
            wd = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	81fb      	strh	r3, [r7, #14]
            /* wd value has to be set to zero, if the wd is 0 */
            EcatWdValue = 0;
 80026ca:	4b60      	ldr	r3, [pc, #384]	@ (800284c <StartInputHandler+0x768>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	801a      	strh	r2, [r3, #0]
        if ( wdiv != 0 )
 80026d0:	e004      	b.n	80026dc <StartInputHandler+0x5f8>
        }
    }
    else
    {
        /* the watchdog is deactivated or slave has no output process data*/
        wdiv = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	823b      	strh	r3, [r7, #16]
        EcatWdValue = 0;
 80026d6:	4b5d      	ldr	r3, [pc, #372]	@ (800284c <StartInputHandler+0x768>)
 80026d8:	2200      	movs	r2, #0
 80026da:	801a      	strh	r2, [r3, #0]
    }

    if((EcatWdValue == 0 && bWdTrigger) || (EcatWdValue != 0 && !bWdTrigger))
 80026dc:	4b5b      	ldr	r3, [pc, #364]	@ (800284c <StartInputHandler+0x768>)
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d103      	bne.n	80026ec <StartInputHandler+0x608>
 80026e4:	4b5a      	ldr	r3, [pc, #360]	@ (8002850 <StartInputHandler+0x76c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <StartInputHandler+0x618>
 80026ec:	4b57      	ldr	r3, [pc, #348]	@ (800284c <StartInputHandler+0x768>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <StartInputHandler+0x61c>
 80026f4:	4b56      	ldr	r3, [pc, #344]	@ (8002850 <StartInputHandler+0x76c>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <StartInputHandler+0x61c>
    {
        /* if the WD-Trigger in the Sync Manager Channel 2 Control-Byte is set (Bit 6 of Register 0x814)
            an error has to be returned */
        return ALSTATUSCODE_INVALIDWDCFG;
 80026fc:	231f      	movs	r3, #31
 80026fe:	e0e7      	b.n	80028d0 <StartInputHandler+0x7ec>
    }

    if ( bEscIntEnabled && nPdOutputSize != 0 )
 8002700:	4b54      	ldr	r3, [pc, #336]	@ (8002854 <StartInputHandler+0x770>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <StartInputHandler+0x63a>
 8002708:	4b4e      	ldr	r3, [pc, #312]	@ (8002844 <StartInputHandler+0x760>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <StartInputHandler+0x63a>
    {
        /* ECAT synchron Mode is active, the Sync Manager Channel 2 event
           has to activated in the AL-Event mask register */
        u16ALEventMask |= PROCESS_OUTPUT_EVENT;
 8002710:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <StartInputHandler+0x774>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002718:	b29a      	uxth	r2, r3
 800271a:	4b4f      	ldr	r3, [pc, #316]	@ (8002858 <StartInputHandler+0x774>)
 800271c:	801a      	strh	r2, [r3, #0]
    }
/*The application ESM function is separated from this function to handle pending transitions*/

    Sync0WdValue = 0;
 800271e:	4b4f      	ldr	r3, [pc, #316]	@ (800285c <StartInputHandler+0x778>)
 8002720:	2200      	movs	r2, #0
 8002722:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8002724:	4b4e      	ldr	r3, [pc, #312]	@ (8002860 <StartInputHandler+0x77c>)
 8002726:	2200      	movs	r2, #0
 8002728:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 800272a:	4b4e      	ldr	r3, [pc, #312]	@ (8002864 <StartInputHandler+0x780>)
 800272c:	2200      	movs	r2, #0
 800272e:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8002730:	4b4d      	ldr	r3, [pc, #308]	@ (8002868 <StartInputHandler+0x784>)
 8002732:	2200      	movs	r2, #0
 8002734:	801a      	strh	r2, [r3, #0]
    bDcRunning = FALSE;
 8002736:	4b4d      	ldr	r3, [pc, #308]	@ (800286c <StartInputHandler+0x788>)
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 800273c:	4b4c      	ldr	r3, [pc, #304]	@ (8002870 <StartInputHandler+0x78c>)
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
    i16WaitForPllRunningTimeout = 0;
 8002742:	4b4c      	ldr	r3, [pc, #304]	@ (8002874 <StartInputHandler+0x790>)
 8002744:	2200      	movs	r2, #0
 8002746:	801a      	strh	r2, [r3, #0]

/*ECATCHANGE_START(V5.13) ECAT1*/
    /*Get Sync mapped to AL Event indication*/
    {
        UINT32 u32TmpVar = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	603b      	str	r3, [r7, #0]
        HW_EscReadDWord(u32TmpVar, ESC_PDI_CONFIGURATION);
 800274c:	463b      	mov	r3, r7
 800274e:	2204      	movs	r2, #4
 8002750:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe f8c1 	bl	80008dc <HW_EscRead>
        if ((u32TmpVar & ESC_SYNC0_MAPPED_TO_ALEVENT) > 0)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002760:	2b00      	cmp	r3, #0
 8002762:	d006      	beq.n	8002772 <StartInputHandler+0x68e>
        {
            u16ALEventMask |= SYNC0_EVENT;
 8002764:	4b3c      	ldr	r3, [pc, #240]	@ (8002858 <StartInputHandler+0x774>)
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	b29a      	uxth	r2, r3
 800276e:	4b3a      	ldr	r3, [pc, #232]	@ (8002858 <StartInputHandler+0x774>)
 8002770:	801a      	strh	r2, [r3, #0]
        }

        if ((u32TmpVar & ESC_SYNC1_MAPPED_TO_ALEVENT) > 0)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d006      	beq.n	800278a <StartInputHandler+0x6a6>
        {
            u16ALEventMask |= SYNC1_EVENT;
 800277c:	4b36      	ldr	r3, [pc, #216]	@ (8002858 <StartInputHandler+0x774>)
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	f043 0308 	orr.w	r3, r3, #8
 8002784:	b29a      	uxth	r2, r3
 8002786:	4b34      	ldr	r3, [pc, #208]	@ (8002858 <StartInputHandler+0x774>)
 8002788:	801a      	strh	r2, [r3, #0]
        }
    }
/*ECATCHANGE_END(V5.13) ECAT1*/
    sSyncManInPar.u16SmEventMissedCounter = 0;
 800278a:	4b3b      	ldr	r3, [pc, #236]	@ (8002878 <StartInputHandler+0x794>)
 800278c:	2200      	movs	r2, #0
 800278e:	851a      	strh	r2, [r3, #40]	@ 0x28
    sSyncManInPar.u16CycleExceededCounter = 0;
 8002790:	4b39      	ldr	r3, [pc, #228]	@ (8002878 <StartInputHandler+0x794>)
 8002792:	2200      	movs	r2, #0
 8002794:	855a      	strh	r2, [r3, #42]	@ 0x2a
    sSyncManInPar.u8SyncError = 0;
 8002796:	4b38      	ldr	r3, [pc, #224]	@ (8002878 <StartInputHandler+0x794>)
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40


    sSyncManOutPar.u16SmEventMissedCounter = 0;
 800279e:	4b37      	ldr	r3, [pc, #220]	@ (800287c <StartInputHandler+0x798>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    sSyncManOutPar.u16CycleExceededCounter = 0;
 80027a4:	4b35      	ldr	r3, [pc, #212]	@ (800287c <StartInputHandler+0x798>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    sSyncManOutPar.u8SyncError = 0;
 80027aa:	4b34      	ldr	r3, [pc, #208]	@ (800287c <StartInputHandler+0x798>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* calculate the Sync0/Sync1 watchdog timeouts */
    if ( (dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0 )
 80027b2:	8a7b      	ldrh	r3, [r7, #18]
 80027b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d078      	beq.n	80028ae <StartInputHandler+0x7ca>
    {
        /*calculate the Sync0 Watchdog counter value the minimum value is 1 ms
            if the sync0 cycle is greater 500us the Sync0 Wd value is 2*Sycn0 cycle */
        if(cycleTimeSync0 == 0)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <StartInputHandler+0x6e6>
        {
            Sync0WdValue = 0;
 80027c2:	4b26      	ldr	r3, [pc, #152]	@ (800285c <StartInputHandler+0x778>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	801a      	strh	r2, [r3, #0]
 80027c8:	e018      	b.n	80027fc <StartInputHandler+0x718>
        }
        else
        {
            UINT32 Sync0Cycle = cycleTimeSync0/100000;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002880 <StartInputHandler+0x79c>)
 80027d0:	fba2 2303 	umull	r2, r3, r2, r3
 80027d4:	09db      	lsrs	r3, r3, #7
 80027d6:	61bb      	str	r3, [r7, #24]

            if(Sync0Cycle < 5)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d803      	bhi.n	80027e6 <StartInputHandler+0x702>
            {
                /*Sync0 cycle less than 500us*/
                Sync0WdValue = 1;
 80027de:	4b1f      	ldr	r3, [pc, #124]	@ (800285c <StartInputHandler+0x778>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	801a      	strh	r2, [r3, #0]
 80027e4:	e00a      	b.n	80027fc <StartInputHandler+0x718>
            }
            else
            {
                Sync0WdValue = (UINT16)(Sync0Cycle*2)/10;
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	4a25      	ldr	r2, [pc, #148]	@ (8002884 <StartInputHandler+0x7a0>)
 80027f0:	fba2 2303 	umull	r2, r3, r2, r3
 80027f4:	08db      	lsrs	r3, r3, #3
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	4b18      	ldr	r3, [pc, #96]	@ (800285c <StartInputHandler+0x778>)
 80027fa:	801a      	strh	r2, [r3, #0]
            }
        }

        /* Calculate also the watchdog time for Sync1*/
        if ( (dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0 )
 80027fc:	8a7b      	ldrh	r3, [r7, #18]
 80027fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002802:	2b00      	cmp	r3, #0
 8002804:	d053      	beq.n	80028ae <StartInputHandler+0x7ca>
        {
            if(shiftTimeSync1 < cycleTimeSync0)
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	429a      	cmp	r2, r3
 800280c:	d204      	bcs.n	8002818 <StartInputHandler+0x734>
        {
                /* Sync 1 has the same cycle time than Sync0 (maybe with a shift (shiftTimeSync1 > 0))*/
                Sync1WdValue = Sync0WdValue;
 800280e:	4b13      	ldr	r3, [pc, #76]	@ (800285c <StartInputHandler+0x778>)
 8002810:	881a      	ldrh	r2, [r3, #0]
 8002812:	4b15      	ldr	r3, [pc, #84]	@ (8002868 <StartInputHandler+0x784>)
 8002814:	801a      	strh	r2, [r3, #0]
 8002816:	e04a      	b.n	80028ae <StartInputHandler+0x7ca>
        }
        else
        {
                /* Sync1 cycle is larger than Sync0 (e.g. subordinated Sync0 cycles) */
                UINT32 Sync1Cycle = (shiftTimeSync1  + cycleTimeSync0 )/100000;
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4413      	add	r3, r2
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	4a17      	ldr	r2, [pc, #92]	@ (8002880 <StartInputHandler+0x79c>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	09db      	lsrs	r3, r3, #7
 8002828:	617b      	str	r3, [r7, #20]
                if(Sync1Cycle < 5)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b04      	cmp	r3, #4
 800282e:	d82b      	bhi.n	8002888 <StartInputHandler+0x7a4>
                {
                    /*Sync0 cycle less than 500us*/
                    Sync1WdValue = 1;
 8002830:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <StartInputHandler+0x784>)
 8002832:	2201      	movs	r2, #1
 8002834:	801a      	strh	r2, [r3, #0]
 8002836:	e030      	b.n	800289a <StartInputHandler+0x7b6>
 8002838:	24000918 	.word	0x24000918
 800283c:	24000928 	.word	0x24000928
 8002840:	240009e8 	.word	0x240009e8
 8002844:	2400093c 	.word	0x2400093c
 8002848:	14f8b589 	.word	0x14f8b589
 800284c:	24000944 	.word	0x24000944
 8002850:	2400090f 	.word	0x2400090f
 8002854:	2400092d 	.word	0x2400092d
 8002858:	2400094a 	.word	0x2400094a
 800285c:	24000922 	.word	0x24000922
 8002860:	24000920 	.word	0x24000920
 8002864:	24000924 	.word	0x24000924
 8002868:	24000926 	.word	0x24000926
 800286c:	24000914 	.word	0x24000914
 8002870:	2400091a 	.word	0x2400091a
 8002874:	2400091c 	.word	0x2400091c
 8002878:	24000a30 	.word	0x24000a30
 800287c:	240009ec 	.word	0x240009ec
 8002880:	0a7c5ac5 	.word	0x0a7c5ac5
 8002884:	cccccccd 	.word	0xcccccccd
                }
                else
                {
                    Sync1WdValue = (UINT16)((Sync1Cycle*2)/10);
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4a12      	ldr	r2, [pc, #72]	@ (80028d8 <StartInputHandler+0x7f4>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	08db      	lsrs	r3, r3, #3
 8002894:	b29a      	uxth	r2, r3
 8002896:	4b11      	ldr	r3, [pc, #68]	@ (80028dc <StartInputHandler+0x7f8>)
 8002898:	801a      	strh	r2, [r3, #0]
                }

                /* add one Sync0 cycle because the Sync1 cycle starts on the next Sync0 after the Sync1 signal */
                Sync1WdValue += Sync0WdValue/2;
 800289a:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <StartInputHandler+0x7fc>)
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	4b0e      	ldr	r3, [pc, #56]	@ (80028dc <StartInputHandler+0x7f8>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <StartInputHandler+0x7f8>)
 80028ac:	801a      	strh	r2, [r3, #0]
            }
    }
    }

    if(nPdOutputSize > 0)
 80028ae:	4b0d      	ldr	r3, [pc, #52]	@ (80028e4 <StartInputHandler+0x800>)
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <StartInputHandler+0x7d8>
    {
        EnableSyncManChannel(PROCESS_DATA_OUT);
 80028b6:	2002      	movs	r0, #2
 80028b8:	f7ff fa2e 	bl	8001d18 <EnableSyncManChannel>
    }

    if(nPdInputSize > 0)
 80028bc:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <StartInputHandler+0x804>)
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <StartInputHandler+0x7e6>
    {
        EnableSyncManChannel(PROCESS_DATA_IN);
 80028c4:	2003      	movs	r0, #3
 80028c6:	f7ff fa27 	bl	8001d18 <EnableSyncManChannel>
    }

    /*write initial input data*/
    PDO_InputMapping();
 80028ca:	f7fe fb83 	bl	8000fd4 <PDO_InputMapping>

    return ALSTATUSCODE_NOERROR;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3738      	adds	r7, #56	@ 0x38
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	cccccccd 	.word	0xcccccccd
 80028dc:	24000926 	.word	0x24000926
 80028e0:	24000922 	.word	0x24000922
 80028e4:	2400093c 	.word	0x2400093c
 80028e8:	2400093a 	.word	0x2400093a

080028ec <StartOutputHandler>:
 \brief  and the state transition would be refused if outputs are missing

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartOutputHandler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
    /* by default the SO transition should be completed in AlControlRes().
       required to support also masters which starts to send process data after the SO transition was triggered
       (if the master don't send process data within "SAFEOP2OPTIMEOUT" the transition is rejected)*/
    UINT16 result = NOERROR_INWORK;
 80028f2:	23ff      	movs	r3, #255	@ 0xff
 80028f4:	80fb      	strh	r3, [r7, #6]
    /*ECATCHANGE_START(V5.13) ESM1*/
    if(STATE_VALID(u8LocalErrorState))
 80028f6:	4b1d      	ldr	r3, [pc, #116]	@ (800296c <StartOutputHandler+0x80>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d011      	beq.n	8002926 <StartOutputHandler+0x3a>
 8002902:	4b1a      	ldr	r3, [pc, #104]	@ (800296c <StartOutputHandler+0x80>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	2b02      	cmp	r3, #2
 800290c:	d00b      	beq.n	8002926 <StartOutputHandler+0x3a>
 800290e:	4b17      	ldr	r3, [pc, #92]	@ (800296c <StartOutputHandler+0x80>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	2b04      	cmp	r3, #4
 8002918:	d005      	beq.n	8002926 <StartOutputHandler+0x3a>
 800291a:	4b14      	ldr	r3, [pc, #80]	@ (800296c <StartOutputHandler+0x80>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	2b08      	cmp	r3, #8
 8002924:	d102      	bne.n	800292c <StartOutputHandler+0x40>
/*ECATCHANGE_END(V5.13) ESM1*/
    {
        /*Local error still exists => skip state request to OP and response with "u16LocalErrorCode"*/
        return u16LocalErrorCode;
 8002926:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <StartOutputHandler+0x84>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	e018      	b.n	800295e <StartOutputHandler+0x72>
    }
/*The application ESM function is separated from this function to handle pending transitions*/


    /*DC synchronisation is active wait until pll is valid*/
    if(bDcSyncActive)
 800292c:	4b11      	ldr	r3, [pc, #68]	@ (8002974 <StartOutputHandler+0x88>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <StartOutputHandler+0x54>
    {
        i16WaitForPllRunningTimeout = 200;
 8002934:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <StartOutputHandler+0x8c>)
 8002936:	22c8      	movs	r2, #200	@ 0xc8
 8002938:	801a      	strh	r2, [r3, #0]

        i16WaitForPllRunningCnt = 0;
 800293a:	4b10      	ldr	r3, [pc, #64]	@ (800297c <StartOutputHandler+0x90>)
 800293c:	2200      	movs	r2, #0
 800293e:	801a      	strh	r2, [r3, #0]
    }



    sSyncManOutPar.u16SmEventMissedCounter = 0;
 8002940:	4b0f      	ldr	r3, [pc, #60]	@ (8002980 <StartOutputHandler+0x94>)
 8002942:	2200      	movs	r2, #0
 8002944:	851a      	strh	r2, [r3, #40]	@ 0x28
    sSyncManOutPar.u8SyncError = 0;
 8002946:	4b0e      	ldr	r3, [pc, #56]	@ (8002980 <StartOutputHandler+0x94>)
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40


    sSyncManInPar.u16SmEventMissedCounter = 0;
 800294e:	4b0d      	ldr	r3, [pc, #52]	@ (8002984 <StartOutputHandler+0x98>)
 8002950:	2200      	movs	r2, #0
 8002952:	851a      	strh	r2, [r3, #40]	@ 0x28
    sSyncManInPar.u8SyncError = 0;
 8002954:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <StartOutputHandler+0x98>)
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40


    return result;
 800295c:	88fb      	ldrh	r3, [r7, #6]
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	24000932 	.word	0x24000932
 8002970:	24000930 	.word	0x24000930
 8002974:	24000910 	.word	0x24000910
 8002978:	2400091c 	.word	0x2400091c
 800297c:	2400091e 	.word	0x2400091e
 8002980:	240009ec 	.word	0x240009ec
 8002984:	24000a30 	.word	0x24000a30

08002988 <StopOutputHandler>:
 \brief  the state transition can be delayed by returning NOERROR_INWORK

*////////////////////////////////////////////////////////////////////////////////////////

void StopOutputHandler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
    /* reset the flags that outputs were received and that the slave is in OP */
    bEcatFirstOutputsReceived = FALSE;
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <StopOutputHandler+0x1c>)
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
    bEcatOutputUpdateRunning = FALSE;
 8002992:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <StopOutputHandler+0x20>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	2400090e 	.word	0x2400090e
 80029a8:	2400090c 	.word	0x2400090c

080029ac <StopInputHandler>:
  \brief    This function is called in case of the state transition from SAFEOP to PREOP

*////////////////////////////////////////////////////////////////////////////////////////

void StopInputHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
    if(nPdOutputSize > 0)
 80029b2:	4b34      	ldr	r3, [pc, #208]	@ (8002a84 <StopInputHandler+0xd8>)
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <StopInputHandler+0x14>
    {
        /* disable the Sync Manager Channel 2 (outputs) */
        DisableSyncManChannel(PROCESS_DATA_OUT);
 80029ba:	2002      	movs	r0, #2
 80029bc:	f7ff f984 	bl	8001cc8 <DisableSyncManChannel>
    }

    if(nPdInputSize > 0)
 80029c0:	4b31      	ldr	r3, [pc, #196]	@ (8002a88 <StopInputHandler+0xdc>)
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <StopInputHandler+0x22>
    {
        /*disable Sync Manager 3 (inputs) if no outputs available*/
        DisableSyncManChannel(PROCESS_DATA_IN);
 80029c8:	2003      	movs	r0, #3
 80029ca:	f7ff f97d 	bl	8001cc8 <DisableSyncManChannel>

    /* reset the events in the AL Event mask register (0x204) */
/*ECATCHANGE_START(V5.13) ECAT1*/
/*ECATCHANGE_END(V5.13) ECAT1*/
    {
        UINT16 ResetMask = SYNC0_EVENT | SYNC1_EVENT;
 80029ce:	230c      	movs	r3, #12
 80029d0:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_OUTPUT_EVENT;
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029d8:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_INPUT_EVENT;
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029e0:	80fb      	strh	r3, [r7, #6]

    ResetALEventMask( ~(ResetMask) );
 80029e2:	88fb      	ldrh	r3, [r7, #6]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff f8f3 	bl	8001bd4 <ResetALEventMask>
    }
    /* reset the flags */
    bEcatFirstOutputsReceived = FALSE;
 80029ee:	4b27      	ldr	r3, [pc, #156]	@ (8002a8c <StopInputHandler+0xe0>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
    bEscIntEnabled = FALSE;
 80029f4:	4b26      	ldr	r3, [pc, #152]	@ (8002a90 <StopInputHandler+0xe4>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
/*The application ESM function is separated from this function to handle pending transitions*/

    bDcSyncActive = FALSE;
 80029fa:	4b26      	ldr	r3, [pc, #152]	@ (8002a94 <StopInputHandler+0xe8>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
    bDcRunning = FALSE;
 8002a00:	4b25      	ldr	r3, [pc, #148]	@ (8002a98 <StopInputHandler+0xec>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 8002a06:	4b25      	ldr	r3, [pc, #148]	@ (8002a9c <StopInputHandler+0xf0>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
    u16SmSync0Value = 0;
 8002a0c:	4b24      	ldr	r3, [pc, #144]	@ (8002aa0 <StopInputHandler+0xf4>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 8002a12:	4b24      	ldr	r3, [pc, #144]	@ (8002aa4 <StopInputHandler+0xf8>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	801a      	strh	r2, [r3, #0]

    Sync0WdValue = 0;
 8002a18:	4b23      	ldr	r3, [pc, #140]	@ (8002aa8 <StopInputHandler+0xfc>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8002a1e:	4b23      	ldr	r3, [pc, #140]	@ (8002aac <StopInputHandler+0x100>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8002a24:	4b22      	ldr	r3, [pc, #136]	@ (8002ab0 <StopInputHandler+0x104>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8002a2a:	4b22      	ldr	r3, [pc, #136]	@ (8002ab4 <StopInputHandler+0x108>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Value = 0;
 8002a30:	4b21      	ldr	r3, [pc, #132]	@ (8002ab8 <StopInputHandler+0x10c>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 8002a36:	4b21      	ldr	r3, [pc, #132]	@ (8002abc <StopInputHandler+0x110>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	801a      	strh	r2, [r3, #0]


    sSyncManOutPar.u16SmEventMissedCounter = 0;
 8002a3c:	4b20      	ldr	r3, [pc, #128]	@ (8002ac0 <StopInputHandler+0x114>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	851a      	strh	r2, [r3, #40]	@ 0x28
    sSyncManOutPar.u16CycleExceededCounter = 0;
 8002a42:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac0 <StopInputHandler+0x114>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    sSyncManOutPar.u8SyncError = 0;
 8002a48:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac0 <StopInputHandler+0x114>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40


    sSyncManInPar.u16SmEventMissedCounter = 0;
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <StopInputHandler+0x118>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	851a      	strh	r2, [r3, #40]	@ 0x28
    sSyncManInPar.u16CycleExceededCounter = 0;
 8002a56:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <StopInputHandler+0x118>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    sSyncManInPar.u8SyncError = 0;
 8002a5c:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <StopInputHandler+0x118>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    i16WaitForPllRunningTimeout = 0;
 8002a64:	4b18      	ldr	r3, [pc, #96]	@ (8002ac8 <StopInputHandler+0x11c>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	801a      	strh	r2, [r3, #0]

    bWdTrigger = FALSE;
 8002a6a:	4b18      	ldr	r3, [pc, #96]	@ (8002acc <StopInputHandler+0x120>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
    bEcatInputUpdateRunning = FALSE;
 8002a70:	4b17      	ldr	r3, [pc, #92]	@ (8002ad0 <StopInputHandler+0x124>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 8002a76:	4b17      	ldr	r3, [pc, #92]	@ (8002ad4 <StopInputHandler+0x128>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	2400093c 	.word	0x2400093c
 8002a88:	2400093a 	.word	0x2400093a
 8002a8c:	2400090e 	.word	0x2400090e
 8002a90:	2400092d 	.word	0x2400092d
 8002a94:	24000910 	.word	0x24000910
 8002a98:	24000914 	.word	0x24000914
 8002a9c:	2400091a 	.word	0x2400091a
 8002aa0:	24000918 	.word	0x24000918
 8002aa4:	24000916 	.word	0x24000916
 8002aa8:	24000922 	.word	0x24000922
 8002aac:	24000920 	.word	0x24000920
 8002ab0:	24000924 	.word	0x24000924
 8002ab4:	24000926 	.word	0x24000926
 8002ab8:	24000928 	.word	0x24000928
 8002abc:	2400092a 	.word	0x2400092a
 8002ac0:	240009ec 	.word	0x240009ec
 8002ac4:	24000a30 	.word	0x24000a30
 8002ac8:	2400091c 	.word	0x2400091c
 8002acc:	2400090f 	.word	0x2400090f
 8002ad0:	2400090d 	.word	0x2400090d
 8002ad4:	240009e5 	.word	0x240009e5

08002ad8 <BackToInitTransition>:
\brief    This function is called when a X to Init transition is completed

*////////////////////////////////////////////////////////////////////////////////////////

void BackToInitTransition(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
    /* Reset indication that the user has written a sync mode*/
    bSyncSetByUser = FALSE;
 8002adc:	4b03      	ldr	r3, [pc, #12]	@ (8002aec <BackToInitTransition+0x14>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	240009e5 	.word	0x240009e5

08002af0 <SetALStatus>:
 \param alStatusCode    New AL Status Code (written to register 0x134)

  \brief  The function changes the state of the EtherCAT ASIC to the requested.
*////////////////////////////////////////////////////////////////////////////////////////
void SetALStatus(UINT8 alStatus, UINT16 alStatusCode)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	460a      	mov	r2, r1
 8002afa:	71fb      	strb	r3, [r7, #7]
 8002afc:	4613      	mov	r3, r2
 8002afe:	80bb      	strh	r3, [r7, #4]
    UINT16 Value = alStatusCode;
 8002b00:	88bb      	ldrh	r3, [r7, #4]
 8002b02:	81fb      	strh	r3, [r7, #14]

    /*update global status variable if required*/
    if(nAlStatus != alStatus)
 8002b04:	4b27      	ldr	r3, [pc, #156]	@ (8002ba4 <SetALStatus+0xb4>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	79fa      	ldrb	r2, [r7, #7]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d002      	beq.n	8002b14 <SetALStatus+0x24>
    {
        nAlStatus = alStatus;
 8002b0e:	4a25      	ldr	r2, [pc, #148]	@ (8002ba4 <SetALStatus+0xb4>)
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	7013      	strb	r3, [r2, #0]
    }


    if (alStatusCode != 0xFFFF)
 8002b14:	88bb      	ldrh	r3, [r7, #4]
 8002b16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d009      	beq.n	8002b32 <SetALStatus+0x42>
    {
        Value = SWAPWORD(Value);
 8002b1e:	89fb      	ldrh	r3, [r7, #14]
 8002b20:	81fb      	strh	r3, [r7, #14]

        HW_EscWriteWord(Value,ESC_AL_STATUS_CODE_OFFSET);
 8002b22:	f107 030e 	add.w	r3, r7, #14
 8002b26:	2202      	movs	r2, #2
 8002b28:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fef9 	bl	8000924 <HW_EscWrite>
    }

    Value = nAlStatus;
 8002b32:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba4 <SetALStatus+0xb4>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	81fb      	strh	r3, [r7, #14]
    Value = SWAPWORD(Value);
 8002b38:	89fb      	ldrh	r3, [r7, #14]
 8002b3a:	81fb      	strh	r3, [r7, #14]
    HW_EscWriteWord(Value,ESC_AL_STATUS_OFFSET);
 8002b3c:	f107 030e 	add.w	r3, r7, #14
 8002b40:	2202      	movs	r2, #2
 8002b42:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd feec 	bl	8000924 <HW_EscWrite>

    /*The Run LED state is set in Set LED Indication, only the Error LED blink code is set here*/

    /*set Error blink code*/
    if(alStatusCode == 0x00 || !(alStatus & STATE_CHANGE))
 8002b4c:	88bb      	ldrh	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d004      	beq.n	8002b5c <SetALStatus+0x6c>
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d103      	bne.n	8002b64 <SetALStatus+0x74>
    {
        u8EcatErrorLed = LED_OFF;
 8002b5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <SetALStatus+0xb8>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	e01b      	b.n	8002b9c <SetALStatus+0xac>
    }
    else if((alStatusCode == ALSTATUSCODE_NOSYNCERROR) ||
 8002b64:	88bb      	ldrh	r3, [r7, #4]
 8002b66:	2b2d      	cmp	r3, #45	@ 0x2d
 8002b68:	d009      	beq.n	8002b7e <SetALStatus+0x8e>
 8002b6a:	88bb      	ldrh	r3, [r7, #4]
 8002b6c:	2b1a      	cmp	r3, #26
 8002b6e:	d006      	beq.n	8002b7e <SetALStatus+0x8e>
        (alStatusCode == ALSTATUSCODE_SYNCERROR) ||
 8002b70:	88bb      	ldrh	r3, [r7, #4]
 8002b72:	2b32      	cmp	r3, #50	@ 0x32
 8002b74:	d003      	beq.n	8002b7e <SetALStatus+0x8e>
        (alStatusCode == ALSTATUSCODE_DCPLLSYNCERROR)
/*ECATCHANGE_START(V5.13) ESM1*/
        || (u8LocalErrorState > 0))
 8002b76:	4b0d      	ldr	r3, [pc, #52]	@ (8002bac <SetALStatus+0xbc>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <SetALStatus+0x96>
/*ECATCHANGE_END(V5.13) ESM1*/
    {
        u8EcatErrorLed = LED_SINGLEFLASH;
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba8 <SetALStatus+0xb8>)
 8002b80:	2241      	movs	r2, #65	@ 0x41
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e00a      	b.n	8002b9c <SetALStatus+0xac>
    }
    else if((alStatusCode == ALSTATUSCODE_SMWATCHDOG))
 8002b86:	88bb      	ldrh	r3, [r7, #4]
 8002b88:	2b1b      	cmp	r3, #27
 8002b8a:	d103      	bne.n	8002b94 <SetALStatus+0xa4>
    {
        u8EcatErrorLed = LED_DOUBLEFLASH;
 8002b8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <SetALStatus+0xb8>)
 8002b8e:	2242      	movs	r2, #66	@ 0x42
 8002b90:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        u8EcatErrorLed = LED_BLINKING;
    }
}
 8002b92:	e003      	b.n	8002b9c <SetALStatus+0xac>
        u8EcatErrorLed = LED_BLINKING;
 8002b94:	4b04      	ldr	r3, [pc, #16]	@ (8002ba8 <SetALStatus+0xb8>)
 8002b96:	2240      	movs	r2, #64	@ 0x40
 8002b98:	701a      	strb	r2, [r3, #0]
}
 8002b9a:	e7ff      	b.n	8002b9c <SetALStatus+0xac>
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	24000942 	.word	0x24000942
 8002ba8:	24000938 	.word	0x24000938
 8002bac:	24000932 	.word	0x24000932

08002bb0 <AL_ControlInd>:
              alControl contains the requested new state (INIT, PRE_OP or SAFE_OP)

*////////////////////////////////////////////////////////////////////////////////////////

void AL_ControlInd(UINT8 alControl, UINT16 alStatusCode)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	460a      	mov	r2, r1
 8002bba:	71fb      	strb	r3, [r7, #7]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	80bb      	strh	r3, [r7, #4]
    UINT16        result = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	81fb      	strh	r3, [r7, #14]
    UINT8            bErrAck = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	737b      	strb	r3, [r7, #13]
    UINT8         stateTrans;
    /*deactivate ESM timeout counter*/
    EsmTimeoutCounter = -1;
 8002bc8:	4bdb      	ldr	r3, [pc, #876]	@ (8002f38 <AL_ControlInd+0x388>)
 8002bca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bce:	801a      	strh	r2, [r3, #0]
    bApplEsmPending = TRUE;
 8002bd0:	4bda      	ldr	r3, [pc, #872]	@ (8002f3c <AL_ControlInd+0x38c>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]

    /* reset the Error Flag in case of acknowledge by the Master */
    if ( alControl & STATE_CHANGE )
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d009      	beq.n	8002bf4 <AL_ControlInd+0x44>
    {
        bErrAck = 1;
 8002be0:	2301      	movs	r3, #1
 8002be2:	737b      	strb	r3, [r7, #13]
        nAlStatus &= ~STATE_CHANGE;
 8002be4:	4bd6      	ldr	r3, [pc, #856]	@ (8002f40 <AL_ControlInd+0x390>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	f023 0310 	bic.w	r3, r3, #16
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4bd4      	ldr	r3, [pc, #848]	@ (8002f40 <AL_ControlInd+0x390>)
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	e012      	b.n	8002c1a <AL_ControlInd+0x6a>
        /*enable SM2 is moved to state transition block. First check SM Settings.*/
    }
    else if ((nAlStatus & STATE_CHANGE)
 8002bf4:	4bd2      	ldr	r3, [pc, #840]	@ (8002f40 <AL_ControlInd+0x390>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <AL_ControlInd+0x5c>
        // HBu 17.04.08: the error has to be acknowledged before when sending the same (or a higher) state
        //               (the error was acknowledged with the same state before independent of the acknowledge flag)
        /*Error Acknowledge with 0xX1 is allowed*/
        && (alControl & STATE_MASK) != STATE_INIT)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	f040 8392 	bne.w	8003330 <AL_ControlInd+0x780>
           and the new state request will be ignored */
        return;
    }
    else
    {
        nAlStatus &= STATE_MASK;
 8002c0c:	4bcc      	ldr	r3, [pc, #816]	@ (8002f40 <AL_ControlInd+0x390>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	4bca      	ldr	r3, [pc, #808]	@ (8002f40 <AL_ControlInd+0x390>)
 8002c18:	701a      	strb	r2, [r3, #0]

    

    /* generate a variable for the state transition
      (Bit 0-3: new state (AL Control), Bit 4-7: old state (AL Status) */
    alControl &= STATE_MASK;
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	71fb      	strb	r3, [r7, #7]
    stateTrans = nAlStatus;
 8002c22:	4bc7      	ldr	r3, [pc, #796]	@ (8002f40 <AL_ControlInd+0x390>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	733b      	strb	r3, [r7, #12]
    stateTrans <<= 4;
 8002c28:	7b3b      	ldrb	r3, [r7, #12]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	733b      	strb	r3, [r7, #12]
    stateTrans += alControl;
 8002c2e:	7b3a      	ldrb	r2, [r7, #12]
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	4413      	add	r3, r2
 8002c34:	733b      	strb	r3, [r7, #12]

    /* check the SYNCM settings depending on the state transition */
    switch ( stateTrans )
 8002c36:	7b3b      	ldrb	r3, [r7, #12]
 8002c38:	2b88      	cmp	r3, #136	@ 0x88
 8002c3a:	d074      	beq.n	8002d26 <AL_ControlInd+0x176>
 8002c3c:	2b88      	cmp	r3, #136	@ 0x88
 8002c3e:	dc7b      	bgt.n	8002d38 <AL_ControlInd+0x188>
 8002c40:	2b84      	cmp	r3, #132	@ 0x84
 8002c42:	d070      	beq.n	8002d26 <AL_ControlInd+0x176>
 8002c44:	2b84      	cmp	r3, #132	@ 0x84
 8002c46:	dc77      	bgt.n	8002d38 <AL_ControlInd+0x188>
 8002c48:	2b82      	cmp	r3, #130	@ 0x82
 8002c4a:	d05d      	beq.n	8002d08 <AL_ControlInd+0x158>
 8002c4c:	2b82      	cmp	r3, #130	@ 0x82
 8002c4e:	dc73      	bgt.n	8002d38 <AL_ControlInd+0x188>
 8002c50:	2b12      	cmp	r3, #18
 8002c52:	d059      	beq.n	8002d08 <AL_ControlInd+0x158>
 8002c54:	2b12      	cmp	r3, #18
 8002c56:	db6f      	blt.n	8002d38 <AL_ControlInd+0x188>
 8002c58:	2b48      	cmp	r3, #72	@ 0x48
 8002c5a:	dc6d      	bgt.n	8002d38 <AL_ControlInd+0x188>
 8002c5c:	2b22      	cmp	r3, #34	@ 0x22
 8002c5e:	db6b      	blt.n	8002d38 <AL_ControlInd+0x188>
 8002c60:	3b22      	subs	r3, #34	@ 0x22
 8002c62:	2b26      	cmp	r3, #38	@ 0x26
 8002c64:	d868      	bhi.n	8002d38 <AL_ControlInd+0x188>
 8002c66:	a201      	add	r2, pc, #4	@ (adr r2, 8002c6c <AL_ControlInd+0xbc>)
 8002c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6c:	08002d09 	.word	0x08002d09
 8002c70:	08002d39 	.word	0x08002d39
 8002c74:	08002d15 	.word	0x08002d15
 8002c78:	08002d39 	.word	0x08002d39
 8002c7c:	08002d39 	.word	0x08002d39
 8002c80:	08002d39 	.word	0x08002d39
 8002c84:	08002d39 	.word	0x08002d39
 8002c88:	08002d39 	.word	0x08002d39
 8002c8c:	08002d39 	.word	0x08002d39
 8002c90:	08002d39 	.word	0x08002d39
 8002c94:	08002d39 	.word	0x08002d39
 8002c98:	08002d39 	.word	0x08002d39
 8002c9c:	08002d39 	.word	0x08002d39
 8002ca0:	08002d39 	.word	0x08002d39
 8002ca4:	08002d39 	.word	0x08002d39
 8002ca8:	08002d39 	.word	0x08002d39
 8002cac:	08002d39 	.word	0x08002d39
 8002cb0:	08002d39 	.word	0x08002d39
 8002cb4:	08002d39 	.word	0x08002d39
 8002cb8:	08002d39 	.word	0x08002d39
 8002cbc:	08002d39 	.word	0x08002d39
 8002cc0:	08002d39 	.word	0x08002d39
 8002cc4:	08002d39 	.word	0x08002d39
 8002cc8:	08002d39 	.word	0x08002d39
 8002ccc:	08002d39 	.word	0x08002d39
 8002cd0:	08002d39 	.word	0x08002d39
 8002cd4:	08002d39 	.word	0x08002d39
 8002cd8:	08002d39 	.word	0x08002d39
 8002cdc:	08002d39 	.word	0x08002d39
 8002ce0:	08002d39 	.word	0x08002d39
 8002ce4:	08002d39 	.word	0x08002d39
 8002ce8:	08002d39 	.word	0x08002d39
 8002cec:	08002d09 	.word	0x08002d09
 8002cf0:	08002d39 	.word	0x08002d39
 8002cf4:	08002d27 	.word	0x08002d27
 8002cf8:	08002d39 	.word	0x08002d39
 8002cfc:	08002d39 	.word	0x08002d39
 8002d00:	08002d39 	.word	0x08002d39
 8002d04:	08002d27 	.word	0x08002d27
    case SAFEOP_2_PREOP:
    case PREOP_2_PREOP:
        /* in PREOP only the SYNCM settings for SYNCM0 and SYNCM1 (mailbox)
           are checked, if result is unequal 0, the slave will stay in or
           switch to INIT and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(MAILBOX_READ+1);
 8002d08:	2002      	movs	r0, #2
 8002d0a:	f7ff f82d 	bl	8001d68 <CheckSmSettings>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	81fb      	strh	r3, [r7, #14]
        break;
 8002d12:	e011      	b.n	8002d38 <AL_ControlInd+0x188>
        /* before checking the SYNCM settings for SYNCM2 and SYNCM3 (process data)
           the expected length of input data (nPdInputSize) and output data (nPdOutputSize)
            could be adapted (changed by PDO-Assign and/or PDO-Mapping)
            if result is unequal 0, the slave will stay in PREOP and set
            the ErrorInd Bit (bit 4) of the AL-Status */
        result = APPL_GenerateMapping(&nPdInputSize,&nPdOutputSize);
 8002d14:	498b      	ldr	r1, [pc, #556]	@ (8002f44 <AL_ControlInd+0x394>)
 8002d16:	488c      	ldr	r0, [pc, #560]	@ (8002f48 <AL_ControlInd+0x398>)
 8002d18:	f7fd fb24 	bl	8000364 <APPL_GenerateMapping>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	81fb      	strh	r3, [r7, #14]

            if (result != 0)
 8002d20:	89fb      	ldrh	r3, [r7, #14]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d107      	bne.n	8002d36 <AL_ControlInd+0x186>
    case SAFEOP_2_SAFEOP:
    case OP_2_OP:
        /* in SAFEOP or OP the SYNCM settings for all SYNCM are checked
           if result is unequal 0, the slave will stay in or
           switch to PREOP and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(nMaxSyncMan);
 8002d26:	4b89      	ldr	r3, [pc, #548]	@ (8002f4c <AL_ControlInd+0x39c>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff f81c 	bl	8001d68 <CheckSmSettings>
 8002d30:	4603      	mov	r3, r0
 8002d32:	81fb      	strh	r3, [r7, #14]
        break;
 8002d34:	e000      	b.n	8002d38 <AL_ControlInd+0x188>
                break;
 8002d36:	bf00      	nop

    }

    if ( result == 0 )
 8002d38:	89fb      	ldrh	r3, [r7, #14]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 8211 	bne.w	8003162 <AL_ControlInd+0x5b2>
    {
        /* execute the corresponding local management service(s) depending on the state transition */
        nEcatStateTrans = 0;
 8002d40:	4b83      	ldr	r3, [pc, #524]	@ (8002f50 <AL_ControlInd+0x3a0>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	801a      	strh	r2, [r3, #0]
        switch ( stateTrans )
 8002d46:	7b3b      	ldrb	r3, [r7, #12]
 8002d48:	3b11      	subs	r3, #17
 8002d4a:	2b77      	cmp	r3, #119	@ 0x77
 8002d4c:	f200 8206 	bhi.w	800315c <AL_ControlInd+0x5ac>
 8002d50:	a201      	add	r2, pc, #4	@ (adr r2, 8002d58 <AL_ControlInd+0x1a8>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08003113 	.word	0x08003113
 8002d5c:	08002f65 	.word	0x08002f65
 8002d60:	08002f55 	.word	0x08002f55
 8002d64:	08003157 	.word	0x08003157
 8002d68:	0800315d 	.word	0x0800315d
 8002d6c:	0800315d 	.word	0x0800315d
 8002d70:	0800315d 	.word	0x0800315d
 8002d74:	08003157 	.word	0x08003157
 8002d78:	0800315d 	.word	0x0800315d
 8002d7c:	0800315d 	.word	0x0800315d
 8002d80:	0800315d 	.word	0x0800315d
 8002d84:	0800315d 	.word	0x0800315d
 8002d88:	0800315d 	.word	0x0800315d
 8002d8c:	0800315d 	.word	0x0800315d
 8002d90:	0800315d 	.word	0x0800315d
 8002d94:	0800315d 	.word	0x0800315d
 8002d98:	08003101 	.word	0x08003101
 8002d9c:	08003117 	.word	0x08003117
 8002da0:	08003157 	.word	0x08003157
 8002da4:	08002fc7 	.word	0x08002fc7
 8002da8:	0800315d 	.word	0x0800315d
 8002dac:	0800315d 	.word	0x0800315d
 8002db0:	0800315d 	.word	0x0800315d
 8002db4:	08003157 	.word	0x08003157
 8002db8:	0800315d 	.word	0x0800315d
 8002dbc:	0800315d 	.word	0x0800315d
 8002dc0:	0800315d 	.word	0x0800315d
 8002dc4:	0800315d 	.word	0x0800315d
 8002dc8:	0800315d 	.word	0x0800315d
 8002dcc:	0800315d 	.word	0x0800315d
 8002dd0:	0800315d 	.word	0x0800315d
 8002dd4:	0800315d 	.word	0x0800315d
 8002dd8:	08002f5b 	.word	0x08002f5b
 8002ddc:	08003157 	.word	0x08003157
 8002de0:	0800315d 	.word	0x0800315d
 8002de4:	08003157 	.word	0x08003157
 8002de8:	0800315d 	.word	0x0800315d
 8002dec:	0800315d 	.word	0x0800315d
 8002df0:	0800315d 	.word	0x0800315d
 8002df4:	08003157 	.word	0x08003157
 8002df8:	0800315d 	.word	0x0800315d
 8002dfc:	0800315d 	.word	0x0800315d
 8002e00:	0800315d 	.word	0x0800315d
 8002e04:	0800315d 	.word	0x0800315d
 8002e08:	0800315d 	.word	0x0800315d
 8002e0c:	0800315d 	.word	0x0800315d
 8002e10:	0800315d 	.word	0x0800315d
 8002e14:	0800315d 	.word	0x0800315d
 8002e18:	080030e5 	.word	0x080030e5
 8002e1c:	080030b9 	.word	0x080030b9
 8002e20:	08003157 	.word	0x08003157
 8002e24:	08003117 	.word	0x08003117
 8002e28:	0800315d 	.word	0x0800315d
 8002e2c:	0800315d 	.word	0x0800315d
 8002e30:	0800315d 	.word	0x0800315d
 8002e34:	0800301d 	.word	0x0800301d
 8002e38:	0800315d 	.word	0x0800315d
 8002e3c:	0800315d 	.word	0x0800315d
 8002e40:	0800315d 	.word	0x0800315d
 8002e44:	0800315d 	.word	0x0800315d
 8002e48:	0800315d 	.word	0x0800315d
 8002e4c:	0800315d 	.word	0x0800315d
 8002e50:	0800315d 	.word	0x0800315d
 8002e54:	0800315d 	.word	0x0800315d
 8002e58:	0800315d 	.word	0x0800315d
 8002e5c:	0800315d 	.word	0x0800315d
 8002e60:	0800315d 	.word	0x0800315d
 8002e64:	0800315d 	.word	0x0800315d
 8002e68:	0800315d 	.word	0x0800315d
 8002e6c:	0800315d 	.word	0x0800315d
 8002e70:	0800315d 	.word	0x0800315d
 8002e74:	0800315d 	.word	0x0800315d
 8002e78:	0800315d 	.word	0x0800315d
 8002e7c:	0800315d 	.word	0x0800315d
 8002e80:	0800315d 	.word	0x0800315d
 8002e84:	0800315d 	.word	0x0800315d
 8002e88:	0800315d 	.word	0x0800315d
 8002e8c:	0800315d 	.word	0x0800315d
 8002e90:	0800315d 	.word	0x0800315d
 8002e94:	0800315d 	.word	0x0800315d
 8002e98:	0800315d 	.word	0x0800315d
 8002e9c:	0800315d 	.word	0x0800315d
 8002ea0:	0800315d 	.word	0x0800315d
 8002ea4:	0800315d 	.word	0x0800315d
 8002ea8:	0800315d 	.word	0x0800315d
 8002eac:	0800315d 	.word	0x0800315d
 8002eb0:	0800315d 	.word	0x0800315d
 8002eb4:	0800315d 	.word	0x0800315d
 8002eb8:	0800315d 	.word	0x0800315d
 8002ebc:	0800315d 	.word	0x0800315d
 8002ec0:	0800315d 	.word	0x0800315d
 8002ec4:	0800315d 	.word	0x0800315d
 8002ec8:	0800315d 	.word	0x0800315d
 8002ecc:	0800315d 	.word	0x0800315d
 8002ed0:	0800315d 	.word	0x0800315d
 8002ed4:	0800315d 	.word	0x0800315d
 8002ed8:	0800315d 	.word	0x0800315d
 8002edc:	0800315d 	.word	0x0800315d
 8002ee0:	0800315d 	.word	0x0800315d
 8002ee4:	0800315d 	.word	0x0800315d
 8002ee8:	0800315d 	.word	0x0800315d
 8002eec:	0800315d 	.word	0x0800315d
 8002ef0:	0800315d 	.word	0x0800315d
 8002ef4:	0800315d 	.word	0x0800315d
 8002ef8:	0800315d 	.word	0x0800315d
 8002efc:	0800315d 	.word	0x0800315d
 8002f00:	0800315d 	.word	0x0800315d
 8002f04:	0800315d 	.word	0x0800315d
 8002f08:	0800315d 	.word	0x0800315d
 8002f0c:	0800315d 	.word	0x0800315d
 8002f10:	0800315d 	.word	0x0800315d
 8002f14:	0800315d 	.word	0x0800315d
 8002f18:	080030c9 	.word	0x080030c9
 8002f1c:	0800309b 	.word	0x0800309b
 8002f20:	08003157 	.word	0x08003157
 8002f24:	0800308b 	.word	0x0800308b
 8002f28:	0800315d 	.word	0x0800315d
 8002f2c:	0800315d 	.word	0x0800315d
 8002f30:	0800315d 	.word	0x0800315d
 8002f34:	08003117 	.word	0x08003117
 8002f38:	24000912 	.word	0x24000912
 8002f3c:	24000933 	.word	0x24000933
 8002f40:	24000942 	.word	0x24000942
 8002f44:	2400093c 	.word	0x2400093c
 8002f48:	2400093a 	.word	0x2400093a
 8002f4c:	2400093e 	.word	0x2400093e
 8002f50:	24000936 	.word	0x24000936
        {
        case INIT_2_BOOT    :
            result = ALSTATUSCODE_BOOTNOTSUPP;
 8002f54:	2313      	movs	r3, #19
 8002f56:	81fb      	strh	r3, [r7, #14]



            break;
 8002f58:	e136      	b.n	80031c8 <AL_ControlInd+0x618>

        case BOOT_2_INIT    :
            result = ALSTATUSCODE_BOOTNOTSUPP;
 8002f5a:	2313      	movs	r3, #19
 8002f5c:	81fb      	strh	r3, [r7, #14]

            BackToInitTransition();
 8002f5e:	f7ff fdbb 	bl	8002ad8 <BackToInitTransition>



            break;
 8002f62:	e131      	b.n	80031c8 <AL_ControlInd+0x618>
        case INIT_2_PREOP :

           UpdateEEPROMLoadedState();
 8002f64:	f7fe fe72 	bl	8001c4c <UpdateEEPROMLoadedState>

            if (EepromLoaded == FALSE)
 8002f68:	4ba6      	ldr	r3, [pc, #664]	@ (8003204 <AL_ControlInd+0x654>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <AL_ControlInd+0x3c4>
            {
                //return an error if the EEPROM was not loaded correct  (device restart is required after the new EEPORM update)
                result = ALSTATUSCODE_EE_ERROR;
 8002f70:	2351      	movs	r3, #81	@ 0x51
 8002f72:	81fb      	strh	r3, [r7, #14]
            }
            if (result == 0)
 8002f74:	89fb      	ldrh	r3, [r7, #14]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 811b 	bne.w	80031b2 <AL_ControlInd+0x602>
            {
            /* MBX_StartMailboxHandler (in mailbox.c) checks if the areas of the mailbox
               sync managers SYNCM0 and SYNCM1 overlap each other
              if result is unequal 0, the slave will stay in INIT
              and sets the ErrorInd Bit (bit 4) of the AL-Status */
            result = MBX_StartMailboxHandler();
 8002f7c:	f000 feba 	bl	8003cf4 <MBX_StartMailboxHandler>
 8002f80:	4603      	mov	r3, r0
 8002f82:	81fb      	strh	r3, [r7, #14]
            if (result == 0)
 8002f84:	89fb      	ldrh	r3, [r7, #14]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10c      	bne.n	8002fa4 <AL_ControlInd+0x3f4>
            {
                bApplEsmPending = FALSE;
 8002f8a:	4b9f      	ldr	r3, [pc, #636]	@ (8003208 <AL_ControlInd+0x658>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
                /* additionally there could be an application specific check (in ecatappl.c)
                   if the state transition from INIT to PREOP should be done
                 if result is unequal 0, the slave will stay in INIT
                 and sets the ErrorInd Bit (bit 4) of the AL-Status */
                result = APPL_StartMailboxHandler();
 8002f90:	f7fd f9b5 	bl	80002fe <APPL_StartMailboxHandler>
 8002f94:	4603      	mov	r3, r0
 8002f96:	81fb      	strh	r3, [r7, #14]
                if ( result == 0 )
 8002f98:	89fb      	ldrh	r3, [r7, #14]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <AL_ControlInd+0x3f4>
                {
                    bMbxRunning = TRUE;
 8002f9e:	4b9b      	ldr	r3, [pc, #620]	@ (800320c <AL_ControlInd+0x65c>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
                }
            }

            if(result != 0 && result != NOERROR_INWORK)
 8002fa4:	89fb      	ldrh	r3, [r7, #14]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8103 	beq.w	80031b2 <AL_ControlInd+0x602>
 8002fac:	89fb      	ldrh	r3, [r7, #14]
 8002fae:	2bff      	cmp	r3, #255	@ 0xff
 8002fb0:	f000 80ff 	beq.w	80031b2 <AL_ControlInd+0x602>
            {
                /*Stop APPL Mbx handler if APPL Start Mbx handler was called before*/
                    if (!bApplEsmPending)
 8002fb4:	4b94      	ldr	r3, [pc, #592]	@ (8003208 <AL_ControlInd+0x658>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <AL_ControlInd+0x410>
                    {
                        APPL_StopMailboxHandler();
 8002fbc:	f7fd f9a7 	bl	800030e <APPL_StopMailboxHandler>
                    }

                 MBX_StopMailboxHandler();
 8002fc0:	f000 ff14 	bl	8003dec <MBX_StopMailboxHandler>
            }

            }
            break;
 8002fc4:	e0f5      	b.n	80031b2 <AL_ControlInd+0x602>

        case PREOP_2_SAFEOP:
            /* start the input handler (function is defined above) */
            result = StartInputHandler();
 8002fc6:	f7ff f88d 	bl	80020e4 <StartInputHandler>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	81fb      	strh	r3, [r7, #14]
            if ( result == 0 )
 8002fce:	89fb      	ldrh	r3, [r7, #14]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d112      	bne.n	8002ffa <AL_ControlInd+0x44a>
            {
                bApplEsmPending = FALSE;
 8002fd4:	4b8c      	ldr	r3, [pc, #560]	@ (8003208 <AL_ControlInd+0x658>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
                result = APPL_StartInputHandler(&u16ALEventMask);
 8002fda:	488d      	ldr	r0, [pc, #564]	@ (8003210 <AL_ControlInd+0x660>)
 8002fdc:	f7fd f99f 	bl	800031e <APPL_StartInputHandler>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 8002fe4:	89fb      	ldrh	r3, [r7, #14]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d107      	bne.n	8002ffa <AL_ControlInd+0x44a>
                {
/*ECATCHANGE_START(V5.13) ECAT1*/
/*ECATCHANGE_END(V5.13) ECAT1*/
                    /* initialize the AL Event Mask register (0x204) */
                    SetALEventMask( u16ALEventMask );
 8002fea:	4b89      	ldr	r3, [pc, #548]	@ (8003210 <AL_ControlInd+0x660>)
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fe0e 	bl	8001c10 <SetALEventMask>

                    bEcatInputUpdateRunning = TRUE;
 8002ff4:	4b87      	ldr	r3, [pc, #540]	@ (8003214 <AL_ControlInd+0x664>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
                }
            }

            /*if one start input handler returned an error stop the input handler*/
            if(result != 0 && result != NOERROR_INWORK)
 8002ffa:	89fb      	ldrh	r3, [r7, #14]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80da 	beq.w	80031b6 <AL_ControlInd+0x606>
 8003002:	89fb      	ldrh	r3, [r7, #14]
 8003004:	2bff      	cmp	r3, #255	@ 0xff
 8003006:	f000 80d6 	beq.w	80031b6 <AL_ControlInd+0x606>
            {
                if(!bApplEsmPending)
 800300a:	4b7f      	ldr	r3, [pc, #508]	@ (8003208 <AL_ControlInd+0x658>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <AL_ControlInd+0x466>
                {
                    /*Call only the APPL stop handler if the APPL start handler was called before*/
                    /*The application can react to the state transition in the function APPL_StopInputHandler */
                    APPL_StopInputHandler();
 8003012:	f7fd f98f 	bl	8000334 <APPL_StopInputHandler>
                }

                StopInputHandler();
 8003016:	f7ff fcc9 	bl	80029ac <StopInputHandler>
            }
            break;
 800301a:	e0cc      	b.n	80031b6 <AL_ControlInd+0x606>

        case SAFEOP_2_OP:
/*ECATCHANGE_START(V5.13) ESM2*/
            /*enable SM if error was acknowledged*/
            if (bErrAck)
 800301c:	7b7b      	ldrb	r3, [r7, #13]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00e      	beq.n	8003040 <AL_ControlInd+0x490>
            {
                if (nPdOutputSize > 0)
 8003022:	4b7d      	ldr	r3, [pc, #500]	@ (8003218 <AL_ControlInd+0x668>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <AL_ControlInd+0x482>
                {
                    EnableSyncManChannel(PROCESS_DATA_OUT);
 800302a:	2002      	movs	r0, #2
 800302c:	f7fe fe74 	bl	8001d18 <EnableSyncManChannel>
 8003030:	e006      	b.n	8003040 <AL_ControlInd+0x490>
                }
                else
                    if (nPdInputSize > 0)
 8003032:	4b7a      	ldr	r3, [pc, #488]	@ (800321c <AL_ControlInd+0x66c>)
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <AL_ControlInd+0x490>
                    {
                        EnableSyncManChannel(PROCESS_DATA_IN);
 800303a:	2003      	movs	r0, #3
 800303c:	f7fe fe6c 	bl	8001d18 <EnableSyncManChannel>
                    }
            }
            /*ECATCHANGE_END(V5.13) ESM2*/

            /* start the output handler (function is defined above) */
            result = StartOutputHandler();
 8003040:	f7ff fc54 	bl	80028ec <StartOutputHandler>
 8003044:	4603      	mov	r3, r0
 8003046:	81fb      	strh	r3, [r7, #14]
            if(result == 0)
 8003048:	89fb      	ldrh	r3, [r7, #14]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10c      	bne.n	8003068 <AL_ControlInd+0x4b8>
            {
                bApplEsmPending = FALSE;
 800304e:	4b6e      	ldr	r3, [pc, #440]	@ (8003208 <AL_ControlInd+0x658>)
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
                result = APPL_StartOutputHandler();
 8003054:	f7fd f976 	bl	8000344 <APPL_StartOutputHandler>
 8003058:	4603      	mov	r3, r0
 800305a:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 800305c:	89fb      	ldrh	r3, [r7, #14]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d102      	bne.n	8003068 <AL_ControlInd+0x4b8>
                {
                    /*Device is in OPERATINAL*/
                    bEcatOutputUpdateRunning = TRUE;
 8003062:	4b6f      	ldr	r3, [pc, #444]	@ (8003220 <AL_ControlInd+0x670>)
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
                }

            }

            if ( result != 0 && result != NOERROR_INWORK)
 8003068:	89fb      	ldrh	r3, [r7, #14]
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80a5 	beq.w	80031ba <AL_ControlInd+0x60a>
 8003070:	89fb      	ldrh	r3, [r7, #14]
 8003072:	2bff      	cmp	r3, #255	@ 0xff
 8003074:	f000 80a1 	beq.w	80031ba <AL_ControlInd+0x60a>
            {
                    if (!bApplEsmPending)
 8003078:	4b63      	ldr	r3, [pc, #396]	@ (8003208 <AL_ControlInd+0x658>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <AL_ControlInd+0x4d4>
                    {
                        APPL_StopOutputHandler();
 8003080:	f7fd f968 	bl	8000354 <APPL_StopOutputHandler>
                    }

                StopOutputHandler();
 8003084:	f7ff fc80 	bl	8002988 <StopOutputHandler>
            }

            break;
 8003088:	e097      	b.n	80031ba <AL_ControlInd+0x60a>

        case OP_2_SAFEOP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 800308a:	f7fd f963 	bl	8000354 <APPL_StopOutputHandler>

            StopOutputHandler();
 800308e:	f7ff fc7b 	bl	8002988 <StopOutputHandler>

            bApplEsmPending = FALSE;
 8003092:	4b5d      	ldr	r3, [pc, #372]	@ (8003208 <AL_ControlInd+0x658>)
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]

            break;
 8003098:	e096      	b.n	80031c8 <AL_ControlInd+0x618>

        case OP_2_PREOP:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 800309a:	f7fd f95b 	bl	8000354 <APPL_StopOutputHandler>
 800309e:	4603      	mov	r3, r0
 80030a0:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 80030a2:	f7ff fc71 	bl	8002988 <StopOutputHandler>

            bApplEsmPending = FALSE;
 80030a6:	4b58      	ldr	r3, [pc, #352]	@ (8003208 <AL_ControlInd+0x658>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 80030ac:	89fb      	ldrh	r3, [r7, #14]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f040 8085 	bne.w	80031be <AL_ControlInd+0x60e>
            {
                break;
            }

            stateTrans = SAFEOP_2_PREOP;
 80030b4:	2342      	movs	r3, #66	@ 0x42
 80030b6:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_PREOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 80030b8:	f7fd f93c 	bl	8000334 <APPL_StopInputHandler>
           
            StopInputHandler();
 80030bc:	f7ff fc76 	bl	80029ac <StopInputHandler>

            bApplEsmPending = FALSE;
 80030c0:	4b51      	ldr	r3, [pc, #324]	@ (8003208 <AL_ControlInd+0x658>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]

            break;
 80030c6:	e07f      	b.n	80031c8 <AL_ControlInd+0x618>

        case OP_2_INIT:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 80030c8:	f7fd f944 	bl	8000354 <APPL_StopOutputHandler>
 80030cc:	4603      	mov	r3, r0
 80030ce:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 80030d0:	f7ff fc5a 	bl	8002988 <StopOutputHandler>

            bApplEsmPending = FALSE;
 80030d4:	4b4c      	ldr	r3, [pc, #304]	@ (8003208 <AL_ControlInd+0x658>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 80030da:	89fb      	ldrh	r3, [r7, #14]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d170      	bne.n	80031c2 <AL_ControlInd+0x612>
            {
                break;
            }
            
            stateTrans = SAFEOP_2_INIT;
 80030e0:	2341      	movs	r3, #65	@ 0x41
 80030e2:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_INIT:
            /* stop the input handler (function is defined above) */
            result = APPL_StopInputHandler();
 80030e4:	f7fd f926 	bl	8000334 <APPL_StopInputHandler>
 80030e8:	4603      	mov	r3, r0
 80030ea:	81fb      	strh	r3, [r7, #14]
            
            StopInputHandler();
 80030ec:	f7ff fc5e 	bl	80029ac <StopInputHandler>

            bApplEsmPending = FALSE;
 80030f0:	4b45      	ldr	r3, [pc, #276]	@ (8003208 <AL_ControlInd+0x658>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 80030f6:	89fb      	ldrh	r3, [r7, #14]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d164      	bne.n	80031c6 <AL_ControlInd+0x616>
            {
                break;
            }
            stateTrans = PREOP_2_INIT;
 80030fc:	2321      	movs	r3, #33	@ 0x21
 80030fe:	733b      	strb	r3, [r7, #12]

        case PREOP_2_INIT:
            MBX_StopMailboxHandler();
 8003100:	f000 fe74 	bl	8003dec <MBX_StopMailboxHandler>
            result = APPL_StopMailboxHandler();
 8003104:	f7fd f903 	bl	800030e <APPL_StopMailboxHandler>
 8003108:	4603      	mov	r3, r0
 800310a:	81fb      	strh	r3, [r7, #14]

            BackToInitTransition();
 800310c:	f7ff fce4 	bl	8002ad8 <BackToInitTransition>
            break;
 8003110:	e05a      	b.n	80031c8 <AL_ControlInd+0x618>
        case INIT_2_INIT:
            BackToInitTransition();
 8003112:	f7ff fce1 	bl	8002ad8 <BackToInitTransition>
        case PREOP_2_PREOP:
        case SAFEOP_2_SAFEOP:
        case OP_2_OP:
            if(bErrAck)
 8003116:	7b7b      	ldrb	r3, [r7, #13]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d004      	beq.n	8003126 <AL_ControlInd+0x576>
            {
                APPL_AckErrorInd(stateTrans);
 800311c:	7b3b      	ldrb	r3, [r7, #12]
 800311e:	b29b      	uxth	r3, r3
 8003120:	4618      	mov	r0, r3
 8003122:	f7fd f8e1 	bl	80002e8 <APPL_AckErrorInd>
            }


                /*no local error flag is currently active, enable SM*/
                if ( nAlStatus & (STATE_SAFEOP | STATE_OP))
 8003126:	4b3f      	ldr	r3, [pc, #252]	@ (8003224 <AL_ControlInd+0x674>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00e      	beq.n	8003150 <AL_ControlInd+0x5a0>
                {
                    if(nPdOutputSize > 0)
 8003132:	4b39      	ldr	r3, [pc, #228]	@ (8003218 <AL_ControlInd+0x668>)
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <AL_ControlInd+0x592>
                    {
                        EnableSyncManChannel(PROCESS_DATA_OUT);
 800313a:	2002      	movs	r0, #2
 800313c:	f7fe fdec 	bl	8001d18 <EnableSyncManChannel>
 8003140:	e006      	b.n	8003150 <AL_ControlInd+0x5a0>
                    }
                    else 
                    if(nPdInputSize > 0)
 8003142:	4b36      	ldr	r3, [pc, #216]	@ (800321c <AL_ControlInd+0x66c>)
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <AL_ControlInd+0x5a0>
                    {
                        EnableSyncManChannel(PROCESS_DATA_IN);
 800314a:	2003      	movs	r0, #3
 800314c:	f7fe fde4 	bl	8001d18 <EnableSyncManChannel>
                    }
                }
            
            result = NOERROR_NOSTATECHANGE;
 8003150:	23fe      	movs	r3, #254	@ 0xfe
 8003152:	81fb      	strh	r3, [r7, #14]
            break;
 8003154:	e038      	b.n	80031c8 <AL_ControlInd+0x618>
        case SAFEOP_2_BOOT:
        case OP_2_BOOT:
        case BOOT_2_PREOP:
        case BOOT_2_SAFEOP:
        case BOOT_2_OP:
            result = ALSTATUSCODE_INVALIDALCONTROL;
 8003156:	2311      	movs	r3, #17
 8003158:	81fb      	strh	r3, [r7, #14]
            break;
 800315a:	e035      	b.n	80031c8 <AL_ControlInd+0x618>

        default:
            result = ALSTATUSCODE_UNKNOWNALCONTROL;
 800315c:	2312      	movs	r3, #18
 800315e:	81fb      	strh	r3, [r7, #14]
            break;
 8003160:	e032      	b.n	80031c8 <AL_ControlInd+0x618>
    }
    else
    {
        /* the checking of the sync manager settings was not successful
            switch back the state to PREOP or INIT */
        switch (nAlStatus)
 8003162:	4b30      	ldr	r3, [pc, #192]	@ (8003224 <AL_ControlInd+0x674>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b08      	cmp	r3, #8
 8003168:	d006      	beq.n	8003178 <AL_ControlInd+0x5c8>
 800316a:	2b08      	cmp	r3, #8
 800316c:	dc2c      	bgt.n	80031c8 <AL_ControlInd+0x618>
 800316e:	2b02      	cmp	r3, #2
 8003170:	d00a      	beq.n	8003188 <AL_ControlInd+0x5d8>
 8003172:	2b04      	cmp	r3, #4
 8003174:	d004      	beq.n	8003180 <AL_ControlInd+0x5d0>
 8003176:	e027      	b.n	80031c8 <AL_ControlInd+0x618>
        {
        case STATE_OP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 8003178:	f7fd f8ec 	bl	8000354 <APPL_StopOutputHandler>
            StopOutputHandler();
 800317c:	f7ff fc04 	bl	8002988 <StopOutputHandler>
        case STATE_SAFEOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 8003180:	f7fd f8d8 	bl	8000334 <APPL_StopInputHandler>

            StopInputHandler();
 8003184:	f7ff fc12 	bl	80029ac <StopInputHandler>
        case STATE_PREOP:
            if ( result == ALSTATUSCODE_INVALIDMBXCFGINPREOP )
 8003188:	89fb      	ldrh	r3, [r7, #14]
 800318a:	2b16      	cmp	r3, #22
 800318c:	d10d      	bne.n	80031aa <AL_ControlInd+0x5fa>
            {
                /* the mailbox sync manager settings were wrong, switch back to INIT */
                MBX_StopMailboxHandler();
 800318e:	f000 fe2d 	bl	8003dec <MBX_StopMailboxHandler>
                APPL_StopMailboxHandler();
 8003192:	f7fd f8bc 	bl	800030e <APPL_StopMailboxHandler>

                /*Disable SM0 (MBX Out)*/
                DisableSyncManChannel(MAILBOX_WRITE);
 8003196:	2000      	movs	r0, #0
 8003198:	f7fe fd96 	bl	8001cc8 <DisableSyncManChannel>

                /*Disable SM1 (MBX In)*/
                DisableSyncManChannel(MAILBOX_READ);
 800319c:	2001      	movs	r0, #1
 800319e:	f7fe fd93 	bl	8001cc8 <DisableSyncManChannel>

                nAlStatus = STATE_INIT;
 80031a2:	4b20      	ldr	r3, [pc, #128]	@ (8003224 <AL_ControlInd+0x674>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	e00e      	b.n	80031c8 <AL_ControlInd+0x618>
            }
            else
            {
                nAlStatus = STATE_PREOP;
 80031aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003224 <AL_ControlInd+0x674>)
 80031ac:	2202      	movs	r2, #2
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	e00a      	b.n	80031c8 <AL_ControlInd+0x618>
            break;
 80031b2:	bf00      	nop
 80031b4:	e008      	b.n	80031c8 <AL_ControlInd+0x618>
            break;
 80031b6:	bf00      	nop
 80031b8:	e006      	b.n	80031c8 <AL_ControlInd+0x618>
            break;
 80031ba:	bf00      	nop
 80031bc:	e004      	b.n	80031c8 <AL_ControlInd+0x618>
                break;
 80031be:	bf00      	nop
 80031c0:	e002      	b.n	80031c8 <AL_ControlInd+0x618>
                break;
 80031c2:	bf00      	nop
 80031c4:	e000      	b.n	80031c8 <AL_ControlInd+0x618>
                break;
 80031c6:	bf00      	nop
            }
        }
    }

    if ( result == NOERROR_INWORK )
 80031c8:	89fb      	ldrh	r3, [r7, #14]
 80031ca:	2bff      	cmp	r3, #255	@ 0xff
 80031cc:	d150      	bne.n	8003270 <AL_ControlInd+0x6c0>
    {
        /* state transition is still in work
            ECAT_StateChange must be called from the application */
        bEcatWaitForAlControlRes = TRUE;
 80031ce:	4b16      	ldr	r3, [pc, #88]	@ (8003228 <AL_ControlInd+0x678>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
        /* state transition has to be stored */
        nEcatStateTrans = stateTrans;
 80031d4:	7b3b      	ldrb	r3, [r7, #12]
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	4b14      	ldr	r3, [pc, #80]	@ (800322c <AL_ControlInd+0x67c>)
 80031da:	801a      	strh	r2, [r3, #0]

        /*Init ESM timeout counter (will be decremented with the local 1ms timer)*/
        switch(nEcatStateTrans)
 80031dc:	4b13      	ldr	r3, [pc, #76]	@ (800322c <AL_ControlInd+0x67c>)
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	2b48      	cmp	r3, #72	@ 0x48
 80031e2:	d027      	beq.n	8003234 <AL_ControlInd+0x684>
 80031e4:	2b48      	cmp	r3, #72	@ 0x48
 80031e6:	dc2a      	bgt.n	800323e <AL_ControlInd+0x68e>
 80031e8:	2b13      	cmp	r3, #19
 80031ea:	dc02      	bgt.n	80031f2 <AL_ControlInd+0x642>
 80031ec:	2b12      	cmp	r3, #18
 80031ee:	da03      	bge.n	80031f8 <AL_ControlInd+0x648>
 80031f0:	e025      	b.n	800323e <AL_ControlInd+0x68e>
 80031f2:	2b24      	cmp	r3, #36	@ 0x24
 80031f4:	d01e      	beq.n	8003234 <AL_ControlInd+0x684>
 80031f6:	e022      	b.n	800323e <AL_ControlInd+0x68e>
        {
            case INIT_2_PREOP:
            case INIT_2_BOOT:
                EsmTimeoutCounter = PREOPTIMEOUT;
 80031f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003230 <AL_ControlInd+0x680>)
 80031fa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80031fe:	801a      	strh	r2, [r3, #0]
            break;
 8003200:	e021      	b.n	8003246 <AL_ControlInd+0x696>
 8003202:	bf00      	nop
 8003204:	24000958 	.word	0x24000958
 8003208:	24000933 	.word	0x24000933
 800320c:	2400095b 	.word	0x2400095b
 8003210:	2400094a 	.word	0x2400094a
 8003214:	2400090d 	.word	0x2400090d
 8003218:	2400093c 	.word	0x2400093c
 800321c:	2400093a 	.word	0x2400093a
 8003220:	2400090c 	.word	0x2400090c
 8003224:	24000942 	.word	0x24000942
 8003228:	24000934 	.word	0x24000934
 800322c:	24000936 	.word	0x24000936
 8003230:	24000912 	.word	0x24000912
            case PREOP_2_SAFEOP:
            case SAFEOP_2_OP:
                EsmTimeoutCounter = SAFEOP2OPTIMEOUT;
 8003234:	4b40      	ldr	r3, [pc, #256]	@ (8003338 <AL_ControlInd+0x788>)
 8003236:	f242 3228 	movw	r2, #9000	@ 0x2328
 800323a:	801a      	strh	r2, [r3, #0]
                break;
 800323c:	e003      	b.n	8003246 <AL_ControlInd+0x696>
           default:
                EsmTimeoutCounter = 200; //Set default timeout value to 200ms
 800323e:	4b3e      	ldr	r3, [pc, #248]	@ (8003338 <AL_ControlInd+0x788>)
 8003240:	22c8      	movs	r2, #200	@ 0xc8
 8003242:	801a      	strh	r2, [r3, #0]
                break;
 8003244:	bf00      	nop
        }
        EsmTimeoutCounter -= (INT16) (EsmTimeoutCounter / 10); //subtract 10% from the timeout to react before the master runs into a timeout.
 8003246:	4b3c      	ldr	r3, [pc, #240]	@ (8003338 <AL_ControlInd+0x788>)
 8003248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800324c:	b29a      	uxth	r2, r3
 800324e:	4b3a      	ldr	r3, [pc, #232]	@ (8003338 <AL_ControlInd+0x788>)
 8003250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003254:	4939      	ldr	r1, [pc, #228]	@ (800333c <AL_ControlInd+0x78c>)
 8003256:	fb81 0103 	smull	r0, r1, r1, r3
 800325a:	1089      	asrs	r1, r1, #2
 800325c:	17db      	asrs	r3, r3, #31
 800325e:	1acb      	subs	r3, r1, r3
 8003260:	b21b      	sxth	r3, r3
 8003262:	b29b      	uxth	r3, r3
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	b29b      	uxth	r3, r3
 8003268:	b21a      	sxth	r2, r3
 800326a:	4b33      	ldr	r3, [pc, #204]	@ (8003338 <AL_ControlInd+0x788>)
 800326c:	801a      	strh	r2, [r3, #0]
 800326e:	e060      	b.n	8003332 <AL_ControlInd+0x782>

    }
    else if ( alControl != (nAlStatus & STATE_MASK) )
 8003270:	79fa      	ldrb	r2, [r7, #7]
 8003272:	4b33      	ldr	r3, [pc, #204]	@ (8003340 <AL_ControlInd+0x790>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	429a      	cmp	r2, r3
 800327c:	d04e      	beq.n	800331c <AL_ControlInd+0x76c>
    {
        /* The slave state has changed */

        if ( (result != 0 || alStatusCode != 0) && ((alControl | nAlStatus) & STATE_OP) )
 800327e:	89fb      	ldrh	r3, [r7, #14]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <AL_ControlInd+0x6da>
 8003284:	88bb      	ldrh	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01f      	beq.n	80032ca <AL_ControlInd+0x71a>
 800328a:	4b2d      	ldr	r3, [pc, #180]	@ (8003340 <AL_ControlInd+0x790>)
 800328c:	781a      	ldrb	r2, [r3, #0]
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	4313      	orrs	r3, r2
 8003292:	b2db      	uxtb	r3, r3
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d016      	beq.n	80032ca <AL_ControlInd+0x71a>
        {
            /* the local application requested to leave the state OP so we have to disable the SM2
               and make the state change from OP to SAFEOP by calling StopOutputHandler */

            //only execute StopOutputHandler() if Output update is still running
            if(bEcatOutputUpdateRunning)
 800329c:	4b29      	ldr	r3, [pc, #164]	@ (8003344 <AL_ControlInd+0x794>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <AL_ControlInd+0x6fc>
            {
                APPL_StopOutputHandler();
 80032a4:	f7fd f856 	bl	8000354 <APPL_StopOutputHandler>

                StopOutputHandler();
 80032a8:	f7ff fb6e 	bl	8002988 <StopOutputHandler>
            }

            if(nPdOutputSize > 0)
 80032ac:	4b26      	ldr	r3, [pc, #152]	@ (8003348 <AL_ControlInd+0x798>)
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <AL_ControlInd+0x70c>
            {
                /* disable the Sync Manager Channel 2 (outputs) */
                DisableSyncManChannel(PROCESS_DATA_OUT);
 80032b4:	2002      	movs	r0, #2
 80032b6:	f7fe fd07 	bl	8001cc8 <DisableSyncManChannel>
 80032ba:	e006      	b.n	80032ca <AL_ControlInd+0x71a>
            }
            else
                if(nPdInputSize > 0)
 80032bc:	4b23      	ldr	r3, [pc, #140]	@ (800334c <AL_ControlInd+0x79c>)
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <AL_ControlInd+0x71a>
            {
                /*disable Sync Manager 3 (inputs) if no outputs available*/
                DisableSyncManChannel(PROCESS_DATA_IN);
 80032c4:	2003      	movs	r0, #3
 80032c6:	f7fe fcff 	bl	8001cc8 <DisableSyncManChannel>
            }

        }
        if ( result != 0 )
 80032ca:	89fb      	ldrh	r3, [r7, #14]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00e      	beq.n	80032ee <AL_ControlInd+0x73e>
        {
                if (nAlStatus == STATE_OP)
 80032d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <AL_ControlInd+0x790>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d102      	bne.n	80032de <AL_ControlInd+0x72e>
                {
                    nAlStatus = STATE_SAFEOP;
 80032d8:	4b19      	ldr	r3, [pc, #100]	@ (8003340 <AL_ControlInd+0x790>)
 80032da:	2204      	movs	r2, #4
 80032dc:	701a      	strb	r2, [r3, #0]
                }
            /* save the failed status to be able to decide, if the AL Status Code shall be
               reset in case of a coming successful state transition */
            nAlStatus |= STATE_CHANGE;
 80032de:	4b18      	ldr	r3, [pc, #96]	@ (8003340 <AL_ControlInd+0x790>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	f043 0310 	orr.w	r3, r3, #16
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	4b15      	ldr	r3, [pc, #84]	@ (8003340 <AL_ControlInd+0x790>)
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e00b      	b.n	8003306 <AL_ControlInd+0x756>
        }
        else
        {
            /* state transition was successful */
            if ( alStatusCode != 0 )
 80032ee:	88bb      	ldrh	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <AL_ControlInd+0x750>
            {
                /* state change request from the user */
                result = alStatusCode;
 80032f4:	88bb      	ldrh	r3, [r7, #4]
 80032f6:	81fb      	strh	r3, [r7, #14]
                alControl |= STATE_CHANGE;
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	f043 0310 	orr.w	r3, r3, #16
 80032fe:	71fb      	strb	r3, [r7, #7]
            }
            /* acknowledge the new state */
            nAlStatus = alControl;
 8003300:	4a0f      	ldr	r2, [pc, #60]	@ (8003340 <AL_ControlInd+0x790>)
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	7013      	strb	r3, [r2, #0]
        }

        bEcatWaitForAlControlRes = FALSE;
 8003306:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <AL_ControlInd+0x7a0>)
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]

        /* write the AL Status register */
        SetALStatus(nAlStatus, result);
 800330c:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <AL_ControlInd+0x790>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	89fa      	ldrh	r2, [r7, #14]
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fbeb 	bl	8002af0 <SetALStatus>
 800331a:	e00a      	b.n	8003332 <AL_ControlInd+0x782>
    }
    else
    {
        /* Error acknowledgement without a state transition */

         bEcatWaitForAlControlRes = FALSE;
 800331c:	4b0c      	ldr	r3, [pc, #48]	@ (8003350 <AL_ControlInd+0x7a0>)
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]

        /* AL-Status has to be updated and AL-Status-Code has to be reset
           if the the error bit was acknowledged */
        SetALStatus(nAlStatus, 0);
 8003322:	4b07      	ldr	r3, [pc, #28]	@ (8003340 <AL_ControlInd+0x790>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fbe1 	bl	8002af0 <SetALStatus>
 800332e:	e000      	b.n	8003332 <AL_ControlInd+0x782>
        return;
 8003330:	bf00      	nop
    }
    /*ECATCHANGE_START(V5.13) CIA402 4*/
    /*decouple CIA402 state machine from ESM*/
    /*ECATCHANGE_END(V5.13) CIA402 4*/

}
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	24000912 	.word	0x24000912
 800333c:	66666667 	.word	0x66666667
 8003340:	24000942 	.word	0x24000942
 8003344:	2400090c 	.word	0x2400090c
 8003348:	2400093c 	.word	0x2400093c
 800334c:	2400093a 	.word	0x2400093a
 8003350:	24000934 	.word	0x24000934

08003354 <AL_ControlRes>:
 \brief    This function is called cyclic if a state transition is pending (bEcatWaitForAlControlRes == TRUE)
 \brief    If the ESM timeout is expired the state transition will be rejected. Otherwise the application specific state transition function is called.
 \brief    If the pending state transition is triggered by the application the transition need to be completed by the application (ECAT_StateChange())
  *////////////////////////////////////////////////////////////////////////////////////////
void AL_ControlRes(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
    if(bEcatWaitForAlControlRes)
 800335a:	4b99      	ldr	r3, [pc, #612]	@ (80035c0 <AL_ControlRes+0x26c>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 8172 	beq.w	8003648 <AL_ControlRes+0x2f4>
    {
        UINT16 result = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	807b      	strh	r3, [r7, #2]
        UINT8 Status = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	71fb      	strb	r3, [r7, #7]
        UINT16 StatusCode = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	80bb      	strh	r3, [r7, #4]

        if(EsmTimeoutCounter == 0)
 8003370:	4b94      	ldr	r3, [pc, #592]	@ (80035c4 <AL_ControlRes+0x270>)
 8003372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f040 8088 	bne.w	800348c <AL_ControlRes+0x138>
        {
            Status =  (UINT8)(nEcatStateTrans >> 4);
 800337c:	4b92      	ldr	r3, [pc, #584]	@ (80035c8 <AL_ControlRes+0x274>)
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	b29b      	uxth	r3, r3
 8003384:	71fb      	strb	r3, [r7, #7]

            /* ESM timeout expired*/
            switch(nEcatStateTrans)
 8003386:	4b90      	ldr	r3, [pc, #576]	@ (80035c8 <AL_ControlRes+0x274>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	2b48      	cmp	r3, #72	@ 0x48
 800338c:	d034      	beq.n	80033f8 <AL_ControlRes+0xa4>
 800338e:	2b48      	cmp	r3, #72	@ 0x48
 8003390:	f300 8147 	bgt.w	8003622 <AL_ControlRes+0x2ce>
 8003394:	2b13      	cmp	r3, #19
 8003396:	dc02      	bgt.n	800339e <AL_ControlRes+0x4a>
 8003398:	2b12      	cmp	r3, #18
 800339a:	da03      	bge.n	80033a4 <AL_ControlRes+0x50>
 800339c:	e141      	b.n	8003622 <AL_ControlRes+0x2ce>
 800339e:	2b24      	cmp	r3, #36	@ 0x24
 80033a0:	d015      	beq.n	80033ce <AL_ControlRes+0x7a>
 80033a2:	e13e      	b.n	8003622 <AL_ControlRes+0x2ce>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:

                        if (!bApplEsmPending)
 80033a4:	4b89      	ldr	r3, [pc, #548]	@ (80035cc <AL_ControlRes+0x278>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <AL_ControlRes+0x5c>
                        {
                            APPL_StopMailboxHandler();
 80033ac:	f7fc ffaf 	bl	800030e <APPL_StopMailboxHandler>
                        }

                    MBX_StopMailboxHandler();
 80033b0:	f000 fd1c 	bl	8003dec <MBX_StopMailboxHandler>
                    /*ECATCHANGE_START(V5.13) ESM1*/
                    if((u8LocalErrorState & STATE_MASK) == STATE_INIT)
 80033b4:	4b86      	ldr	r3, [pc, #536]	@ (80035d0 <AL_ControlRes+0x27c>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d103      	bne.n	80033c8 <AL_ControlRes+0x74>
                        /*ECATCHANGE_END(V5.13) ESM1*/
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 80033c0:	4b84      	ldr	r3, [pc, #528]	@ (80035d4 <AL_ControlRes+0x280>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 80033c6:	e12c      	b.n	8003622 <AL_ControlRes+0x2ce>
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	80bb      	strh	r3, [r7, #4]
                break;
 80033cc:	e129      	b.n	8003622 <AL_ControlRes+0x2ce>
                case PREOP_2_SAFEOP:

                        if (!bApplEsmPending)
 80033ce:	4b7f      	ldr	r3, [pc, #508]	@ (80035cc <AL_ControlRes+0x278>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <AL_ControlRes+0x86>
                        {
                            APPL_StopInputHandler();
 80033d6:	f7fc ffad 	bl	8000334 <APPL_StopInputHandler>
                        }

                    StopInputHandler();
 80033da:	f7ff fae7 	bl	80029ac <StopInputHandler>
                    
                    /*ECATCHANGE_START(V5.13) ESM1*/
                    if ((u8LocalErrorState & STATE_MASK) == STATE_PREOP)
 80033de:	4b7c      	ldr	r3, [pc, #496]	@ (80035d0 <AL_ControlRes+0x27c>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d103      	bne.n	80033f2 <AL_ControlRes+0x9e>
                        /*ECATCHANGE_END(V5.13) ESM1*/
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 80033ea:	4b7a      	ldr	r3, [pc, #488]	@ (80035d4 <AL_ControlRes+0x280>)
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 80033f0:	e117      	b.n	8003622 <AL_ControlRes+0x2ce>
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	80bb      	strh	r3, [r7, #4]
                break;
 80033f6:	e114      	b.n	8003622 <AL_ControlRes+0x2ce>
                case SAFEOP_2_OP:
                    if(bDcSyncActive)
 80033f8:	4b77      	ldr	r3, [pc, #476]	@ (80035d8 <AL_ControlRes+0x284>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d020      	beq.n	8003442 <AL_ControlRes+0xee>
                    {
                        /*SafeOP to OP timeout expired check which AL status code need to be written*/
                        if(!bDcRunning)
 8003400:	4b76      	ldr	r3, [pc, #472]	@ (80035dc <AL_ControlRes+0x288>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <AL_ControlRes+0xba>
                        {
                            /*no Sync0 signal received*/
                            StatusCode = ALSTATUSCODE_NOSYNCERROR;
 8003408:	232d      	movs	r3, #45	@ 0x2d
 800340a:	80bb      	strh	r3, [r7, #4]
 800340c:	e031      	b.n	8003472 <AL_ControlRes+0x11e>
                        }
                        else if(!bEcatFirstOutputsReceived && (nPdOutputSize > 0))
 800340e:	4b74      	ldr	r3, [pc, #464]	@ (80035e0 <AL_ControlRes+0x28c>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <AL_ControlRes+0xd0>
 8003416:	4b73      	ldr	r3, [pc, #460]	@ (80035e4 <AL_ControlRes+0x290>)
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <AL_ControlRes+0xd0>
                        {
                            /*no process data received*/
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 800341e:	231b      	movs	r3, #27
 8003420:	80bb      	strh	r3, [r7, #4]
 8003422:	e026      	b.n	8003472 <AL_ControlRes+0x11e>
                        }
/*ECATCHANGE_START(V5.13) ESM3*/
                        else if (!bSmSyncSequenceValid)
 8003424:	4b70      	ldr	r3, [pc, #448]	@ (80035e8 <AL_ControlRes+0x294>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <AL_ControlRes+0xde>
                        {
                            /*SM/Sync Sequence is not valid*/
                            StatusCode = ALSTATUSCODE_SYNCERROR;
 800342c:	231a      	movs	r3, #26
 800342e:	80bb      	strh	r3, [r7, #4]
 8003430:	e01f      	b.n	8003472 <AL_ControlRes+0x11e>
                        }
                        else
                        {
                            /*Set valid state transition even if timeout expired*/
                            Status = STATE_OP;
 8003432:	2308      	movs	r3, #8
 8003434:	71fb      	strb	r3, [r7, #7]
                            StatusCode = 0;
 8003436:	2300      	movs	r3, #0
 8003438:	80bb      	strh	r3, [r7, #4]
                            /* Slave is OPERATIONAL */
                            bEcatOutputUpdateRunning = TRUE;
 800343a:	4b6c      	ldr	r3, [pc, #432]	@ (80035ec <AL_ControlRes+0x298>)
 800343c:	2201      	movs	r2, #1
 800343e:	701a      	strb	r2, [r3, #0]
 8003440:	e017      	b.n	8003472 <AL_ControlRes+0x11e>
                        }
/*ECATCHANGE_END(V5.13) ESM3*/
                    }
                    else
                    {
                        if (nPdOutputSize > 0)
 8003442:	4b68      	ldr	r3, [pc, #416]	@ (80035e4 <AL_ControlRes+0x290>)
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <AL_ControlRes+0xfc>
                        {
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 800344a:	231b      	movs	r3, #27
 800344c:	80bb      	strh	r3, [r7, #4]
 800344e:	e010      	b.n	8003472 <AL_ControlRes+0x11e>
                        }
                        else
                        {
                            /*ECATCHANGE_START(V5.13) ESM1*/
                            if ((u8LocalErrorState & STATE_MASK) == STATE_SAFEOP)
 8003450:	4b5f      	ldr	r3, [pc, #380]	@ (80035d0 <AL_ControlRes+0x27c>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	2b04      	cmp	r3, #4
 800345a:	d103      	bne.n	8003464 <AL_ControlRes+0x110>
                            {
                                /*Set application specified error*/
                                StatusCode = u16LocalErrorCode;
 800345c:	4b5d      	ldr	r3, [pc, #372]	@ (80035d4 <AL_ControlRes+0x280>)
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	80bb      	strh	r3, [r7, #4]
 8003462:	e006      	b.n	8003472 <AL_ControlRes+0x11e>
                            }
                            else
                                /*ECATCHANGE_END(V5.13) ESM1*/
                            {
                                /*Set valid state transition even if timeout expired*/
                                Status = STATE_OP;
 8003464:	2308      	movs	r3, #8
 8003466:	71fb      	strb	r3, [r7, #7]
                                StatusCode = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	80bb      	strh	r3, [r7, #4]
                                /* Slave is OPERATIONAL */
                                bEcatOutputUpdateRunning = TRUE;
 800346c:	4b5f      	ldr	r3, [pc, #380]	@ (80035ec <AL_ControlRes+0x298>)
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
                            }
                        }
                    }

                    /*Stop handler on failed transition*/
                    if(StatusCode != 0)
 8003472:	88bb      	ldrh	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80cd 	beq.w	8003614 <AL_ControlRes+0x2c0>
                    {
                            if (!bApplEsmPending)
 800347a:	4b54      	ldr	r3, [pc, #336]	@ (80035cc <AL_ControlRes+0x278>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <AL_ControlRes+0x132>
                            {
                                APPL_StopOutputHandler();
 8003482:	f7fc ff67 	bl	8000354 <APPL_StopOutputHandler>
                            }

                        StopOutputHandler();
 8003486:	f7ff fa7f 	bl	8002988 <StopOutputHandler>
                    }
                break;
 800348a:	e0c3      	b.n	8003614 <AL_ControlRes+0x2c0>
            }
        } //ESM timeout
        else
        {
            /*Call application specific transition function and complete transition it the function returns 0*/
            switch(nEcatStateTrans)
 800348c:	4b4e      	ldr	r3, [pc, #312]	@ (80035c8 <AL_ControlRes+0x274>)
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	2b48      	cmp	r3, #72	@ 0x48
 8003492:	d04a      	beq.n	800352a <AL_ControlRes+0x1d6>
 8003494:	2b48      	cmp	r3, #72	@ 0x48
 8003496:	f300 80c4 	bgt.w	8003622 <AL_ControlRes+0x2ce>
 800349a:	2b13      	cmp	r3, #19
 800349c:	dc02      	bgt.n	80034a4 <AL_ControlRes+0x150>
 800349e:	2b12      	cmp	r3, #18
 80034a0:	da03      	bge.n	80034aa <AL_ControlRes+0x156>
 80034a2:	e0be      	b.n	8003622 <AL_ControlRes+0x2ce>
 80034a4:	2b24      	cmp	r3, #36	@ 0x24
 80034a6:	d022      	beq.n	80034ee <AL_ControlRes+0x19a>
 80034a8:	e0bb      	b.n	8003622 <AL_ControlRes+0x2ce>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:
                    if(bApplEsmPending)
 80034aa:	4b48      	ldr	r3, [pc, #288]	@ (80035cc <AL_ControlRes+0x278>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80b2 	beq.w	8003618 <AL_ControlRes+0x2c4>
                    {
                        bApplEsmPending = FALSE;
 80034b4:	4b45      	ldr	r3, [pc, #276]	@ (80035cc <AL_ControlRes+0x278>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
                        /*APPL_StartMailboxHandler() need to be called*/
                        result = APPL_StartMailboxHandler();
 80034ba:	f7fc ff20 	bl	80002fe <APPL_StartMailboxHandler>
 80034be:	4603      	mov	r3, r0
 80034c0:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 80034c2:	887b      	ldrh	r3, [r7, #2]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d109      	bne.n	80034dc <AL_ControlRes+0x188>
                        {
                            /*The application specific transition was successful => set active mailbox handler indication*/
                            bMbxRunning = TRUE;
 80034c8:	4b49      	ldr	r3, [pc, #292]	@ (80035f0 <AL_ControlRes+0x29c>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
                            Status =  (UINT8)(nEcatStateTrans & STATE_MASK);
 80034ce:	4b3e      	ldr	r3, [pc, #248]	@ (80035c8 <AL_ControlRes+0x274>)
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	71fb      	strb	r3, [r7, #7]
                                APPL_StopMailboxHandler();
                                MBX_StopMailboxHandler();
                            }
                        }
                    }
                break;
 80034da:	e09d      	b.n	8003618 <AL_ControlRes+0x2c4>
                            if(result != NOERROR_INWORK)
 80034dc:	887b      	ldrh	r3, [r7, #2]
 80034de:	2bff      	cmp	r3, #255	@ 0xff
 80034e0:	f000 809a 	beq.w	8003618 <AL_ControlRes+0x2c4>
                                APPL_StopMailboxHandler();
 80034e4:	f7fc ff13 	bl	800030e <APPL_StopMailboxHandler>
                                MBX_StopMailboxHandler();
 80034e8:	f000 fc80 	bl	8003dec <MBX_StopMailboxHandler>
                break;
 80034ec:	e094      	b.n	8003618 <AL_ControlRes+0x2c4>
                case PREOP_2_SAFEOP:
                    if(bApplEsmPending)
 80034ee:	4b37      	ldr	r3, [pc, #220]	@ (80035cc <AL_ControlRes+0x278>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8092 	beq.w	800361c <AL_ControlRes+0x2c8>
                    {
                        bApplEsmPending = FALSE;
 80034f8:	4b34      	ldr	r3, [pc, #208]	@ (80035cc <AL_ControlRes+0x278>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
                        result = APPL_StartInputHandler(&u16ALEventMask);
 80034fe:	483d      	ldr	r0, [pc, #244]	@ (80035f4 <AL_ControlRes+0x2a0>)
 8003500:	f7fc ff0d 	bl	800031e <APPL_StartInputHandler>
 8003504:	4603      	mov	r3, r0
 8003506:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 8003508:	887b      	ldrh	r3, [r7, #2]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d105      	bne.n	800351a <AL_ControlRes+0x1c6>
                        {
                            bEcatInputUpdateRunning = TRUE;
 800350e:	4b3a      	ldr	r3, [pc, #232]	@ (80035f8 <AL_ControlRes+0x2a4>)
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
                            Status = STATE_SAFEOP;
 8003514:	2304      	movs	r3, #4
 8003516:	71fb      	strb	r3, [r7, #7]
                                APPL_StopInputHandler();
                                StopInputHandler();
                            }
                        }
                    }
                break;
 8003518:	e080      	b.n	800361c <AL_ControlRes+0x2c8>
                            if(result != NOERROR_INWORK)
 800351a:	887b      	ldrh	r3, [r7, #2]
 800351c:	2bff      	cmp	r3, #255	@ 0xff
 800351e:	d07d      	beq.n	800361c <AL_ControlRes+0x2c8>
                                APPL_StopInputHandler();
 8003520:	f7fc ff08 	bl	8000334 <APPL_StopInputHandler>
                                StopInputHandler();
 8003524:	f7ff fa42 	bl	80029ac <StopInputHandler>
                break;
 8003528:	e078      	b.n	800361c <AL_ControlRes+0x2c8>
                case SAFEOP_2_OP:
                   if(bApplEsmPending)
 800352a:	4b28      	ldr	r3, [pc, #160]	@ (80035cc <AL_ControlRes+0x278>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d076      	beq.n	8003620 <AL_ControlRes+0x2cc>
                    {
                        if(bDcSyncActive)
 8003532:	4b29      	ldr	r3, [pc, #164]	@ (80035d8 <AL_ControlRes+0x284>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d02a      	beq.n	8003590 <AL_ControlRes+0x23c>
                        {
                            if(i16WaitForPllRunningTimeout > 0 && i16WaitForPllRunningTimeout <= i16WaitForPllRunningCnt)
 800353a:	4b30      	ldr	r3, [pc, #192]	@ (80035fc <AL_ControlRes+0x2a8>)
 800353c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003540:	2b00      	cmp	r3, #0
 8003542:	dd6d      	ble.n	8003620 <AL_ControlRes+0x2cc>
 8003544:	4b2d      	ldr	r3, [pc, #180]	@ (80035fc <AL_ControlRes+0x2a8>)
 8003546:	f9b3 2000 	ldrsh.w	r2, [r3]
 800354a:	4b2d      	ldr	r3, [pc, #180]	@ (8003600 <AL_ControlRes+0x2ac>)
 800354c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003550:	429a      	cmp	r2, r3
 8003552:	dc65      	bgt.n	8003620 <AL_ControlRes+0x2cc>
                            {
                                /*Pll sequence valid for 200ms (set in APPL_StartOutputHandler() )
                                acknowledge state transition to OP */

                                i16WaitForPllRunningTimeout = 0;
 8003554:	4b29      	ldr	r3, [pc, #164]	@ (80035fc <AL_ControlRes+0x2a8>)
 8003556:	2200      	movs	r2, #0
 8003558:	801a      	strh	r2, [r3, #0]
                                i16WaitForPllRunningCnt = 0;
 800355a:	4b29      	ldr	r3, [pc, #164]	@ (8003600 <AL_ControlRes+0x2ac>)
 800355c:	2200      	movs	r2, #0
 800355e:	801a      	strh	r2, [r3, #0]

                                bApplEsmPending = FALSE;
 8003560:	4b1a      	ldr	r3, [pc, #104]	@ (80035cc <AL_ControlRes+0x278>)
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
                                result = APPL_StartOutputHandler();
 8003566:	f7fc feed 	bl	8000344 <APPL_StartOutputHandler>
 800356a:	4603      	mov	r3, r0
 800356c:	807b      	strh	r3, [r7, #2]

                                if(result == 0)
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d105      	bne.n	8003580 <AL_ControlRes+0x22c>
                                {
                                    /* Slave is OPERATIONAL */
                                    bEcatOutputUpdateRunning = TRUE;
 8003574:	4b1d      	ldr	r3, [pc, #116]	@ (80035ec <AL_ControlRes+0x298>)
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 800357a:	2308      	movs	r3, #8
 800357c:	71fb      	strb	r3, [r7, #7]
                                    }
                                }
                            }
                        }       
                    }             
                break;
 800357e:	e04f      	b.n	8003620 <AL_ControlRes+0x2cc>
                                    if(result != NOERROR_INWORK)
 8003580:	887b      	ldrh	r3, [r7, #2]
 8003582:	2bff      	cmp	r3, #255	@ 0xff
 8003584:	d04c      	beq.n	8003620 <AL_ControlRes+0x2cc>
                                        APPL_StopOutputHandler();
 8003586:	f7fc fee5 	bl	8000354 <APPL_StopOutputHandler>
                                        StopOutputHandler();
 800358a:	f7ff f9fd 	bl	8002988 <StopOutputHandler>
                break;
 800358e:	e047      	b.n	8003620 <AL_ControlRes+0x2cc>
                            if(nPdOutputSize == 0 || bEcatFirstOutputsReceived)
 8003590:	4b14      	ldr	r3, [pc, #80]	@ (80035e4 <AL_ControlRes+0x290>)
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <AL_ControlRes+0x24c>
 8003598:	4b11      	ldr	r3, [pc, #68]	@ (80035e0 <AL_ControlRes+0x28c>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d03f      	beq.n	8003620 <AL_ControlRes+0x2cc>
                                bApplEsmPending = FALSE;  
 80035a0:	4b0a      	ldr	r3, [pc, #40]	@ (80035cc <AL_ControlRes+0x278>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
                                result = APPL_StartOutputHandler();
 80035a6:	f7fc fecd 	bl	8000344 <APPL_StartOutputHandler>
 80035aa:	4603      	mov	r3, r0
 80035ac:	807b      	strh	r3, [r7, #2]
                                if(result == 0)
 80035ae:	887b      	ldrh	r3, [r7, #2]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d127      	bne.n	8003604 <AL_ControlRes+0x2b0>
                                    bEcatOutputUpdateRunning = TRUE;
 80035b4:	4b0d      	ldr	r3, [pc, #52]	@ (80035ec <AL_ControlRes+0x298>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 80035ba:	2308      	movs	r3, #8
 80035bc:	71fb      	strb	r3, [r7, #7]
                break;
 80035be:	e02f      	b.n	8003620 <AL_ControlRes+0x2cc>
 80035c0:	24000934 	.word	0x24000934
 80035c4:	24000912 	.word	0x24000912
 80035c8:	24000936 	.word	0x24000936
 80035cc:	24000933 	.word	0x24000933
 80035d0:	24000932 	.word	0x24000932
 80035d4:	24000930 	.word	0x24000930
 80035d8:	24000910 	.word	0x24000910
 80035dc:	24000914 	.word	0x24000914
 80035e0:	2400090e 	.word	0x2400090e
 80035e4:	2400093c 	.word	0x2400093c
 80035e8:	2400091a 	.word	0x2400091a
 80035ec:	2400090c 	.word	0x2400090c
 80035f0:	2400095b 	.word	0x2400095b
 80035f4:	2400094a 	.word	0x2400094a
 80035f8:	2400090d 	.word	0x2400090d
 80035fc:	2400091c 	.word	0x2400091c
 8003600:	2400091e 	.word	0x2400091e
                                    if(result != NOERROR_INWORK)
 8003604:	887b      	ldrh	r3, [r7, #2]
 8003606:	2bff      	cmp	r3, #255	@ 0xff
 8003608:	d00a      	beq.n	8003620 <AL_ControlRes+0x2cc>
                                        APPL_StopOutputHandler();
 800360a:	f7fc fea3 	bl	8000354 <APPL_StopOutputHandler>
                                        StopOutputHandler();
 800360e:	f7ff f9bb 	bl	8002988 <StopOutputHandler>
                break;
 8003612:	e005      	b.n	8003620 <AL_ControlRes+0x2cc>
                break;
 8003614:	bf00      	nop
 8003616:	e004      	b.n	8003622 <AL_ControlRes+0x2ce>
                break;
 8003618:	bf00      	nop
 800361a:	e002      	b.n	8003622 <AL_ControlRes+0x2ce>
                break;
 800361c:	bf00      	nop
 800361e:	e000      	b.n	8003622 <AL_ControlRes+0x2ce>
                break;
 8003620:	bf00      	nop
            }//Switch - transition
        }

        if(Status != 0)
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00f      	beq.n	8003648 <AL_ControlRes+0x2f4>
        {
            /*Pending state transition finished => write AL Status and AL Status Code*/
            bEcatWaitForAlControlRes = FALSE;
 8003628:	4b09      	ldr	r3, [pc, #36]	@ (8003650 <AL_ControlRes+0x2fc>)
 800362a:	2200      	movs	r2, #0
 800362c:	701a      	strb	r2, [r3, #0]

            if (StatusCode != 0)
 800362e:	88bb      	ldrh	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <AL_ControlRes+0x2e8>
            {
                Status |= STATE_CHANGE;
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	f043 0310 	orr.w	r3, r3, #16
 800363a:	71fb      	strb	r3, [r7, #7]
            }

            SetALStatus(Status,StatusCode);
 800363c:	88ba      	ldrh	r2, [r7, #4]
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	4611      	mov	r1, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fa54 	bl	8002af0 <SetALStatus>
        }
    }// Pending state transition (bEcatWaitForAlControlRes == true)
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	24000934 	.word	0x24000934

08003654 <DC_CheckWatchdog>:
 \brief    This function checks the current Sync state and set the local flags
 The analyse of the local flags is handled in "CheckIfEcatError"

*////////////////////////////////////////////////////////////////////////////////////////
void DC_CheckWatchdog(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
    DISABLE_ESC_INT();

    if(bDcSyncActive && bEcatInputUpdateRunning)
 8003658:	4b3c      	ldr	r3, [pc, #240]	@ (800374c <DC_CheckWatchdog+0xf8>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d070      	beq.n	8003742 <DC_CheckWatchdog+0xee>
 8003660:	4b3b      	ldr	r3, [pc, #236]	@ (8003750 <DC_CheckWatchdog+0xfc>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d06c      	beq.n	8003742 <DC_CheckWatchdog+0xee>
    {
        /*If Sync0 watchdog is enabled and expired*/
        if((Sync0WdValue > 0) && (Sync0WdCounter >= Sync0WdValue))
 8003668:	4b3a      	ldr	r3, [pc, #232]	@ (8003754 <DC_CheckWatchdog+0x100>)
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d009      	beq.n	8003684 <DC_CheckWatchdog+0x30>
 8003670:	4b39      	ldr	r3, [pc, #228]	@ (8003758 <DC_CheckWatchdog+0x104>)
 8003672:	881a      	ldrh	r2, [r3, #0]
 8003674:	4b37      	ldr	r3, [pc, #220]	@ (8003754 <DC_CheckWatchdog+0x100>)
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d303      	bcc.n	8003684 <DC_CheckWatchdog+0x30>
        {
                /*Sync0 watchdog expired*/
                bDcRunning = FALSE;        
 800367c:	4b37      	ldr	r3, [pc, #220]	@ (800375c <DC_CheckWatchdog+0x108>)
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e00e      	b.n	80036a2 <DC_CheckWatchdog+0x4e>
        }
        else
        {
            if(Sync0WdCounter < Sync0WdValue)
 8003684:	4b34      	ldr	r3, [pc, #208]	@ (8003758 <DC_CheckWatchdog+0x104>)
 8003686:	881a      	ldrh	r2, [r3, #0]
 8003688:	4b32      	ldr	r3, [pc, #200]	@ (8003754 <DC_CheckWatchdog+0x100>)
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d205      	bcs.n	800369c <DC_CheckWatchdog+0x48>
            {
                Sync0WdCounter ++;
 8003690:	4b31      	ldr	r3, [pc, #196]	@ (8003758 <DC_CheckWatchdog+0x104>)
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	4b2f      	ldr	r3, [pc, #188]	@ (8003758 <DC_CheckWatchdog+0x104>)
 800369a:	801a      	strh	r2, [r3, #0]
            }

            bDcRunning = TRUE;
 800369c:	4b2f      	ldr	r3, [pc, #188]	@ (800375c <DC_CheckWatchdog+0x108>)
 800369e:	2201      	movs	r2, #1
 80036a0:	701a      	strb	r2, [r3, #0]
        }

        if(bDcRunning)
 80036a2:	4b2e      	ldr	r3, [pc, #184]	@ (800375c <DC_CheckWatchdog+0x108>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d013      	beq.n	80036d2 <DC_CheckWatchdog+0x7e>
        {
            /*Check the Sync1 cycle if Sync1 Wd is enabled*/
            if(Sync1WdValue > 0)
 80036aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003760 <DC_CheckWatchdog+0x10c>)
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00f      	beq.n	80036d2 <DC_CheckWatchdog+0x7e>
            {
                if(Sync1WdCounter < Sync1WdValue)
 80036b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003764 <DC_CheckWatchdog+0x110>)
 80036b4:	881a      	ldrh	r2, [r3, #0]
 80036b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003760 <DC_CheckWatchdog+0x10c>)
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d206      	bcs.n	80036cc <DC_CheckWatchdog+0x78>
                {
                    Sync1WdCounter ++;
 80036be:	4b29      	ldr	r3, [pc, #164]	@ (8003764 <DC_CheckWatchdog+0x110>)
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	3301      	adds	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	4b27      	ldr	r3, [pc, #156]	@ (8003764 <DC_CheckWatchdog+0x110>)
 80036c8:	801a      	strh	r2, [r3, #0]
 80036ca:	e002      	b.n	80036d2 <DC_CheckWatchdog+0x7e>
                }
                else
                {
                    /*Sync1 watchdog expired*/
                    bDcRunning = FALSE;
 80036cc:	4b23      	ldr	r3, [pc, #140]	@ (800375c <DC_CheckWatchdog+0x108>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
                }
            }
        }
        if(bDcRunning)
 80036d2:	4b22      	ldr	r3, [pc, #136]	@ (800375c <DC_CheckWatchdog+0x108>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d02b      	beq.n	8003732 <DC_CheckWatchdog+0xde>
        {
/*ECATCHANGE_START(V5.13) ESM4*/
           if((sErrorSettings.u16SyncErrorCounterLimit == 0) || (sSyncManOutPar.u16SmEventMissedCounter < sErrorSettings.u16SyncErrorCounterLimit))
 80036da:	4b23      	ldr	r3, [pc, #140]	@ (8003768 <DC_CheckWatchdog+0x114>)
 80036dc:	891b      	ldrh	r3, [r3, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <DC_CheckWatchdog+0x9a>
 80036e2:	4b22      	ldr	r3, [pc, #136]	@ (800376c <DC_CheckWatchdog+0x118>)
 80036e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80036e6:	4b20      	ldr	r3, [pc, #128]	@ (8003768 <DC_CheckWatchdog+0x114>)
 80036e8:	891b      	ldrh	r3, [r3, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d211      	bcs.n	8003712 <DC_CheckWatchdog+0xbe>
/*ECATCHANGE_END(V5.13) ESM4*/
            {
                bSmSyncSequenceValid = TRUE;
 80036ee:	4b20      	ldr	r3, [pc, #128]	@ (8003770 <DC_CheckWatchdog+0x11c>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]

                /*Wait for PLL is active increment the Pll valid counter*/
                if (i16WaitForPllRunningTimeout > 0)
 80036f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003774 <DC_CheckWatchdog+0x120>)
 80036f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	dd21      	ble.n	8003742 <DC_CheckWatchdog+0xee>
                {
                    i16WaitForPllRunningCnt++;
 80036fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003778 <DC_CheckWatchdog+0x124>)
 8003700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003704:	b29b      	uxth	r3, r3
 8003706:	3301      	adds	r3, #1
 8003708:	b29b      	uxth	r3, r3
 800370a:	b21a      	sxth	r2, r3
 800370c:	4b1a      	ldr	r3, [pc, #104]	@ (8003778 <DC_CheckWatchdog+0x124>)
 800370e:	801a      	strh	r2, [r3, #0]
                if (i16WaitForPllRunningTimeout > 0)
 8003710:	e017      	b.n	8003742 <DC_CheckWatchdog+0xee>
                }
            }
            else if (bSmSyncSequenceValid)
 8003712:	4b17      	ldr	r3, [pc, #92]	@ (8003770 <DC_CheckWatchdog+0x11c>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d013      	beq.n	8003742 <DC_CheckWatchdog+0xee>
            {
                    bSmSyncSequenceValid = FALSE;
 800371a:	4b15      	ldr	r3, [pc, #84]	@ (8003770 <DC_CheckWatchdog+0x11c>)
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]

                /*Wait for PLL is active reset the Pll valid counter*/
                if (i16WaitForPllRunningTimeout > 0)
 8003720:	4b14      	ldr	r3, [pc, #80]	@ (8003774 <DC_CheckWatchdog+0x120>)
 8003722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003726:	2b00      	cmp	r3, #0
 8003728:	dd0b      	ble.n	8003742 <DC_CheckWatchdog+0xee>
                {
                    i16WaitForPllRunningCnt = 0;
 800372a:	4b13      	ldr	r3, [pc, #76]	@ (8003778 <DC_CheckWatchdog+0x124>)
 800372c:	2200      	movs	r2, #0
 800372e:	801a      	strh	r2, [r3, #0]
        {
           bSmSyncSequenceValid = FALSE;
        }
    }
    ENABLE_ESC_INT();
}
 8003730:	e007      	b.n	8003742 <DC_CheckWatchdog+0xee>
        else if(bSmSyncSequenceValid)
 8003732:	4b0f      	ldr	r3, [pc, #60]	@ (8003770 <DC_CheckWatchdog+0x11c>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <DC_CheckWatchdog+0xee>
           bSmSyncSequenceValid = FALSE;
 800373a:	4b0d      	ldr	r3, [pc, #52]	@ (8003770 <DC_CheckWatchdog+0x11c>)
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]
}
 8003740:	e7ff      	b.n	8003742 <DC_CheckWatchdog+0xee>
 8003742:	bf00      	nop
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	24000910 	.word	0x24000910
 8003750:	2400090d 	.word	0x2400090d
 8003754:	24000922 	.word	0x24000922
 8003758:	24000920 	.word	0x24000920
 800375c:	24000914 	.word	0x24000914
 8003760:	24000926 	.word	0x24000926
 8003764:	24000924 	.word	0x24000924
 8003768:	24000394 	.word	0x24000394
 800376c:	240009ec 	.word	0x240009ec
 8003770:	2400091a 	.word	0x2400091a
 8003774:	2400091c 	.word	0x2400091c
 8003778:	2400091e 	.word	0x2400091e

0800377c <CheckIfEcatError>:

 \brief    Checks communication and synchronisation variables and update AL status / AL status code if an error has occurred

*////////////////////////////////////////////////////////////////////////////////////////
void CheckIfEcatError(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
   /*if the watchdog is enabled check the process data watchdog in the ESC
   and set the AL status code 0x1B if the watchdog expired*/
   if (EcatWdValue != 0)
 8003782:	4b20      	ldr	r3, [pc, #128]	@ (8003804 <CheckIfEcatError+0x88>)
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d01f      	beq.n	80037ca <CheckIfEcatError+0x4e>
   {
      /*watchdog time is set => watchdog is active*/
      UINT16 WdStatusOK = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	80fb      	strh	r3, [r7, #6]

      HW_EscReadWord(WdStatusOK, ESC_PD_WD_STATE);
 800378e:	1dbb      	adds	r3, r7, #6
 8003790:	2202      	movs	r2, #2
 8003792:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8003796:	4618      	mov	r0, r3
 8003798:	f7fd f8a0 	bl	80008dc <HW_EscRead>
      WdStatusOK = SWAPWORD(WdStatusOK);
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	80fb      	strh	r3, [r7, #6]

      if (!(WdStatusOK & ESC_PD_WD_TRIGGER_MASK) && (nPdOutputSize > 0))
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10f      	bne.n	80037ca <CheckIfEcatError+0x4e>
 80037aa:	4b17      	ldr	r3, [pc, #92]	@ (8003808 <CheckIfEcatError+0x8c>)
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00b      	beq.n	80037ca <CheckIfEcatError+0x4e>
      {
         /*The device is in OP state*/

         if (bEcatOutputUpdateRunning
 80037b2:	4b16      	ldr	r3, [pc, #88]	@ (800380c <CheckIfEcatError+0x90>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d004      	beq.n	80037c4 <CheckIfEcatError+0x48>
            )
         {
            AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SMWATCHDOG);
 80037ba:	211b      	movs	r1, #27
 80037bc:	2004      	movs	r0, #4
 80037be:	f7ff f9f7 	bl	8002bb0 <AL_ControlInd>
 80037c2:	e01c      	b.n	80037fe <CheckIfEcatError+0x82>
            return;
         }

         else
         {
            bEcatFirstOutputsReceived = FALSE;
 80037c4:	4b12      	ldr	r3, [pc, #72]	@ (8003810 <CheckIfEcatError+0x94>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	701a      	strb	r2, [r3, #0]
         }
      }
   }

   if(bDcSyncActive)
 80037ca:	4b12      	ldr	r3, [pc, #72]	@ (8003814 <CheckIfEcatError+0x98>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d015      	beq.n	80037fe <CheckIfEcatError+0x82>
   {
       if(bEcatOutputUpdateRunning)
 80037d2:	4b0e      	ldr	r3, [pc, #56]	@ (800380c <CheckIfEcatError+0x90>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d011      	beq.n	80037fe <CheckIfEcatError+0x82>
       {
           /*Slave is in OP state*/
           if(!bDcRunning)
 80037da:	4b0f      	ldr	r3, [pc, #60]	@ (8003818 <CheckIfEcatError+0x9c>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d104      	bne.n	80037ec <CheckIfEcatError+0x70>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_FATALSYNCERROR);
 80037e2:	212c      	movs	r1, #44	@ 0x2c
 80037e4:	2004      	movs	r0, #4
 80037e6:	f7ff f9e3 	bl	8002bb0 <AL_ControlInd>
               return;
 80037ea:	e008      	b.n	80037fe <CheckIfEcatError+0x82>
           }
           else if(!bSmSyncSequenceValid)
 80037ec:	4b0b      	ldr	r3, [pc, #44]	@ (800381c <CheckIfEcatError+0xa0>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d104      	bne.n	80037fe <CheckIfEcatError+0x82>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SYNCERROR);
 80037f4:	211a      	movs	r1, #26
 80037f6:	2004      	movs	r0, #4
 80037f8:	f7ff f9da 	bl	8002bb0 <AL_ControlInd>
               return;
 80037fc:	bf00      	nop
           }
        
       }
   }
}
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	24000944 	.word	0x24000944
 8003808:	2400093c 	.word	0x2400093c
 800380c:	2400090c 	.word	0x2400090c
 8003810:	2400090e 	.word	0x2400090e
 8003814:	24000910 	.word	0x24000910
 8003818:	24000914 	.word	0x24000914
 800381c:	2400091a 	.word	0x2400091a

08003820 <ECAT_Init>:

 \brief    This function initialize the EtherCAT Slave Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
    UINT8 i;
    /*Get Maximum Number of SyncManagers and supported DPRAM size*/
    {
    UINT16 TmpVar = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	80bb      	strh	r3, [r7, #4]

    HW_EscReadWord(TmpVar, ESC_COMM_INFO_OFFSET);
 800382a:	1d3b      	adds	r3, r7, #4
 800382c:	2202      	movs	r2, #2
 800382e:	2104      	movs	r1, #4
 8003830:	4618      	mov	r0, r3
 8003832:	f7fd f853 	bl	80008dc <HW_EscRead>

    TmpVar = SWAPWORD(TmpVar);
 8003836:	88bb      	ldrh	r3, [r7, #4]
 8003838:	80bb      	strh	r3, [r7, #4]
    nMaxSyncMan = (UINT8) ((TmpVar & ESC_SM_CHANNELS_MASK)>> ESC_SM_CHANNELS_SHIFT);
 800383a:	88bb      	ldrh	r3, [r7, #4]
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	b29b      	uxth	r3, r3
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4b39      	ldr	r3, [pc, #228]	@ (8003928 <ECAT_Init+0x108>)
 8003844:	701a      	strb	r2, [r3, #0]

    HW_EscReadWord(TmpVar, ESC_DPRAM_SIZE_OFFSET);
 8003846:	1d3b      	adds	r3, r7, #4
 8003848:	2202      	movs	r2, #2
 800384a:	2106      	movs	r1, #6
 800384c:	4618      	mov	r0, r3
 800384e:	f7fd f845 	bl	80008dc <HW_EscRead>
    TmpVar = SWAPWORD(TmpVar);
 8003852:	88bb      	ldrh	r3, [r7, #4]
 8003854:	80bb      	strh	r3, [r7, #4]

    //get max address (register + DPRAM size in Byte (in the register it is stored in KB))
    nMaxEscAddress = (UINT16) ((TmpVar & ESC_DPRAM_SIZE_MASK) << 10) + 0xFFF;
 8003856:	88bb      	ldrh	r3, [r7, #4]
 8003858:	029b      	lsls	r3, r3, #10
 800385a:	b29b      	uxth	r3, r3
 800385c:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8003860:	b29a      	uxth	r2, r3
 8003862:	4b32      	ldr	r3, [pc, #200]	@ (800392c <ECAT_Init+0x10c>)
 8003864:	801a      	strh	r2, [r3, #0]
    }


    /* Get EEPROM loaded information */
    UpdateEEPROMLoadedState();
 8003866:	f7fe f9f1 	bl	8001c4c <UpdateEEPROMLoadedState>

    /* disable all Sync Manager channels */
    for (i = 0; i < nMaxSyncMan; i++)
 800386a:	2300      	movs	r3, #0
 800386c:	71fb      	strb	r3, [r7, #7]
 800386e:	e006      	b.n	800387e <ECAT_Init+0x5e>
    {
        DisableSyncManChannel(i);
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe fa28 	bl	8001cc8 <DisableSyncManChannel>
    for (i = 0; i < nMaxSyncMan; i++)
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	3301      	adds	r3, #1
 800387c:	71fb      	strb	r3, [r7, #7]
 800387e:	4b2a      	ldr	r3, [pc, #168]	@ (8003928 <ECAT_Init+0x108>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	79fa      	ldrb	r2, [r7, #7]
 8003884:	429a      	cmp	r2, r3
 8003886:	d3f3      	bcc.n	8003870 <ECAT_Init+0x50>
    }

    /* initialize the mailbox handler */
    MBX_Init();
 8003888:	f000 f9b4 	bl	8003bf4 <MBX_Init>

    /* initialize variables */
    bApplEsmPending = FALSE;
 800388c:	4b28      	ldr	r3, [pc, #160]	@ (8003930 <ECAT_Init+0x110>)
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]
    bEcatWaitForAlControlRes = FALSE;
 8003892:	4b28      	ldr	r3, [pc, #160]	@ (8003934 <ECAT_Init+0x114>)
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
    bEcatFirstOutputsReceived = FALSE;
 8003898:	4b27      	ldr	r3, [pc, #156]	@ (8003938 <ECAT_Init+0x118>)
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
     bEcatOutputUpdateRunning = FALSE;
 800389e:	4b27      	ldr	r3, [pc, #156]	@ (800393c <ECAT_Init+0x11c>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
     bEcatInputUpdateRunning = FALSE;
 80038a4:	4b26      	ldr	r3, [pc, #152]	@ (8003940 <ECAT_Init+0x120>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]
    bWdTrigger = FALSE;
 80038aa:	4b26      	ldr	r3, [pc, #152]	@ (8003944 <ECAT_Init+0x124>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
    EcatWdValue = 0;
 80038b0:	4b25      	ldr	r3, [pc, #148]	@ (8003948 <ECAT_Init+0x128>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 80038b6:	4b25      	ldr	r3, [pc, #148]	@ (800394c <ECAT_Init+0x12c>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	801a      	strh	r2, [r3, #0]
    Sync0WdValue = 0;
 80038bc:	4b24      	ldr	r3, [pc, #144]	@ (8003950 <ECAT_Init+0x130>)
 80038be:	2200      	movs	r2, #0
 80038c0:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 80038c2:	4b24      	ldr	r3, [pc, #144]	@ (8003954 <ECAT_Init+0x134>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 80038c8:	4b23      	ldr	r3, [pc, #140]	@ (8003958 <ECAT_Init+0x138>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	801a      	strh	r2, [r3, #0]
    bDcSyncActive = FALSE;
 80038ce:	4b23      	ldr	r3, [pc, #140]	@ (800395c <ECAT_Init+0x13c>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]

    /*ECATCHANGE_START(V5.13) ESM1*/
    u8LocalErrorState = 0;
 80038d4:	4b22      	ldr	r3, [pc, #136]	@ (8003960 <ECAT_Init+0x140>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
    /*ECATCHANGE_END(V5.13) ESM1*/
    u16LocalErrorCode = 0x00;
 80038da:	4b22      	ldr	r3, [pc, #136]	@ (8003964 <ECAT_Init+0x144>)
 80038dc:	2200      	movs	r2, #0
 80038de:	801a      	strh	r2, [r3, #0]

    u16ALEventMask = 0;
 80038e0:	4b21      	ldr	r3, [pc, #132]	@ (8003968 <ECAT_Init+0x148>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	801a      	strh	r2, [r3, #0]
    nPdOutputSize = 0;
 80038e6:	4b21      	ldr	r3, [pc, #132]	@ (800396c <ECAT_Init+0x14c>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	801a      	strh	r2, [r3, #0]
    nPdInputSize = 0;
 80038ec:	4b20      	ldr	r3, [pc, #128]	@ (8003970 <ECAT_Init+0x150>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	801a      	strh	r2, [r3, #0]

    /* initialize the AL Status register */
    nAlStatus    = STATE_INIT;
 80038f2:	4b20      	ldr	r3, [pc, #128]	@ (8003974 <ECAT_Init+0x154>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	701a      	strb	r2, [r3, #0]
    SetALStatus(nAlStatus, 0);
 80038f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003974 <ECAT_Init+0x154>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff f8f6 	bl	8002af0 <SetALStatus>
    nEcatStateTrans = 0;
 8003904:	4b1c      	ldr	r3, [pc, #112]	@ (8003978 <ECAT_Init+0x158>)
 8003906:	2200      	movs	r2, #0
 8003908:	801a      	strh	r2, [r3, #0]
    u8EcatErrorLed = LED_OFF;
 800390a:	4b1c      	ldr	r3, [pc, #112]	@ (800397c <ECAT_Init+0x15c>)
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]

    bEscIntEnabled = FALSE;
 8003910:	4b1b      	ldr	r3, [pc, #108]	@ (8003980 <ECAT_Init+0x160>)
 8003912:	2200      	movs	r2, #0
 8003914:	701a      	strb	r2, [r3, #0]

    /* initialize the COE part */
    COE_Init();
 8003916:	f7fe f8e3 	bl	8001ae0 <COE_Init>

/*ECATCHANGE_START(V5.13) ECAT1*/
/*ECATCHANGE_END(V5.13) ECAT1*/
    /*reset AL event mask*/
    ResetALEventMask(0);
 800391a:	2000      	movs	r0, #0
 800391c:	f7fe f95a 	bl	8001bd4 <ResetALEventMask>
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	2400093e 	.word	0x2400093e
 800392c:	24000940 	.word	0x24000940
 8003930:	24000933 	.word	0x24000933
 8003934:	24000934 	.word	0x24000934
 8003938:	2400090e 	.word	0x2400090e
 800393c:	2400090c 	.word	0x2400090c
 8003940:	2400090d 	.word	0x2400090d
 8003944:	2400090f 	.word	0x2400090f
 8003948:	24000944 	.word	0x24000944
 800394c:	24000920 	.word	0x24000920
 8003950:	24000922 	.word	0x24000922
 8003954:	24000924 	.word	0x24000924
 8003958:	24000926 	.word	0x24000926
 800395c:	24000910 	.word	0x24000910
 8003960:	24000932 	.word	0x24000932
 8003964:	24000930 	.word	0x24000930
 8003968:	2400094a 	.word	0x2400094a
 800396c:	2400093c 	.word	0x2400093c
 8003970:	2400093a 	.word	0x2400093a
 8003974:	24000942 	.word	0x24000942
 8003978:	24000936 	.word	0x24000936
 800397c:	24000938 	.word	0x24000938
 8003980:	2400092d 	.word	0x2400092d

08003984 <ECAT_Main>:
/**
 \brief        This function has to be called cyclically.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Main(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
    UINT16 ALEventReg;
    UINT16 EscAlControl = 0x0000;
 800398a:	2300      	movs	r3, #0
 800398c:	80bb      	strh	r3, [r7, #4]
/*ECATCHANGE_START(V5.13) MBX1*/
    UINT16 sm1Activate = SM_SETTING_ENABLE_VALUE;
 800398e:	2301      	movs	r3, #1
 8003990:	807b      	strh	r3, [r7, #2]
    UINT16 sm1Status = 0; /*SM1 status need to be read (not MBX_READ_EVENT) to handle readframes with invalid CRCs*/
 8003992:	2300      	movs	r3, #0
 8003994:	803b      	strh	r3, [r7, #0]
/*ECATCHANGE_END(V5.13) MBX1*/


    /* check if services are stored in the mailbox */
    MBX_Main();
 8003996:	f000 fdb3 	bl	8004500 <MBX_Main>


    if ( bMbxRunning )
 800399a:	4b64      	ldr	r3, [pc, #400]	@ (8003b2c <ECAT_Main+0x1a8>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d011      	beq.n	80039c6 <ECAT_Main+0x42>
    {
        /* Slave is at least in PREOP, Mailbox is running */

/*ECATCHANGE_START(V5.13) MBX1*/
        /* get the Activate-Byte of SM 1 (Register 0x80E) to check if a mailbox repeat request was received */
        HW_EscReadWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 80039a2:	1cbb      	adds	r3, r7, #2
 80039a4:	2202      	movs	r2, #2
 80039a6:	f640 010e 	movw	r1, #2062	@ 0x80e
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fc ff96 	bl	80008dc <HW_EscRead>
        sm1Activate = SWAPWORD(sm1Activate);
 80039b0:	887b      	ldrh	r3, [r7, #2]
 80039b2:	807b      	strh	r3, [r7, #2]

        HW_EscReadWord(sm1Status, (ESC_SYNCMAN_CONTROL_OFFSET + SIZEOF_SM_REGISTER));
 80039b4:	463b      	mov	r3, r7
 80039b6:	2202      	movs	r2, #2
 80039b8:	f640 010c 	movw	r1, #2060	@ 0x80c
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fc ff8d 	bl	80008dc <HW_EscRead>
        sm1Status = SWAPWORD(sm1Status);
 80039c2:	883b      	ldrh	r3, [r7, #0]
 80039c4:	803b      	strh	r3, [r7, #0]
/*ECATCHANGE_END(V5.13) MBX1*/
    }

    /* Read AL Event-Register from ESC */
    ALEventReg = HW_GetALEventRegister();
 80039c6:	f7fc ff75 	bl	80008b4 <HW_GetALEventRegister>
 80039ca:	4603      	mov	r3, r0
 80039cc:	80fb      	strh	r3, [r7, #6]
    ALEventReg = SWAPWORD(ALEventReg);


    if ((ALEventReg & AL_CONTROL_EVENT) && !bEcatWaitForAlControlRes)
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d016      	beq.n	8003a06 <ECAT_Main+0x82>
 80039d8:	4b55      	ldr	r3, [pc, #340]	@ (8003b30 <ECAT_Main+0x1ac>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d112      	bne.n	8003a06 <ECAT_Main+0x82>
    {
        /* AL Control event is set, get the AL Control register sent by the Master to acknowledge the event
          (that the corresponding bit in the AL Event register will be reset) */

        HW_EscReadWord( EscAlControl, ESC_AL_CONTROL_OFFSET);
 80039e0:	1d3b      	adds	r3, r7, #4
 80039e2:	2202      	movs	r2, #2
 80039e4:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fc ff77 	bl	80008dc <HW_EscRead>
        EscAlControl = SWAPWORD(EscAlControl);
 80039ee:	88bb      	ldrh	r3, [r7, #4]
 80039f0:	80bb      	strh	r3, [r7, #4]



        /* reset AL Control event and the SM Change event (because the Sync Manager settings will be checked
           in AL_ControlInd, too)*/
            ALEventReg &= ~((AL_CONTROL_EVENT) | (SM_CHANGE_EVENT));
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	f023 0311 	bic.w	r3, r3, #17
 80039f8:	80fb      	strh	r3, [r7, #6]

            AL_ControlInd((UINT8)EscAlControl, 0); /* in AL_ControlInd the state transition will be checked and done */
 80039fa:	88bb      	ldrh	r3, [r7, #4]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff f8d5 	bl	8002bb0 <AL_ControlInd>

            /* SM-Change-Event was handled too */

    }

    if ( (ALEventReg & SM_CHANGE_EVENT) && !bEcatWaitForAlControlRes && (nAlStatus & STATE_CHANGE) == 0 && (nAlStatus & ~STATE_CHANGE) != STATE_INIT )
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01c      	beq.n	8003a4a <ECAT_Main+0xc6>
 8003a10:	4b47      	ldr	r3, [pc, #284]	@ (8003b30 <ECAT_Main+0x1ac>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d118      	bne.n	8003a4a <ECAT_Main+0xc6>
 8003a18:	4b46      	ldr	r3, [pc, #280]	@ (8003b34 <ECAT_Main+0x1b0>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d112      	bne.n	8003a4a <ECAT_Main+0xc6>
 8003a24:	4b43      	ldr	r3, [pc, #268]	@ (8003b34 <ECAT_Main+0x1b0>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	f023 0310 	bic.w	r3, r3, #16
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d00c      	beq.n	8003a4a <ECAT_Main+0xc6>
    {
        /* the SM Change event is set (Bit 4 of Register 0x220), when the Byte 6 (Enable, Lo-Byte of Register 0x806, 0x80E, 0x816,...)
           of a Sync Manager channel was written */
        ALEventReg &= ~(SM_CHANGE_EVENT);
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	f023 0310 	bic.w	r3, r3, #16
 8003a36:	80fb      	strh	r3, [r7, #6]

        /* AL_ControlInd is called with the actual state, so that the correct SM settings will be checked */
        AL_ControlInd(nAlStatus & STATE_MASK, 0);
 8003a38:	4b3e      	ldr	r3, [pc, #248]	@ (8003b34 <ECAT_Main+0x1b0>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff f8b3 	bl	8002bb0 <AL_ControlInd>
    }

    if(bEcatWaitForAlControlRes)
 8003a4a:	4b39      	ldr	r3, [pc, #228]	@ (8003b30 <ECAT_Main+0x1ac>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <ECAT_Main+0xd2>
    {
        AL_ControlRes();
 8003a52:	f7ff fc7f 	bl	8003354 <AL_ControlRes>
        The SM1 activate Byte (Register 0x80E) was read before reading AL Event register.
        1. Handle Mailbox Read event
        2. Handle repeat toggle request
        3. Handle Mailbox write event
    */
    if ( bMbxRunning )
 8003a56:	4b35      	ldr	r3, [pc, #212]	@ (8003b2c <ECAT_Main+0x1a8>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d061      	beq.n	8003b22 <ECAT_Main+0x19e>
    {
        /*SnycManger change event (0x220:4) could be acknowledged by reading the SM1 control register without notification to the local application
        => check if the SyncManger 1 is still enabled*/
            if (!(sm1Activate & SM_SETTING_ENABLE_VALUE))
 8003a5e:	887b      	ldrh	r3, [r7, #2]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d108      	bne.n	8003a7a <ECAT_Main+0xf6>
            {
                AL_ControlInd(nAlStatus & STATE_MASK, 0);
 8003a68:	4b32      	ldr	r3, [pc, #200]	@ (8003b34 <ECAT_Main+0x1b0>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff f89b 	bl	8002bb0 <AL_ControlInd>
            }

/*ECATCHANGE_START(V5.13) MBX1*/
        if (((sm1Status & SM_STATUS_MBX_BUFFER_FULL) == 0)
 8003a7a:	883b      	ldrh	r3, [r7, #0]
 8003a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d113      	bne.n	8003aac <ECAT_Main+0x128>
            && bSendMbxIsFull) 
 8003a84:	4b2c      	ldr	r3, [pc, #176]	@ (8003b38 <ECAT_Main+0x1b4>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00f      	beq.n	8003aac <ECAT_Main+0x128>
/*ECATCHANGE_END(V5.13) MBX1*/
        {
            /* SM 1 (Mailbox Read) event is set, when the mailbox was read from the master,
               to acknowledge the event the first byte of the mailbox has to be written,
               by writing the first byte the mailbox is locked, too */
            u16dummy = 0;
 8003a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b3c <ECAT_Main+0x1b8>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	801a      	strh	r2, [r3, #0]
            HW_EscWriteWord(u16dummy,u16EscAddrSendMbx);
 8003a92:	4b2b      	ldr	r3, [pc, #172]	@ (8003b40 <ECAT_Main+0x1bc>)
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	2202      	movs	r2, #2
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4828      	ldr	r0, [pc, #160]	@ (8003b3c <ECAT_Main+0x1b8>)
 8003a9c:	f7fc ff42 	bl	8000924 <HW_EscWrite>

            /* the Mailbox Read event in the variable ALEventReg shall be reset before calling
               MBX_MailboxReadInd, where a new mailbox datagram (if available) could be stored in the send mailbox */
            ALEventReg &= ~(MAILBOX_READ_EVENT);
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003aa6:	80fb      	strh	r3, [r7, #6]
            MBX_MailboxReadInd();
 8003aa8:	f000 fac0 	bl	800402c <MBX_MailboxReadInd>
        }

            /* bMbxRepeatToggle holds the last state of the Repeat Bit (Bit 1) */

            if (((sm1Activate & SM_SETTING_REPAET_REQ_MASK) && !bMbxRepeatToggle)
 8003aac:	887b      	ldrh	r3, [r7, #2]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <ECAT_Main+0x13a>
 8003ab6:	4b23      	ldr	r3, [pc, #140]	@ (8003b44 <ECAT_Main+0x1c0>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <ECAT_Main+0x14c>
                || (!(sm1Activate & SM_SETTING_REPAET_REQ_MASK) && bMbxRepeatToggle))
 8003abe:	887b      	ldrh	r3, [r7, #2]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d11d      	bne.n	8003b04 <ECAT_Main+0x180>
 8003ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b44 <ECAT_Main+0x1c0>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d019      	beq.n	8003b04 <ECAT_Main+0x180>
            {
                /* Repeat Bit (Bit 1) has toggled, there is a repeat request, in MBX_MailboxRepeatReq the correct
                   response will put in the send mailbox again */
                MBX_MailboxRepeatReq();
 8003ad0:	f000 fb1a 	bl	8004108 <MBX_MailboxRepeatReq>
                /* acknowledge the repeat request after the send mailbox was updated by writing the Repeat Bit
                   in the Repeat Ack Bit (Bit 1) of the PDI Ctrl-Byte of SM 1 (Register 0x80F) */
                if (bMbxRepeatToggle)
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b44 <ECAT_Main+0x1c0>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <ECAT_Main+0x164>
                {
                    sm1Activate |= SM_SETTING_REPEAT_ACK; //set repeat acknowledge bit (bit 9)
 8003adc:	887b      	ldrh	r3, [r7, #2]
 8003ade:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	807b      	strh	r3, [r7, #2]
 8003ae6:	e004      	b.n	8003af2 <ECAT_Main+0x16e>
                }
                else
                {
                    sm1Activate &= ~SM_SETTING_REPEAT_ACK; //clear repeat acknowledge bit (bit 9)
 8003ae8:	887b      	ldrh	r3, [r7, #2]
 8003aea:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	807b      	strh	r3, [r7, #2]
                }

                sm1Activate = SWAPWORD(sm1Activate);
 8003af2:	887b      	ldrh	r3, [r7, #2]
 8003af4:	807b      	strh	r3, [r7, #2]
                HW_EscWriteWord(sm1Activate, (ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8003af6:	1cbb      	adds	r3, r7, #2
 8003af8:	2202      	movs	r2, #2
 8003afa:	f640 010e 	movw	r1, #2062	@ 0x80e
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fc ff10 	bl	8000924 <HW_EscWrite>
            }


        /* Reload the AlEvent because it may be changed due to a SM disable, enable in case of an repeat request */
        ALEventReg = HW_GetALEventRegister();
 8003b04:	f7fc fed6 	bl	80008b4 <HW_GetALEventRegister>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	80fb      	strh	r3, [r7, #6]
        ALEventReg = SWAPWORD(ALEventReg);

        if ( ALEventReg & (MAILBOX_WRITE_EVENT) )
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <ECAT_Main+0x19e>
            /* SM 0 (Mailbox Write) event is set, when the mailbox was written from the master,
               to acknowledge the event the first byte of the mailbox has to be read,
               which will be done in MBX_CheckAndCopyMailbox */
            /* the Mailbox Write event in the variable ALEventReg shall be reset before calling
               MBX_CheckAndCopyMailbox, where the received mailbox datagram will be processed */
            ALEventReg &= ~(MAILBOX_WRITE_EVENT);
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b1c:	80fb      	strh	r3, [r7, #6]
            MBX_CheckAndCopyMailbox();
 8003b1e:	f000 fb9d 	bl	800425c <MBX_CheckAndCopyMailbox>

        }
    }
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	2400095b 	.word	0x2400095b
 8003b30:	24000934 	.word	0x24000934
 8003b34:	24000942 	.word	0x24000942
 8003b38:	2400095a 	.word	0x2400095a
 8003b3c:	2400094c 	.word	0x2400094c
 8003b40:	24000964 	.word	0x24000964
 8003b44:	2400095c 	.word	0x2400095c

08003b48 <PutInMbxQueue>:
//
//    PutInMbxQueue
//

UINT8 PutInMbxQueue(TMBX MBXMEM * pMbx, TMBXQUEUE MBXMEM * pQueue)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
    UINT16 lastInQueue;
    ENTER_MBX_CRITICAL;


    lastInQueue = pQueue->lastInQueue+1;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	885b      	ldrh	r3, [r3, #2]
 8003b56:	3301      	adds	r3, #1
 8003b58:	81fb      	strh	r3, [r7, #14]
    if (lastInQueue == pQueue->maxQueueSize)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	889b      	ldrh	r3, [r3, #4]
 8003b5e:	89fa      	ldrh	r2, [r7, #14]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d101      	bne.n	8003b68 <PutInMbxQueue+0x20>
    {
        // Umbruch der Queue
        lastInQueue = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	81fb      	strh	r3, [r7, #14]
    }

    if (pQueue->firstInQueue == lastInQueue)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	89fa      	ldrh	r2, [r7, #14]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d101      	bne.n	8003b76 <PutInMbxQueue+0x2e>
    {
        // Ueberlauf der Queue -> letztes Element wieder herausnehmen
        LEAVE_MBX_CRITICAL;
        return MBXERR_NOMOREMEMORY;
 8003b72:	2307      	movs	r3, #7
 8003b74:	e00b      	b.n	8003b8e <PutInMbxQueue+0x46>
    }

    pQueue->queue[pQueue->lastInQueue] = pMbx;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	885b      	ldrh	r3, [r3, #2]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	3202      	adds	r2, #2
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pQueue->lastInQueue = lastInQueue;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	89fa      	ldrh	r2, [r7, #14]
 8003b8a:	805a      	strh	r2, [r3, #2]

    LEAVE_MBX_CRITICAL;

    return 0;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <GetOutOfMbxQueue>:
//
//    GetOutOfMbxQueue
//

TMBX MBXMEM * GetOutOfMbxQueue(TMBXQUEUE MBXMEM * pQueue)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b085      	sub	sp, #20
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
    TMBX MBXMEM * pMbx;
    ENTER_MBX_CRITICAL;

    if (pQueue->firstInQueue != pQueue->lastInQueue)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	881a      	ldrh	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	885b      	ldrh	r3, [r3, #2]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d018      	beq.n	8003be0 <GetOutOfMbxQueue+0x46>
    {
        // Queue ist nicht leer
        UINT16 firstInQueue = pQueue->firstInQueue;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	817b      	strh	r3, [r7, #10]
        pMbx = pQueue->queue[firstInQueue];
 8003bb4:	897a      	ldrh	r2, [r7, #10]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3202      	adds	r2, #2
 8003bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bbe:	60fb      	str	r3, [r7, #12]
        firstInQueue++;
 8003bc0:	897b      	ldrh	r3, [r7, #10]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	817b      	strh	r3, [r7, #10]
        pQueue->firstInQueue = firstInQueue;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	897a      	ldrh	r2, [r7, #10]
 8003bca:	801a      	strh	r2, [r3, #0]
        
        if (pQueue->firstInQueue == pQueue->maxQueueSize)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	881a      	ldrh	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	889b      	ldrh	r3, [r3, #4]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d105      	bne.n	8003be4 <GetOutOfMbxQueue+0x4a>
        {
            // Umbruch der Queue
            pQueue->firstInQueue = 0;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	801a      	strh	r2, [r3, #0]
 8003bde:	e001      	b.n	8003be4 <GetOutOfMbxQueue+0x4a>
        }
    }
    else
    {
        pMbx = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
    }


    LEAVE_MBX_CRITICAL;

    return pMbx;
 8003be4:	68fb      	ldr	r3, [r7, #12]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <MBX_Init>:
/**
 \brief    This function intialize the Mailbox Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
    
    u16ReceiveMbxSize = MIN_MBX_SIZE;
 8003bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb0 <MBX_Init+0xbc>)
 8003bfc:	2224      	movs	r2, #36	@ 0x24
 8003bfe:	801a      	strh	r2, [r3, #0]
    u16SendMbxSize = MAX_MBX_SIZE;
 8003c00:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb4 <MBX_Init+0xc0>)
 8003c02:	2280      	movs	r2, #128	@ 0x80
 8003c04:	801a      	strh	r2, [r3, #0]
    u16EscAddrReceiveMbx = MIN_MBX_WRITE_ADDRESS;
 8003c06:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb8 <MBX_Init+0xc4>)
 8003c08:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c0c:	801a      	strh	r2, [r3, #0]
    u16EscAddrSendMbx = MIN_MBX_READ_ADDRESS;
 8003c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8003cbc <MBX_Init+0xc8>)
 8003c10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c14:	801a      	strh	r2, [r3, #0]

    sMbxReceiveQueue.firstInQueue    = 0;
 8003c16:	4b2a      	ldr	r3, [pc, #168]	@ (8003cc0 <MBX_Init+0xcc>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	801a      	strh	r2, [r3, #0]
    sMbxReceiveQueue.lastInQueue     = 0;
 8003c1c:	4b28      	ldr	r3, [pc, #160]	@ (8003cc0 <MBX_Init+0xcc>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	805a      	strh	r2, [r3, #2]
    sMbxReceiveQueue.maxQueueSize = MAX_MBX_QUEUE_SIZE;
 8003c22:	4b27      	ldr	r3, [pc, #156]	@ (8003cc0 <MBX_Init+0xcc>)
 8003c24:	220a      	movs	r2, #10
 8003c26:	809a      	strh	r2, [r3, #4]
    sMbxSendQueue.firstInQueue        = 0;
 8003c28:	4b26      	ldr	r3, [pc, #152]	@ (8003cc4 <MBX_Init+0xd0>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	801a      	strh	r2, [r3, #0]
    sMbxSendQueue.lastInQueue         = 0;
 8003c2e:	4b25      	ldr	r3, [pc, #148]	@ (8003cc4 <MBX_Init+0xd0>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	805a      	strh	r2, [r3, #2]
    sMbxSendQueue.maxQueueSize     = MAX_MBX_QUEUE_SIZE;
 8003c34:	4b23      	ldr	r3, [pc, #140]	@ (8003cc4 <MBX_Init+0xd0>)
 8003c36:	220a      	movs	r2, #10
 8003c38:	809a      	strh	r2, [r3, #4]
    psWriteMbx  = NULL;
 8003c3a:	4b23      	ldr	r3, [pc, #140]	@ (8003cc8 <MBX_Init+0xd4>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]


    psRepeatMbx = NULL;
 8003c40:	4b22      	ldr	r3, [pc, #136]	@ (8003ccc <MBX_Init+0xd8>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
    psReadMbx    = NULL;
 8003c46:	4b22      	ldr	r3, [pc, #136]	@ (8003cd0 <MBX_Init+0xdc>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
    psStoreMbx    = NULL;
 8003c4c:	4b21      	ldr	r3, [pc, #132]	@ (8003cd4 <MBX_Init+0xe0>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 8003c52:	4b21      	ldr	r3, [pc, #132]	@ (8003cd8 <MBX_Init+0xe4>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x80F bit 2)*/
    {
        UINT16 sm1Activate = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	80fb      	strh	r3, [r7, #6]
        HW_EscReadWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8003c5c:	1dbb      	adds	r3, r7, #6
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f640 010e 	movw	r1, #2062	@ 0x80e
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fc fe39 	bl	80008dc <HW_EscRead>
        sm1Activate &= SWAPWORD(~0x0200);
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	80fb      	strh	r3, [r7, #6]
        HW_EscWriteWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8003c74:	1dbb      	adds	r3, r7, #6
 8003c76:	2202      	movs	r2, #2
 8003c78:	f640 010e 	movw	r1, #2062	@ 0x80e
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fc fe51 	bl	8000924 <HW_EscWrite>
    }
    bMbxRunning = FALSE;
 8003c82:	4b16      	ldr	r3, [pc, #88]	@ (8003cdc <MBX_Init+0xe8>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	701a      	strb	r2, [r3, #0]
    bSendMbxIsFull = FALSE;
 8003c88:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <MBX_Init+0xec>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 8003c8e:	4b15      	ldr	r3, [pc, #84]	@ (8003ce4 <MBX_Init+0xf0>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 8003c94:	4b14      	ldr	r3, [pc, #80]	@ (8003ce8 <MBX_Init+0xf4>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter = 0;
 8003c9a:	4b14      	ldr	r3, [pc, #80]	@ (8003cec <MBX_Init+0xf8>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter    = 0;
 8003ca0:	4b13      	ldr	r3, [pc, #76]	@ (8003cf0 <MBX_Init+0xfc>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]
}
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	24000960 	.word	0x24000960
 8003cb4:	2400095e 	.word	0x2400095e
 8003cb8:	24000962 	.word	0x24000962
 8003cbc:	24000964 	.word	0x24000964
 8003cc0:	240009b0 	.word	0x240009b0
 8003cc4:	2400097c 	.word	0x2400097c
 8003cc8:	2400096c 	.word	0x2400096c
 8003ccc:	24000974 	.word	0x24000974
 8003cd0:	24000970 	.word	0x24000970
 8003cd4:	24000978 	.word	0x24000978
 8003cd8:	2400095c 	.word	0x2400095c
 8003cdc:	2400095b 	.word	0x2400095b
 8003ce0:	2400095a 	.word	0x2400095a
 8003ce4:	24000959 	.word	0x24000959
 8003ce8:	24000968 	.word	0x24000968
 8003cec:	24000966 	.word	0x24000966
 8003cf0:	24000967 	.word	0x24000967

08003cf4 <MBX_StartMailboxHandler>:
 \brief     it is checked if the mailbox areas overlaps each other
 \brief     and the Sync Manager channels 0 and 1 are enabled.
 \brief     This function shall only be called if mailbox is supported.
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 MBX_StartMailboxHandler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	80fb      	strh	r3, [r7, #6]
    
    /* get address of the receive mailbox sync manager (SM0) */
    TSYNCMAN ESCMEM * pSyncMan = (TSYNCMAN ESCMEM *)GetSyncMan(MAILBOX_WRITE);
 8003cfe:	2000      	movs	r0, #0
 8003d00:	f7fd ffca 	bl	8001c98 <GetSyncMan>
 8003d04:	6038      	str	r0, [r7, #0]

    /* store size of the receive mailbox */
    u16ReceiveMbxSize     = pSyncMan->Length;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	885a      	ldrh	r2, [r3, #2]
 8003d0a:	4b32      	ldr	r3, [pc, #200]	@ (8003dd4 <MBX_StartMailboxHandler+0xe0>)
 8003d0c:	801a      	strh	r2, [r3, #0]
    /* store the address of the receive mailbox */
    u16EscAddrReceiveMbx = pSyncMan->PhysicalStartAddress;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	881a      	ldrh	r2, [r3, #0]
 8003d12:	4b31      	ldr	r3, [pc, #196]	@ (8003dd8 <MBX_StartMailboxHandler+0xe4>)
 8003d14:	801a      	strh	r2, [r3, #0]

    /* get address of the send mailbox sync manager (SM1) */
    pSyncMan =(TSYNCMAN ESCMEM *) GetSyncMan(MAILBOX_READ);
 8003d16:	2001      	movs	r0, #1
 8003d18:	f7fd ffbe 	bl	8001c98 <GetSyncMan>
 8003d1c:	6038      	str	r0, [r7, #0]

    /* store the size of the send mailbox */
    u16SendMbxSize = pSyncMan->Length;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	885a      	ldrh	r2, [r3, #2]
 8003d22:	4b2e      	ldr	r3, [pc, #184]	@ (8003ddc <MBX_StartMailboxHandler+0xe8>)
 8003d24:	801a      	strh	r2, [r3, #0]
    /* store the address of the send mailbox */
    u16EscAddrSendMbx = pSyncMan->PhysicalStartAddress;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	881a      	ldrh	r2, [r3, #0]
 8003d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003de0 <MBX_StartMailboxHandler+0xec>)
 8003d2c:	801a      	strh	r2, [r3, #0]

    // HBu 02.05.06: it should be checked if there are overlaps in the sync manager areas
    if ((u16EscAddrReceiveMbx + u16ReceiveMbxSize) > u16EscAddrSendMbx && (u16EscAddrReceiveMbx < (u16EscAddrSendMbx + u16SendMbxSize)))
 8003d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd8 <MBX_StartMailboxHandler+0xe4>)
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	4b27      	ldr	r3, [pc, #156]	@ (8003dd4 <MBX_StartMailboxHandler+0xe0>)
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	4413      	add	r3, r2
 8003d3a:	4a29      	ldr	r2, [pc, #164]	@ (8003de0 <MBX_StartMailboxHandler+0xec>)
 8003d3c:	8812      	ldrh	r2, [r2, #0]
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	dd0c      	ble.n	8003d5c <MBX_StartMailboxHandler+0x68>
 8003d42:	4b25      	ldr	r3, [pc, #148]	@ (8003dd8 <MBX_StartMailboxHandler+0xe4>)
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	4b25      	ldr	r3, [pc, #148]	@ (8003de0 <MBX_StartMailboxHandler+0xec>)
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4b23      	ldr	r3, [pc, #140]	@ (8003ddc <MBX_StartMailboxHandler+0xe8>)
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	440b      	add	r3, r1
 8003d54:	429a      	cmp	r2, r3
 8003d56:	da01      	bge.n	8003d5c <MBX_StartMailboxHandler+0x68>
    {
        return ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8003d58:	2316      	movs	r3, #22
 8003d5a:	e037      	b.n	8003dcc <MBX_StartMailboxHandler+0xd8>
    }


    /* enable the receive mailbox sync manager channel */
    EnableSyncManChannel(MAILBOX_WRITE);
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	f7fd ffdb 	bl	8001d18 <EnableSyncManChannel>
    /* enable the send mailbox sync manager channel */
    EnableSyncManChannel(MAILBOX_READ);
 8003d62:	2001      	movs	r0, #1
 8003d64:	f7fd ffd8 	bl	8001d18 <EnableSyncManChannel>

        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 8003d68:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd4 <MBX_StartMailboxHandler+0xe0>)
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f008 fb93 	bl	800c498 <malloc>
 8003d72:	4603      	mov	r3, r0
 8003d74:	461a      	mov	r2, r3
 8003d76:	4b1b      	ldr	r3, [pc, #108]	@ (8003de4 <MBX_StartMailboxHandler+0xf0>)
 8003d78:	601a      	str	r2, [r3, #0]
        if(psWriteMbx == NULL)
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003de4 <MBX_StartMailboxHandler+0xf0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d118      	bne.n	8003db4 <MBX_StartMailboxHandler+0xc0>
        {
            bNoMbxMemoryAvailable = TRUE;
 8003d82:	4b19      	ldr	r3, [pc, #100]	@ (8003de8 <MBX_StartMailboxHandler+0xf4>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	701a      	strb	r2, [r3, #0]

            //check if at least enough memory for an mailbox error is available (other wise stop the state transition)
            psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 8003d88:	200a      	movs	r0, #10
 8003d8a:	f008 fb85 	bl	800c498 <malloc>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	461a      	mov	r2, r3
 8003d92:	4b14      	ldr	r3, [pc, #80]	@ (8003de4 <MBX_StartMailboxHandler+0xf0>)
 8003d94:	601a      	str	r2, [r3, #0]
            if(psWriteMbx == NULL)
 8003d96:	4b13      	ldr	r3, [pc, #76]	@ (8003de4 <MBX_StartMailboxHandler+0xf0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <MBX_StartMailboxHandler+0xae>
            {
                result = ALSTATUSCODE_NOMEMORY;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	80fb      	strh	r3, [r7, #6]
            }

            APPL_FreeMailboxBuffer(psWriteMbx);
 8003da2:	4b10      	ldr	r3, [pc, #64]	@ (8003de4 <MBX_StartMailboxHandler+0xf0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f008 fb7e 	bl	800c4a8 <free>
            psWriteMbx = NULL;
 8003dac:	4b0d      	ldr	r3, [pc, #52]	@ (8003de4 <MBX_StartMailboxHandler+0xf0>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	e00a      	b.n	8003dca <MBX_StartMailboxHandler+0xd6>
        }
        else
        {
            bNoMbxMemoryAvailable = FALSE;
 8003db4:	4b0c      	ldr	r3, [pc, #48]	@ (8003de8 <MBX_StartMailboxHandler+0xf4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
            APPL_FreeMailboxBuffer(psWriteMbx);
 8003dba:	4b0a      	ldr	r3, [pc, #40]	@ (8003de4 <MBX_StartMailboxHandler+0xf0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f008 fb72 	bl	800c4a8 <free>
            psWriteMbx = NULL;
 8003dc4:	4b07      	ldr	r3, [pc, #28]	@ (8003de4 <MBX_StartMailboxHandler+0xf0>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
        }

    return result;
 8003dca:	88fb      	ldrh	r3, [r7, #6]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	24000960 	.word	0x24000960
 8003dd8:	24000962 	.word	0x24000962
 8003ddc:	2400095e 	.word	0x2400095e
 8003de0:	24000964 	.word	0x24000964
 8003de4:	2400096c 	.word	0x2400096c
 8003de8:	240009e4 	.word	0x240009e4

08003dec <MBX_StopMailboxHandler>:
 \brief  local management service Stop Mailbox Handler
 \brief  the Sync Manager channels 0 and 1 are disabled
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_StopMailboxHandler(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
    TMBX MBXMEM * pMbx;

    /* mailbox handler is stopped */
    bMbxRunning = FALSE;
 8003df2:	4b45      	ldr	r3, [pc, #276]	@ (8003f08 <MBX_StopMailboxHandler+0x11c>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]
    /* disable the receive mailbox sync manager channel */
    DisableSyncManChannel(MAILBOX_WRITE);
 8003df8:	2000      	movs	r0, #0
 8003dfa:	f7fd ff65 	bl	8001cc8 <DisableSyncManChannel>
    /* disable the send mailbox sync manager channel */
    DisableSyncManChannel(MAILBOX_READ);
 8003dfe:	2001      	movs	r0, #1
 8003e00:	f7fd ff62 	bl	8001cc8 <DisableSyncManChannel>
    /* initialize variables again */


    if (psRepeatMbx != NULL)
 8003e04:	4b41      	ldr	r3, [pc, #260]	@ (8003f0c <MBX_StopMailboxHandler+0x120>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d004      	beq.n	8003e16 <MBX_StopMailboxHandler+0x2a>
    {
        APPL_FreeMailboxBuffer(psRepeatMbx);
 8003e0c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f0c <MBX_StopMailboxHandler+0x120>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f008 fb49 	bl	800c4a8 <free>
    }

    if (psStoreMbx != NULL && psStoreMbx != psRepeatMbx)
 8003e16:	4b3e      	ldr	r3, [pc, #248]	@ (8003f10 <MBX_StopMailboxHandler+0x124>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <MBX_StopMailboxHandler+0x48>
 8003e1e:	4b3c      	ldr	r3, [pc, #240]	@ (8003f10 <MBX_StopMailboxHandler+0x124>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	4b3a      	ldr	r3, [pc, #232]	@ (8003f0c <MBX_StopMailboxHandler+0x120>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d004      	beq.n	8003e34 <MBX_StopMailboxHandler+0x48>
    {
        APPL_FreeMailboxBuffer(psStoreMbx);
 8003e2a:	4b39      	ldr	r3, [pc, #228]	@ (8003f10 <MBX_StopMailboxHandler+0x124>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f008 fb3a 	bl	800c4a8 <free>
    }

    if (psReadMbx != NULL && psReadMbx != psRepeatMbx && psReadMbx != psStoreMbx)
 8003e34:	4b37      	ldr	r3, [pc, #220]	@ (8003f14 <MBX_StopMailboxHandler+0x128>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d010      	beq.n	8003e5e <MBX_StopMailboxHandler+0x72>
 8003e3c:	4b35      	ldr	r3, [pc, #212]	@ (8003f14 <MBX_StopMailboxHandler+0x128>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b32      	ldr	r3, [pc, #200]	@ (8003f0c <MBX_StopMailboxHandler+0x120>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d00a      	beq.n	8003e5e <MBX_StopMailboxHandler+0x72>
 8003e48:	4b32      	ldr	r3, [pc, #200]	@ (8003f14 <MBX_StopMailboxHandler+0x128>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b30      	ldr	r3, [pc, #192]	@ (8003f10 <MBX_StopMailboxHandler+0x124>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d004      	beq.n	8003e5e <MBX_StopMailboxHandler+0x72>
    {
        APPL_FreeMailboxBuffer(psReadMbx);
 8003e54:	4b2f      	ldr	r3, [pc, #188]	@ (8003f14 <MBX_StopMailboxHandler+0x128>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f008 fb25 	bl	800c4a8 <free>
    }


    SDOS_ClearPendingResponse();
 8003e5e:	f002 fe4f 	bl	8006b00 <SDOS_ClearPendingResponse>



    psWriteMbx = NULL;
 8003e62:	4b2d      	ldr	r3, [pc, #180]	@ (8003f18 <MBX_StopMailboxHandler+0x12c>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
    psRepeatMbx = NULL;
 8003e68:	4b28      	ldr	r3, [pc, #160]	@ (8003f0c <MBX_StopMailboxHandler+0x120>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
    psReadMbx = NULL;
 8003e6e:	4b29      	ldr	r3, [pc, #164]	@ (8003f14 <MBX_StopMailboxHandler+0x128>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
    psStoreMbx = NULL;
 8003e74:	4b26      	ldr	r3, [pc, #152]	@ (8003f10 <MBX_StopMailboxHandler+0x124>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 8003e7a:	4b28      	ldr	r3, [pc, #160]	@ (8003f1c <MBX_StopMailboxHandler+0x130>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x080F bit 2)*/
    {
        UINT16 sm1Activate = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	807b      	strh	r3, [r7, #2]
        HW_EscReadWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8003e84:	1cbb      	adds	r3, r7, #2
 8003e86:	2202      	movs	r2, #2
 8003e88:	f640 010e 	movw	r1, #2062	@ 0x80e
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fc fd25 	bl	80008dc <HW_EscRead>
        sm1Activate &= SWAPWORD(~0x0200);
 8003e92:	887b      	ldrh	r3, [r7, #2]
 8003e94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	807b      	strh	r3, [r7, #2]
        HW_EscWriteWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8003e9c:	1cbb      	adds	r3, r7, #2
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f640 010e 	movw	r1, #2062	@ 0x80e
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fc fd3d 	bl	8000924 <HW_EscWrite>
    }
    bSendMbxIsFull         = FALSE;
 8003eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8003f20 <MBX_StopMailboxHandler+0x134>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 8003eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f24 <MBX_StopMailboxHandler+0x138>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f28 <MBX_StopMailboxHandler+0x13c>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter         = 0;
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f2c <MBX_StopMailboxHandler+0x140>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter        = 0;
 8003ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f30 <MBX_StopMailboxHandler+0x144>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]

    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 8003ec8:	481a      	ldr	r0, [pc, #104]	@ (8003f34 <MBX_StopMailboxHandler+0x148>)
 8003eca:	f7ff fe66 	bl	8003b9a <GetOutOfMbxQueue>
 8003ece:	6078      	str	r0, [r7, #4]
        if (pMbx)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <MBX_StopMailboxHandler+0xf0>
        {
            APPL_FreeMailboxBuffer(pMbx);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f008 fae6 	bl	800c4a8 <free>
        }
    } while (pMbx != NULL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f2      	bne.n	8003ec8 <MBX_StopMailboxHandler+0xdc>
    
    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 8003ee2:	4815      	ldr	r0, [pc, #84]	@ (8003f38 <MBX_StopMailboxHandler+0x14c>)
 8003ee4:	f7ff fe59 	bl	8003b9a <GetOutOfMbxQueue>
 8003ee8:	6078      	str	r0, [r7, #4]
        if (pMbx)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <MBX_StopMailboxHandler+0x10a>
        {
            APPL_FreeMailboxBuffer(pMbx);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f008 fad9 	bl	800c4a8 <free>
        }
    } while (pMbx != NULL);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f2      	bne.n	8003ee2 <MBX_StopMailboxHandler+0xf6>

}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	2400095b 	.word	0x2400095b
 8003f0c:	24000974 	.word	0x24000974
 8003f10:	24000978 	.word	0x24000978
 8003f14:	24000970 	.word	0x24000970
 8003f18:	2400096c 	.word	0x2400096c
 8003f1c:	2400095c 	.word	0x2400095c
 8003f20:	2400095a 	.word	0x2400095a
 8003f24:	24000959 	.word	0x24000959
 8003f28:	24000968 	.word	0x24000968
 8003f2c:	24000966 	.word	0x24000966
 8003f30:	24000967 	.word	0x24000967
 8003f34:	240009b0 	.word	0x240009b0
 8003f38:	2400097c 	.word	0x2400097c

08003f3c <MailboxServiceInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MailboxServiceInd(TMBX MBXMEM *pMbx)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
    UINT8 result;


    switch ( (pMbx->MbxHeader.Flags[MBX_OFFS_TYPE] & MBX_MASK_TYPE) >> MBX_SHIFT_TYPE )
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	889b      	ldrh	r3, [r3, #4]
 8003f48:	121b      	asrs	r3, r3, #8
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d105      	bne.n	8003f5e <MailboxServiceInd+0x22>
    {
    case MBX_TYPE_COE:
        /* CoE datagram received */
        result = COE_ServiceInd((TCOEMBX MBXMEM *) pMbx);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fd fdd6 	bl	8001b04 <COE_ServiceInd>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	73fb      	strb	r3, [r7, #15]
        break;
 8003f5c:	e002      	b.n	8003f64 <MailboxServiceInd+0x28>

    default:

        result = MBXERR_UNSUPPORTEDPROTOCOL;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	73fb      	strb	r3, [r7, #15]
        break;
 8003f62:	bf00      	nop
    }

    return result;
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <MBX_MailboxWriteInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxWriteInd(TMBX MBXMEM *pMbx)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	73fb      	strb	r3, [r7, #15]
    UINT8 mbxCounter = pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] >> MBX_SHIFT_COUNTER;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	889b      	ldrh	r3, [r3, #4]
 8003f80:	0b1b      	lsrs	r3, r3, #12
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	73bb      	strb	r3, [r7, #14]
    UINT16 MbxLen = SWAPWORD(pMbx->MbxHeader.Length);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	81bb      	strh	r3, [r7, #12]

    if(MbxLen > MAX_MBX_SIZE)
 8003f8c:	89bb      	ldrh	r3, [r7, #12]
 8003f8e:	2b80      	cmp	r3, #128	@ 0x80
 8003f90:	d914      	bls.n	8003fbc <MBX_MailboxWriteInd+0x4c>
    {
        /* Mailbox error response: size specified in mailbox header too large*/
        pMbx->MbxHeader.Length     = 4;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2204      	movs	r2, #4
 8003f96:	801a      	strh	r2, [r3, #0]
        pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	889b      	ldrh	r3, [r3, #4]
 8003f9c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	809a      	strh	r2, [r3, #4]
        pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	80da      	strh	r2, [r3, #6]
        pMbx->Data[1]                        = SWAPWORD(MBXERR_INVALIDSIZE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2208      	movs	r2, #8
 8003fb0:	811a      	strh	r2, [r3, #8]
        MBX_MailboxSendReq(pMbx, 0);
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f8e5 	bl	8004184 <MBX_MailboxSendReq>
        // the mailbox buffer has to be freed here
        APPL_FreeMailboxBuffer(pMbx);
        pMbx = NULL;

    }
}
 8003fba:	e02f      	b.n	800401c <MBX_MailboxWriteInd+0xac>
    if ( mbxCounter == 0 || mbxCounter != u8MbxWriteCounter )
 8003fbc:	7bbb      	ldrb	r3, [r7, #14]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <MBX_MailboxWriteInd+0x5c>
 8003fc2:	4b18      	ldr	r3, [pc, #96]	@ (8004024 <MBX_MailboxWriteInd+0xb4>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	7bba      	ldrb	r2, [r7, #14]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d021      	beq.n	8004010 <MBX_MailboxWriteInd+0xa0>
        u8MbxWriteCounter = mbxCounter;
 8003fcc:	4a15      	ldr	r2, [pc, #84]	@ (8004024 <MBX_MailboxWriteInd+0xb4>)
 8003fce:	7bbb      	ldrb	r3, [r7, #14]
 8003fd0:	7013      	strb	r3, [r2, #0]
            result = PutInMbxQueue(pMbx, &sMbxReceiveQueue);
 8003fd2:	4915      	ldr	r1, [pc, #84]	@ (8004028 <MBX_MailboxWriteInd+0xb8>)
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff fdb7 	bl	8003b48 <PutInMbxQueue>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	73fb      	strb	r3, [r7, #15]
        if ( result != 0 )
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01b      	beq.n	800401c <MBX_MailboxWriteInd+0xac>
            pMbx->MbxHeader.Length     = 4;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	889b      	ldrh	r3, [r3, #4]
 8003fee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	809a      	strh	r2, [r3, #4]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	b29a      	uxth	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 8004006:	2100      	movs	r1, #0
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f8bb 	bl	8004184 <MBX_MailboxSendReq>
        if ( result != 0 )
 800400e:	e005      	b.n	800401c <MBX_MailboxWriteInd+0xac>
        APPL_FreeMailboxBuffer(pMbx);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f008 fa49 	bl	800c4a8 <free>
        pMbx = NULL;
 8004016:	2300      	movs	r3, #0
 8004018:	607b      	str	r3, [r7, #4]
}
 800401a:	e7ff      	b.n	800401c <MBX_MailboxWriteInd+0xac>
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	24000966 	.word	0x24000966
 8004028:	240009b0 	.word	0x240009b0

0800402c <MBX_MailboxReadInd>:
/**
 \brief This function is called when the Master has read the Send-Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxReadInd(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
    bSendMbxIsFull = FALSE;
 8004032:	4b2e      	ldr	r3, [pc, #184]	@ (80040ec <MBX_MailboxReadInd+0xc0>)
 8004034:	2200      	movs	r2, #0
 8004036:	701a      	strb	r2, [r3, #0]

    // HBu 02.05.06: the pointer psRepeatMbx is only free if there is no stored
    //               mailbox service from the last repeat
    if (psRepeatMbx && psStoreMbx == NULL)
 8004038:	4b2d      	ldr	r3, [pc, #180]	@ (80040f0 <MBX_MailboxReadInd+0xc4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d011      	beq.n	8004064 <MBX_MailboxReadInd+0x38>
 8004040:	4b2c      	ldr	r3, [pc, #176]	@ (80040f4 <MBX_MailboxReadInd+0xc8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10d      	bne.n	8004064 <MBX_MailboxReadInd+0x38>
    {
        /* the last sent service is not stored for repeat any longer */
/*ECATCHANGE_START(V5.13) MBX3*/
        if (psReadMbx != psRepeatMbx)
 8004048:	4b2b      	ldr	r3, [pc, #172]	@ (80040f8 <MBX_MailboxReadInd+0xcc>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b28      	ldr	r3, [pc, #160]	@ (80040f0 <MBX_MailboxReadInd+0xc4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d007      	beq.n	8004064 <MBX_MailboxReadInd+0x38>
        {
            APPL_FreeMailboxBuffer(psRepeatMbx);
 8004054:	4b26      	ldr	r3, [pc, #152]	@ (80040f0 <MBX_MailboxReadInd+0xc4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f008 fa25 	bl	800c4a8 <free>
            psRepeatMbx = NULL;
 800405e:	4b24      	ldr	r3, [pc, #144]	@ (80040f0 <MBX_MailboxReadInd+0xc4>)
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
/*ECATCHANGE_END(V5.13) MBX3*/

    }

    /* the actual sent service has to be stored for repeat */
    psRepeatMbx = psReadMbx;
 8004064:	4b24      	ldr	r3, [pc, #144]	@ (80040f8 <MBX_MailboxReadInd+0xcc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a21      	ldr	r2, [pc, #132]	@ (80040f0 <MBX_MailboxReadInd+0xc4>)
 800406a:	6013      	str	r3, [r2, #0]

      if ( psStoreMbx )
 800406c:	4b21      	ldr	r3, [pc, #132]	@ (80040f4 <MBX_MailboxReadInd+0xc8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <MBX_MailboxReadInd+0x5a>
      {
        /* there was a buffer stored */
        MBX_CopyToSendMailbox(psStoreMbx);
 8004074:	4b1f      	ldr	r3, [pc, #124]	@ (80040f4 <MBX_MailboxReadInd+0xc8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f000 f991 	bl	80043a0 <MBX_CopyToSendMailbox>
        /* no more buffer to be stored any more */
        psStoreMbx = NULL;
 800407e:	4b1d      	ldr	r3, [pc, #116]	@ (80040f4 <MBX_MailboxReadInd+0xc8>)
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	e009      	b.n	800409a <MBX_MailboxReadInd+0x6e>
      }
      else
    {
        TMBX MBXMEM* pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 8004086:	481d      	ldr	r0, [pc, #116]	@ (80040fc <MBX_MailboxReadInd+0xd0>)
 8004088:	f7ff fd87 	bl	8003b9a <GetOutOfMbxQueue>
 800408c:	6078      	str	r0, [r7, #4]

        
        if (pMbx)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <MBX_MailboxReadInd+0x6e>
        {
            MBX_CopyToSendMailbox(pMbx);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f983 	bl	80043a0 <MBX_CopyToSendMailbox>
        }
    }

      if ( u8MailboxSendReqStored )
 800409a:	4b19      	ldr	r3, [pc, #100]	@ (8004100 <MBX_MailboxReadInd+0xd4>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01f      	beq.n	80040e2 <MBX_MailboxReadInd+0xb6>
    {
        /* there are mailbox services stored to be sent */
        if ( u8MailboxSendReqStored & COE_SERVICE )
 80040a2:	4b17      	ldr	r3, [pc, #92]	@ (8004100 <MBX_MailboxReadInd+0xd4>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d019      	beq.n	80040e2 <MBX_MailboxReadInd+0xb6>
        {
           UINT8 result = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	70fb      	strb	r3, [r7, #3]
            /* reset the flag indicating that CoE service to be sent was stored */
            u8MailboxSendReqStored &= ~COE_SERVICE;
 80040b2:	4b13      	ldr	r3, [pc, #76]	@ (8004100 <MBX_MailboxReadInd+0xd4>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	f023 0302 	bic.w	r3, r3, #2
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	4b10      	ldr	r3, [pc, #64]	@ (8004100 <MBX_MailboxReadInd+0xd4>)
 80040be:	701a      	strb	r2, [r3, #0]

            /* call CoE function that will send the stored CoE service */
            result = COE_ContinueInd(psWriteMbx);
 80040c0:	4b10      	ldr	r3, [pc, #64]	@ (8004104 <MBX_MailboxReadInd+0xd8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fd fd55 	bl	8001b74 <COE_ContinueInd>
 80040ca:	4603      	mov	r3, r0
 80040cc:	70fb      	strb	r3, [r7, #3]

            if (result != 0)
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d006      	beq.n	80040e2 <MBX_MailboxReadInd+0xb6>
            {
                /*Set the pending CoE indication is an error occurred during the continue indication*/
                u8MailboxSendReqStored |= COE_SERVICE;
 80040d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004100 <MBX_MailboxReadInd+0xd4>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	f043 0302 	orr.w	r3, r3, #2
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	4b08      	ldr	r3, [pc, #32]	@ (8004100 <MBX_MailboxReadInd+0xd4>)
 80040e0:	701a      	strb	r2, [r3, #0]
/*ECATCHANGE_END(V5.13) EOE1*/

        {
        }
    }
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	2400095a 	.word	0x2400095a
 80040f0:	24000974 	.word	0x24000974
 80040f4:	24000978 	.word	0x24000978
 80040f8:	24000970 	.word	0x24000970
 80040fc:	2400097c 	.word	0x2400097c
 8004100:	24000968 	.word	0x24000968
 8004104:	2400096c 	.word	0x2400096c

08004108 <MBX_MailboxRepeatReq>:
 \brief This function is called if the Master has requested a resending of the last
 \brief sent mailbox
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxRepeatReq(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
    if (psRepeatMbx)
 800410e:	4b18      	ldr	r3, [pc, #96]	@ (8004170 <MBX_MailboxRepeatReq+0x68>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01d      	beq.n	8004152 <MBX_MailboxRepeatReq+0x4a>
    {
        TMBX MBXMEM *pMbx = psRepeatMbx;
 8004116:	4b16      	ldr	r3, [pc, #88]	@ (8004170 <MBX_MailboxRepeatReq+0x68>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	607b      	str	r3, [r7, #4]
        /* HBu 13.10.06: if a repeat request is received (again) before the previously repeated mailbox telegram
           was read from the master (psStoreMbx != NULL) the next mailbox telegram to be sent is still in the
            read mailbox so it has not to updated exchanged */
        ENTER_MBX_CRITICAL;

       if (bSendMbxIsFull && psStoreMbx == NULL)
 800411c:	4b15      	ldr	r3, [pc, #84]	@ (8004174 <MBX_MailboxRepeatReq+0x6c>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d010      	beq.n	8004146 <MBX_MailboxRepeatReq+0x3e>
 8004124:	4b14      	ldr	r3, [pc, #80]	@ (8004178 <MBX_MailboxRepeatReq+0x70>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10c      	bne.n	8004146 <MBX_MailboxRepeatReq+0x3e>
        {
            /* mailbox is full, take the buffer off */
            DisableSyncManChannel(MAILBOX_READ);
 800412c:	2001      	movs	r0, #1
 800412e:	f7fd fdcb 	bl	8001cc8 <DisableSyncManChannel>

            /* store the buffer to be sent next */
            psStoreMbx = psReadMbx;
 8004132:	4b12      	ldr	r3, [pc, #72]	@ (800417c <MBX_MailboxRepeatReq+0x74>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a10      	ldr	r2, [pc, #64]	@ (8004178 <MBX_MailboxRepeatReq+0x70>)
 8004138:	6013      	str	r3, [r2, #0]
            /* enable the mailbox again */
            EnableSyncManChannel(MAILBOX_READ);
 800413a:	2001      	movs	r0, #1
 800413c:	f7fd fdec 	bl	8001d18 <EnableSyncManChannel>

            /* HBu 15.02.06: flag has to be reset otherwise the mailbox service
                             will not be copied by MBX_CopyToSendMailbox */
            bSendMbxIsFull = FALSE;
 8004140:	4b0c      	ldr	r3, [pc, #48]	@ (8004174 <MBX_MailboxRepeatReq+0x6c>)
 8004142:	2200      	movs	r2, #0
 8004144:	701a      	strb	r2, [r3, #0]
        }


        MBX_CopyToSendMailbox(pMbx);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f92a 	bl	80043a0 <MBX_CopyToSendMailbox>
        // HBu 17.06.06: psRepeatMbx has to be set to 0, when it was repeated, otherwise it would be returned twice
        // to the empty queue (MAILBOX_QUEUE=1) or a buffer get lost, if the the next repeat request will happen before
        // the repeated buffer was read
        psRepeatMbx = NULL;
 800414c:	4b08      	ldr	r3, [pc, #32]	@ (8004170 <MBX_MailboxRepeatReq+0x68>)
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
        LEAVE_MBX_CRITICAL;
    }

    // Repeat was finished, toggle the acknowledge bit
    bMbxRepeatToggle = !bMbxRepeatToggle;
 8004152:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <MBX_MailboxRepeatReq+0x78>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	bf0c      	ite	eq
 800415a:	2301      	moveq	r3, #1
 800415c:	2300      	movne	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	4b07      	ldr	r3, [pc, #28]	@ (8004180 <MBX_MailboxRepeatReq+0x78>)
 8004164:	701a      	strb	r2, [r3, #0]
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	24000974 	.word	0x24000974
 8004174:	2400095a 	.word	0x2400095a
 8004178:	24000978 	.word	0x24000978
 800417c:	24000970 	.word	0x24000970
 8004180:	2400095c 	.word	0x2400095c

08004184 <MBX_MailboxSendReq>:

 \brief        This function puts a new Mailbox service in the Send Mailbox
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_MailboxSendReq( TMBX MBXMEM * pMbx, UINT8 flags )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	70fb      	strb	r3, [r7, #3]
    UINT8 result = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	73fb      	strb	r3, [r7, #15]

    /* HBu 06.02.06: in INIT-state a mailbox send request shall be refused */
    if ( (nAlStatus & STATE_MASK) == STATE_INIT )
 8004194:	4b2d      	ldr	r3, [pc, #180]	@ (800424c <MBX_MailboxSendReq+0xc8>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <MBX_MailboxSendReq+0x20>
    {
        return ERROR_INVALIDSTATE;
 80041a0:	23f0      	movs	r3, #240	@ 0xf0
 80041a2:	e04e      	b.n	8004242 <MBX_MailboxSendReq+0xbe>

    ENTER_MBX_CRITICAL;

    /* the counter in the mailbox header has to be incremented with every new mailbox service to be sent
       if the mailbox data link layer is supported (software switch MAILBOX_REPEAT_SUPPORTED set)*/
    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] &= ~MBX_MASK_COUNTER;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	889b      	ldrh	r3, [r3, #4]
 80041a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	809a      	strh	r2, [r3, #4]
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    /* u8MbxCounter holds the actual counter for the mailbox header, only the values
       1-7 are allowed if the mailbox data link layer is supported  */
    if ( (u8MbxReadCounter & 0x07) == 0 )
 80041b2:	4b27      	ldr	r3, [pc, #156]	@ (8004250 <MBX_MailboxSendReq+0xcc>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d102      	bne.n	80041c4 <MBX_MailboxSendReq+0x40>
    {
        u8MbxReadCounter = 1;
 80041be:	4b24      	ldr	r3, [pc, #144]	@ (8004250 <MBX_MailboxSendReq+0xcc>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	701a      	strb	r2, [r3, #0]
    }

    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] |= u8MbxReadCounter << MBX_SHIFT_COUNTER;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	889b      	ldrh	r3, [r3, #4]
 80041c8:	b21a      	sxth	r2, r3
 80041ca:	4b21      	ldr	r3, [pc, #132]	@ (8004250 <MBX_MailboxSendReq+0xcc>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	031b      	lsls	r3, r3, #12
 80041d0:	b21b      	sxth	r3, r3
 80041d2:	4313      	orrs	r3, r2
 80041d4:	b21b      	sxth	r3, r3
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	809a      	strh	r2, [r3, #4]

    /* try to copy the mailbox command in the ESC */
    if ( MBX_CopyToSendMailbox(pMbx) != 0 )
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f8df 	bl	80043a0 <MBX_CopyToSendMailbox>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d014      	beq.n	8004212 <MBX_MailboxSendReq+0x8e>
    {
        /* no success, send mailbox was full, set flag  */
        result = PutInMbxQueue(pMbx, &sMbxSendQueue);
 80041e8:	491a      	ldr	r1, [pc, #104]	@ (8004254 <MBX_MailboxSendReq+0xd0>)
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff fcac 	bl	8003b48 <PutInMbxQueue>
 80041f0:	4603      	mov	r3, r0
 80041f2:	73fb      	strb	r3, [r7, #15]
        if (result != 0)
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d004      	beq.n	8004204 <MBX_MailboxSendReq+0x80>
        {
            flags |= FRAGMENTS_FOLLOW;
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004200:	70fb      	strb	r3, [r7, #3]
 8004202:	e00c      	b.n	800421e <MBX_MailboxSendReq+0x9a>
        }
        else
        {
            u8MbxReadCounter++;
 8004204:	4b12      	ldr	r3, [pc, #72]	@ (8004250 <MBX_MailboxSendReq+0xcc>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	3301      	adds	r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	4b10      	ldr	r3, [pc, #64]	@ (8004250 <MBX_MailboxSendReq+0xcc>)
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	e005      	b.n	800421e <MBX_MailboxSendReq+0x9a>
        }
    }
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    else
    {
        u8MbxReadCounter++;
 8004212:	4b0f      	ldr	r3, [pc, #60]	@ (8004250 <MBX_MailboxSendReq+0xcc>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	3301      	adds	r3, #1
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4b0d      	ldr	r3, [pc, #52]	@ (8004250 <MBX_MailboxSendReq+0xcc>)
 800421c:	701a      	strb	r2, [r3, #0]
    }

    if ( flags & FRAGMENTS_FOLLOW )
 800421e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004222:	2b00      	cmp	r3, #0
 8004224:	da0c      	bge.n	8004240 <MBX_MailboxSendReq+0xbc>
    {
        /* store the mailbox service that the corresponding XXX_ContinueInd function will
           be called when the send mailbox will have been read by the master because there
           are mailbox commands to be sent for this service */
        u8MailboxSendReqStored |= (flags & ((UINT8) ~FRAGMENTS_FOLLOW));
 8004226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800422a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800422e:	b25a      	sxtb	r2, r3
 8004230:	4b09      	ldr	r3, [pc, #36]	@ (8004258 <MBX_MailboxSendReq+0xd4>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	b25b      	sxtb	r3, r3
 8004236:	4313      	orrs	r3, r2
 8004238:	b25b      	sxtb	r3, r3
 800423a:	b2da      	uxtb	r2, r3
 800423c:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <MBX_MailboxSendReq+0xd4>)
 800423e:	701a      	strb	r2, [r3, #0]
    }

    LEAVE_MBX_CRITICAL;

    return result;
 8004240:	7bfb      	ldrb	r3, [r7, #15]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	24000942 	.word	0x24000942
 8004250:	24000967 	.word	0x24000967
 8004254:	2400097c 	.word	0x2400097c
 8004258:	24000968 	.word	0x24000968

0800425c <MBX_CheckAndCopyMailbox>:

        Also the contents of the Receive Mailbox will be copied in the variable sMbx.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_CheckAndCopyMailbox( void )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
    UINT16 mbxLen;

    /* get the size of the received mailbox command and acknowledge the event*/
    HW_EscReadWord(mbxLen,u16EscAddrReceiveMbx);
 8004262:	4b47      	ldr	r3, [pc, #284]	@ (8004380 <MBX_CheckAndCopyMailbox+0x124>)
 8004264:	8819      	ldrh	r1, [r3, #0]
 8004266:	1cbb      	adds	r3, r7, #2
 8004268:	2202      	movs	r2, #2
 800426a:	4618      	mov	r0, r3
 800426c:	f7fc fb36 	bl	80008dc <HW_EscRead>
    
    /* the size has to be swapped here, all other bytes of the mailbox service will be swapped later */
    mbxLen = SWAPWORD(mbxLen);
 8004270:	887b      	ldrh	r3, [r7, #2]
 8004272:	807b      	strh	r3, [r7, #2]

    if(bNoMbxMemoryAvailable == TRUE)
 8004274:	4b43      	ldr	r3, [pc, #268]	@ (8004384 <MBX_CheckAndCopyMailbox+0x128>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d123      	bne.n	80042c4 <MBX_CheckAndCopyMailbox+0x68>
    {
        /* Return a no memory error in case of any mailbox request*/
        TMBX MBXMEM *pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 800427c:	200a      	movs	r0, #10
 800427e:	f008 f90b 	bl	800c498 <malloc>
 8004282:	4603      	mov	r3, r0
 8004284:	607b      	str	r3, [r7, #4]

        if(pMbx != NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01b      	beq.n	80042c4 <MBX_CheckAndCopyMailbox+0x68>
        {
            HMEMSET(pMbx,0x00,10);
 800428c:	220a      	movs	r2, #10
 800428e:	2100      	movs	r1, #0
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f008 f9bf 	bl	800c614 <memset>

            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2204      	movs	r2, #4
 800429a:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	889b      	ldrh	r3, [r3, #4]
 80042a0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	809a      	strh	r2, [r3, #4]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(MBXERR_NOMOREMEMORY);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2207      	movs	r2, #7
 80042b4:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 80042b6:	2100      	movs	r1, #0
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ff63 	bl	8004184 <MBX_MailboxSendReq>

            APPL_FreeMailboxBuffer(pMbx);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f008 f8f2 	bl	800c4a8 <free>
        }
    }
    /* the length of the mailbox data is in the first two bytes of the mailbox,
       so the length of the mailbox header has to be added */
    mbxLen += MBX_HEADER_SIZE;
 80042c4:	887b      	ldrh	r3, [r7, #2]
 80042c6:	3306      	adds	r3, #6
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	807b      	strh	r3, [r7, #2]

    /* in this example there are only two mailbox buffers available in the firmware (one for processing and
       one to stored the last sent response for a possible repeat request), so a
       received mailbox service can only be processed if a free buffer is available */
    if ( ( bSendMbxIsFull )                /* a received mailbox service will not be processed
 80042cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004388 <MBX_CheckAndCopyMailbox+0x12c>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d103      	bne.n	80042dc <MBX_CheckAndCopyMailbox+0x80>
                                                    as long as the send mailbox is still full
                                                    (waits to be read from the master) */
        ||( u8MailboxSendReqStored )    /* a mailbox service to be sent is still stored
 80042d4:	4b2d      	ldr	r3, [pc, #180]	@ (800438c <MBX_CheckAndCopyMailbox+0x130>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <MBX_CheckAndCopyMailbox+0x88>
                                                    until all stored mailbox services are sent */
        )
    {
        /* set flag that the processing of the mailbox service will be checked in the
            function MBX_Main (called from ECAT_Main) */
        bReceiveMbxIsLocked = TRUE;
 80042dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004390 <MBX_CheckAndCopyMailbox+0x134>)
 80042de:	2201      	movs	r2, #1
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	e04a      	b.n	800437a <MBX_CheckAndCopyMailbox+0x11e>
    }
    else
    {
        /* received mailbox command can be processed, reset flag */
        bReceiveMbxIsLocked = FALSE;
 80042e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004390 <MBX_CheckAndCopyMailbox+0x134>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]

        /* if the read mailbox size is too big for the buffer, set the copy size to the maximum buffer size, otherwise
           memory could be overwritten,
           the evaluation of the mailbox size will be done in the mailbox protocols called from MBX_WriteMailboxInd */

        if (mbxLen > u16ReceiveMbxSize)
 80042ea:	887a      	ldrh	r2, [r7, #2]
 80042ec:	4b29      	ldr	r3, [pc, #164]	@ (8004394 <MBX_CheckAndCopyMailbox+0x138>)
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d902      	bls.n	80042fa <MBX_CheckAndCopyMailbox+0x9e>
        {
            mbxLen = u16ReceiveMbxSize;
 80042f4:	4b27      	ldr	r3, [pc, #156]	@ (8004394 <MBX_CheckAndCopyMailbox+0x138>)
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	807b      	strh	r3, [r7, #2]
        }

        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 80042fa:	4b26      	ldr	r3, [pc, #152]	@ (8004394 <MBX_CheckAndCopyMailbox+0x138>)
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f008 f8ca 	bl	800c498 <malloc>
 8004304:	4603      	mov	r3, r0
 8004306:	461a      	mov	r2, r3
 8004308:	4b23      	ldr	r3, [pc, #140]	@ (8004398 <MBX_CheckAndCopyMailbox+0x13c>)
 800430a:	601a      	str	r2, [r3, #0]

        /* if there is no more memory for mailbox buffer, the mailbox should not be read */
        if (psWriteMbx == NULL)
 800430c:	4b22      	ldr	r3, [pc, #136]	@ (8004398 <MBX_CheckAndCopyMailbox+0x13c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <MBX_CheckAndCopyMailbox+0xc0>
        {
            /* set flag that the processing of the mailbox service will be checked in the
                function MBX_Main (called from ECAT_Main) */
            bReceiveMbxIsLocked = TRUE;
 8004314:	4b1e      	ldr	r3, [pc, #120]	@ (8004390 <MBX_CheckAndCopyMailbox+0x134>)
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e02e      	b.n	800437a <MBX_CheckAndCopyMailbox+0x11e>
            return;
        }
        /* copy the mailbox header and data*/
        HW_EscReadMbxMem((MEM_ADDR MBXMEM *) psWriteMbx,u16EscAddrReceiveMbx,mbxLen);
 800431c:	4b1e      	ldr	r3, [pc, #120]	@ (8004398 <MBX_CheckAndCopyMailbox+0x13c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a17      	ldr	r2, [pc, #92]	@ (8004380 <MBX_CheckAndCopyMailbox+0x124>)
 8004322:	8811      	ldrh	r1, [r2, #0]
 8004324:	887a      	ldrh	r2, [r7, #2]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fc fad8 	bl	80008dc <HW_EscRead>


        {
        /*Read Control and Status of SyncManager 0 to check if the buffer is unlocked*/
        VARVOLATILE UINT16 smstate = 0x00;
 800432c:	2300      	movs	r3, #0
 800432e:	803b      	strh	r3, [r7, #0]
        HW_EscReadWord(smstate,ESC_SYNCMAN_CONTROL_OFFSET);
 8004330:	463b      	mov	r3, r7
 8004332:	2202      	movs	r2, #2
 8004334:	f640 0104 	movw	r1, #2052	@ 0x804
 8004338:	4618      	mov	r0, r3
 800433a:	f7fc facf 	bl	80008dc <HW_EscRead>
        smstate = SWAPWORD(smstate);
 800433e:	883b      	ldrh	r3, [r7, #0]
 8004340:	b29b      	uxth	r3, r3
 8004342:	803b      	strh	r3, [r7, #0]

        if(smstate & SM_STATUS_MBX_BUFFER_FULL)
 8004344:	883b      	ldrh	r3, [r7, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00f      	beq.n	8004370 <MBX_CheckAndCopyMailbox+0x114>
        {
            /*Unlock the mailbox SyncManger buffer*/
            u16dummy = 0;
 8004350:	4b12      	ldr	r3, [pc, #72]	@ (800439c <MBX_CheckAndCopyMailbox+0x140>)
 8004352:	2200      	movs	r2, #0
 8004354:	801a      	strh	r2, [r3, #0]
            HW_EscReadWord(u16dummy,(u16EscAddrReceiveMbx + u16ReceiveMbxSize - 2));
 8004356:	4b0a      	ldr	r3, [pc, #40]	@ (8004380 <MBX_CheckAndCopyMailbox+0x124>)
 8004358:	881a      	ldrh	r2, [r3, #0]
 800435a:	4b0e      	ldr	r3, [pc, #56]	@ (8004394 <MBX_CheckAndCopyMailbox+0x138>)
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	4413      	add	r3, r2
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b02      	subs	r3, #2
 8004364:	b29b      	uxth	r3, r3
 8004366:	2202      	movs	r2, #2
 8004368:	4619      	mov	r1, r3
 800436a:	480c      	ldr	r0, [pc, #48]	@ (800439c <MBX_CheckAndCopyMailbox+0x140>)
 800436c:	f7fc fab6 	bl	80008dc <HW_EscRead>
        }

        }

        /* in MBX_MailboxWriteInd the mailbox protocol will be processed */
        MBX_MailboxWriteInd( psWriteMbx );
 8004370:	4b09      	ldr	r3, [pc, #36]	@ (8004398 <MBX_CheckAndCopyMailbox+0x13c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fdfb 	bl	8003f70 <MBX_MailboxWriteInd>

    }
}
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	24000962 	.word	0x24000962
 8004384:	240009e4 	.word	0x240009e4
 8004388:	2400095a 	.word	0x2400095a
 800438c:	24000968 	.word	0x24000968
 8004390:	24000959 	.word	0x24000959
 8004394:	24000960 	.word	0x24000960
 8004398:	2400096c 	.word	0x2400096c
 800439c:	2400094c 	.word	0x2400094c

080043a0 <MBX_CopyToSendMailbox>:

 \brief    This function copies data to the Send Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_CopyToSendMailbox( TMBX MBXMEM *pMbx )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
    if ( (nAlStatus & STATE_MASK) == STATE_INIT)
 80043a8:	4b4d      	ldr	r3, [pc, #308]	@ (80044e0 <MBX_CopyToSendMailbox+0x140>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <MBX_CopyToSendMailbox+0x18>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 80043b4:	23f0      	movs	r3, #240	@ 0xf0
 80043b6:	e08f      	b.n	80044d8 <MBX_CopyToSendMailbox+0x138>
    }


    if ( !bMbxRunning )
 80043b8:	4b4a      	ldr	r3, [pc, #296]	@ (80044e4 <MBX_CopyToSendMailbox+0x144>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <MBX_CopyToSendMailbox+0x24>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 80043c0:	23f0      	movs	r3, #240	@ 0xf0
 80043c2:	e089      	b.n	80044d8 <MBX_CopyToSendMailbox+0x138>
    }

    if ( bSendMbxIsFull )
 80043c4:	4b48      	ldr	r3, [pc, #288]	@ (80044e8 <MBX_CopyToSendMailbox+0x148>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <MBX_CopyToSendMailbox+0x30>
    {
        /* mailbox service cannot be sent because the send mailbox is still full */
        return MBXERR_NOMOREMEMORY;
 80043cc:	2307      	movs	r3, #7
 80043ce:	e083      	b.n	80044d8 <MBX_CopyToSendMailbox+0x138>
    }
    else
    {
        /* the variable mbxSize contains the size of the mailbox data to be sent */
        UINT16 mbxSize = pMbx->MbxHeader.Length;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	82bb      	strh	r3, [r7, #20]
/*ECATCHANGE_START(V5.13) MBX2*/
        /*Reset the not used mailbox memory*/
        {
            UINT16 LastUsedAddr = u16EscAddrSendMbx + mbxSize + MBX_HEADER_SIZE;
 80043d6:	4b45      	ldr	r3, [pc, #276]	@ (80044ec <MBX_CopyToSendMailbox+0x14c>)
 80043d8:	881a      	ldrh	r2, [r3, #0]
 80043da:	8abb      	ldrh	r3, [r7, #20]
 80043dc:	4413      	add	r3, r2
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3306      	adds	r3, #6
 80043e2:	82fb      	strh	r3, [r7, #22]
            UINT16 LastAddrToReset = (u16EscAddrSendMbx + u16SendMbxSize);
 80043e4:	4b41      	ldr	r3, [pc, #260]	@ (80044ec <MBX_CopyToSendMailbox+0x14c>)
 80043e6:	881a      	ldrh	r2, [r3, #0]
 80043e8:	4b41      	ldr	r3, [pc, #260]	@ (80044f0 <MBX_CopyToSendMailbox+0x150>)
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	4413      	add	r3, r2
 80043ee:	827b      	strh	r3, [r7, #18]
            /*round down to last even 16bit address*/
            LastUsedAddr = LastUsedAddr & 0xFFFE;
 80043f0:	8afb      	ldrh	r3, [r7, #22]
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	82fb      	strh	r3, [r7, #22]
            LastAddrToReset = (LastAddrToReset - 2) & 0xFFFE;
 80043f8:	8a7b      	ldrh	r3, [r7, #18]
 80043fa:	3b02      	subs	r3, #2
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	827b      	strh	r3, [r7, #18]
            u16dummy = 0;
 8004404:	4b3b      	ldr	r3, [pc, #236]	@ (80044f4 <MBX_CopyToSendMailbox+0x154>)
 8004406:	2200      	movs	r2, #0
 8004408:	801a      	strh	r2, [r3, #0]

            /*clear all unused bytes*/
            while (LastUsedAddr < LastAddrToReset) /*reset all bytes until the second last valid address*/
 800440a:	e008      	b.n	800441e <MBX_CopyToSendMailbox+0x7e>
            {
                HW_EscWriteWord(u16dummy, LastUsedAddr);
 800440c:	8afb      	ldrh	r3, [r7, #22]
 800440e:	2202      	movs	r2, #2
 8004410:	4619      	mov	r1, r3
 8004412:	4838      	ldr	r0, [pc, #224]	@ (80044f4 <MBX_CopyToSendMailbox+0x154>)
 8004414:	f7fc fa86 	bl	8000924 <HW_EscWrite>
                LastUsedAddr = LastUsedAddr + 2;
 8004418:	8afb      	ldrh	r3, [r7, #22]
 800441a:	3302      	adds	r3, #2
 800441c:	82fb      	strh	r3, [r7, #22]
            while (LastUsedAddr < LastAddrToReset) /*reset all bytes until the second last valid address*/
 800441e:	8afa      	ldrh	r2, [r7, #22]
 8004420:	8a7b      	ldrh	r3, [r7, #18]
 8004422:	429a      	cmp	r2, r3
 8004424:	d3f2      	bcc.n	800440c <MBX_CopyToSendMailbox+0x6c>
            }
        }
/*ECATCHANGE_END(V5.13) MBX2*/

        HW_EscWriteMbxMem((MEM_ADDR *)pMbx, u16EscAddrSendMbx, (mbxSize + MBX_HEADER_SIZE));
 8004426:	4b31      	ldr	r3, [pc, #196]	@ (80044ec <MBX_CopyToSendMailbox+0x14c>)
 8004428:	8819      	ldrh	r1, [r3, #0]
 800442a:	8abb      	ldrh	r3, [r7, #20]
 800442c:	3306      	adds	r3, #6
 800442e:	b29b      	uxth	r3, r3
 8004430:	461a      	mov	r2, r3
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc fa76 	bl	8000924 <HW_EscWrite>


        {
        /*Read Control and Status of SyncManager 1 to check if the buffer is still marked as empty*/
        VARVOLATILE UINT16 smstate = 0x00;
 8004438:	2300      	movs	r3, #0
 800443a:	817b      	strh	r3, [r7, #10]
        HW_EscReadWord(smstate,(ESC_SYNCMAN_CONTROL_OFFSET + SIZEOF_SM_REGISTER));
 800443c:	f107 030a 	add.w	r3, r7, #10
 8004440:	2202      	movs	r2, #2
 8004442:	f640 010c 	movw	r1, #2060	@ 0x80c
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc fa48 	bl	80008dc <HW_EscRead>
        smstate = SWAPWORD(smstate);
 800444c:	897b      	ldrh	r3, [r7, #10]
 800444e:	b29b      	uxth	r3, r3
 8004450:	817b      	strh	r3, [r7, #10]

        if(!(smstate & SM_STATUS_MBX_BUFFER_FULL))
 8004452:	897b      	ldrh	r3, [r7, #10]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800445a:	2b00      	cmp	r3, #0
 800445c:	d12e      	bne.n	80044bc <MBX_CopyToSendMailbox+0x11c>
        {
            UINT16 BytesLeft = u16SendMbxSize - (mbxSize + MBX_HEADER_SIZE);
 800445e:	4b24      	ldr	r3, [pc, #144]	@ (80044f0 <MBX_CopyToSendMailbox+0x150>)
 8004460:	881a      	ldrh	r2, [r3, #0]
 8004462:	8abb      	ldrh	r3, [r7, #20]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b06      	subs	r3, #6
 800446a:	823b      	strh	r3, [r7, #16]

            /*in case of a slow ESC the buffer status may not indicate 'full' even if the complete buffer was written, trigger an additional write access only if not the complete buffer was written*/
            if (BytesLeft > 0)
 800446c:	8a3b      	ldrh	r3, [r7, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d024      	beq.n	80044bc <MBX_CopyToSendMailbox+0x11c>
            {
                /*Write last Byte to trigger mailbox full flag*/
            /*Read last 2 Bytes and write them again (required if low Byte of the WORD were written before)*/
            u16dummy = 0;
 8004472:	4b20      	ldr	r3, [pc, #128]	@ (80044f4 <MBX_CopyToSendMailbox+0x154>)
 8004474:	2200      	movs	r2, #0
 8004476:	801a      	strh	r2, [r3, #0]
            if(BytesLeft < 2)
 8004478:	8a3b      	ldrh	r3, [r7, #16]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d811      	bhi.n	80044a2 <MBX_CopyToSendMailbox+0x102>
            {
                /*The last 2Bytes are overlapping the already written buffer*/

                /*Get the valid 16Bit address*/
                UINT32 LastDataAddress = ((mbxSize + MBX_HEADER_SIZE)/2);
 800447e:	8abb      	ldrh	r3, [r7, #20]
 8004480:	3306      	adds	r3, #6
 8004482:	2b00      	cmp	r3, #0
 8004484:	da00      	bge.n	8004488 <MBX_CopyToSendMailbox+0xe8>
 8004486:	3301      	adds	r3, #1
 8004488:	105b      	asrs	r3, r3, #1
 800448a:	60fb      	str	r3, [r7, #12]
            
                /*Copy the buffer to overwrite*/
                MEMCPY((UINT16 *)&u16dummy,(((UINT16 *)pMbx) + LastDataAddress),(2 - BytesLeft));
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	18d1      	adds	r1, r2, r3
 8004494:	8a3b      	ldrh	r3, [r7, #16]
 8004496:	f1c3 0302 	rsb	r3, r3, #2
 800449a:	461a      	mov	r2, r3
 800449c:	4815      	ldr	r0, [pc, #84]	@ (80044f4 <MBX_CopyToSendMailbox+0x154>)
 800449e:	f008 f8fd 	bl	800c69c <memcpy>
            }

            HW_EscWriteWord(u16dummy, (u16EscAddrSendMbx + u16SendMbxSize - 2));
 80044a2:	4b12      	ldr	r3, [pc, #72]	@ (80044ec <MBX_CopyToSendMailbox+0x14c>)
 80044a4:	881a      	ldrh	r2, [r3, #0]
 80044a6:	4b12      	ldr	r3, [pc, #72]	@ (80044f0 <MBX_CopyToSendMailbox+0x150>)
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	4413      	add	r3, r2
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b02      	subs	r3, #2
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2202      	movs	r2, #2
 80044b4:	4619      	mov	r1, r3
 80044b6:	480f      	ldr	r0, [pc, #60]	@ (80044f4 <MBX_CopyToSendMailbox+0x154>)
 80044b8:	f7fc fa34 	bl	8000924 <HW_EscWrite>
            the other one the actual service to be sent (psReadMbx),
            there is no buffer available for a mailbox receive service
            until the last sent buffer was read from the master
            the exception is after the INIT2PREOP transition, in that
            case there is no last sent service (psReadMbx = 0) */
        if ( psReadMbx )
 80044bc:	4b0e      	ldr	r3, [pc, #56]	@ (80044f8 <MBX_CopyToSendMailbox+0x158>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <MBX_CopyToSendMailbox+0x12a>
        {
            psWriteMbx = NULL;
 80044c4:	4b0d      	ldr	r3, [pc, #52]	@ (80044fc <MBX_CopyToSendMailbox+0x15c>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
        }
        psReadMbx = pMbx;
 80044ca:	4a0b      	ldr	r2, [pc, #44]	@ (80044f8 <MBX_CopyToSendMailbox+0x158>)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6013      	str	r3, [r2, #0]

        /* set flag that send mailbox is full now */
        bSendMbxIsFull = TRUE;
 80044d0:	4b05      	ldr	r3, [pc, #20]	@ (80044e8 <MBX_CopyToSendMailbox+0x148>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]


        return 0;
 80044d6:	2300      	movs	r3, #0
    }
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	24000942 	.word	0x24000942
 80044e4:	2400095b 	.word	0x2400095b
 80044e8:	2400095a 	.word	0x2400095a
 80044ec:	24000964 	.word	0x24000964
 80044f0:	2400095e 	.word	0x2400095e
 80044f4:	2400094c 	.word	0x2400094c
 80044f8:	24000970 	.word	0x24000970
 80044fc:	2400096c 	.word	0x2400096c

08004500 <MBX_Main>:
 \brief    This function is called cyclically to check if a received Mailbox service was
             stored.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Main(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
    TMBX MBXMEM *pMbx = NULL;
 8004506:	2300      	movs	r3, #0
 8004508:	603b      	str	r3, [r7, #0]

    do
    {
        UINT8 result = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	71fb      	strb	r3, [r7, #7]

        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 800450e:	4818      	ldr	r0, [pc, #96]	@ (8004570 <MBX_Main+0x70>)
 8004510:	f7ff fb43 	bl	8003b9a <GetOutOfMbxQueue>
 8004514:	6038      	str	r0, [r7, #0]
        if ( pMbx )
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d004      	beq.n	8004526 <MBX_Main+0x26>
        {
            result = MailboxServiceInd(pMbx);
 800451c:	6838      	ldr	r0, [r7, #0]
 800451e:	f7ff fd0d 	bl	8003f3c <MailboxServiceInd>
 8004522:	4603      	mov	r3, r0
 8004524:	71fb      	strb	r3, [r7, #7]
        }

        if ( result != 0 )
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d014      	beq.n	8004556 <MBX_Main+0x56>
        {
            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2204      	movs	r2, #4
 8004530:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	889b      	ldrh	r3, [r3, #4]
 8004536:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800453a:	b29a      	uxth	r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	809a      	strh	r2, [r3, #4]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2201      	movs	r2, #1
 8004544:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	b29a      	uxth	r2, r3
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 800454e:	2100      	movs	r1, #0
 8004550:	6838      	ldr	r0, [r7, #0]
 8004552:	f7ff fe17 	bl	8004184 <MBX_MailboxSendReq>
        }
    }
    while ( pMbx != NULL );
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1d6      	bne.n	800450a <MBX_Main+0xa>


    if (bReceiveMbxIsLocked)
 800455c:	4b05      	ldr	r3, [pc, #20]	@ (8004574 <MBX_Main+0x74>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <MBX_Main+0x68>
    {
        /* the work on the receive mailbox is locked, check if it can be unlocked (if all
           mailbox commands has been sent */
        MBX_CheckAndCopyMailbox();
 8004564:	f7ff fe7a 	bl	800425c <MBX_CheckAndCopyMailbox>
    if (u8MailboxSendReqStored)
    {
        /* there are mailbox services stored to be sent */
    }
/*ECATCHANGE_END(V5.13) EOE1*/
}
 8004568:	bf00      	nop
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	240009b0 	.word	0x240009b0
 8004574:	24000959 	.word	0x24000959

08004578 <OBJ_GetObjectHandle>:
             and returns a handle if found.

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TOBJECT OBJMEM *  OBJ_GetObjectHandle( UINT16 index )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	80fb      	strh	r3, [r7, #6]
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 8004582:	f7fc fab3 	bl	8000aec <COE_GetObjectDictionary>
 8004586:	60f8      	str	r0, [r7, #12]

    while (pObjEntry!= NULL)
 8004588:	e009      	b.n	800459e <OBJ_GetObjectHandle+0x26>
    {
        
        if (pObjEntry->Index == index)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	891b      	ldrh	r3, [r3, #8]
 800458e:	88fa      	ldrh	r2, [r7, #6]
 8004590:	429a      	cmp	r2, r3
 8004592:	d101      	bne.n	8004598 <OBJ_GetObjectHandle+0x20>
        {
            return pObjEntry;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	e006      	b.n	80045a6 <OBJ_GetObjectHandle+0x2e>
        }
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	60fb      	str	r3, [r7, #12]
    while (pObjEntry!= NULL)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f2      	bne.n	800458a <OBJ_GetObjectHandle+0x12>
    }
    return 0;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <OBJ_GetObjectLength>:

 \brief     This function returns the size of the requested entry. If bCompleteaccess is set the size of the complete object is returned (the returned size is byte packed, gaps based on the used platform/compiler are not taken into account)

*////////////////////////////////////////////////////////////////////////////////////////
UINT32 OBJ_GetObjectLength( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 bCompleteAccess)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b085      	sub	sp, #20
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	603a      	str	r2, [r7, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	4603      	mov	r3, r0
 80045ba:	80fb      	strh	r3, [r7, #6]
 80045bc:	460b      	mov	r3, r1
 80045be:	717b      	strb	r3, [r7, #5]
 80045c0:	4613      	mov	r3, r2
 80045c2:	713b      	strb	r3, [r7, #4]
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	899b      	ldrh	r3, [r3, #12]
 80045c8:	121b      	asrs	r3, r3, #8
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	727b      	strb	r3, [r7, #9]
    
    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	899b      	ldrh	r3, [r3, #12]
 80045d6:	723b      	strb	r3, [r7, #8]
    UINT32 size = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]

    if ( bCompleteAccess )
 80045dc:	793b      	ldrb	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d044      	beq.n	800466c <OBJ_GetObjectLength+0xbe>
    {
        if ( objCode == OBJCODE_VAR )
 80045e2:	7a7b      	ldrb	r3, [r7, #9]
 80045e4:	2b07      	cmp	r3, #7
 80045e6:	d101      	bne.n	80045ec <OBJ_GetObjectLength+0x3e>
        {
            return 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e068      	b.n	80046be <OBJ_GetObjectLength+0x110>
        }
        else if ((objCode == OBJCODE_ARR)
 80045ec:	7a7b      	ldrb	r3, [r7, #9]
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d118      	bne.n	8004624 <OBJ_GetObjectLength+0x76>
            )
        {

            /* we have to get the maxSubindex from the actual value of subindex 0,
                which is stored as UINT16 at the beginning of the object's variable */
            maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	723b      	strb	r3, [r7, #8]


            size = pObjEntry->pEntryDesc[1].BitLength *maxSubindex;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	3306      	adds	r3, #6
 8004600:	885b      	ldrh	r3, [r3, #2]
 8004602:	461a      	mov	r2, r3
 8004604:	7a3b      	ldrb	r3, [r7, #8]
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	60fb      	str	r3, [r7, #12]

/* no padding required: Bit entries within an array object may overlap byte borders*/

            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3307      	adds	r3, #7
 8004610:	08db      	lsrs	r3, r3, #3
 8004612:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 8004614:	797b      	ldrb	r3, [r7, #5]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d102      	bne.n	8004620 <OBJ_GetObjectLength+0x72>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3302      	adds	r3, #2
 800461e:	60fb      	str	r3, [r7, #12]
            }
            return size;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	e04c      	b.n	80046be <OBJ_GetObjectLength+0x110>
/*ECATCHANGE_START(V5.13) COE1*/
            UINT16 i;
/*ECATCHANGE_END(V5.13) COE1*/

            /* add the sizes of all entries */
            for (i = 1; i <= maxSubindex; i++)
 8004624:	2301      	movs	r3, #1
 8004626:	817b      	strh	r3, [r7, #10]
 8004628:	e00f      	b.n	800464a <OBJ_GetObjectLength+0x9c>
            {
                size += pObjEntry->pEntryDesc[i].BitLength;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6919      	ldr	r1, [r3, #16]
 800462e:	897a      	ldrh	r2, [r7, #10]
 8004630:	4613      	mov	r3, r2
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	440b      	add	r3, r1
 800463a:	885b      	ldrh	r3, [r3, #2]
 800463c:	461a      	mov	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
            for (i = 1; i <= maxSubindex; i++)
 8004644:	897b      	ldrh	r3, [r7, #10]
 8004646:	3301      	adds	r3, #1
 8004648:	817b      	strh	r3, [r7, #10]
 800464a:	7a3b      	ldrb	r3, [r7, #8]
 800464c:	b29b      	uxth	r3, r3
 800464e:	897a      	ldrh	r2, [r7, #10]
 8004650:	429a      	cmp	r2, r3
 8004652:	d9ea      	bls.n	800462a <OBJ_GetObjectLength+0x7c>
            }
            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3307      	adds	r3, #7
 8004658:	08db      	lsrs	r3, r3, #3
 800465a:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 800465c:	797b      	ldrb	r3, [r7, #5]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <OBJ_GetObjectLength+0xba>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3302      	adds	r3, #2
 8004666:	60fb      	str	r3, [r7, #12]
            }
            return size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	e028      	b.n	80046be <OBJ_GetObjectLength+0x110>
        }
    }
    else
    {
        if ( objCode == OBJCODE_VAR )
 800466c:	7a7b      	ldrb	r3, [r7, #9]
 800466e:	2b07      	cmp	r3, #7
 8004670:	d105      	bne.n	800467e <OBJ_GetObjectLength+0xd0>
        {

            return (BIT2BYTE(pObjEntry->pEntryDesc->BitLength));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	885b      	ldrh	r3, [r3, #2]
 8004678:	3307      	adds	r3, #7
 800467a:	10db      	asrs	r3, r3, #3
 800467c:	e01f      	b.n	80046be <OBJ_GetObjectLength+0x110>

        }
        else if ( subindex == 0 )
 800467e:	797b      	ldrb	r3, [r7, #5]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <OBJ_GetObjectLength+0xda>
        {
            /* for single access subindex 0 is transmitted as UINT8 */
            return 1;
 8004684:	2301      	movs	r3, #1
 8004686:	e01a      	b.n	80046be <OBJ_GetObjectLength+0x110>
        }
        else if((objCode == OBJCODE_ARR)
 8004688:	7a7b      	ldrb	r3, [r7, #9]
 800468a:	2b08      	cmp	r3, #8
 800468c:	d106      	bne.n	800469c <OBJ_GetObjectLength+0xee>
            )
        {
            return (BIT2BYTE(pObjEntry->pEntryDesc[1].BitLength));
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	3306      	adds	r3, #6
 8004694:	885b      	ldrh	r3, [r3, #2]
 8004696:	3307      	adds	r3, #7
 8004698:	10db      	asrs	r3, r3, #3
 800469a:	e010      	b.n	80046be <OBJ_GetObjectLength+0x110>
        }
        else
        {
            {
                if (maxSubindex < subindex)
 800469c:	7a3a      	ldrb	r2, [r7, #8]
 800469e:	797b      	ldrb	r3, [r7, #5]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d201      	bcs.n	80046a8 <OBJ_GetObjectLength+0xfa>
                {
                    return 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e00a      	b.n	80046be <OBJ_GetObjectLength+0x110>

                }
                else
                {
                    return (BIT2BYTE(pObjEntry->pEntryDesc[subindex].BitLength));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	6919      	ldr	r1, [r3, #16]
 80046ac:	797a      	ldrb	r2, [r7, #5]
 80046ae:	4613      	mov	r3, r2
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	4413      	add	r3, r2
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	440b      	add	r3, r1
 80046b8:	885b      	ldrh	r3, [r3, #2]
 80046ba:	3307      	adds	r3, #7
 80046bc:	10db      	asrs	r3, r3, #3
                }
            }
        }
    }
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <OBJ_CopyNumberToString>:
         which shall be initialized with 000

*////////////////////////////////////////////////////////////////////////////////////////

void OBJ_CopyNumberToString(UCHAR MBXMEM *pStr, UINT8 Number)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	70fb      	strb	r3, [r7, #3]
    UINT8 Modulo;

    pStr[2] = '0';
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3302      	adds	r3, #2
 80046dc:	2230      	movs	r2, #48	@ 0x30
 80046de:	701a      	strb	r2, [r3, #0]
    pStr[0] += (Number / 100);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	781a      	ldrb	r2, [r3, #0]
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	491d      	ldr	r1, [pc, #116]	@ (800475c <OBJ_CopyNumberToString+0x90>)
 80046e8:	fba1 1303 	umull	r1, r3, r1, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	701a      	strb	r2, [r3, #0]
    Modulo = Number % 100;
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	4a18      	ldr	r2, [pc, #96]	@ (800475c <OBJ_CopyNumberToString+0x90>)
 80046fc:	fba2 1203 	umull	r1, r2, r2, r3
 8004700:	0952      	lsrs	r2, r2, #5
 8004702:	2164      	movs	r1, #100	@ 0x64
 8004704:	fb01 f202 	mul.w	r2, r1, r2
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	73fb      	strb	r3, [r7, #15]
    pStr[1] += (Modulo / 10);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3301      	adds	r3, #1
 8004710:	7819      	ldrb	r1, [r3, #0]
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	4a12      	ldr	r2, [pc, #72]	@ (8004760 <OBJ_CopyNumberToString+0x94>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	08db      	lsrs	r3, r3, #3
 800471c:	b2da      	uxtb	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3301      	adds	r3, #1
 8004722:	440a      	add	r2, r1
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]
    pStr[2] += (Modulo % 10);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3302      	adds	r3, #2
 800472c:	7818      	ldrb	r0, [r3, #0]
 800472e:	7bfa      	ldrb	r2, [r7, #15]
 8004730:	4b0b      	ldr	r3, [pc, #44]	@ (8004760 <OBJ_CopyNumberToString+0x94>)
 8004732:	fba3 1302 	umull	r1, r3, r3, r2
 8004736:	08d9      	lsrs	r1, r3, #3
 8004738:	460b      	mov	r3, r1
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	b2da      	uxtb	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3302      	adds	r3, #2
 8004748:	4402      	add	r2, r0
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]
}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	51eb851f 	.word	0x51eb851f
 8004760:	cccccccd 	.word	0xcccccccd

08004764 <OBJ_GetNoOfObjects>:
 \brief    The function counts the number of objects of the requested list type

*////////////////////////////////////////////////////////////////////////////////////////

UINT16    OBJ_GetNoOfObjects(UINT8 listType)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	71fb      	strb	r3, [r7, #7]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    
    UINT16 listFlags = 0x0020 << listType;
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	2220      	movs	r2, #32
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	81bb      	strh	r3, [r7, #12]
    
    /* set pObjEntry to the beginning of the object dictionary */
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 8004778:	f7fc f9b8 	bl	8000aec <COE_GetObjectDictionary>
 800477c:	6178      	str	r0, [r7, #20]
    UINT16 n = 0;
 800477e:	2300      	movs	r3, #0
 8004780:	827b      	strh	r3, [r7, #18]


    while (pObjEntry != NULL)
 8004782:	e032      	b.n	80047ea <OBJ_GetNoOfObjects+0x86>
    {
        /* count the objects of the requested list type */
        if ( pObjEntry->Index >= 0x1000 )
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	891b      	ldrh	r3, [r3, #8]
 8004788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800478c:	d32a      	bcc.n	80047e4 <OBJ_GetNoOfObjects+0x80>
        {
            UINT8 t = listType;
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	747b      	strb	r3, [r7, #17]
            if ( t )
 8004792:	7c7b      	ldrb	r3, [r7, #17]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01f      	beq.n	80047d8 <OBJ_GetNoOfObjects+0x74>
            {
                UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	899b      	ldrh	r3, [r3, #12]
 800479c:	72fb      	strb	r3, [r7, #11]
                UINT16 i = 0;
 800479e:	2300      	movs	r3, #0
 80047a0:	81fb      	strh	r3, [r7, #14]

                while ( t && i <= maxSubindex )
 80047a2:	e011      	b.n	80047c8 <OBJ_GetNoOfObjects+0x64>
                {
                    if ( OBJ_GetEntryDesc(pObjEntry,(UINT8) i)->ObjAccess & listFlags )
 80047a4:	89fb      	ldrh	r3, [r7, #14]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	4619      	mov	r1, r3
 80047aa:	6978      	ldr	r0, [r7, #20]
 80047ac:	f000 f938 	bl	8004a20 <OBJ_GetEntryDesc>
 80047b0:	4603      	mov	r3, r0
 80047b2:	889a      	ldrh	r2, [r3, #4]
 80047b4:	89bb      	ldrh	r3, [r7, #12]
 80047b6:	4013      	ands	r3, r2
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <OBJ_GetNoOfObjects+0x5e>
                    {
                        t = 0;
 80047be:	2300      	movs	r3, #0
 80047c0:	747b      	strb	r3, [r7, #17]
                    }
                    i++;
 80047c2:	89fb      	ldrh	r3, [r7, #14]
 80047c4:	3301      	adds	r3, #1
 80047c6:	81fb      	strh	r3, [r7, #14]
                while ( t && i <= maxSubindex )
 80047c8:	7c7b      	ldrb	r3, [r7, #17]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d004      	beq.n	80047d8 <OBJ_GetNoOfObjects+0x74>
 80047ce:	7afb      	ldrb	r3, [r7, #11]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	89fa      	ldrh	r2, [r7, #14]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d9e5      	bls.n	80047a4 <OBJ_GetNoOfObjects+0x40>
                }
            }
            if ( !t )
 80047d8:	7c7b      	ldrb	r3, [r7, #17]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d102      	bne.n	80047e4 <OBJ_GetNoOfObjects+0x80>
            {
                /* object from listType found */
                n++;
 80047de:	8a7b      	ldrh	r3, [r7, #18]
 80047e0:	3301      	adds	r3, #1
 80047e2:	827b      	strh	r3, [r7, #18]
            }
        }
        /* next object in object dictionary */
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	617b      	str	r3, [r7, #20]
    while (pObjEntry != NULL)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1c9      	bne.n	8004784 <OBJ_GetNoOfObjects+0x20>
    }

    return n;
 80047f0:	8a7b      	ldrh	r3, [r7, #18]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <OBJ_GetObjectList>:

 \brief    The function copies (the part of) the object list in the mailbox buffer

*////////////////////////////////////////////////////////////////////////////////////////
UINT16    OBJ_GetObjectList(UINT16 listType, UINT16 *pIndex, UINT16 size, UINT16 MBXMEM *pData,UINT8 *pAbort)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	4603      	mov	r3, r0
 8004808:	81fb      	strh	r3, [r7, #14]
 800480a:	4613      	mov	r3, r2
 800480c:	81bb      	strh	r3, [r7, #12]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    UINT16 listFlags = 0x0020 << listType;
 800480e:	89fb      	ldrh	r3, [r7, #14]
 8004810:	2220      	movs	r2, #32
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	82fb      	strh	r3, [r7, #22]
    OBJCONST TOBJECT OBJMEM * pObjEntry;


    if ( pIndex[0] == 0x1000 )
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004820:	d10c      	bne.n	800483c <OBJ_GetObjectList+0x40>
    {
        /* beginning of object list, set pObjEntry to the beginning of the object dictionary */
       pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 8004822:	f7fc f963 	bl	8000aec <COE_GetObjectDictionary>
 8004826:	61f8      	str	r0, [r7, #28]
        // set abort code if no object dictionary is available
        if((pObjEntry == NULL) && (pAbort != NULL))
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d109      	bne.n	8004842 <OBJ_GetObjectList+0x46>
 800482e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004830:	2b00      	cmp	r3, #0
 8004832:	d006      	beq.n	8004842 <OBJ_GetObjectList+0x46>
        {
            *pAbort = ABORTIDX_NO_OBJECT_DICTIONARY_IS_PRESENT;
 8004834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004836:	221b      	movs	r2, #27
 8004838:	701a      	strb	r2, [r3, #0]
 800483a:	e002      	b.n	8004842 <OBJ_GetObjectList+0x46>
        }
    }
    else
    {
        /* next fragment, the next object to be handled was stored in pSdoInfoObjEntry */
        pObjEntry = pSdoInfoObjEntry;
 800483c:	4b2d      	ldr	r3, [pc, #180]	@ (80048f4 <OBJ_GetObjectList+0xf8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	61fb      	str	r3, [r7, #28]
    }

    if ( pObjEntry != NULL )
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d040      	beq.n	80048ca <OBJ_GetObjectList+0xce>
    {
        while (pObjEntry != NULL && size > 1 )
 8004848:	e039      	b.n	80048be <OBJ_GetObjectList+0xc2>
        {
            /* get the next index of the requested object list if there is enough space in the mailbox buffer */
            if ( pObjEntry->Index >= 0x1000 )
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	891b      	ldrh	r3, [r3, #8]
 800484e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004852:	d331      	bcc.n	80048b8 <OBJ_GetObjectList+0xbc>
            {
                /* UINT8 was changed to UINT16 */
                UINT16 t = listType;
 8004854:	89fb      	ldrh	r3, [r7, #14]
 8004856:	837b      	strh	r3, [r7, #26]
                if ( t )
 8004858:	8b7b      	ldrh	r3, [r7, #26]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d01f      	beq.n	800489e <OBJ_GetObjectList+0xa2>
                {
                    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	899b      	ldrh	r3, [r3, #12]
 8004862:	757b      	strb	r3, [r7, #21]
/*ECATCHANGE_START(V5.13) COE1*/
                    UINT16 i = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	833b      	strh	r3, [r7, #24]
/*ECATCHANGE_END(V5.13) COE1*/

                    while ( t && i <= maxSubindex )
 8004868:	e011      	b.n	800488e <OBJ_GetObjectList+0x92>
                    {
                        if ( OBJ_GetEntryDesc(pObjEntry, (UINT8)i)->ObjAccess & listFlags )
 800486a:	8b3b      	ldrh	r3, [r7, #24]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	4619      	mov	r1, r3
 8004870:	69f8      	ldr	r0, [r7, #28]
 8004872:	f000 f8d5 	bl	8004a20 <OBJ_GetEntryDesc>
 8004876:	4603      	mov	r3, r0
 8004878:	889a      	ldrh	r2, [r3, #4]
 800487a:	8afb      	ldrh	r3, [r7, #22]
 800487c:	4013      	ands	r3, r2
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <OBJ_GetObjectList+0x8c>
                        {
                            t = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	837b      	strh	r3, [r7, #26]
                        }
                        i++;
 8004888:	8b3b      	ldrh	r3, [r7, #24]
 800488a:	3301      	adds	r3, #1
 800488c:	833b      	strh	r3, [r7, #24]
                    while ( t && i <= maxSubindex )
 800488e:	8b7b      	ldrh	r3, [r7, #26]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d004      	beq.n	800489e <OBJ_GetObjectList+0xa2>
 8004894:	7d7b      	ldrb	r3, [r7, #21]
 8004896:	b29b      	uxth	r3, r3
 8004898:	8b3a      	ldrh	r2, [r7, #24]
 800489a:	429a      	cmp	r2, r3
 800489c:	d9e5      	bls.n	800486a <OBJ_GetObjectList+0x6e>
                    }
                }
                if ( !t )
 800489e:	8b7b      	ldrh	r3, [r7, #26]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <OBJ_GetObjectList+0xbc>
                {
                    /* store the index in the mailbox buffer */
                    *pData = SWAPWORD(pObjEntry->Index);
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	891a      	ldrh	r2, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	801a      	strh	r2, [r3, #0]
                    pData++;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3302      	adds	r3, #2
 80048b0:	607b      	str	r3, [r7, #4]
                    size -= 2;
 80048b2:	89bb      	ldrh	r3, [r7, #12]
 80048b4:	3b02      	subs	r3, #2
 80048b6:	81bb      	strh	r3, [r7, #12]
                }
            }
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	61fb      	str	r3, [r7, #28]
        while (pObjEntry != NULL && size > 1 )
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <OBJ_GetObjectList+0xce>
 80048c4:	89bb      	ldrh	r3, [r7, #12]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d8bf      	bhi.n	800484a <OBJ_GetObjectList+0x4e>
        }
    }

        /* return the next Index to be handled */
        if(pObjEntry != NULL)
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d004      	beq.n	80048da <OBJ_GetObjectList+0xde>
        {
            pIndex[0] = pObjEntry->Index;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	891a      	ldrh	r2, [r3, #8]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	801a      	strh	r2, [r3, #0]
 80048d8:	e003      	b.n	80048e2 <OBJ_GetObjectList+0xe6>
        }
        else
        {
            /*last entry reached*/
            pIndex[0] = 0xFFFF;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048e0:	801a      	strh	r2, [r3, #0]
        }

    /* store object description pointer and index for next fragment */
    pSdoInfoObjEntry = pObjEntry;
 80048e2:	4a04      	ldr	r2, [pc, #16]	@ (80048f4 <OBJ_GetObjectList+0xf8>)
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	6013      	str	r3, [r2, #0]

    /* return the size of the available mailbox buffer which was not copied to */
    return size;
 80048e8:	89bb      	ldrh	r3, [r7, #12]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	24000aa0 	.word	0x24000aa0

080048f8 <OBJ_GetDesc>:
                0xFF                                            <br>
            }
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetDesc( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData )
{
 80048f8:	b590      	push	{r4, r7, lr}
 80048fa:	b08d      	sub	sp, #52	@ 0x34
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60ba      	str	r2, [r7, #8]
 8004900:	607b      	str	r3, [r7, #4]
 8004902:	4603      	mov	r3, r0
 8004904:	81fb      	strh	r3, [r7, #14]
 8004906:	460b      	mov	r3, r1
 8004908:	737b      	strb	r3, [r7, #13]
    UINT16 strSize = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    OBJCONST UCHAR OBJMEM * pDesc = (OBJCONST UCHAR OBJMEM *) pObjEntry->pName;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	627b      	str	r3, [r7, #36]	@ 0x24
/* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	899b      	ldrh	r3, [r3, #12]
 8004918:	121b      	asrs	r3, r3, #8
 800491a:	b2db      	uxtb	r3, r3
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23



    if ( (subindex == 0) || (objCode == OBJCODE_VAR) )
 8004924:	7b7b      	ldrb	r3, [r7, #13]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <OBJ_GetDesc+0x3a>
 800492a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800492e:	2b07      	cmp	r3, #7
 8004930:	d10e      	bne.n	8004950 <OBJ_GetDesc+0x58>
    {
        // Get object description length
       strSize = (UINT16) OBJSTRLEN((OBJCONST CHAR OBJMEM *) pDesc);
 8004932:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004934:	f7fb fcd0 	bl	80002d8 <strlen>
 8004938:	4603      	mov	r3, r0
 800493a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        // If there is a pointer given, copy data:
        if ( pData )
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d066      	beq.n	8004a10 <OBJ_GetDesc+0x118>
        {
            OBJTOMBXSTRCPY( pData, pDesc, strSize );
 8004942:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004944:	461a      	mov	r2, r3
 8004946:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f007 fea7 	bl	800c69c <memcpy>
        if ( pData )
 800494e:	e05f      	b.n	8004a10 <OBJ_GetDesc+0x118>
        }
    }
    else
    {
        if ( objCode == OBJCODE_REC )
 8004950:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004954:	2b09      	cmp	r3, #9
 8004956:	d13b      	bne.n	80049d0 <OBJ_GetDesc+0xd8>
        {
            {
            // get pointer to description of subindex 1 :
            // 16bit variable to avoid overflow if subindex 0xFF is read
            UINT16 i = 1;
 8004958:	2301      	movs	r3, #1
 800495a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            UINT16 tmpSubindex = subindex;
 800495c:	7b7b      	ldrb	r3, [r7, #13]
 800495e:	843b      	strh	r3, [r7, #32]

            {

            OBJCONST UCHAR OBJMEM * pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pDesc );
 8004960:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004962:	f7fb fcb9 	bl	80002d8 <strlen>
 8004966:	4603      	mov	r3, r0
 8004968:	3301      	adds	r3, #1
 800496a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800496c:	4413      	add	r3, r2
 800496e:	62bb      	str	r3, [r7, #40]	@ 0x28
            while (( i <= tmpSubindex )
 8004970:	e020      	b.n	80049b4 <OBJ_GetDesc+0xbc>
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE 
/* ECATCHANGE_START(V5.13) COE9*/
/* ECATCHANGE_END(V5.13) COE9*/
                    ))
            {
                if ( i == tmpSubindex )
 8004972:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004974:	8c3b      	ldrh	r3, [r7, #32]
 8004976:	429a      	cmp	r2, r3
 8004978:	d111      	bne.n	800499e <OBJ_GetDesc+0xa6>
                {
                   strSize = (UINT16) OBJSTRLEN((OBJCONST CHAR OBJMEM *) pSubDesc);
 800497a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800497c:	f7fb fcac 	bl	80002d8 <strlen>
 8004980:	4603      	mov	r3, r0
 8004982:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    if ( pData && strSize )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d021      	beq.n	80049ce <OBJ_GetDesc+0xd6>
 800498a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01e      	beq.n	80049ce <OBJ_GetDesc+0xd6>
                    {
                        OBJTOMBXSTRCPY( pData, pSubDesc, strSize );
 8004990:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004992:	461a      	mov	r2, r3
 8004994:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f007 fe80 	bl	800c69c <memcpy>
                    }
                    break;
 800499c:	e017      	b.n	80049ce <OBJ_GetDesc+0xd6>
                }
                else
                {
                    i++;
 800499e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80049a0:	3301      	adds	r3, #1
 80049a2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pSubDesc );
 80049a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049a6:	f7fb fc97 	bl	80002d8 <strlen>
 80049aa:	4603      	mov	r3, r0
 80049ac:	3301      	adds	r3, #1
 80049ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049b0:	4413      	add	r3, r2
 80049b2:	62bb      	str	r3, [r7, #40]	@ 0x28
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE 
 80049b4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80049b6:	8c3b      	ldrh	r3, [r7, #32]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d809      	bhi.n	80049d0 <OBJ_GetDesc+0xd8>
 80049bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2bff      	cmp	r3, #255	@ 0xff
 80049c2:	d005      	beq.n	80049d0 <OBJ_GetDesc+0xd8>
 80049c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2bfe      	cmp	r3, #254	@ 0xfe
 80049ca:	d1d2      	bne.n	8004972 <OBJ_GetDesc+0x7a>
 80049cc:	e000      	b.n	80049d0 <OBJ_GetDesc+0xd8>
                    break;
 80049ce:	bf00      	nop
            }
            }
            }
        }

        if ( strSize == 0 )
 80049d0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d11c      	bne.n	8004a10 <OBJ_GetDesc+0x118>
        {
            // no string found for subindex x -> name is Subindex x
            strSize =    12;
 80049d6:	230c      	movs	r3, #12
 80049d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            if ( pData )
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d017      	beq.n	8004a10 <OBJ_GetDesc+0x118>
            {
                UCHAR OBJMEM         TmpDescr[13];
                /* ECATCHANGE_START(V5.13) COE4*/
                MEMCPY(TmpDescr, aSubindexDesc, SIZEOF(TmpDescr));
 80049e0:	4b0e      	ldr	r3, [pc, #56]	@ (8004a1c <OBJ_GetDesc+0x124>)
 80049e2:	f107 0410 	add.w	r4, r7, #16
 80049e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049e8:	c407      	stmia	r4!, {r0, r1, r2}
 80049ea:	7023      	strb	r3, [r4, #0]
                /* ECATCHANGE_END(V5.13) COE4*/
                
                OBJ_CopyNumberToString( &TmpDescr[9], subindex );
 80049ec:	7b7a      	ldrb	r2, [r7, #13]
 80049ee:	f107 0310 	add.w	r3, r7, #16
 80049f2:	3309      	adds	r3, #9
 80049f4:	4611      	mov	r1, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fe68 	bl	80046cc <OBJ_CopyNumberToString>
                MBXSTRCPY( pData, TmpDescr, SIZEOF(TmpDescr) );
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	461c      	mov	r4, r3
 8004a00:	f107 0310 	add.w	r3, r7, #16
 8004a04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004a06:	6020      	str	r0, [r4, #0]
 8004a08:	6061      	str	r1, [r4, #4]
 8004a0a:	60a2      	str	r2, [r4, #8]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	7323      	strb	r3, [r4, #12]
            }
        }
    }

    return strSize;
 8004a10:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3734      	adds	r7, #52	@ 0x34
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd90      	pop	{r4, r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	240003a0 	.word	0x240003a0

08004a20 <OBJ_GetEntryDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOENTRYDESC OBJMEM * OBJ_GetEntryDesc(OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 Subindex)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	70fb      	strb	r3, [r7, #3]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	899b      	ldrh	r3, [r3, #12]
 8004a30:	121b      	asrs	r3, r3, #8
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	72fb      	strb	r3, [r7, #11]

    if ((objCode == OBJCODE_ARR)
 8004a3a:	7afb      	ldrb	r3, [r7, #11]
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d10b      	bne.n	8004a58 <OBJ_GetEntryDesc+0x38>
        )
    {
        /* object is an array */
        if ( Subindex == 0 )
 8004a40:	78fb      	ldrb	r3, [r7, #3]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d103      	bne.n	8004a4e <OBJ_GetEntryDesc+0x2e>
        {
            /* subindex 0 has a description */
            pEntry = &pObjEntry->pEntryDesc[0];
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	e00d      	b.n	8004a6a <OBJ_GetEntryDesc+0x4a>
        }
        else
        {
            /* and all other elements have the same description */
            pEntry = &pObjEntry->pEntryDesc[1];
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	3306      	adds	r3, #6
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	e008      	b.n	8004a6a <OBJ_GetEntryDesc+0x4a>
    }
    else
    {
        {
            /* object is a variable or a record return the corresponding entry */
            pEntry = &pObjEntry->pEntryDesc[Subindex];
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6919      	ldr	r1, [r3, #16]
 8004a5c:	78fa      	ldrb	r2, [r7, #3]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	4413      	add	r3, r2
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	440b      	add	r3, r1
 8004a68:	60fb      	str	r3, [r7, #12]
        }
    }

    return pEntry;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <OBJ_GetObjDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOOBJDESC OBJMEM * OBJ_GetObjDesc(OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
    return &pObjEntry->ObjDesc;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	330a      	adds	r3, #10
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <OBJ_GetEntryOffset>:

 \brief    This function calculates the bit offset of the entry in the object's variable
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetEntryOffset(UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	6039      	str	r1, [r7, #0]
 8004a9a:	71fb      	strb	r3, [r7, #7]
    UINT16 i;
    /* bitOffset will be initialized with the bit offset of subindex 1 */
    UINT16 bitOffset = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	82bb      	strh	r3, [r7, #20]
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	899b      	ldrh	r3, [r3, #12]
 8004aa4:	121b      	asrs	r3, r3, #8
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	73fb      	strb	r3, [r7, #15]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;

    
    if(subindex > 0)
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <OBJ_GetEntryOffset+0x2a>
    {
        /*subindex 1 has an offset of 16Bit (even if Si0 is only an UINT8) */
        bitOffset +=16;
 8004ab4:	8abb      	ldrh	r3, [r7, #20]
 8004ab6:	3310      	adds	r3, #16
 8004ab8:	82bb      	strh	r3, [r7, #20]
    }

    if (objCode == OBJCODE_VAR)
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	2b07      	cmp	r3, #7
 8004abe:	d101      	bne.n	8004ac4 <OBJ_GetEntryOffset+0x34>
    {
        return 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e0d0      	b.n	8004c66 <OBJ_GetEntryOffset+0x1d6>
    }

    for (i = 1; i <= subindex; i++)
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	82fb      	strh	r3, [r7, #22]
 8004ac8:	e0c6      	b.n	8004c58 <OBJ_GetEntryOffset+0x1c8>
    {
        /* get the entry description */
        if ((objCode == OBJCODE_ARR)
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d104      	bne.n	8004ada <OBJ_GetEntryOffset+0x4a>
           )
           {
            pEntry = &pObjEntry->pEntryDesc[1];
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	3306      	adds	r3, #6
 8004ad6:	613b      	str	r3, [r7, #16]
 8004ad8:	e008      	b.n	8004aec <OBJ_GetEntryOffset+0x5c>
           }
        else
        {
            pEntry = &pObjEntry->pEntryDesc[i];
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	6919      	ldr	r1, [r3, #16]
 8004ade:	8afa      	ldrh	r2, [r7, #22]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	4413      	add	r3, r2
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	440b      	add	r3, r1
 8004aea:	613b      	str	r3, [r7, #16]
        }

        switch (pEntry->DataType)
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 8004af4:	f280 809b 	bge.w	8004c2e <OBJ_GetEntryOffset+0x19e>
 8004af8:	f240 2262 	movw	r2, #610	@ 0x262
 8004afc:	4293      	cmp	r3, r2
 8004afe:	da66      	bge.n	8004bce <OBJ_GetEntryOffset+0x13e>
 8004b00:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8004b04:	d045      	beq.n	8004b92 <OBJ_GetEntryOffset+0x102>
 8004b06:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8004b0a:	f300 8090 	bgt.w	8004c2e <OBJ_GetEntryOffset+0x19e>
 8004b0e:	2b0b      	cmp	r3, #11
 8004b10:	dc3a      	bgt.n	8004b88 <OBJ_GetEntryOffset+0xf8>
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	da21      	bge.n	8004b5a <OBJ_GetEntryOffset+0xca>
 8004b16:	e08a      	b.n	8004c2e <OBJ_GetEntryOffset+0x19e>
 8004b18:	3b11      	subs	r3, #17
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	f240 4211 	movw	r2, #1041	@ 0x411
 8004b24:	401a      	ands	r2, r3
 8004b26:	2a00      	cmp	r2, #0
 8004b28:	bf14      	ite	ne
 8004b2a:	2201      	movne	r2, #1
 8004b2c:	2200      	moveq	r2, #0
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	2a00      	cmp	r2, #0
 8004b32:	d16d      	bne.n	8004c10 <OBJ_GetEntryOffset+0x180>
 8004b34:	4a4f      	ldr	r2, [pc, #316]	@ (8004c74 <OBJ_GetEntryOffset+0x1e4>)
 8004b36:	401a      	ands	r2, r3
 8004b38:	2a00      	cmp	r2, #0
 8004b3a:	bf14      	ite	ne
 8004b3c:	2201      	movne	r2, #1
 8004b3e:	2200      	moveq	r2, #0
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	2a00      	cmp	r2, #0
 8004b44:	d143      	bne.n	8004bce <OBJ_GetEntryOffset+0x13e>
 8004b46:	4a4c      	ldr	r2, [pc, #304]	@ (8004c78 <OBJ_GetEntryOffset+0x1e8>)
 8004b48:	401a      	ands	r2, r3
 8004b4a:	2a00      	cmp	r2, #0
 8004b4c:	bf14      	ite	ne
 8004b4e:	2301      	movne	r3, #1
 8004b50:	2300      	moveq	r3, #0
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d11c      	bne.n	8004b92 <OBJ_GetEntryOffset+0x102>
 8004b58:	e069      	b.n	8004c2e <OBJ_GetEntryOffset+0x19e>
 8004b5a:	3b03      	subs	r3, #3
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	f002 0332 	and.w	r3, r2, #50	@ 0x32
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d12d      	bne.n	8004bce <OBJ_GetEntryOffset+0x13e>
 8004b72:	f240 1309 	movw	r3, #265	@ 0x109
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf14      	ite	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	2300      	moveq	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d105      	bne.n	8004b92 <OBJ_GetEntryOffset+0x102>
 8004b86:	e052      	b.n	8004c2e <OBJ_GetEntryOffset+0x19e>
 8004b88:	2b2f      	cmp	r3, #47	@ 0x2f
 8004b8a:	dc50      	bgt.n	8004c2e <OBJ_GetEntryOffset+0x19e>
 8004b8c:	2b11      	cmp	r3, #17
 8004b8e:	dac3      	bge.n	8004b18 <OBJ_GetEntryOffset+0x88>
 8004b90:	e04d      	b.n	8004c2e <OBJ_GetEntryOffset+0x19e>
        case    DEFTYPE_ARRAY_OF_INT :

#if OBJ_WORD_ALIGN    || OBJ_DWORD_ALIGN
            /* the 16-bit variables in the structure are word-aligned,
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
 8004b92:	8abb      	ldrh	r3, [r7, #20]
 8004b94:	330f      	adds	r3, #15
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f023 030f 	bic.w	r3, r3, #15
 8004b9c:	82bb      	strh	r3, [r7, #20]
#endif


            if (i < subindex)
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	8afa      	ldrh	r2, [r7, #22]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d24d      	bcs.n	8004c44 <OBJ_GetEntryOffset+0x1b4>
            {
                if((pEntry->DataType == DEFTYPE_UNICODE_STRING)
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	2b0b      	cmp	r3, #11
 8004bae:	d004      	beq.n	8004bba <OBJ_GetEntryOffset+0x12a>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_INT))
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8004bb8:	d105      	bne.n	8004bc6 <OBJ_GetEntryOffset+0x136>
                {
                    bitOffset += pEntry->BitLength;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	885a      	ldrh	r2, [r3, #2]
 8004bbe:	8abb      	ldrh	r3, [r7, #20]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	82bb      	strh	r3, [r7, #20]
                else
                {
                    bitOffset += 16;
                }
            }
            break;
 8004bc4:	e03e      	b.n	8004c44 <OBJ_GetEntryOffset+0x1b4>
                    bitOffset += 16;
 8004bc6:	8abb      	ldrh	r3, [r7, #20]
 8004bc8:	3310      	adds	r3, #16
 8004bca:	82bb      	strh	r3, [r7, #20]
            break;
 8004bcc:	e03a      	b.n	8004c44 <OBJ_GetEntryOffset+0x1b4>
               align the actual bitOffset to a dword */
            bitOffset = (bitOffset+31) & 0xFFE0;
#elif OBJ_WORD_ALIGN
            /* the 32-bit variables in the structure are word-aligned,
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
 8004bce:	8abb      	ldrh	r3, [r7, #20]
 8004bd0:	330f      	adds	r3, #15
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	f023 030f 	bic.w	r3, r3, #15
 8004bd8:	82bb      	strh	r3, [r7, #20]
#endif

            if (i < subindex)
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	8afa      	ldrh	r2, [r7, #22]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d231      	bcs.n	8004c48 <OBJ_GetEntryOffset+0x1b8>
            {
                if((pEntry->DataType == DEFTYPE_ARRAY_OF_DINT)
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	f240 2262 	movw	r2, #610	@ 0x262
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d005      	beq.n	8004bfc <OBJ_GetEntryOffset+0x16c>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_UDINT))
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	f240 2263 	movw	r2, #611	@ 0x263
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d105      	bne.n	8004c08 <OBJ_GetEntryOffset+0x178>
                {
                    bitOffset += pEntry->BitLength;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	885a      	ldrh	r2, [r3, #2]
 8004c00:	8abb      	ldrh	r3, [r7, #20]
 8004c02:	4413      	add	r3, r2
 8004c04:	82bb      	strh	r3, [r7, #20]
                else
                {
                   bitOffset += 32;
                }
            }
            break;
 8004c06:	e01f      	b.n	8004c48 <OBJ_GetEntryOffset+0x1b8>
                   bitOffset += 32;
 8004c08:	8abb      	ldrh	r3, [r7, #20]
 8004c0a:	3320      	adds	r3, #32
 8004c0c:	82bb      	strh	r3, [r7, #20]
            break;
 8004c0e:	e01b      	b.n	8004c48 <OBJ_GetEntryOffset+0x1b8>
               align the actual bitOffset to a dword */
            bitOffset = (bitOffset + 31) & 0xFFE0;
#elif OBJ_WORD_ALIGN
            /* the 64-bit variables in the structure are word-aligned,
               align the actual bitOffset to a word */
            bitOffset = (bitOffset + 15) & 0xFFF0;
 8004c10:	8abb      	ldrh	r3, [r7, #20]
 8004c12:	330f      	adds	r3, #15
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f023 030f 	bic.w	r3, r3, #15
 8004c1a:	82bb      	strh	r3, [r7, #20]
#endif

            if (i < subindex)
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	8afa      	ldrh	r2, [r7, #22]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d212      	bcs.n	8004c4c <OBJ_GetEntryOffset+0x1bc>
            {

                bitOffset += 64;
 8004c26:	8abb      	ldrh	r3, [r7, #20]
 8004c28:	3340      	adds	r3, #64	@ 0x40
 8004c2a:	82bb      	strh	r3, [r7, #20]
            }
            break;
 8004c2c:	e00e      	b.n	8004c4c <OBJ_GetEntryOffset+0x1bc>
        default:
            /* align the actual bitOffset to a byte */
            if (i < subindex)
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	8afa      	ldrh	r2, [r7, #22]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d20b      	bcs.n	8004c50 <OBJ_GetEntryOffset+0x1c0>
            {
                bitOffset += pEntry->BitLength;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	885a      	ldrh	r2, [r3, #2]
 8004c3c:	8abb      	ldrh	r3, [r7, #20]
 8004c3e:	4413      	add	r3, r2
 8004c40:	82bb      	strh	r3, [r7, #20]
            }
            break;
 8004c42:	e005      	b.n	8004c50 <OBJ_GetEntryOffset+0x1c0>
            break;
 8004c44:	bf00      	nop
 8004c46:	e004      	b.n	8004c52 <OBJ_GetEntryOffset+0x1c2>
            break;
 8004c48:	bf00      	nop
 8004c4a:	e002      	b.n	8004c52 <OBJ_GetEntryOffset+0x1c2>
            break;
 8004c4c:	bf00      	nop
 8004c4e:	e000      	b.n	8004c52 <OBJ_GetEntryOffset+0x1c2>
            break;
 8004c50:	bf00      	nop
    for (i = 1; i <= subindex; i++)
 8004c52:	8afb      	ldrh	r3, [r7, #22]
 8004c54:	3301      	adds	r3, #1
 8004c56:	82fb      	strh	r3, [r7, #22]
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	8afa      	ldrh	r2, [r7, #22]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	f67f af33 	bls.w	8004aca <OBJ_GetEntryOffset+0x3a>
        }
    }

    return bitOffset;
 8004c64:	8abb      	ldrh	r3, [r7, #20]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40008000 	.word	0x40008000
 8004c78:	20004000 	.word	0x20004000

08004c7c <CheckSyncTypeValue>:
 \return    result                Result of the value validation

 \brief    Checks if the new Sync type value is valid
*////////////////////////////////////////////////////////////////////////////////////////
UINT8 CheckSyncTypeValue(UINT16 index, UINT16 NewSyncType)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	460a      	mov	r2, r1
 8004c86:	80fb      	strh	r3, [r7, #6]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	80bb      	strh	r3, [r7, #4]
    switch (NewSyncType)
 8004c8c:	88bb      	ldrh	r3, [r7, #4]
 8004c8e:	2b22      	cmp	r3, #34	@ 0x22
 8004c90:	f200 80be 	bhi.w	8004e10 <CheckSyncTypeValue+0x194>
 8004c94:	a201      	add	r2, pc, #4	@ (adr r2, 8004c9c <CheckSyncTypeValue+0x20>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004d29 	.word	0x08004d29
 8004ca0:	08004d2d 	.word	0x08004d2d
 8004ca4:	08004d9b 	.word	0x08004d9b
 8004ca8:	08004dcf 	.word	0x08004dcf
 8004cac:	08004e11 	.word	0x08004e11
 8004cb0:	08004e11 	.word	0x08004e11
 8004cb4:	08004e11 	.word	0x08004e11
 8004cb8:	08004e11 	.word	0x08004e11
 8004cbc:	08004e11 	.word	0x08004e11
 8004cc0:	08004e11 	.word	0x08004e11
 8004cc4:	08004e11 	.word	0x08004e11
 8004cc8:	08004e11 	.word	0x08004e11
 8004ccc:	08004e11 	.word	0x08004e11
 8004cd0:	08004e11 	.word	0x08004e11
 8004cd4:	08004e11 	.word	0x08004e11
 8004cd8:	08004e11 	.word	0x08004e11
 8004cdc:	08004e11 	.word	0x08004e11
 8004ce0:	08004e11 	.word	0x08004e11
 8004ce4:	08004e11 	.word	0x08004e11
 8004ce8:	08004e11 	.word	0x08004e11
 8004cec:	08004e11 	.word	0x08004e11
 8004cf0:	08004e11 	.word	0x08004e11
 8004cf4:	08004e11 	.word	0x08004e11
 8004cf8:	08004e11 	.word	0x08004e11
 8004cfc:	08004e11 	.word	0x08004e11
 8004d00:	08004e11 	.word	0x08004e11
 8004d04:	08004e11 	.word	0x08004e11
 8004d08:	08004e11 	.word	0x08004e11
 8004d0c:	08004e11 	.word	0x08004e11
 8004d10:	08004e11 	.word	0x08004e11
 8004d14:	08004e11 	.word	0x08004e11
 8004d18:	08004e11 	.word	0x08004e11
 8004d1c:	08004e11 	.word	0x08004e11
 8004d20:	08004e11 	.word	0x08004e11
 8004d24:	08004d79 	.word	0x08004d79
    {
    case SYNCTYPE_FREERUN:
        return 0; //free run sync mode is always accepted
 8004d28:	2300      	movs	r3, #0
 8004d2a:	e072      	b.n	8004e12 <CheckSyncTypeValue+0x196>

    case SYNCTYPE_SM_SYNCHRON:
        if ((index == 0x1C32) 
 8004d2c:	88fb      	ldrh	r3, [r7, #6]
 8004d2e:	f641 4232 	movw	r2, #7218	@ 0x1c32
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d10b      	bne.n	8004d4e <CheckSyncTypeValue+0xd2>
            && (nPdOutputSize > 0) 
 8004d36:	4b3a      	ldr	r3, [pc, #232]	@ (8004e20 <CheckSyncTypeValue+0x1a4>)
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d007      	beq.n	8004d4e <CheckSyncTypeValue+0xd2>
            && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0))
 8004d3e:	4b39      	ldr	r3, [pc, #228]	@ (8004e24 <CheckSyncTypeValue+0x1a8>)
 8004d40:	899b      	ldrh	r3, [r3, #12]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	dd01      	ble.n	8004d4e <CheckSyncTypeValue+0xd2>
        {
            /*SyncManager sync mode is supported and output process data is configured*/
            return 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e061      	b.n	8004e12 <CheckSyncTypeValue+0x196>
        }
        else
        if ((index == 0x1C33) 
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	f641 4233 	movw	r2, #7219	@ 0x1c33
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d154      	bne.n	8004e02 <CheckSyncTypeValue+0x186>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 8004d58:	4b33      	ldr	r3, [pc, #204]	@ (8004e28 <CheckSyncTypeValue+0x1ac>)
 8004d5a:	899b      	ldrh	r3, [r3, #12]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	dd4e      	ble.n	8004e02 <CheckSyncTypeValue+0x186>
            && (nPdOutputSize == 0) 
 8004d64:	4b2e      	ldr	r3, [pc, #184]	@ (8004e20 <CheckSyncTypeValue+0x1a4>)
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d14a      	bne.n	8004e02 <CheckSyncTypeValue+0x186>
            && (nPdInputSize > 0))
 8004d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8004e2c <CheckSyncTypeValue+0x1b0>)
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d046      	beq.n	8004e02 <CheckSyncTypeValue+0x186>
            {
                /*SyncManager sync mode is supported and input only shall be configured*/
                return 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	e04c      	b.n	8004e12 <CheckSyncTypeValue+0x196>
            }
        break;

    case SYNCTYPE_SM2_SYNCHRON:
        if ((index == 0x1C33) 
 8004d78:	88fb      	ldrh	r3, [r7, #6]
 8004d7a:	f641 4233 	movw	r2, #7219	@ 0x1c33
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d141      	bne.n	8004e06 <CheckSyncTypeValue+0x18a>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 8004d82:	4b29      	ldr	r3, [pc, #164]	@ (8004e28 <CheckSyncTypeValue+0x1ac>)
 8004d84:	899b      	ldrh	r3, [r3, #12]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	dd3b      	ble.n	8004e06 <CheckSyncTypeValue+0x18a>
            && (nPdOutputSize > 0))
 8004d8e:	4b24      	ldr	r3, [pc, #144]	@ (8004e20 <CheckSyncTypeValue+0x1a4>)
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d037      	beq.n	8004e06 <CheckSyncTypeValue+0x18a>
            {
                /*SyncManager sync mode is supported and outputs are defined*/
                return 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	e03b      	b.n	8004e12 <CheckSyncTypeValue+0x196>
            }
        break;

    case SYNCTYPE_DCSYNC0:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	f641 4232 	movw	r2, #7218	@ 0x1c32
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d107      	bne.n	8004db4 <CheckSyncTypeValue+0x138>
 8004da4:	4b1f      	ldr	r3, [pc, #124]	@ (8004e24 <CheckSyncTypeValue+0x1a8>)
 8004da6:	899b      	ldrh	r3, [r3, #12]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	dd01      	ble.n	8004db4 <CheckSyncTypeValue+0x138>
        {
            return 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	e02e      	b.n	8004e12 <CheckSyncTypeValue+0x196>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 8004db4:	88fb      	ldrh	r3, [r7, #6]
 8004db6:	f641 4233 	movw	r2, #7219	@ 0x1c33
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d125      	bne.n	8004e0a <CheckSyncTypeValue+0x18e>
 8004dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8004e28 <CheckSyncTypeValue+0x1ac>)
 8004dc0:	899b      	ldrh	r3, [r3, #12]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	dd1f      	ble.n	8004e0a <CheckSyncTypeValue+0x18e>
        {
            return 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e021      	b.n	8004e12 <CheckSyncTypeValue+0x196>
        }
        break;

    case SYNCTYPE_DCSYNC1:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	f641 4232 	movw	r2, #7218	@ 0x1c32
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d107      	bne.n	8004de8 <CheckSyncTypeValue+0x16c>
 8004dd8:	4b12      	ldr	r3, [pc, #72]	@ (8004e24 <CheckSyncTypeValue+0x1a8>)
 8004dda:	899b      	ldrh	r3, [r3, #12]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	dd01      	ble.n	8004de8 <CheckSyncTypeValue+0x16c>
        {
            return 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e014      	b.n	8004e12 <CheckSyncTypeValue+0x196>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 8004de8:	88fb      	ldrh	r3, [r7, #6]
 8004dea:	f641 4233 	movw	r2, #7219	@ 0x1c33
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d10d      	bne.n	8004e0e <CheckSyncTypeValue+0x192>
 8004df2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e28 <CheckSyncTypeValue+0x1ac>)
 8004df4:	899b      	ldrh	r3, [r3, #12]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	dd07      	ble.n	8004e0e <CheckSyncTypeValue+0x192>
        {
            return 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e007      	b.n	8004e12 <CheckSyncTypeValue+0x196>
        break;
 8004e02:	bf00      	nop
 8004e04:	e004      	b.n	8004e10 <CheckSyncTypeValue+0x194>
        break;
 8004e06:	bf00      	nop
 8004e08:	e002      	b.n	8004e10 <CheckSyncTypeValue+0x194>
        break;
 8004e0a:	bf00      	nop
 8004e0c:	e000      	b.n	8004e10 <CheckSyncTypeValue+0x194>
        }
        break;
 8004e0e:	bf00      	nop
    } //switch 
    return ABORTIDX_VALUE_EXCEEDED;
 8004e10:	2312      	movs	r3, #18

}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	2400093c 	.word	0x2400093c
 8004e24:	240009ec 	.word	0x240009ec
 8004e28:	24000a30 	.word	0x24000a30
 8004e2c:	2400093a 	.word	0x2400093a

08004e30 <OBJ_Read>:

 \brief    This function reads the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Read( UINT16 index, UINT8 subindex, UINT32 objSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 8004e30:	b590      	push	{r4, r7, lr}
 8004e32:	b093      	sub	sp, #76	@ 0x4c
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60ba      	str	r2, [r7, #8]
 8004e38:	607b      	str	r3, [r7, #4]
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	81fb      	strh	r3, [r7, #14]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 8004e42:	7b7b      	ldrb	r3, [r7, #13]
 8004e44:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	899b      	ldrh	r3, [r3, #12]
 8004e4a:	121b      	asrs	r3, r3, #8
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    UINT16 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	899b      	ldrh	r3, [r3, #12]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    /* lastSubindex is used for complete access to make loop over the requested entries
    to be read, we initialize this variable with the requested subindex that only
    one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 8004e5e:	7b7b      	ldrb	r3, [r7, #13]
 8004e60:	877b      	strh	r3, [r7, #58]	@ 0x3a

    if ( objCode != OBJCODE_VAR && index >= 0x1000 )
 8004e62:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004e66:	2b07      	cmp	r3, #7
 8004e68:	d008      	beq.n	8004e7c <OBJ_Read+0x4c>
 8004e6a:	89fb      	ldrh	r3, [r7, #14]
 8004e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e70:	d304      	bcc.n	8004e7c <OBJ_Read+0x4c>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
        actual value of subindex 0, which is stored as UINT16 at the beginning of the
        object's variable */
        maxSubindex = (*((UINT16 *) (pObjEntry->pVarPtr))) & 0x00FF;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    }

    if ( bCompleteAccess )
 8004e7c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00c      	beq.n	8004e9e <OBJ_Read+0x6e>
    {
        if ( objCode == OBJCODE_VAR || index < 0x1000 )
 8004e84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004e88:	2b07      	cmp	r3, #7
 8004e8a:	d003      	beq.n	8004e94 <OBJ_Read+0x64>
 8004e8c:	89fb      	ldrh	r3, [r7, #14]
 8004e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e92:	d201      	bcs.n	8004e98 <OBJ_Read+0x68>
        {
            /* complete access is not supported with simple objects or ENUM descriptions */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 8004e94:	2305      	movs	r3, #5
 8004e96:	e33f      	b.n	8005518 <OBJ_Read+0x6e8>
        }


        /* we read until the maximum subindex */
        lastSubindex = maxSubindex;
 8004e98:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004e9a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004e9c:	e02b      	b.n	8004ef6 <OBJ_Read+0xc6>
    }
    else
        if ( subindex > maxSubindex )
 8004e9e:	7b7b      	ldrb	r3, [r7, #13]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d201      	bcs.n	8004eac <OBJ_Read+0x7c>
        {
            /* the maximum subindex is reached */
            return ABORTIDX_SUBINDEX_NOT_EXISTING;
 8004ea8:	2311      	movs	r3, #17
 8004eaa:	e335      	b.n	8005518 <OBJ_Read+0x6e8>
        }
        else
        {
            /* get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 8004eac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff fdb4 	bl	8004a20 <OBJ_GetEntryDesc>
 8004eb8:	6278      	str	r0, [r7, #36]	@ 0x24

            /*Check access only for non-align entries*/
            if(pEntry->ObjAccess != 0x0)
 8004eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebc:	889b      	ldrh	r3, [r3, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d017      	beq.n	8004ef2 <OBJ_Read+0xc2>
            {
                /* check if we have read access (bits 0-2 (PREOP, SAFEOP, OP) of ObjAccess)
                by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
                if (0 == (((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) & (nAlStatus & STATE_MASK)))
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	889b      	ldrh	r3, [r3, #4]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f003 020e 	and.w	r2, r3, #14
 8004ed0:	4b8f      	ldr	r3, [pc, #572]	@ (8005110 <OBJ_Read+0x2e0>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10b      	bne.n	8004ef6 <OBJ_Read+0xc6>
                {
                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	889b      	ldrh	r3, [r3, #4]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <OBJ_Read+0xbe>
                    {
                        /* it is a write only entry */
                        return ABORTIDX_WRITE_ONLY_ENTRY;
 8004eea:	2306      	movs	r3, #6
 8004eec:	e314      	b.n	8005518 <OBJ_Read+0x6e8>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 8004eee:	231a      	movs	r3, #26
 8004ef0:	e312      	b.n	8005518 <OBJ_Read+0x6e8>
                    }
                }
            }
            else
            {
                return ABORTIDX_UNSUPPORTED_ACCESS;
 8004ef2:	2305      	movs	r3, #5
 8004ef4:	e310      	b.n	8005518 <OBJ_Read+0x6e8>
            }

        }

    /* ECATCHANGE_START(V5.13) COE4*/
        if (pAPPL_CoeReadInd != NULL)
 8004ef6:	4b87      	ldr	r3, [pc, #540]	@ (8005114 <OBJ_Read+0x2e4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d006      	beq.n	8004f0c <OBJ_Read+0xdc>
        {
            pAPPL_CoeReadInd(index, subindex, bCompleteAccess);
 8004efe:	4b85      	ldr	r3, [pc, #532]	@ (8005114 <OBJ_Read+0x2e4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8004f06:	7b79      	ldrb	r1, [r7, #13]
 8004f08:	89f8      	ldrh	r0, [r7, #14]
 8004f0a:	4798      	blx	r3
        }
        /* ECATCHANGE_END(V5.13) COE4*/

        if ( pObjEntry->Read != NULL )
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00b      	beq.n	8004f2c <OBJ_Read+0xfc>
        {
            /* Read function is defined, we call the object specific read function */
            return pObjEntry->Read(index, subindex, objSize, pData, bCompleteAccess);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69dc      	ldr	r4, [r3, #28]
 8004f18:	7b79      	ldrb	r1, [r7, #13]
 8004f1a:	89f8      	ldrh	r0, [r7, #14]
 8004f1c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	47a0      	blx	r4
 8004f28:	4603      	mov	r3, r0
 8004f2a:	e2f5      	b.n	8005518 <OBJ_Read+0x6e8>
        }
        else if ( index < 0x1000 && subindex != 0 )
 8004f2c:	89fb      	ldrh	r3, [r7, #14]
 8004f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f32:	d27d      	bcs.n	8005030 <OBJ_Read+0x200>
 8004f34:	7b7b      	ldrb	r3, [r7, #13]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d07a      	beq.n	8005030 <OBJ_Read+0x200>
        {
            /* an ENUM description is read */
            UINT16 size;
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	637b      	str	r3, [r7, #52]	@ 0x34
            CHAR **p;

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 8004f40:	7b7b      	ldrb	r3, [r7, #13]
 8004f42:	4619      	mov	r1, r3
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff fd6b 	bl	8004a20 <OBJ_GetEntryDesc>
 8004f4a:	6278      	str	r0, [r7, #36]	@ 0x24
            size = BIT2BYTE(pEntry->BitLength);
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	885b      	ldrh	r3, [r3, #2]
 8004f50:	3307      	adds	r3, #7
 8004f52:	10db      	asrs	r3, r3, #3
 8004f54:	847b      	strh	r3, [r7, #34]	@ 0x22

            p = (CHAR **) pVarPtr;
 8004f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f58:	61fb      	str	r3, [r7, #28]
            pVarPtr = (UINT16 MBXMEM *)p[subindex-1];
 8004f5a:	7b7a      	ldrb	r2, [r7, #13]
 8004f5c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	4413      	add	r3, r2
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	637b      	str	r3, [r7, #52]	@ 0x34

            /*ECATCHANGE_START(V5.13) */
            if((((MEM_ADDR)pVarPtr) & 0x1) == 0x1)
 8004f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d044      	beq.n	8005002 <OBJ_Read+0x1d2>
            {
                /*enum is stored at an odd word address*/
/*ECATCHANGE_END(V5.13) */
                UINT16 cnt = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	867b      	strh	r3, [r7, #50]	@ 0x32

                //get last even WORD address
                pVarPtr = (UINT16 MBXMEM *)(((MEM_ADDR)pVarPtr)& ~(MEM_ADDR)0x1);
 8004f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f023 0301 	bic.w	r3, r3, #1
 8004f84:	637b      	str	r3, [r7, #52]	@ 0x34

                for(cnt = 0; cnt < (size / 2);cnt++)
 8004f86:	2300      	movs	r3, #0
 8004f88:	867b      	strh	r3, [r7, #50]	@ 0x32
 8004f8a:	e01b      	b.n	8004fc4 <OBJ_Read+0x194>
                {
                    //clear destination buffer
                    pData[0] = (pVarPtr[0] & 0xFF00) >> 8;
 8004f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	0a1b      	lsrs	r3, r3, #8
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f96:	801a      	strh	r2, [r3, #0]
                    pData[0] |= (pVarPtr[1] & 0xFF) << 8;
 8004f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	b21a      	sxth	r2, r3
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa0:	3302      	adds	r3, #2
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	b21b      	sxth	r3, r3
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	b21b      	sxth	r3, r3
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fb0:	801a      	strh	r2, [r3, #0]

                    pData++;
 8004fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	653b      	str	r3, [r7, #80]	@ 0x50
                    pVarPtr++;
 8004fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fba:	3302      	adds	r3, #2
 8004fbc:	637b      	str	r3, [r7, #52]	@ 0x34
                for(cnt = 0; cnt < (size / 2);cnt++)
 8004fbe:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	867b      	strh	r3, [r7, #50]	@ 0x32
 8004fc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004fc6:	085b      	lsrs	r3, r3, #1
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d3dd      	bcc.n	8004f8c <OBJ_Read+0x15c>
                }

                if((size % 2) == 1)
 8004fd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 829b 	beq.w	8005514 <OBJ_Read+0x6e4>
                {
                    pData[0] &= 0xFF00; //Clear last Byte
 8004fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fea:	801a      	strh	r2, [r3, #0]
                    pData[0] |= (pVarPtr[0] & 0xFF00) >> 8; //Write last byte
 8004fec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fee:	881a      	ldrh	r2, [r3, #0]
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	0a1b      	lsrs	r3, r3, #8
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ffe:	801a      	strh	r2, [r3, #0]
        {
 8005000:	e288      	b.n	8005514 <OBJ_Read+0x6e4>
            else
            {
            // Get enum value (first 32Bit)
/*ECATCHANGE_START(V5.13) */

            pData[0] = pVarPtr[0];
 8005002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005004:	881a      	ldrh	r2, [r3, #0]
 8005006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005008:	801a      	strh	r2, [r3, #0]
            pData[1] = pVarPtr[1];
 800500a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800500c:	3302      	adds	r3, #2
 800500e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005010:	8852      	ldrh	r2, [r2, #2]
 8005012:	801a      	strh	r2, [r3, #0]
            pData += 2;
 8005014:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005016:	3304      	adds	r3, #4
 8005018:	653b      	str	r3, [r7, #80]	@ 0x50
            pVarPtr += 2;
 800501a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800501c:	3304      	adds	r3, #4
 800501e:	637b      	str	r3, [r7, #52]	@ 0x34
/*ECATCHANGE_END(V5.13) */

            // Get enum description
            OBJTOMBXSTRCPY(pData,pVarPtr,size-4);
 8005020:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005022:	3b04      	subs	r3, #4
 8005024:	461a      	mov	r2, r3
 8005026:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005028:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800502a:	f007 fb37 	bl	800c69c <memcpy>
        {
 800502e:	e271      	b.n	8005514 <OBJ_Read+0x6e4>
            }
        }
        else
        {
            UINT8 bRead = 0x0;
 8005030:	2300      	movs	r3, #0
 8005032:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
            UINT8 result = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30


            /* a variable object is read */
            for (i = subindex; i <= lastSubindex; i++)
 800503c:	7b7b      	ldrb	r3, [r7, #13]
 800503e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005040:	e25c      	b.n	80054fc <OBJ_Read+0x6cc>
            {
                /* if only a single entry is requested, this loop will only be done once */
                UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	61bb      	str	r3, [r7, #24]
                UINT16 bitOffset = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

                
                if (i == 0)
 800504c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <OBJ_Read+0x23a>
                {
                    /* subindex 0 is requested, the entry's data is at the beginning of the object's variable */
                }
                else if ( index >= 0x1000 )
 8005052:	89fb      	ldrh	r3, [r7, #14]
 8005054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005058:	d307      	bcc.n	800506a <OBJ_Read+0x23a>
                {
                    /* subindex 1-n of an variable object is requested, we get the offset of the variable here */
                    bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 800505a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800505c:	b2db      	uxtb	r3, r3
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff fd15 	bl	8004a90 <OBJ_GetEntryOffset>
 8005066:	4603      	mov	r3, r0
 8005068:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                }

                /* we increment the variable pointer to the corresponding word address */
                pVarPtr += (bitOffset >> 4);
 800506a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	b29b      	uxth	r3, r3
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	4413      	add	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]

                /* get the corresponding entry description */
                pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 8005078:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800507a:	b2db      	uxtb	r3, r3
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff fcce 	bl	8004a20 <OBJ_GetEntryDesc>
 8005084:	6278      	str	r0, [r7, #36]	@ 0x24
                if (0 != (((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) & (nAlStatus & STATE_MASK)) )
 8005086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005088:	889b      	ldrh	r3, [r3, #4]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	b2db      	uxtb	r3, r3
 8005090:	f003 020e 	and.w	r2, r3, #14
 8005094:	4b1e      	ldr	r3, [pc, #120]	@ (8005110 <OBJ_Read+0x2e0>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	4013      	ands	r3, r2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 81e4 	beq.w	800546c <OBJ_Read+0x63c>
                {
                    if ( i == subindex                                     /* requested entry */
 80050a4:	7b7b      	ldrb	r3, [r7, #13]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d00a      	beq.n	80050c4 <OBJ_Read+0x294>
                        || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 80050ae:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 821f 	beq.w	80054f6 <OBJ_Read+0x6c6>
 80050b8:	7b7b      	ldrb	r3, [r7, #13]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80050be:	429a      	cmp	r2, r3
 80050c0:	f0c0 8219 	bcc.w	80054f6 <OBJ_Read+0x6c6>
                    {
                        UINT16 bitMask;

                        /* we have to copy the entry */
                        if ( i == 0 && objCode != OBJCODE_VAR )
 80050c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <OBJ_Read+0x2b0>
 80050ca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80050ce:	2b07      	cmp	r3, #7
 80050d0:	d006      	beq.n	80050e0 <OBJ_Read+0x2b0>
                        {
                            /* we read subindex 0 of an array or record */
                            {
                                pData[0] = SWAPWORD((UINT16)maxSubindex);
 80050d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050d4:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80050d6:	801a      	strh	r2, [r3, #0]
                            }

                            /* we increment the destination pointer by 2 because the subindex 0 will be
                            transmitted as UINT16 for a complete access */
                            pData++;
 80050d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050da:	3302      	adds	r3, #2
 80050dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80050de:	e20a      	b.n	80054f6 <OBJ_Read+0x6c6>
                        }
                        else
                        {
                            UINT16 dataType = pEntry->DataType;
 80050e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                            
                            if (pEntry->DataType >= 0x700)
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050ee:	d319      	bcc.n	8005124 <OBJ_Read+0x2f4>
                            {
                                /* the ENUM data types are defined from index 0x700 in this example
                                convert in standard data type for the read access */
                                if ( pEntry->BitLength <= 8 )
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	885b      	ldrh	r3, [r3, #2]
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d804      	bhi.n	8005102 <OBJ_Read+0x2d2>
                                {
                                    dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 80050f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fa:	885b      	ldrh	r3, [r3, #2]
 80050fc:	332f      	adds	r3, #47	@ 0x2f
 80050fe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005100:	e010      	b.n	8005124 <OBJ_Read+0x2f4>
                                }
                                else if ( pEntry->BitLength == 16 )
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	885b      	ldrh	r3, [r3, #2]
 8005106:	2b10      	cmp	r3, #16
 8005108:	d106      	bne.n	8005118 <OBJ_Read+0x2e8>
                                {
                                    dataType = DEFTYPE_UNSIGNED16;
 800510a:	2306      	movs	r3, #6
 800510c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800510e:	e009      	b.n	8005124 <OBJ_Read+0x2f4>
 8005110:	24000942 	.word	0x24000942
 8005114:	24000854 	.word	0x24000854
                                }
                                else if ( pEntry->BitLength == 32 )
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	885b      	ldrh	r3, [r3, #2]
 800511c:	2b20      	cmp	r3, #32
 800511e:	d101      	bne.n	8005124 <OBJ_Read+0x2f4>
                                {
                                    dataType = DEFTYPE_UNSIGNED32;
 8005120:	2307      	movs	r3, #7
 8005122:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                                }
                            }

                            switch (dataType)
 8005124:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005126:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 800512a:	f280 8194 	bge.w	8005456 <OBJ_Read+0x626>
 800512e:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8005132:	f280 813a 	bge.w	80053aa <OBJ_Read+0x57a>
 8005136:	2b37      	cmp	r3, #55	@ 0x37
 8005138:	f300 818d 	bgt.w	8005456 <OBJ_Read+0x626>
 800513c:	2b1e      	cmp	r3, #30
 800513e:	da0f      	bge.n	8005160 <OBJ_Read+0x330>
 8005140:	2b1b      	cmp	r3, #27
 8005142:	f300 8188 	bgt.w	8005456 <OBJ_Read+0x626>
 8005146:	2b09      	cmp	r3, #9
 8005148:	da2d      	bge.n	80051a6 <OBJ_Read+0x376>
 800514a:	2b00      	cmp	r3, #0
 800514c:	d078      	beq.n	8005240 <OBJ_Read+0x410>
 800514e:	2b00      	cmp	r3, #0
 8005150:	f2c0 8181 	blt.w	8005456 <OBJ_Read+0x626>
 8005154:	2b08      	cmp	r3, #8
 8005156:	f300 817e 	bgt.w	8005456 <OBJ_Read+0x626>
 800515a:	2b00      	cmp	r3, #0
 800515c:	dc50      	bgt.n	8005200 <OBJ_Read+0x3d0>
 800515e:	e17a      	b.n	8005456 <OBJ_Read+0x626>
 8005160:	3b1e      	subs	r3, #30
 8005162:	2201      	movs	r2, #1
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	4a93      	ldr	r2, [pc, #588]	@ (80053b8 <OBJ_Read+0x588>)
 800516a:	401a      	ands	r2, r3
 800516c:	2a00      	cmp	r2, #0
 800516e:	bf14      	ite	ne
 8005170:	2201      	movne	r2, #1
 8005172:	2200      	moveq	r2, #0
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	2a00      	cmp	r2, #0
 8005178:	f040 8084 	bne.w	8005284 <OBJ_Read+0x454>
 800517c:	4a8f      	ldr	r2, [pc, #572]	@ (80053bc <OBJ_Read+0x58c>)
 800517e:	401a      	ands	r2, r3
 8005180:	2a00      	cmp	r2, #0
 8005182:	bf14      	ite	ne
 8005184:	2201      	movne	r2, #1
 8005186:	2200      	moveq	r2, #0
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	2a00      	cmp	r2, #0
 800518c:	f040 80db 	bne.w	8005346 <OBJ_Read+0x516>
 8005190:	4a8b      	ldr	r2, [pc, #556]	@ (80053c0 <OBJ_Read+0x590>)
 8005192:	401a      	ands	r2, r3
 8005194:	2a00      	cmp	r2, #0
 8005196:	bf14      	ite	ne
 8005198:	2301      	movne	r3, #1
 800519a:	2300      	moveq	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f040 80c2 	bne.w	8005328 <OBJ_Read+0x4f8>
 80051a4:	e157      	b.n	8005456 <OBJ_Read+0x626>
 80051a6:	3b09      	subs	r3, #9
 80051a8:	2b12      	cmp	r3, #18
 80051aa:	f200 8154 	bhi.w	8005456 <OBJ_Read+0x626>
 80051ae:	a201      	add	r2, pc, #4	@ (adr r2, 80051b4 <OBJ_Read+0x384>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	08005409 	.word	0x08005409
 80051b8:	080053ab 	.word	0x080053ab
 80051bc:	080053ab 	.word	0x080053ab
 80051c0:	08005457 	.word	0x08005457
 80051c4:	08005457 	.word	0x08005457
 80051c8:	08005457 	.word	0x08005457
 80051cc:	08005457 	.word	0x08005457
 80051d0:	08005457 	.word	0x08005457
 80051d4:	0800536f 	.word	0x0800536f
 80051d8:	08005457 	.word	0x08005457
 80051dc:	08005457 	.word	0x08005457
 80051e0:	08005457 	.word	0x08005457
 80051e4:	0800536f 	.word	0x0800536f
 80051e8:	08005457 	.word	0x08005457
 80051ec:	08005457 	.word	0x08005457
 80051f0:	08005457 	.word	0x08005457
 80051f4:	08005457 	.word	0x08005457
 80051f8:	08005457 	.word	0x08005457
 80051fc:	0800536f 	.word	0x0800536f
 8005200:	461a      	mov	r2, r3
 8005202:	2301      	movs	r3, #1
 8005204:	4093      	lsls	r3, r2
 8005206:	f403 72c8 	and.w	r2, r3, #400	@ 0x190
 800520a:	2a00      	cmp	r2, #0
 800520c:	bf14      	ite	ne
 800520e:	2201      	movne	r2, #1
 8005210:	2200      	moveq	r2, #0
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	2a00      	cmp	r2, #0
 8005216:	f040 8096 	bne.w	8005346 <OBJ_Read+0x516>
 800521a:	f003 0226 	and.w	r2, r3, #38	@ 0x26
 800521e:	2a00      	cmp	r2, #0
 8005220:	bf14      	ite	ne
 8005222:	2201      	movne	r2, #1
 8005224:	2200      	moveq	r2, #0
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	2a00      	cmp	r2, #0
 800522a:	d12b      	bne.n	8005284 <OBJ_Read+0x454>
 800522c:	f003 0348 	and.w	r3, r3, #72	@ 0x48
 8005230:	2b00      	cmp	r3, #0
 8005232:	bf14      	ite	ne
 8005234:	2301      	movne	r3, #1
 8005236:	2300      	moveq	r3, #0
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d174      	bne.n	8005328 <OBJ_Read+0x4f8>
 800523e:	e10a      	b.n	8005456 <OBJ_Read+0x626>
                            {
                            case DEFTYPE_NULL:
                                if(bCompleteAccess)
 8005240:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01b      	beq.n	8005280 <OBJ_Read+0x450>
                                {
                                    /*Handle alignment entry*/
                                    if (((pEntry->BitLength & 0xF) > 0)
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	885b      	ldrh	r3, [r3, #2]
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	2b00      	cmp	r3, #0
 8005252:	dd0b      	ble.n	800526c <OBJ_Read+0x43c>
                                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	885a      	ldrh	r2, [r3, #2]
 8005258:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800525a:	4413      	add	r3, r2
 800525c:	b29b      	uxth	r3, r3
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	2b00      	cmp	r3, #0
 8005264:	d102      	bne.n	800526c <OBJ_Read+0x43c>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 8005266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005268:	3302      	adds	r3, #2
 800526a:	653b      	str	r3, [r7, #80]	@ 0x50
                                    }

                                    /*increment WORD offset*/
                                    pData += ((pEntry->BitLength & 0xF0) >> 4);
 800526c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526e:	885b      	ldrh	r3, [r3, #2]
 8005270:	111b      	asrs	r3, r3, #4
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800527a:	4413      	add	r3, r2
 800527c:	653b      	str	r3, [r7, #80]	@ 0x50
                                }
                                else
                                {
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                                }
                                break;
 800527e:	e0f1      	b.n	8005464 <OBJ_Read+0x634>
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8005280:	2318      	movs	r3, #24
 8005282:	e149      	b.n	8005518 <OBJ_Read+0x6e8>
                            case    DEFTYPE_INTEGER8:
                            case    DEFTYPE_UNSIGNED8:
                            case    DEFTYPE_BYTE :
                                {
                                    /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                                    UINT16 TmpValue = 0x0000;
 8005284:	2300      	movs	r3, #0
 8005286:	82fb      	strh	r3, [r7, #22]

                                    
                                    bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 8005288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528a:	885b      	ldrh	r3, [r3, #2]
 800528c:	461a      	mov	r2, r3
 800528e:	4b4d      	ldr	r3, [pc, #308]	@ (80053c4 <OBJ_Read+0x594>)
 8005290:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005294:	461a      	mov	r2, r3
 8005296:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	82bb      	strh	r3, [r7, #20]

                                    /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                                    TmpValue = SWAPWORD(pVarPtr[0]);
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	82fb      	strh	r3, [r7, #22]

                                    /*Clear pData if the first bits within the WORD memory will be copied*/
                                    if ((bitOffset & 0x0F) == 0) 
 80052a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d102      	bne.n	80052b8 <OBJ_Read+0x488>
                                    {
                                        pData[0] = 0;
 80052b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052b4:	2200      	movs	r2, #0
 80052b6:	801a      	strh	r2, [r3, #0]
                                    }

                                    pData[0] = SWAPWORD(pData[0]);
 80052b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052ba:	881a      	ldrh	r2, [r3, #0]
 80052bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052be:	801a      	strh	r2, [r3, #0]

                                    if (bCompleteAccess) 
 80052c0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <OBJ_Read+0x4ae>
                                    {
                                        /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                        pData[0] |= TmpValue & bitMask;
 80052c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052ca:	881a      	ldrh	r2, [r3, #0]
 80052cc:	8af9      	ldrh	r1, [r7, #22]
 80052ce:	8abb      	ldrh	r3, [r7, #20]
 80052d0:	400b      	ands	r3, r1
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	4313      	orrs	r3, r2
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	e012      	b.n	8005304 <OBJ_Read+0x4d4>
                                    }
                                    else
                                    {
                                        /*Shift Bits to the beginning of the mailbox memory*/
                                        pData[0] |= ((TmpValue & bitMask) >> (bitOffset & 0x0F));
 80052de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b21a      	sxth	r2, r3
 80052e4:	8af9      	ldrh	r1, [r7, #22]
 80052e6:	8abb      	ldrh	r3, [r7, #20]
 80052e8:	400b      	ands	r3, r1
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	4619      	mov	r1, r3
 80052ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80052f0:	f003 030f 	and.w	r3, r3, #15
 80052f4:	fa41 f303 	asr.w	r3, r1, r3
 80052f8:	b21b      	sxth	r3, r3
 80052fa:	4313      	orrs	r3, r2
 80052fc:	b21b      	sxth	r3, r3
 80052fe:	b29a      	uxth	r2, r3
 8005300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005302:	801a      	strh	r2, [r3, #0]
                                    }

                                    pData[0] = SWAPWORD(pData[0]);
 8005304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005306:	881a      	ldrh	r2, [r3, #0]
 8005308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800530a:	801a      	strh	r2, [r3, #0]
                                    if ( ((bitOffset + pEntry->BitLength) & 0x0F) == 0 )
 800530c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530e:	885a      	ldrh	r2, [r3, #2]
 8005310:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005312:	4413      	add	r3, r2
 8005314:	b29b      	uxth	r3, r3
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	2b00      	cmp	r3, #0
 800531c:	f040 809d 	bne.w	800545a <OBJ_Read+0x62a>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 8005320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005322:	3302      	adds	r3, #2
 8005324:	653b      	str	r3, [r7, #80]	@ 0x50
                                    }

                                }
                                break;
 8005326:	e098      	b.n	800545a <OBJ_Read+0x62a>
                            case    DEFTYPE_INTEGER16:
                            case    DEFTYPE_UNSIGNED16:
                            case    DEFTYPE_BITARR16:
                            case    DEFTYPE_WORD:

                                if(bitOffset & 0xF)
 8005328:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <OBJ_Read+0x506>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8005332:	2305      	movs	r3, #5
 8005334:	e0f0      	b.n	8005518 <OBJ_Read+0x6e8>
                                }
                                /* in this example the objects are defined in that way,
                                that the 16 bit type are always starting at an exact WORD offset */
                                pData[0] = SWAPWORD(pVarPtr[0]);
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	881a      	ldrh	r2, [r3, #0]
 800533a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800533c:	801a      	strh	r2, [r3, #0]
                                pData++;
 800533e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005340:	3302      	adds	r3, #2
 8005342:	653b      	str	r3, [r7, #80]	@ 0x50
                                break;
 8005344:	e08e      	b.n	8005464 <OBJ_Read+0x634>
                            case    DEFTYPE_UNSIGNED32:
                            case    DEFTYPE_INTEGER32:
                            case    DEFTYPE_REAL32:
                            case    DEFTYPE_BITARR32:
                            case    DEFTYPE_DWORD:
                                if(bitOffset & 0xF)
 8005346:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <OBJ_Read+0x524>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8005350:	2305      	movs	r3, #5
 8005352:	e0e1      	b.n	8005518 <OBJ_Read+0x6e8>
                                }

                                /* in this example the objects are defined in that way,
                                that the 32 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	881a      	ldrh	r2, [r3, #0]
 8005358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800535a:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 800535c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800535e:	3302      	adds	r3, #2
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	8852      	ldrh	r2, [r2, #2]
 8005364:	801a      	strh	r2, [r3, #0]
                                pData += 2;
 8005366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005368:	3304      	adds	r3, #4
 800536a:	653b      	str	r3, [r7, #80]	@ 0x50
                                break;
 800536c:	e07a      	b.n	8005464 <OBJ_Read+0x634>
                            case    DEFTYPE_REAL64:
                            case 	DEFTYPE_INTEGER64:
                            case    DEFTYPE_UNSIGNED64:
                                if(bitOffset & 0xF)
 800536e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005370:	f003 030f 	and.w	r3, r3, #15
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <OBJ_Read+0x54c>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8005378:	2305      	movs	r3, #5
 800537a:	e0cd      	b.n	8005518 <OBJ_Read+0x6e8>
                                }

                                /* in this example the objects are defined in that way,
                                that the 64 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	881a      	ldrh	r2, [r3, #0]
 8005380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005382:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 8005384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005386:	3302      	adds	r3, #2
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	8852      	ldrh	r2, [r2, #2]
 800538c:	801a      	strh	r2, [r3, #0]
                                pData[2] = pVarPtr[2];
 800538e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005390:	3304      	adds	r3, #4
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	8892      	ldrh	r2, [r2, #4]
 8005396:	801a      	strh	r2, [r3, #0]
                                pData[3] = pVarPtr[3];
 8005398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800539a:	3306      	adds	r3, #6
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	88d2      	ldrh	r2, [r2, #6]
 80053a0:	801a      	strh	r2, [r3, #0]
                                pData += 4;
 80053a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053a4:	3308      	adds	r3, #8
 80053a6:	653b      	str	r3, [r7, #80]	@ 0x50
                                break;
 80053a8:	e05c      	b.n	8005464 <OBJ_Read+0x634>
                            case DEFTYPE_ARRAY_OF_INT :
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:

                                if(bitOffset & 0xF)
 80053aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80053ac:	f003 030f 	and.w	r3, r3, #15
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d009      	beq.n	80053c8 <OBJ_Read+0x598>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 80053b4:	2305      	movs	r3, #5
 80053b6:	e0af      	b.n	8005518 <OBJ_Read+0x6e8>
 80053b8:	03fc8001 	.word	0x03fc8001
 80053bc:	00020004 	.word	0x00020004
 80053c0:	00010002 	.word	0x00010002
 80053c4:	0800cd60 	.word	0x0800cd60
                                }

                                OBJTOMBXMEMCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	885b      	ldrh	r3, [r3, #2]
 80053cc:	3307      	adds	r3, #7
 80053ce:	10db      	asrs	r3, r3, #3
 80053d0:	461a      	mov	r2, r3
 80053d2:	69b9      	ldr	r1, [r7, #24]
 80053d4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80053d6:	f007 f961 	bl	800c69c <memcpy>

                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	885b      	ldrh	r3, [r3, #2]
 80053de:	f023 030f 	bic.w	r3, r3, #15
 80053e2:	330f      	adds	r3, #15
 80053e4:	111b      	asrs	r3, r3, #4
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80053ea:	4413      	add	r3, r2
 80053ec:	653b      	str	r3, [r7, #80]	@ 0x50
                                
                                if((pEntry->BitLength & 0xF) != 0)
 80053ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f0:	885b      	ldrh	r3, [r3, #2]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d031      	beq.n	800545e <OBJ_Read+0x62e>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 80053fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	b29a      	uxth	r2, r3
 8005402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005404:	801a      	strh	r2, [r3, #0]
                                }

                                break;
 8005406:	e02a      	b.n	800545e <OBJ_Read+0x62e>
                            case    DEFTYPE_VISIBLESTRING:
                                if(bitOffset & 0xF)
 8005408:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <OBJ_Read+0x5e6>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8005412:	2305      	movs	r3, #5
 8005414:	e080      	b.n	8005518 <OBJ_Read+0x6e8>
                                }

                                /* in this example the objects are defined in that way,
                                that these types are always starting at an even WORD offset */
                                OBJTOMBXSTRCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	885b      	ldrh	r3, [r3, #2]
 800541a:	3307      	adds	r3, #7
 800541c:	10db      	asrs	r3, r3, #3
 800541e:	461a      	mov	r2, r3
 8005420:	69b9      	ldr	r1, [r7, #24]
 8005422:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8005424:	f007 f93a 	bl	800c69c <memcpy>
                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	885b      	ldrh	r3, [r3, #2]
 800542c:	f023 030f 	bic.w	r3, r3, #15
 8005430:	330f      	adds	r3, #15
 8005432:	111b      	asrs	r3, r3, #4
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005438:	4413      	add	r3, r2
 800543a:	653b      	str	r3, [r7, #80]	@ 0x50

                                if((pEntry->BitLength & 0xF) != 0)
 800543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543e:	885b      	ldrh	r3, [r3, #2]
 8005440:	f003 030f 	and.w	r3, r3, #15
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00c      	beq.n	8005462 <OBJ_Read+0x632>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 8005448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	b2db      	uxtb	r3, r3
 800544e:	b29a      	uxth	r2, r3
 8005450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005452:	801a      	strh	r2, [r3, #0]
                                }
                                
                                break;
 8005454:	e005      	b.n	8005462 <OBJ_Read+0x632>
                            default:
                                /* other data types are not supported from this example */
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8005456:	2318      	movs	r3, #24
 8005458:	e05e      	b.n	8005518 <OBJ_Read+0x6e8>
                                break;
 800545a:	bf00      	nop
 800545c:	e002      	b.n	8005464 <OBJ_Read+0x634>
                                break;
 800545e:	bf00      	nop
 8005460:	e000      	b.n	8005464 <OBJ_Read+0x634>
                                break;
 8005462:	bf00      	nop
                            } //switch (deftype)

                            bRead = 1;
 8005464:	2301      	movs	r3, #1
 8005466:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800546a:	e044      	b.n	80054f6 <OBJ_Read+0x6c6>
                    }
                }
                else
                {
                    /*No access to current object entry => shift pData if required*/
                    UINT8 cnt = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                    /*If this entry is the first in the 16Bit block clear the memory*/
                    if ((bitOffset & 0x0F) == 0) 
 8005472:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005474:	f003 030f 	and.w	r3, r3, #15
 8005478:	2b00      	cmp	r3, #0
 800547a:	d102      	bne.n	8005482 <OBJ_Read+0x652>
                    {
                        *pData = 0;
 800547c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800547e:	2200      	movs	r2, #0
 8005480:	801a      	strh	r2, [r3, #0]
                    }

                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	885b      	ldrh	r3, [r3, #2]
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	2b00      	cmp	r3, #0
 800548c:	dd0e      	ble.n	80054ac <OBJ_Read+0x67c>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	885a      	ldrh	r2, [r3, #2]
 8005492:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005494:	4413      	add	r3, r2
 8005496:	b29b      	uxth	r3, r3
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	2b00      	cmp	r3, #0
 800549e:	d105      	bne.n	80054ac <OBJ_Read+0x67c>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 80054a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054a2:	3302      	adds	r3, #2
 80054a4:	653b      	str	r3, [r7, #80]	@ 0x50
                        
                        /*Clear new buffer*/
                        *pData = 0;
 80054a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054a8:	2200      	movs	r2, #0
 80054aa:	801a      	strh	r2, [r3, #0]
                    }

                    /*increment WORD offset*/
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 80054ac:	2300      	movs	r3, #0
 80054ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054b2:	e00a      	b.n	80054ca <OBJ_Read+0x69a>
                    {
                        
                        /*current 16Bit are skipped => clear current buffer */
                        pData++;
 80054b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054b6:	3302      	adds	r3, #2
 80054b8:	653b      	str	r3, [r7, #80]	@ 0x50

                        /*Clear new buffer*/
                        *pData = 0;
 80054ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054bc:	2200      	movs	r2, #0
 80054be:	801a      	strh	r2, [r3, #0]
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 80054c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054c4:	3301      	adds	r3, #1
 80054c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ca:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	885b      	ldrh	r3, [r3, #2]
 80054d2:	111b      	asrs	r3, r3, #4
 80054d4:	f003 030f 	and.w	r3, r3, #15
 80054d8:	429a      	cmp	r2, r3
 80054da:	dbeb      	blt.n	80054b4 <OBJ_Read+0x684>


                    

                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 80054dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054de:	889b      	ldrh	r3, [r3, #4]
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d103      	bne.n	80054f0 <OBJ_Read+0x6c0>
                    {
                        /* it is a write only entry */
                        result = ABORTIDX_WRITE_ONLY_ENTRY;
 80054e8:	2306      	movs	r3, #6
 80054ea:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80054ee:	e002      	b.n	80054f6 <OBJ_Read+0x6c6>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        result = ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 80054f0:	231a      	movs	r3, #26
 80054f2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            for (i = subindex; i <= lastSubindex; i++)
 80054f6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80054f8:	3301      	adds	r3, #1
 80054fa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80054fc:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80054fe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005500:	429a      	cmp	r2, r3
 8005502:	f67f ad9e 	bls.w	8005042 <OBJ_Read+0x212>
                    }
                }
            }

            if(bRead == 0)
 8005506:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800550a:	2b00      	cmp	r3, #0
 800550c:	d103      	bne.n	8005516 <OBJ_Read+0x6e6>
            {
                return result;
 800550e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005512:	e001      	b.n	8005518 <OBJ_Read+0x6e8>
        {
 8005514:	bf00      	nop
            }
        }

    return 0;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3744      	adds	r7, #68	@ 0x44
 800551c:	46bd      	mov	sp, r7
 800551e:	bd90      	pop	{r4, r7, pc}

08005520 <OBJ_Write>:

 \brief    This function writes the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Write( UINT16 index, UINT8 subindex, UINT32 dataSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 8005520:	b590      	push	{r4, r7, lr}
 8005522:	b091      	sub	sp, #68	@ 0x44
 8005524:	af02      	add	r7, sp, #8
 8005526:	60ba      	str	r2, [r7, #8]
 8005528:	607b      	str	r3, [r7, #4]
 800552a:	4603      	mov	r3, r0
 800552c:	81fb      	strh	r3, [r7, #14]
 800552e:	460b      	mov	r3, r1
 8005530:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 8005532:	7b7b      	ldrb	r3, [r7, #13]
 8005534:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	899b      	ldrh	r3, [r3, #12]
 800553a:	121b      	asrs	r3, r3, #8
 800553c:	b2db      	uxtb	r3, r3
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    UINT16 maxSubindex = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	86bb      	strh	r3, [r7, #52]	@ 0x34
    UINT16 maxConfiguredSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT; //required to check if value for Subindex0 is valid
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	899b      	ldrh	r3, [r3, #12]
 800554e:	b2db      	uxtb	r3, r3
 8005550:	843b      	strh	r3, [r7, #32]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    BOOL bClearSubindex0Required = FALSE;
 8005552:	2300      	movs	r3, #0
 8005554:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    /* lastSubindex is used for complete access to make loop over the requested entries
       to be read, we initialize this variable with the requested subindex that only
       one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 8005558:	7b7b      	ldrb	r3, [r7, #13]
 800555a:	863b      	strh	r3, [r7, #48]	@ 0x30

    /* if subindex 0 is writable, the maximum subindex should be checked in an object specific function,
        because for the PDO mapping and PDO assign the object shall only be written if subindex 0 is 0. */
    if ( objCode != OBJCODE_VAR )
 800555c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005560:	2b07      	cmp	r3, #7
 8005562:	d028      	beq.n	80055b6 <OBJ_Write+0x96>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
           actual value of subindex 0, which is stored as UINT16 at the beginning of the
            object's variable */
        maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	86bb      	strh	r3, [r7, #52]	@ 0x34

        /*If the subindex0 of a PDO assign or PDO mapping object is 0 the maximum subindex is specified by the object description*/
        if(maxSubindex == 0 && (IS_PDO_ASSIGN(index) || IS_RX_PDO(index) || IS_TX_PDO(index) || (index == 0xF030)))
 800556e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005570:	2b00      	cmp	r3, #0
 8005572:	d120      	bne.n	80055b6 <OBJ_Write+0x96>
 8005574:	89fb      	ldrh	r3, [r7, #14]
 8005576:	f641 420f 	movw	r2, #7183	@ 0x1c0f
 800557a:	4293      	cmp	r3, r2
 800557c:	d904      	bls.n	8005588 <OBJ_Write+0x68>
 800557e:	89fb      	ldrh	r3, [r7, #14]
 8005580:	f641 422f 	movw	r2, #7215	@ 0x1c2f
 8005584:	4293      	cmp	r3, r2
 8005586:	d914      	bls.n	80055b2 <OBJ_Write+0x92>
 8005588:	89fb      	ldrh	r3, [r7, #14]
 800558a:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
 800558e:	d303      	bcc.n	8005598 <OBJ_Write+0x78>
 8005590:	89fb      	ldrh	r3, [r7, #14]
 8005592:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8005596:	d30c      	bcc.n	80055b2 <OBJ_Write+0x92>
 8005598:	89fb      	ldrh	r3, [r7, #14]
 800559a:	f5b3 5fd0 	cmp.w	r3, #6656	@ 0x1a00
 800559e:	d303      	bcc.n	80055a8 <OBJ_Write+0x88>
 80055a0:	89fb      	ldrh	r3, [r7, #14]
 80055a2:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80055a6:	d304      	bcc.n	80055b2 <OBJ_Write+0x92>
 80055a8:	89fb      	ldrh	r3, [r7, #14]
 80055aa:	f24f 0230 	movw	r2, #61488	@ 0xf030
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d101      	bne.n	80055b6 <OBJ_Write+0x96>
        {
            maxSubindex = maxConfiguredSubindex;
 80055b2:	8c3b      	ldrh	r3, [r7, #32]
 80055b4:	86bb      	strh	r3, [r7, #52]	@ 0x34
        }
    }


    if ( bCompleteAccess )
 80055b6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d012      	beq.n	80055e4 <OBJ_Write+0xc4>
    {
        if ( objCode == OBJCODE_VAR )
 80055be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80055c2:	2b07      	cmp	r3, #7
 80055c4:	d101      	bne.n	80055ca <OBJ_Write+0xaa>
        {
            /* complete access is not supported with simple objects */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 80055c6:	2305      	movs	r3, #5
 80055c8:	e37b      	b.n	8005cc2 <OBJ_Write+0x7a2>
        }

        if ((subindex == 0) && (dataSize > 0))
 80055ca:	7b7b      	ldrb	r3, [r7, #13]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d106      	bne.n	80055de <OBJ_Write+0xbe>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <OBJ_Write+0xbe>
        {
            /* we change the subindex 0 */
            maxSubindex = (UINT8) SWAPWORD(pData[0]);
 80055d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	86bb      	strh	r3, [r7, #52]	@ 0x34
        }


        /* we write until the maximum subindex */
        lastSubindex = maxSubindex;
 80055de:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80055e0:	863b      	strh	r3, [r7, #48]	@ 0x30
 80055e2:	e029      	b.n	8005638 <OBJ_Write+0x118>
    }
    else
    if (subindex > maxSubindex)
 80055e4:	7b7b      	ldrb	r3, [r7, #13]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d201      	bcs.n	80055f2 <OBJ_Write+0xd2>
    {
        /* the maximum subindex is reached */
        return ABORTIDX_SUBINDEX_NOT_EXISTING;
 80055ee:	2311      	movs	r3, #17
 80055f0:	e367      	b.n	8005cc2 <OBJ_Write+0x7a2>
    {
        /* we check the write access for single accesses here, a complete write access
           is allowed if at least one entry is writable (in this case the values for the
            read only entries shall be ignored) */
        /* we get the corresponding entry description */
        pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 80055f2:	7b7b      	ldrb	r3, [r7, #13]
 80055f4:	4619      	mov	r1, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff fa12 	bl	8004a20 <OBJ_GetEntryDesc>
 80055fc:	61f8      	str	r0, [r7, #28]

        /* check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
           by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
        if (0 == (((UINT8)((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) & (nAlStatus & STATE_MASK) ))
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	889b      	ldrh	r3, [r3, #4]
 8005602:	109b      	asrs	r3, r3, #2
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f003 020e 	and.w	r2, r3, #14
 800560a:	4b94      	ldr	r3, [pc, #592]	@ (800585c <OBJ_Write+0x33c>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	4013      	ands	r3, r2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10f      	bne.n	8005638 <OBJ_Write+0x118>
        {
            /* we don't have write access */
            if ( (pEntry->ObjAccess & ACCESS_WRITE) == 0 )
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	889b      	ldrh	r3, [r3, #4]
 800561c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005620:	2b00      	cmp	r3, #0
 8005622:	d107      	bne.n	8005634 <OBJ_Write+0x114>
            {
                if (pEntry->ObjAccess == 0)
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	889b      	ldrh	r3, [r3, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <OBJ_Write+0x110>
                {
                        return ABORTIDX_UNSUPPORTED_ACCESS;
 800562c:	2305      	movs	r3, #5
 800562e:	e348      	b.n	8005cc2 <OBJ_Write+0x7a2>
                }
                else
                {
                        /* it is a read only entry */
                        return ABORTIDX_READ_ONLY_ENTRY;
 8005630:	2307      	movs	r3, #7
 8005632:	e346      	b.n	8005cc2 <OBJ_Write+0x7a2>
                }
            }
            else
            {
                /* we don't have write access in this state */
                return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 8005634:	231a      	movs	r3, #26
 8005636:	e344      	b.n	8005cc2 <OBJ_Write+0x7a2>

    }

    /* Subindex 0 shall be set to zero if a single PDO / PDO assign entry is written
    or a complete access without subindex0 is requested */
    if((subindex > 0) &&
 8005638:	7b7b      	ldrb	r3, [r7, #13]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d029      	beq.n	8005692 <OBJ_Write+0x172>
 800563e:	89fb      	ldrh	r3, [r7, #14]
 8005640:	f641 420f 	movw	r2, #7183	@ 0x1c0f
 8005644:	4293      	cmp	r3, r2
 8005646:	d904      	bls.n	8005652 <OBJ_Write+0x132>
        (IS_PDO_ASSIGN(index) || IS_RX_PDO(index)|| IS_TX_PDO(index) || (index == 0xF030))
 8005648:	89fb      	ldrh	r3, [r7, #14]
 800564a:	f641 422f 	movw	r2, #7215	@ 0x1c2f
 800564e:	4293      	cmp	r3, r2
 8005650:	d914      	bls.n	800567c <OBJ_Write+0x15c>
 8005652:	89fb      	ldrh	r3, [r7, #14]
 8005654:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
 8005658:	d303      	bcc.n	8005662 <OBJ_Write+0x142>
 800565a:	89fb      	ldrh	r3, [r7, #14]
 800565c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8005660:	d30c      	bcc.n	800567c <OBJ_Write+0x15c>
 8005662:	89fb      	ldrh	r3, [r7, #14]
 8005664:	f5b3 5fd0 	cmp.w	r3, #6656	@ 0x1a00
 8005668:	d303      	bcc.n	8005672 <OBJ_Write+0x152>
 800566a:	89fb      	ldrh	r3, [r7, #14]
 800566c:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8005670:	d304      	bcc.n	800567c <OBJ_Write+0x15c>
 8005672:	89fb      	ldrh	r3, [r7, #14]
 8005674:	f24f 0230 	movw	r2, #61488	@ 0xf030
 8005678:	4293      	cmp	r3, r2
 800567a:	d10a      	bne.n	8005692 <OBJ_Write+0x172>
        )
    {
        /*Check if Subindex0 was cleared before*/
        UINT16 Subindex0 = (*(UINT16 *)pObjEntry->pVarPtr) & 0x00FF;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	837b      	strh	r3, [r7, #26]
        if(Subindex0 != 0x00)
 8005686:	8b7b      	ldrh	r3, [r7, #26]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <OBJ_Write+0x172>
        {
            bClearSubindex0Required = TRUE;
 800568c:	2301      	movs	r3, #1
 800568e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }
    }

    if ( pObjEntry->Write != NULL )
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d01d      	beq.n	80056d6 <OBJ_Write+0x1b6>
    {
        /* Write function is defined, we call the object specific write function */
        /* ECATCHANGE_START(V5.13) COE4*/
        UINT8 result = 0;
 800569a:	2300      	movs	r3, #0
 800569c:	747b      	strb	r3, [r7, #17]

        result = pObjEntry->Write(index, subindex, dataSize, pData, bCompleteAccess);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1c      	ldr	r4, [r3, #32]
 80056a2:	7b79      	ldrb	r1, [r7, #13]
 80056a4:	89f8      	ldrh	r0, [r7, #14]
 80056a6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	47a0      	blx	r4
 80056b2:	4603      	mov	r3, r0
 80056b4:	747b      	strb	r3, [r7, #17]

        if ((result == 0) && (pAPPL_CoeWriteInd != NULL))
 80056b6:	7c7b      	ldrb	r3, [r7, #17]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <OBJ_Write+0x1b2>
 80056bc:	4b68      	ldr	r3, [pc, #416]	@ (8005860 <OBJ_Write+0x340>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d006      	beq.n	80056d2 <OBJ_Write+0x1b2>
        {
            pAPPL_CoeWriteInd(index, subindex, bCompleteAccess);
 80056c4:	4b66      	ldr	r3, [pc, #408]	@ (8005860 <OBJ_Write+0x340>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 80056cc:	7b79      	ldrb	r1, [r7, #13]
 80056ce:	89f8      	ldrh	r0, [r7, #14]
 80056d0:	4798      	blx	r3
        }
        
        return result;
 80056d2:	7c7b      	ldrb	r3, [r7, #17]
 80056d4:	e2f5      	b.n	8005cc2 <OBJ_Write+0x7a2>
        /* ECATCHANGE_END(V5.13) COE4*/
    }
    else
    {
        UINT8 bWritten = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        UINT8 result = ABORTIDX_READ_ONLY_ENTRY;
 80056dc:	2307      	movs	r3, #7
 80056de:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        if (dataSize == 0)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <OBJ_Write+0x1cc>
        {
           return 0; //no error
 80056e8:	2300      	movs	r3, #0
 80056ea:	e2ea      	b.n	8005cc2 <OBJ_Write+0x7a2>
        }

        /* we use the standard write function */
        for (i = subindex; i <= lastSubindex; i++)
 80056ec:	7b7b      	ldrb	r3, [r7, #13]
 80056ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80056f0:	e2cf      	b.n	8005c92 <OBJ_Write+0x772>
        {
            /* if only a single entry is requested, this loop will only be done once */
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	62bb      	str	r3, [r7, #40]	@ 0x28
            UINT16 bitOffset = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	833b      	strh	r3, [r7, #24]

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry,(UINT8) i);
 80056fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	4619      	mov	r1, r3
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7ff f98c 	bl	8004a20 <OBJ_GetEntryDesc>
 8005708:	61f8      	str	r0, [r7, #28]

            /*Get the bitOffset before check the access rights to calculate pData offset*/
            bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 800570a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800570c:	b2db      	uxtb	r3, r3
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff f9bd 	bl	8004a90 <OBJ_GetEntryOffset>
 8005716:	4603      	mov	r3, r0
 8005718:	833b      	strh	r3, [r7, #24]

            /* we check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
               by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
            if (0 != (((UINT8)((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) & (nAlStatus & STATE_MASK) ))
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	889b      	ldrh	r3, [r3, #4]
 800571e:	109b      	asrs	r3, r3, #2
 8005720:	b2db      	uxtb	r3, r3
 8005722:	f003 020e 	and.w	r2, r3, #14
 8005726:	4b4d      	ldr	r3, [pc, #308]	@ (800585c <OBJ_Write+0x33c>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8287 	beq.w	8005c44 <OBJ_Write+0x724>
            {
                /* we have write access for this entry */
                if (i != 0)
 8005736:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005738:	2b00      	cmp	r3, #0
 800573a:	d006      	beq.n	800574a <OBJ_Write+0x22a>
                {
                    /* we increment the variable pointer to the corresponding word address */
                    pVarPtr += (bitOffset >> 4);
 800573c:	8b3b      	ldrh	r3, [r7, #24]
 800573e:	091b      	lsrs	r3, r3, #4
 8005740:	b29b      	uxth	r3, r3
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005746:	4413      	add	r3, r2
 8005748:	62bb      	str	r3, [r7, #40]	@ 0x28
                }


                if ( i == subindex                                     /* requested entry */
 800574a:	7b7b      	ldrb	r3, [r7, #13]
 800574c:	b29b      	uxth	r3, r3
 800574e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005750:	429a      	cmp	r2, r3
 8005752:	d00a      	beq.n	800576a <OBJ_Write+0x24a>
                  || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 8005754:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8297 	beq.w	8005c8c <OBJ_Write+0x76c>
 800575e:	7b7b      	ldrb	r3, [r7, #13]
 8005760:	b29b      	uxth	r3, r3
 8005762:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005764:	429a      	cmp	r2, r3
 8005766:	f0c0 8291 	bcc.w	8005c8c <OBJ_Write+0x76c>
                {
                    UINT16 bitMask;

                    /* we have to copy the entry */
                    if (i == 0 && objCode != OBJCODE_VAR)
 800576a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800576c:	2b00      	cmp	r3, #0
 800576e:	d115      	bne.n	800579c <OBJ_Write+0x27c>
 8005770:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005774:	2b07      	cmp	r3, #7
 8005776:	d011      	beq.n	800579c <OBJ_Write+0x27c>
                    {
                        /*check if the value for subindex0 is valid */
                        UINT8 NewSubindex0 = (UINT8) SWAPWORD(pData[0]);
 8005778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	75fb      	strb	r3, [r7, #23]
                        
                        if(maxConfiguredSubindex < NewSubindex0)
 800577e:	7dfb      	ldrb	r3, [r7, #23]
 8005780:	b29b      	uxth	r3, r3
 8005782:	8c3a      	ldrh	r2, [r7, #32]
 8005784:	429a      	cmp	r2, r3
 8005786:	d201      	bcs.n	800578c <OBJ_Write+0x26c>
                        {
                            return ABORTIDX_VALUE_TOO_GREAT;
 8005788:	2313      	movs	r3, #19
 800578a:	e29a      	b.n	8005cc2 <OBJ_Write+0x7a2>
                        }

                        /* subindex 0 of an array or record shall be written */
                        pVarPtr[0] = SWAPWORD(pData[0]);
 800578c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800578e:	881a      	ldrh	r2, [r3, #0]
 8005790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005792:	801a      	strh	r2, [r3, #0]
                        /* we increment the destination pointer by 2 because the subindex 0 will be
                           transmitted as UINT16 for a complete access */
                        pData++;
 8005794:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005796:	3302      	adds	r3, #2
 8005798:	64bb      	str	r3, [r7, #72]	@ 0x48
                    {
 800579a:	e24f      	b.n	8005c3c <OBJ_Write+0x71c>
                    }
                    else
                    {
                        UINT16 dataType = pEntry->DataType;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        if (pEntry->DataType >= 0x700)
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057aa:	d315      	bcc.n	80057d8 <OBJ_Write+0x2b8>
                        {
                            /* the ENUM data types are defined from index 0x700 in this example
                               convert in standard data type for the write access */
                            if ( pEntry->BitLength <= 8 )
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	885b      	ldrh	r3, [r3, #2]
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d804      	bhi.n	80057be <OBJ_Write+0x29e>
                            {
                                dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	885b      	ldrh	r3, [r3, #2]
 80057b8:	332f      	adds	r3, #47	@ 0x2f
 80057ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80057bc:	e00c      	b.n	80057d8 <OBJ_Write+0x2b8>
                            }
                            else if ( pEntry->BitLength == 16 )
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	885b      	ldrh	r3, [r3, #2]
 80057c2:	2b10      	cmp	r3, #16
 80057c4:	d102      	bne.n	80057cc <OBJ_Write+0x2ac>
                            {
                                dataType = DEFTYPE_UNSIGNED16;
 80057c6:	2306      	movs	r3, #6
 80057c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80057ca:	e005      	b.n	80057d8 <OBJ_Write+0x2b8>
                            }
                            else if ( pEntry->BitLength == 32 )
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	885b      	ldrh	r3, [r3, #2]
 80057d0:	2b20      	cmp	r3, #32
 80057d2:	d101      	bne.n	80057d8 <OBJ_Write+0x2b8>
                            {
                                dataType = DEFTYPE_UNSIGNED32;
 80057d4:	2307      	movs	r3, #7
 80057d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
                            }
                        }

                        switch (dataType)
 80057d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80057da:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80057de:	f280 822a 	bge.w	8005c36 <OBJ_Write+0x716>
 80057e2:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80057e6:	f280 820b 	bge.w	8005c00 <OBJ_Write+0x6e0>
 80057ea:	2b37      	cmp	r3, #55	@ 0x37
 80057ec:	f300 8223 	bgt.w	8005c36 <OBJ_Write+0x716>
 80057f0:	2b1e      	cmp	r3, #30
 80057f2:	da10      	bge.n	8005816 <OBJ_Write+0x2f6>
 80057f4:	2b1b      	cmp	r3, #27
 80057f6:	f300 821e 	bgt.w	8005c36 <OBJ_Write+0x716>
 80057fa:	2b09      	cmp	r3, #9
 80057fc:	da38      	bge.n	8005870 <OBJ_Write+0x350>
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 8085 	beq.w	800590e <OBJ_Write+0x3ee>
 8005804:	2b00      	cmp	r3, #0
 8005806:	f2c0 8216 	blt.w	8005c36 <OBJ_Write+0x716>
 800580a:	2b08      	cmp	r3, #8
 800580c:	f300 8213 	bgt.w	8005c36 <OBJ_Write+0x716>
 8005810:	2b00      	cmp	r3, #0
 8005812:	dc5b      	bgt.n	80058cc <OBJ_Write+0x3ac>
 8005814:	e20f      	b.n	8005c36 <OBJ_Write+0x716>
 8005816:	3b1e      	subs	r3, #30
 8005818:	2201      	movs	r2, #1
 800581a:	fa02 f303 	lsl.w	r3, r2, r3
 800581e:	4a11      	ldr	r2, [pc, #68]	@ (8005864 <OBJ_Write+0x344>)
 8005820:	401a      	ands	r2, r3
 8005822:	2a00      	cmp	r2, #0
 8005824:	bf14      	ite	ne
 8005826:	2201      	movne	r2, #1
 8005828:	2200      	moveq	r2, #0
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	2a00      	cmp	r2, #0
 800582e:	f040 8090 	bne.w	8005952 <OBJ_Write+0x432>
 8005832:	4a0d      	ldr	r2, [pc, #52]	@ (8005868 <OBJ_Write+0x348>)
 8005834:	401a      	ands	r2, r3
 8005836:	2a00      	cmp	r2, #0
 8005838:	bf14      	ite	ne
 800583a:	2201      	movne	r2, #1
 800583c:	2200      	moveq	r2, #0
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	2a00      	cmp	r2, #0
 8005842:	f040 8172 	bne.w	8005b2a <OBJ_Write+0x60a>
 8005846:	4a09      	ldr	r2, [pc, #36]	@ (800586c <OBJ_Write+0x34c>)
 8005848:	401a      	ands	r2, r3
 800584a:	2a00      	cmp	r2, #0
 800584c:	bf14      	ite	ne
 800584e:	2301      	movne	r3, #1
 8005850:	2300      	moveq	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	f040 80da 	bne.w	8005a0e <OBJ_Write+0x4ee>
 800585a:	e1ec      	b.n	8005c36 <OBJ_Write+0x716>
 800585c:	24000942 	.word	0x24000942
 8005860:	24000858 	.word	0x24000858
 8005864:	03fc8001 	.word	0x03fc8001
 8005868:	00020004 	.word	0x00020004
 800586c:	00010002 	.word	0x00010002
 8005870:	3b09      	subs	r3, #9
 8005872:	2b12      	cmp	r3, #18
 8005874:	f200 81df 	bhi.w	8005c36 <OBJ_Write+0x716>
 8005878:	a201      	add	r2, pc, #4	@ (adr r2, 8005880 <OBJ_Write+0x360>)
 800587a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587e:	bf00      	nop
 8005880:	08005bb7 	.word	0x08005bb7
 8005884:	08005c01 	.word	0x08005c01
 8005888:	08005c01 	.word	0x08005c01
 800588c:	08005c37 	.word	0x08005c37
 8005890:	08005c37 	.word	0x08005c37
 8005894:	08005c37 	.word	0x08005c37
 8005898:	08005c37 	.word	0x08005c37
 800589c:	08005c37 	.word	0x08005c37
 80058a0:	08005b7b 	.word	0x08005b7b
 80058a4:	08005c37 	.word	0x08005c37
 80058a8:	08005c37 	.word	0x08005c37
 80058ac:	08005c37 	.word	0x08005c37
 80058b0:	08005b7b 	.word	0x08005b7b
 80058b4:	08005c37 	.word	0x08005c37
 80058b8:	08005c37 	.word	0x08005c37
 80058bc:	08005c37 	.word	0x08005c37
 80058c0:	08005c37 	.word	0x08005c37
 80058c4:	08005c37 	.word	0x08005c37
 80058c8:	08005b7b 	.word	0x08005b7b
 80058cc:	461a      	mov	r2, r3
 80058ce:	2301      	movs	r3, #1
 80058d0:	4093      	lsls	r3, r2
 80058d2:	f403 72c8 	and.w	r2, r3, #400	@ 0x190
 80058d6:	2a00      	cmp	r2, #0
 80058d8:	bf14      	ite	ne
 80058da:	2201      	movne	r2, #1
 80058dc:	2200      	moveq	r2, #0
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	2a00      	cmp	r2, #0
 80058e2:	f040 8122 	bne.w	8005b2a <OBJ_Write+0x60a>
 80058e6:	f003 0226 	and.w	r2, r3, #38	@ 0x26
 80058ea:	2a00      	cmp	r2, #0
 80058ec:	bf14      	ite	ne
 80058ee:	2201      	movne	r2, #1
 80058f0:	2200      	moveq	r2, #0
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	2a00      	cmp	r2, #0
 80058f6:	d12c      	bne.n	8005952 <OBJ_Write+0x432>
 80058f8:	f003 0348 	and.w	r3, r3, #72	@ 0x48
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	bf14      	ite	ne
 8005900:	2301      	movne	r3, #1
 8005902:	2300      	moveq	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	f040 8081 	bne.w	8005a0e <OBJ_Write+0x4ee>
 800590c:	e193      	b.n	8005c36 <OBJ_Write+0x716>
                        {
                        case DEFTYPE_NULL:
                            if(bCompleteAccess)
 800590e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8005912:	2b00      	cmp	r3, #0
 8005914:	d01b      	beq.n	800594e <OBJ_Write+0x42e>
                            {
                                /*Handle alignment entry*/
                                if (((pEntry->BitLength & 0xF) > 0)
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	885b      	ldrh	r3, [r3, #2]
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	2b00      	cmp	r3, #0
 8005920:	dd0b      	ble.n	800593a <OBJ_Write+0x41a>
                                    && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	885a      	ldrh	r2, [r3, #2]
 8005926:	8b3b      	ldrh	r3, [r7, #24]
 8005928:	4413      	add	r3, r2
 800592a:	b29b      	uxth	r3, r3
 800592c:	f003 030f 	and.w	r3, r3, #15
 8005930:	2b00      	cmp	r3, #0
 8005932:	d102      	bne.n	800593a <OBJ_Write+0x41a>
                                {
                                    /* we have reached the UINT16 border */
                                    pData++;
 8005934:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005936:	3302      	adds	r3, #2
 8005938:	64bb      	str	r3, [r7, #72]	@ 0x48
                                }

                                /*increment WORD offset*/
                                pData += ((pEntry->BitLength & 0xF0) >> 4);
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	885b      	ldrh	r3, [r3, #2]
 800593e:	111b      	asrs	r3, r3, #4
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005948:	4413      	add	r3, r2
 800594a:	64bb      	str	r3, [r7, #72]	@ 0x48
                            }
                            else
                            {
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                            }
                            break;
 800594c:	e176      	b.n	8005c3c <OBJ_Write+0x71c>
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 800594e:	2318      	movs	r3, #24
 8005950:	e1b7      	b.n	8005cc2 <OBJ_Write+0x7a2>
                        case    DEFTYPE_INTEGER8:
                        case    DEFTYPE_UNSIGNED8:
                        case    DEFTYPE_BYTE :
                        {
                            /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                            UINT16 TmpValue = 0x0000;
 8005952:	2300      	movs	r3, #0
 8005954:	84bb      	strh	r3, [r7, #36]	@ 0x24

                            bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	885b      	ldrh	r3, [r3, #2]
 800595a:	461a      	mov	r2, r3
 800595c:	4b99      	ldr	r3, [pc, #612]	@ (8005bc4 <OBJ_Write+0x6a4>)
 800595e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005962:	461a      	mov	r2, r3
 8005964:	8b3b      	ldrh	r3, [r7, #24]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	827b      	strh	r3, [r7, #18]

                            /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                            TmpValue = SWAPWORD(pVarPtr[0]);
 8005970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	84bb      	strh	r3, [r7, #36]	@ 0x24

                            /*Clear corresponding bits*/
                            TmpValue &= ~bitMask;
 8005976:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800597a:	43db      	mvns	r3, r3
 800597c:	b21a      	sxth	r2, r3
 800597e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005982:	4013      	ands	r3, r2
 8005984:	b21b      	sxth	r3, r3
 8005986:	84bb      	strh	r3, [r7, #36]	@ 0x24

                            if (bCompleteAccess) 
 8005988:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <OBJ_Write+0x482>
                            {
                                /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                TmpValue |= (SWAPWORD(pData[0]) & bitMask);
 8005990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005992:	881a      	ldrh	r2, [r3, #0]
 8005994:	8a7b      	ldrh	r3, [r7, #18]
 8005996:	4013      	ands	r3, r2
 8005998:	b29a      	uxth	r2, r3
 800599a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800599c:	4313      	orrs	r3, r2
 800599e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80059a0:	e024      	b.n	80059ec <OBJ_Write+0x4cc>
                            }
                            else
                            {
                                if((SWAPWORD(pData[0]) & ~cBitMask[pEntry->BitLength]))
 80059a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	885b      	ldrh	r3, [r3, #2]
 80059ac:	4619      	mov	r1, r3
 80059ae:	4b85      	ldr	r3, [pc, #532]	@ (8005bc4 <OBJ_Write+0x6a4>)
 80059b0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80059b4:	43db      	mvns	r3, r3
 80059b6:	4013      	ands	r3, r2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <OBJ_Write+0x4a0>
                                {
                                    /*written value exceed entry range*/
                                    return ABORTIDX_VALUE_EXCEEDED;
 80059bc:	2312      	movs	r3, #18
 80059be:	e180      	b.n	8005cc2 <OBJ_Write+0x7a2>
                                }
                                else
                                {
                                    /*Shift Bits to corresponding offset within the object memory*/
                                    TmpValue |= ((SWAPWORD(pData[0]) & cBitMask[pEntry->BitLength]) << (bitOffset & 0x0F));
 80059c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059c2:	881a      	ldrh	r2, [r3, #0]
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	885b      	ldrh	r3, [r3, #2]
 80059c8:	4619      	mov	r1, r3
 80059ca:	4b7e      	ldr	r3, [pc, #504]	@ (8005bc4 <OBJ_Write+0x6a4>)
 80059cc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80059d0:	4013      	ands	r3, r2
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	8b3b      	ldrh	r3, [r7, #24]
 80059d8:	f003 030f 	and.w	r3, r3, #15
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	b21a      	sxth	r2, r3
 80059e2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80059e6:	4313      	orrs	r3, r2
 80059e8:	b21b      	sxth	r3, r3
 80059ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
                                }
                            }

                            /*Swap written data to big endian format (if required)*/
                            pVarPtr[0] = SWAPWORD(TmpValue);
 80059ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80059f0:	801a      	strh	r2, [r3, #0]

                            if ( ((bitOffset+pEntry->BitLength) & 0x0F) == 0 )
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	885a      	ldrh	r2, [r3, #2]
 80059f6:	8b3b      	ldrh	r3, [r7, #24]
 80059f8:	4413      	add	r3, r2
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f040 811a 	bne.w	8005c3a <OBJ_Write+0x71a>
                            {
                                /* we have reached the UINT16 border */
                                pData++;
 8005a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a08:	3302      	adds	r3, #2
 8005a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
                            }
                        }
                            break;
 8005a0c:	e115      	b.n	8005c3a <OBJ_Write+0x71a>
                        case    DEFTYPE_INTEGER16:
                        case    DEFTYPE_UNSIGNED16:
                        case    DEFTYPE_BITARR16:
                        case    DEFTYPE_WORD:
                            if(bitOffset & 0xF)
 8005a0e:	8b3b      	ldrh	r3, [r7, #24]
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <OBJ_Write+0x4fc>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8005a18:	2305      	movs	r3, #5
 8005a1a:	e152      	b.n	8005cc2 <OBJ_Write+0x7a2>
                            }

                            {
                            /* in this example the objects are defined in that way,
                            that the 16 bit type are always starting at an exact WORD offset */
                            UINT16 u16NewData = SWAPWORD(pData[0]);
 8005a1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	82bb      	strh	r3, [r7, #20]
                            if(bClearSubindex0Required && (pVarPtr[0] != u16NewData))
 8005a22:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d006      	beq.n	8005a38 <OBJ_Write+0x518>
 8005a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	8aba      	ldrh	r2, [r7, #20]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d001      	beq.n	8005a38 <OBJ_Write+0x518>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 8005a34:	231c      	movs	r3, #28
 8005a36:	e144      	b.n	8005cc2 <OBJ_Write+0x7a2>
                            }

                            /*check value if a new PDO assign entry should be written*/
                            if(IS_PDO_ASSIGN(index))  //PDO assign
 8005a38:	89fb      	ldrh	r3, [r7, #14]
 8005a3a:	f641 420f 	movw	r2, #7183	@ 0x1c0f
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d919      	bls.n	8005a76 <OBJ_Write+0x556>
 8005a42:	89fb      	ldrh	r3, [r7, #14]
 8005a44:	f641 422f 	movw	r2, #7215	@ 0x1c2f
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d814      	bhi.n	8005a76 <OBJ_Write+0x556>
                            {
                                if (!IS_RX_PDO(u16NewData) && !IS_TX_PDO(u16NewData) && (u16NewData != 0)) //check if the new assign entry value is valid
 8005a4c:	8abb      	ldrh	r3, [r7, #20]
 8005a4e:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
 8005a52:	d303      	bcc.n	8005a5c <OBJ_Write+0x53c>
 8005a54:	8abb      	ldrh	r3, [r7, #20]
 8005a56:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8005a5a:	d30c      	bcc.n	8005a76 <OBJ_Write+0x556>
 8005a5c:	8abb      	ldrh	r3, [r7, #20]
 8005a5e:	f5b3 5fd0 	cmp.w	r3, #6656	@ 0x1a00
 8005a62:	d303      	bcc.n	8005a6c <OBJ_Write+0x54c>
 8005a64:	8abb      	ldrh	r3, [r7, #20]
 8005a66:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8005a6a:	d304      	bcc.n	8005a76 <OBJ_Write+0x556>
 8005a6c:	8abb      	ldrh	r3, [r7, #20]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <OBJ_Write+0x556>
                                {
                                    return ABORTIDX_VALUE_EXCEEDED;
 8005a72:	2312      	movs	r3, #18
 8005a74:	e125      	b.n	8005cc2 <OBJ_Write+0x7a2>
                                }
                            }

                            if(index == 0x1C32 || index == 0x1C33)
 8005a76:	89fb      	ldrh	r3, [r7, #14]
 8005a78:	f641 4232 	movw	r2, #7218	@ 0x1c32
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d004      	beq.n	8005a8a <OBJ_Write+0x56a>
 8005a80:	89fb      	ldrh	r3, [r7, #14]
 8005a82:	f641 4233 	movw	r2, #7219	@ 0x1c33
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d148      	bne.n	8005b1c <OBJ_Write+0x5fc>
                            {
                               if (i == 1) /* "Synchronisation type" written */
 8005a8a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d117      	bne.n	8005ac0 <OBJ_Write+0x5a0>
                               {
                                  /* The Synchronisation type (0x1C3x.1) was written by the user => the Sync type will not be calculated based on the register settings (if they don't match an error will be returned P_2_S)*/
                                  if (pVarPtr[0] != u16NewData)
 8005a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	8aba      	ldrh	r2, [r7, #20]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d00f      	beq.n	8005aba <OBJ_Write+0x59a>
                                  {
                                     result = CheckSyncTypeValue(index, u16NewData);
 8005a9a:	8aba      	ldrh	r2, [r7, #20]
 8005a9c:	89fb      	ldrh	r3, [r7, #14]
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff f8eb 	bl	8004c7c <CheckSyncTypeValue>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

                                     if (result != 0)
 8005aac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <OBJ_Write+0x59a>
                                     {
                                        return result;
 8005ab4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ab8:	e103      	b.n	8005cc2 <OBJ_Write+0x7a2>
                                     }
                                  }

                                  /* The user may force to current Sync Mode for that reason the flag has also to be set if the same value was written */
                                  bSyncSetByUser = TRUE;
 8005aba:	4b43      	ldr	r3, [pc, #268]	@ (8005bc8 <OBJ_Write+0x6a8>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	701a      	strb	r2, [r3, #0]
                               }

                               if (i == 8) /* "Get Cycle Time" written*/
 8005ac0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d12a      	bne.n	8005b1c <OBJ_Write+0x5fc>
                               {

                                   sSyncManOutPar.u32CalcAndCopyTime = (PD_OUTPUT_CALC_AND_COPY_TIME);
 8005ac6:	4b41      	ldr	r3, [pc, #260]	@ (8005bcc <OBJ_Write+0x6ac>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	615a      	str	r2, [r3, #20]
                                   sSyncManOutPar.u32MinCycleTime = (MIN_PD_CYCLE_TIME);
 8005acc:	4b3f      	ldr	r3, [pc, #252]	@ (8005bcc <OBJ_Write+0x6ac>)
 8005ace:	4a40      	ldr	r2, [pc, #256]	@ (8005bd0 <OBJ_Write+0x6b0>)
 8005ad0:	611a      	str	r2, [r3, #16]
                                   sSyncManOutPar.u32CycleTime = 0;
 8005ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8005bcc <OBJ_Write+0x6ac>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	605a      	str	r2, [r3, #4]

                                   sSyncManInPar.u32CalcAndCopyTime = (PD_INPUT_CALC_AND_COPY_TIME);
 8005ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8005bd4 <OBJ_Write+0x6b4>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	615a      	str	r2, [r3, #20]
                                   sSyncManInPar.u32MinCycleTime = (MIN_PD_CYCLE_TIME);
 8005ade:	4b3d      	ldr	r3, [pc, #244]	@ (8005bd4 <OBJ_Write+0x6b4>)
 8005ae0:	4a3b      	ldr	r2, [pc, #236]	@ (8005bd0 <OBJ_Write+0x6b0>)
 8005ae2:	611a      	str	r2, [r3, #16]
                                   sSyncManInPar.u32CycleTime = 0;
 8005ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8005bd4 <OBJ_Write+0x6b4>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	605a      	str	r2, [r3, #4]


                                  if ((u16NewData & 0x2) == 0x2)
 8005aea:	8abb      	ldrh	r3, [r7, #20]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d013      	beq.n	8005b1c <OBJ_Write+0x5fc>
                                  {
                                     /* reset the error counters*/
                                     sSyncManOutPar.u16CycleExceededCounter = 0;
 8005af4:	4b35      	ldr	r3, [pc, #212]	@ (8005bcc <OBJ_Write+0x6ac>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
                                     sSyncManOutPar.u16SmEventMissedCounter = 0;
 8005afa:	4b34      	ldr	r3, [pc, #208]	@ (8005bcc <OBJ_Write+0x6ac>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	851a      	strh	r2, [r3, #40]	@ 0x28
                                     sSyncManOutPar.u8SyncError = 0;
 8005b00:	4b32      	ldr	r3, [pc, #200]	@ (8005bcc <OBJ_Write+0x6ac>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

                                     sSyncManInPar.u16CycleExceededCounter = 0;
 8005b08:	4b32      	ldr	r3, [pc, #200]	@ (8005bd4 <OBJ_Write+0x6b4>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
                                     sSyncManInPar.u16SmEventMissedCounter = 0;
 8005b0e:	4b31      	ldr	r3, [pc, #196]	@ (8005bd4 <OBJ_Write+0x6b4>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	851a      	strh	r2, [r3, #40]	@ 0x28
                                     sSyncManInPar.u8SyncError = 0;
 8005b14:	4b2f      	ldr	r3, [pc, #188]	@ (8005bd4 <OBJ_Write+0x6b4>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                                  }
                               } /* Subindex 8 written*/
                            }

                            pVarPtr[0] = u16NewData;
 8005b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1e:	8aba      	ldrh	r2, [r7, #20]
 8005b20:	801a      	strh	r2, [r3, #0]
                            pData++;
 8005b22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b24:	3302      	adds	r3, #2
 8005b26:	64bb      	str	r3, [r7, #72]	@ 0x48
                            }
                            break;
 8005b28:	e088      	b.n	8005c3c <OBJ_Write+0x71c>
                        case    DEFTYPE_UNSIGNED32:
                        case    DEFTYPE_INTEGER32:
                        case    DEFTYPE_REAL32:
                        case    DEFTYPE_BITARR32:
                        case    DEFTYPE_DWORD:
                            if(bitOffset & 0xF)
 8005b2a:	8b3b      	ldrh	r3, [r7, #24]
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <OBJ_Write+0x618>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8005b34:	2305      	movs	r3, #5
 8005b36:	e0c4      	b.n	8005cc2 <OBJ_Write+0x7a2>
                            }
                            {

                            /* in this example the objects are defined in that way,
                               that the 32 bit type are always starting at an exact WORD offset */
                            if(bClearSubindex0Required && 
 8005b38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00f      	beq.n	8005b60 <OBJ_Write+0x640>
                                ((pVarPtr[0] != pData[0])
 8005b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b42:	881a      	ldrh	r2, [r3, #0]
 8005b44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b46:	881b      	ldrh	r3, [r3, #0]
                            if(bClearSubindex0Required && 
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d107      	bne.n	8005b5c <OBJ_Write+0x63c>
                                || (pVarPtr[1] != pData[1])))
 8005b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4e:	3302      	adds	r3, #2
 8005b50:	881a      	ldrh	r2, [r3, #0]
 8005b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b54:	3302      	adds	r3, #2
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d001      	beq.n	8005b60 <OBJ_Write+0x640>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 8005b5c:	231c      	movs	r3, #28
 8005b5e:	e0b0      	b.n	8005cc2 <OBJ_Write+0x7a2>
                            }

                            pVarPtr[0] = pData[0];
 8005b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b62:	881a      	ldrh	r2, [r3, #0]
 8005b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b66:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 8005b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6a:	3302      	adds	r3, #2
 8005b6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b6e:	8852      	ldrh	r2, [r2, #2]
 8005b70:	801a      	strh	r2, [r3, #0]
                            pData += 2;
 8005b72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b74:	3304      	adds	r3, #4
 8005b76:	64bb      	str	r3, [r7, #72]	@ 0x48
                            }
                            break;
 8005b78:	e060      	b.n	8005c3c <OBJ_Write+0x71c>
                        case    DEFTYPE_REAL64:
                        case 	DEFTYPE_INTEGER64:
                        case    DEFTYPE_UNSIGNED64:
                            if(bitOffset & 0xF)
 8005b7a:	8b3b      	ldrh	r3, [r7, #24]
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <OBJ_Write+0x668>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8005b84:	2305      	movs	r3, #5
 8005b86:	e09c      	b.n	8005cc2 <OBJ_Write+0x7a2>
                            }
                            /* in this example the objects are defined in that way,
                               that the 64 bit type are always starting at an exact WORD offset */
                            pVarPtr[0] = pData[0];
 8005b88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b8a:	881a      	ldrh	r2, [r3, #0]
 8005b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8e:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 8005b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b92:	3302      	adds	r3, #2
 8005b94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b96:	8852      	ldrh	r2, [r2, #2]
 8005b98:	801a      	strh	r2, [r3, #0]
                            pVarPtr[2] = pData[2];
 8005b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ba0:	8892      	ldrh	r2, [r2, #4]
 8005ba2:	801a      	strh	r2, [r3, #0]
                            pVarPtr[3] = pData[3];
 8005ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba6:	3306      	adds	r3, #6
 8005ba8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005baa:	88d2      	ldrh	r2, [r2, #6]
 8005bac:	801a      	strh	r2, [r3, #0]
                            pData += 4;
 8005bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
                            break;
 8005bb4:	e042      	b.n	8005c3c <OBJ_Write+0x71c>
                        case    DEFTYPE_VISIBLESTRING:
                            if(bitOffset & 0xF)
 8005bb6:	8b3b      	ldrh	r3, [r7, #24]
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <OBJ_Write+0x6b8>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8005bc0:	2305      	movs	r3, #5
 8005bc2:	e07e      	b.n	8005cc2 <OBJ_Write+0x7a2>
 8005bc4:	0800cd60 	.word	0x0800cd60
 8005bc8:	240009e5 	.word	0x240009e5
 8005bcc:	240009ec 	.word	0x240009ec
 8005bd0:	0007a120 	.word	0x0007a120
 8005bd4:	24000a30 	.word	0x24000a30
                            }

                            OBJTOMBXSTRCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	885b      	ldrh	r3, [r3, #2]
 8005bdc:	3307      	adds	r3, #7
 8005bde:	10db      	asrs	r3, r3, #3
 8005be0:	461a      	mov	r2, r3
 8005be2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005be4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005be6:	f006 fd59 	bl	800c69c <memcpy>

                            pData += BIT2WORD((pEntry->BitLength)& ~0xF);
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	885b      	ldrh	r3, [r3, #2]
 8005bee:	f023 030f 	bic.w	r3, r3, #15
 8005bf2:	330f      	adds	r3, #15
 8005bf4:	111b      	asrs	r3, r3, #4
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bfa:	4413      	add	r3, r2
 8005bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
                            break;
 8005bfe:	e01d      	b.n	8005c3c <OBJ_Write+0x71c>
                        case    DEFTYPE_UNICODE_STRING:
                            case DEFTYPE_ARRAY_OF_INT :
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:
                            if(bitOffset & 0xF)
 8005c00:	8b3b      	ldrh	r3, [r7, #24]
 8005c02:	f003 030f 	and.w	r3, r3, #15
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <OBJ_Write+0x6ee>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8005c0a:	2305      	movs	r3, #5
 8005c0c:	e059      	b.n	8005cc2 <OBJ_Write+0x7a2>
                            }

                            /* in this example the objects are defined in that way,
                               that the other types are always starting at an even byte offset */
                            OBJTOMBXMEMCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	885b      	ldrh	r3, [r3, #2]
 8005c12:	3307      	adds	r3, #7
 8005c14:	10db      	asrs	r3, r3, #3
 8005c16:	461a      	mov	r2, r3
 8005c18:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005c1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c1c:	f006 fd3e 	bl	800c69c <memcpy>
                            pData += BIT2WORD((pEntry->BitLength) & ~0xF);
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	885b      	ldrh	r3, [r3, #2]
 8005c24:	f023 030f 	bic.w	r3, r3, #15
 8005c28:	330f      	adds	r3, #15
 8005c2a:	111b      	asrs	r3, r3, #4
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c30:	4413      	add	r3, r2
 8005c32:	64bb      	str	r3, [r7, #72]	@ 0x48

                            break;
 8005c34:	e002      	b.n	8005c3c <OBJ_Write+0x71c>
                        default:
                            /* other data types are not supported from this example */
                            return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8005c36:	2318      	movs	r3, #24
 8005c38:	e043      	b.n	8005cc2 <OBJ_Write+0x7a2>
                            break;
 8005c3a:	bf00      	nop
                        }
                    }

                    /* set flag */
                    bWritten = 1;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005c42:	e023      	b.n	8005c8c <OBJ_Write+0x76c>

                }
            }
            else
            {
                if(i == 0)
 8005c44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d103      	bne.n	8005c52 <OBJ_Write+0x732>
                {
                    /* For SubIndex0 16Bit are reserved even if the BitLength is 8 */
                    pData++;
 8005c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c4c:	3302      	adds	r3, #2
 8005c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c50:	e019      	b.n	8005c86 <OBJ_Write+0x766>
                }
                else
                {
                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	885b      	ldrh	r3, [r3, #2]
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	dd0b      	ble.n	8005c76 <OBJ_Write+0x756>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	885a      	ldrh	r2, [r3, #2]
 8005c62:	8b3b      	ldrh	r3, [r7, #24]
 8005c64:	4413      	add	r3, r2
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f003 030f 	and.w	r3, r3, #15
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d102      	bne.n	8005c76 <OBJ_Write+0x756>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 8005c70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c72:	3302      	adds	r3, #2
 8005c74:	64bb      	str	r3, [r7, #72]	@ 0x48
                    }

                    /*increment WORD offset*/
                    pData += ((pEntry->BitLength & 0xFFF0) >> 4);
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	885b      	ldrh	r3, [r3, #2]
 8005c7a:	091b      	lsrs	r3, r3, #4
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c82:	4413      	add	r3, r2
 8005c84:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
                /*If no other entry was written this result will be returned*/
                result = ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8005c86:	2318      	movs	r3, #24
 8005c88:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        for (i = subindex; i <= lastSubindex; i++)
 8005c8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c8e:	3301      	adds	r3, #1
 8005c90:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005c92:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005c94:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005c96:	429a      	cmp	r2, r3
 8005c98:	f67f ad2b 	bls.w	80056f2 <OBJ_Write+0x1d2>
            }
        }

        if (bWritten == 0)
 8005c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d102      	bne.n	8005caa <OBJ_Write+0x78a>
        {
            /* we didn't write anything, so we have to return the stored error code */
            return result;
 8005ca4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ca8:	e00b      	b.n	8005cc2 <OBJ_Write+0x7a2>
        }
    }

    /* ECATCHANGE_START(V5.13) COE4*/
    if (pAPPL_CoeWriteInd != NULL)
 8005caa:	4b08      	ldr	r3, [pc, #32]	@ (8005ccc <OBJ_Write+0x7ac>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d006      	beq.n	8005cc0 <OBJ_Write+0x7a0>
    {
        pAPPL_CoeWriteInd(index, subindex, bCompleteAccess);
 8005cb2:	4b06      	ldr	r3, [pc, #24]	@ (8005ccc <OBJ_Write+0x7ac>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8005cba:	7b79      	ldrb	r1, [r7, #13]
 8005cbc:	89f8      	ldrh	r0, [r7, #14]
 8005cbe:	4798      	blx	r3
    }
    /* ECATCHANGE_END(V5.13) COE4*/

    return 0;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	373c      	adds	r7, #60	@ 0x3c
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd90      	pop	{r4, r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	24000858 	.word	0x24000858

08005cd0 <SdoDownloadSegmentInd>:
			the data will be written to the object dictionary. The
			function sends a response by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoDownloadSegmentInd(TDOWNLOADSDOSEGREQMBX MBXMEM * pSdoInd)
{
 8005cd0:	b5b0      	push	{r4, r5, r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	6078      	str	r0, [r7, #4]
	UINT8 abort = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	75fb      	strb	r3, [r7, #23]
	UINT32 bytesToSave = 0;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	613b      	str	r3, [r7, #16]

	if (SWAPWORD(pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	891b      	ldrh	r3, [r3, #8]
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	4a95      	ldr	r2, [pc, #596]	@ (8005f40 <SdoDownloadSegmentInd+0x270>)
 8005cea:	7812      	ldrb	r2, [r2, #0]
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d102      	bne.n	8005cf6 <SdoDownloadSegmentInd+0x26>
	{
		/* toggle bit has not toggled... */
		abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	75fb      	strb	r3, [r7, #23]
 8005cf4:	e157      	b.n	8005fa6 <SdoDownloadSegmentInd+0x2d6>
	}
	else
	{
		/* maxData contains the maximum data to be received with a SDO-DownloadSegment */
		UINT16 maxData = u16ReceiveMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 8005cf6:	4b93      	ldr	r3, [pc, #588]	@ (8005f44 <SdoDownloadSegmentInd+0x274>)
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	3b09      	subs	r3, #9
 8005cfc:	81bb      	strh	r3, [r7, #12]
		/* the new toggle bit is stored in bSdoSegLastToggle */
		bSdoSegLastToggle = SWAPWORD(pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	891b      	ldrh	r3, [r3, #8]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	4b8d      	ldr	r3, [pc, #564]	@ (8005f40 <SdoDownloadSegmentInd+0x270>)
 8005d0c:	701a      	strb	r2, [r3, #0]

		/* a SDO-Download Segment is only allowed if a SDO-Download Request was received before,
		   in that case a buffer for the received data was allocated in SDOS_SdoInd before */
		if (pSdoSegData)
 8005d0e:	4b8e      	ldr	r3, [pc, #568]	@ (8005f48 <SdoDownloadSegmentInd+0x278>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 8145 	beq.w	8005fa2 <SdoDownloadSegmentInd+0x2d2>
		{
			/* bytesToSave contains the remaining data with this and maybe the following
			   SDO-Download Segment services */
			bytesToSave = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 8005d18:	4b8c      	ldr	r3, [pc, #560]	@ (8005f4c <SdoDownloadSegmentInd+0x27c>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4b8c      	ldr	r3, [pc, #560]	@ (8005f50 <SdoDownloadSegmentInd+0x280>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	613b      	str	r3, [r7, #16]

			if (pSdoInd->SdoHeader.SegHeader & SEGHEADER_NOMOREFOLLOWS)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	891b      	ldrh	r3, [r3, #8]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d02a      	beq.n	8005d86 <SdoDownloadSegmentInd+0xb6>
			{
				/* the last segment is received, check if the length of the remaining data is the
				   same as the length of the received data */
				if (bytesToSave <= maxData)
 8005d30:	89bb      	ldrh	r3, [r7, #12]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d823      	bhi.n	8005d80 <SdoDownloadSegmentInd+0xb0>
				{
					UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	817b      	strh	r3, [r7, #10]

					/* for the check it is distinguished if the remaining bytes are less than 8 (in that
					   case 7 data bytes were sent and the SDO-Download Segment header contains the information
						how much bytes are valid (CAN-compatibility)), otherwise the length has to match exactly
						and the SDO-Download Segment-Headerbyte is ignored */
					if (((bytesToSave <= (UINT32)(mbxSize - SEGMENT_NORM_HEADER_SIZE))
 8005d3e:	897b      	ldrh	r3, [r7, #10]
 8005d40:	3b03      	subs	r3, #3
 8005d42:	461a      	mov	r2, r3
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d80a      	bhi.n	8005d60 <SdoDownloadSegmentInd+0x90>
						&& (bytesToSave == ((UINT16)(MIN_SEGMENTED_DATA - ((pSdoInd->SdoHeader.SegHeader & SEGHEADER_SEGDATASIZE) >> SEGHEADERSHIFT_SEGDATASIZE))))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	891b      	ldrh	r3, [r3, #8]
 8005d4e:	105b      	asrs	r3, r3, #1
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	43db      	mvns	r3, r3
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d008      	beq.n	8005d72 <SdoDownloadSegmentInd+0xa2>
						)
						|| ((bytesToSave > MIN_SEGMENTED_DATA)
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b07      	cmp	r3, #7
 8005d64:	d909      	bls.n	8005d7a <SdoDownloadSegmentInd+0xaa>
							&& (bytesToSave == (UINT32)(mbxSize - SEGMENT_NORM_HEADER_SIZE))
 8005d66:	897b      	ldrh	r3, [r7, #10]
 8005d68:	3b03      	subs	r3, #3
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d103      	bne.n	8005d7a <SdoDownloadSegmentInd+0xaa>
							))
					{
						/* length is correct */
						bSdoSegFollows = FALSE;
 8005d72:	4b78      	ldr	r3, [pc, #480]	@ (8005f54 <SdoDownloadSegmentInd+0x284>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	e011      	b.n	8005d9e <SdoDownloadSegmentInd+0xce>
					}
					else
					{
						abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8005d7a:	230e      	movs	r3, #14
 8005d7c:	75fb      	strb	r3, [r7, #23]
 8005d7e:	e00e      	b.n	8005d9e <SdoDownloadSegmentInd+0xce>
					}
				}
				else
				{
					abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8005d80:	230e      	movs	r3, #14
 8005d82:	75fb      	strb	r3, [r7, #23]
 8005d84:	e00b      	b.n	8005d9e <SdoDownloadSegmentInd+0xce>
				}
			}
			else
			{
				/* its not the last segment */
				bSdoSegFollows = TRUE;
 8005d86:	4b73      	ldr	r3, [pc, #460]	@ (8005f54 <SdoDownloadSegmentInd+0x284>)
 8005d88:	2201      	movs	r2, #1
 8005d8a:	701a      	strb	r2, [r3, #0]
				/* we have to check if we expect less bytes than the maximum size which can be send with a single
				   SDO Download Segment */
				if (bytesToSave <= maxData)
 8005d8c:	89bb      	ldrh	r3, [r7, #12]
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d802      	bhi.n	8005d9a <SdoDownloadSegmentInd+0xca>
				{
					abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8005d94:	230e      	movs	r3, #14
 8005d96:	75fb      	strb	r3, [r7, #23]
 8005d98:	e001      	b.n	8005d9e <SdoDownloadSegmentInd+0xce>
				}
				else
				{
					/* length is okay, bytesToSave contains the data size to be copied */
					bytesToSave = maxData;
 8005d9a:	89bb      	ldrh	r3, [r7, #12]
 8005d9c:	613b      	str	r3, [r7, #16]
				}
			}

			if (abort == 0)
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f040 8100 	bne.w	8005fa6 <SdoDownloadSegmentInd+0x2d6>
			{
				/* the received data is copied in the buffer */
				UINT16 i = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	81fb      	strh	r3, [r7, #14]

				if ((nSdoSegBytesToHandle & 0x1) == 0x01)
 8005daa:	4b69      	ldr	r3, [pc, #420]	@ (8005f50 <SdoDownloadSegmentInd+0x280>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d03c      	beq.n	8005e30 <SdoDownloadSegmentInd+0x160>
				{
					// Data0 will be copied to an odd address of pSdoSegData, Data1 to an even address (Segment 2, 4, ...)
					// Read Data0
					pSdoSegData[(nSdoSegBytesToHandle >> 1)] &= ~SEGHDATA_MASK;
 8005db6:	4b64      	ldr	r3, [pc, #400]	@ (8005f48 <SdoDownloadSegmentInd+0x278>)
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	4b65      	ldr	r3, [pc, #404]	@ (8005f50 <SdoDownloadSegmentInd+0x280>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	4413      	add	r3, r2
 8005dc4:	8819      	ldrh	r1, [r3, #0]
 8005dc6:	4b60      	ldr	r3, [pc, #384]	@ (8005f48 <SdoDownloadSegmentInd+0x278>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	4b61      	ldr	r3, [pc, #388]	@ (8005f50 <SdoDownloadSegmentInd+0x280>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	085b      	lsrs	r3, r3, #1
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	4413      	add	r3, r2
 8005dd4:	b2ca      	uxtb	r2, r1
 8005dd6:	b292      	uxth	r2, r2
 8005dd8:	801a      	strh	r2, [r3, #0]
					pSdoSegData[(nSdoSegBytesToHandle >> 1)] |= (pSdoInd->SdoHeader.SegHeader & SEGHDATA_MASK);
 8005dda:	4b5b      	ldr	r3, [pc, #364]	@ (8005f48 <SdoDownloadSegmentInd+0x278>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b5c      	ldr	r3, [pc, #368]	@ (8005f50 <SdoDownloadSegmentInd+0x280>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	4413      	add	r3, r2
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b21a      	sxth	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	891b      	ldrh	r3, [r3, #8]
 8005df0:	b21b      	sxth	r3, r3
 8005df2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005df6:	b21b      	sxth	r3, r3
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	b219      	sxth	r1, r3
 8005dfc:	4b52      	ldr	r3, [pc, #328]	@ (8005f48 <SdoDownloadSegmentInd+0x278>)
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	4b53      	ldr	r3, [pc, #332]	@ (8005f50 <SdoDownloadSegmentInd+0x280>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	085b      	lsrs	r3, r3, #1
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	4413      	add	r3, r2
 8005e0a:	b28a      	uxth	r2, r1
 8005e0c:	801a      	strh	r2, [r3, #0]
					// Copy Data1 - DataN
					MBXMEMCPY(&pSdoSegData[(nSdoSegBytesToHandle >> 1) + 1], pSdoInd->SdoHeader.Data, bytesToSave - 1);
 8005e0e:	4b4e      	ldr	r3, [pc, #312]	@ (8005f48 <SdoDownloadSegmentInd+0x278>)
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4b4f      	ldr	r3, [pc, #316]	@ (8005f50 <SdoDownloadSegmentInd+0x280>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	085b      	lsrs	r3, r3, #1
 8005e18:	3301      	adds	r3, #1
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	18d0      	adds	r0, r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f103 010a 	add.w	r1, r3, #10
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	461a      	mov	r2, r3
 8005e2a:	f006 fc37 	bl	800c69c <memcpy>
 8005e2e:	e03e      	b.n	8005eae <SdoDownloadSegmentInd+0x1de>
				}
				else
				{
					// Data0 will be copied to an even address of pSdoSegData, Data1 to an odd address (Segment 1, 3,...)
					// Read Data0 and Data1
					pSdoSegData[(nSdoSegBytesToHandle >> 1)] = ((pSdoInd->SdoHeader.SegHeader >> SEGDATASHIFT) &~SEGHDATA_MASK) | ((pSdoInd->SdoHeader.Data[0] << 8) & SEGHDATA_MASK);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	891b      	ldrh	r3, [r3, #8]
 8005e34:	0a1b      	lsrs	r3, r3, #8
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	b21a      	sxth	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	895b      	ldrh	r3, [r3, #10]
 8005e3e:	021b      	lsls	r3, r3, #8
 8005e40:	b21b      	sxth	r3, r3
 8005e42:	4313      	orrs	r3, r2
 8005e44:	b219      	sxth	r1, r3
 8005e46:	4b40      	ldr	r3, [pc, #256]	@ (8005f48 <SdoDownloadSegmentInd+0x278>)
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	4b41      	ldr	r3, [pc, #260]	@ (8005f50 <SdoDownloadSegmentInd+0x280>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	4413      	add	r3, r2
 8005e54:	b28a      	uxth	r2, r1
 8005e56:	801a      	strh	r2, [r3, #0]

					// Copy Data2 - DataN
					for (i = 1; i < ((bytesToSave + 1) >> 1); i++)
 8005e58:	2301      	movs	r3, #1
 8005e5a:	81fb      	strh	r3, [r7, #14]
 8005e5c:	e021      	b.n	8005ea2 <SdoDownloadSegmentInd+0x1d2>
					{
						pSdoSegData[(nSdoSegBytesToHandle >> 1) + i] = ((pSdoInd->SdoHeader.Data[i - 1] >> SEGDATASHIFT) & ~SEGHDATA_MASK) | ((pSdoInd->SdoHeader.Data[i] << 8) & SEGHDATA_MASK);
 8005e5e:	89fb      	ldrh	r3, [r7, #14]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	3304      	adds	r3, #4
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	4413      	add	r3, r2
 8005e6a:	885b      	ldrh	r3, [r3, #2]
 8005e6c:	0a1b      	lsrs	r3, r3, #8
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	b21a      	sxth	r2, r3
 8005e72:	89fb      	ldrh	r3, [r7, #14]
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	3304      	adds	r3, #4
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	440b      	add	r3, r1
 8005e7c:	885b      	ldrh	r3, [r3, #2]
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	b21b      	sxth	r3, r3
 8005e82:	4313      	orrs	r3, r2
 8005e84:	b218      	sxth	r0, r3
 8005e86:	4b30      	ldr	r3, [pc, #192]	@ (8005f48 <SdoDownloadSegmentInd+0x278>)
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	4b31      	ldr	r3, [pc, #196]	@ (8005f50 <SdoDownloadSegmentInd+0x280>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	0859      	lsrs	r1, r3, #1
 8005e90:	89fb      	ldrh	r3, [r7, #14]
 8005e92:	440b      	add	r3, r1
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	4413      	add	r3, r2
 8005e98:	b282      	uxth	r2, r0
 8005e9a:	801a      	strh	r2, [r3, #0]
					for (i = 1; i < ((bytesToSave + 1) >> 1); i++)
 8005e9c:	89fb      	ldrh	r3, [r7, #14]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	81fb      	strh	r3, [r7, #14]
 8005ea2:	89fa      	ldrh	r2, [r7, #14]
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	085b      	lsrs	r3, r3, #1
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d3d7      	bcc.n	8005e5e <SdoDownloadSegmentInd+0x18e>
						// (If bytesToSave is odd, one byte too much is copied. But, that is not a problem.)
					}
				}

				if (bSdoSegFollows == FALSE)
 8005eae:	4b29      	ldr	r3, [pc, #164]	@ (8005f54 <SdoDownloadSegmentInd+0x284>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d177      	bne.n	8005fa6 <SdoDownloadSegmentInd+0x2d6>
				{
					/* it was the last segment, OBJ_Write will called to make the Write-operation */
					abort = OBJ_Write(nSdoSegIndex, nSdoSegSubindex, nSdoSegCompleteSize, pSdoSegObjEntry, (UINT16 MBXMEM *) pSdoSegData, bSdoSegAccess);
 8005eb6:	4b28      	ldr	r3, [pc, #160]	@ (8005f58 <SdoDownloadSegmentInd+0x288>)
 8005eb8:	8818      	ldrh	r0, [r3, #0]
 8005eba:	4b28      	ldr	r3, [pc, #160]	@ (8005f5c <SdoDownloadSegmentInd+0x28c>)
 8005ebc:	7819      	ldrb	r1, [r3, #0]
 8005ebe:	4b23      	ldr	r3, [pc, #140]	@ (8005f4c <SdoDownloadSegmentInd+0x27c>)
 8005ec0:	681c      	ldr	r4, [r3, #0]
 8005ec2:	4b27      	ldr	r3, [pc, #156]	@ (8005f60 <SdoDownloadSegmentInd+0x290>)
 8005ec4:	681d      	ldr	r5, [r3, #0]
 8005ec6:	4b20      	ldr	r3, [pc, #128]	@ (8005f48 <SdoDownloadSegmentInd+0x278>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a26      	ldr	r2, [pc, #152]	@ (8005f64 <SdoDownloadSegmentInd+0x294>)
 8005ecc:	7812      	ldrb	r2, [r2, #0]
 8005ece:	9201      	str	r2, [sp, #4]
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	462b      	mov	r3, r5
 8005ed4:	4622      	mov	r2, r4
 8005ed6:	f7ff fb23 	bl	8005520 <OBJ_Write>
 8005eda:	4603      	mov	r3, r0
 8005edc:	75fb      	strb	r3, [r7, #23]
					if (abort == ABORTIDX_WORKING)
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
 8005ee0:	2bff      	cmp	r3, #255	@ 0xff
 8005ee2:	d155      	bne.n	8005f90 <SdoDownloadSegmentInd+0x2c0>
					{
						/* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
						u8PendingSdo = SDO_PENDING_SEG_WRITE;
 8005ee4:	4b20      	ldr	r3, [pc, #128]	@ (8005f68 <SdoDownloadSegmentInd+0x298>)
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	701a      	strb	r2, [r3, #0]
						bStoreCompleteAccess = bSdoSegAccess;
 8005eea:	4b1e      	ldr	r3, [pc, #120]	@ (8005f64 <SdoDownloadSegmentInd+0x294>)
 8005eec:	781a      	ldrb	r2, [r3, #0]
 8005eee:	4b1f      	ldr	r3, [pc, #124]	@ (8005f6c <SdoDownloadSegmentInd+0x29c>)
 8005ef0:	701a      	strb	r2, [r3, #0]
						u8StoreSubindex = nSdoSegSubindex;
 8005ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8005f5c <SdoDownloadSegmentInd+0x28c>)
 8005ef4:	781a      	ldrb	r2, [r3, #0]
 8005ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8005f70 <SdoDownloadSegmentInd+0x2a0>)
 8005ef8:	701a      	strb	r2, [r3, #0]
						u16StoreIndex = nSdoSegIndex;
 8005efa:	4b17      	ldr	r3, [pc, #92]	@ (8005f58 <SdoDownloadSegmentInd+0x288>)
 8005efc:	881a      	ldrh	r2, [r3, #0]
 8005efe:	4b1d      	ldr	r3, [pc, #116]	@ (8005f74 <SdoDownloadSegmentInd+0x2a4>)
 8005f00:	801a      	strh	r2, [r3, #0]
						u32StoreDataSize = nSdoSegCompleteSize;
 8005f02:	4b12      	ldr	r3, [pc, #72]	@ (8005f4c <SdoDownloadSegmentInd+0x27c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a1c      	ldr	r2, [pc, #112]	@ (8005f78 <SdoDownloadSegmentInd+0x2a8>)
 8005f08:	6013      	str	r3, [r2, #0]
						pStoreData = pSdoSegData;
 8005f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005f48 <SdoDownloadSegmentInd+0x278>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005f7c <SdoDownloadSegmentInd+0x2ac>)
 8005f10:	6013      	str	r3, [r2, #0]

						pSdoPendFunc = pSdoSegObjEntry->Write;
 8005f12:	4b13      	ldr	r3, [pc, #76]	@ (8005f60 <SdoDownloadSegmentInd+0x290>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	4a19      	ldr	r2, [pc, #100]	@ (8005f80 <SdoDownloadSegmentInd+0x2b0>)
 8005f1a:	6013      	str	r3, [r2, #0]

						bSdoInWork = TRUE;
 8005f1c:	4b19      	ldr	r3, [pc, #100]	@ (8005f84 <SdoDownloadSegmentInd+0x2b4>)
 8005f1e:	2201      	movs	r2, #1
 8005f20:	701a      	strb	r2, [r3, #0]
						pSdoResStored = (TINITSDOMBX MBXMEM *) pSdoInd;
 8005f22:	4a19      	ldr	r2, [pc, #100]	@ (8005f88 <SdoDownloadSegmentInd+0x2b8>)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6013      	str	r3, [r2, #0]

						bSdoSegFollows = FALSE;
 8005f28:	4b0a      	ldr	r3, [pc, #40]	@ (8005f54 <SdoDownloadSegmentInd+0x284>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	701a      	strb	r2, [r3, #0]
						nSdoSegService = 0;
 8005f2e:	4b17      	ldr	r3, [pc, #92]	@ (8005f8c <SdoDownloadSegmentInd+0x2bc>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
						nSdoSegBytesToHandle = 0;
 8005f34:	4b06      	ldr	r3, [pc, #24]	@ (8005f50 <SdoDownloadSegmentInd+0x280>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]

						return ABORTIDX_WORKING;
 8005f3a:	23ff      	movs	r3, #255	@ 0xff
 8005f3c:	e07a      	b.n	8006034 <SdoDownloadSegmentInd+0x364>
 8005f3e:	bf00      	nop
 8005f40:	24000ab4 	.word	0x24000ab4
 8005f44:	24000960 	.word	0x24000960
 8005f48:	24000a98 	.word	0x24000a98
 8005f4c:	24000ab8 	.word	0x24000ab8
 8005f50:	24000ab0 	.word	0x24000ab0
 8005f54:	24000aaa 	.word	0x24000aaa
 8005f58:	24000aac 	.word	0x24000aac
 8005f5c:	24000aae 	.word	0x24000aae
 8005f60:	24000abc 	.word	0x24000abc
 8005f64:	24000aab 	.word	0x24000aab
 8005f68:	24000a74 	.word	0x24000a74
 8005f6c:	24000a75 	.word	0x24000a75
 8005f70:	24000a76 	.word	0x24000a76
 8005f74:	24000a78 	.word	0x24000a78
 8005f78:	24000a7c 	.word	0x24000a7c
 8005f7c:	24000a80 	.word	0x24000a80
 8005f80:	24000a84 	.word	0x24000a84
 8005f84:	24000aa8 	.word	0x24000aa8
 8005f88:	24000aa4 	.word	0x24000aa4
 8005f8c:	24000aa9 	.word	0x24000aa9
					}
					else
					{
						/* the allocated buffer can be released */
						FREEMEM((UINT16 VARMEM *) pSdoSegData);
 8005f90:	4b2a      	ldr	r3, [pc, #168]	@ (800603c <SdoDownloadSegmentInd+0x36c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f006 fa87 	bl	800c4a8 <free>
						pSdoSegData = NULL;
 8005f9a:	4b28      	ldr	r3, [pc, #160]	@ (800603c <SdoDownloadSegmentInd+0x36c>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	e001      	b.n	8005fa6 <SdoDownloadSegmentInd+0x2d6>
				}
			}
		}
		else
		{
			abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (abort == 0)
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d12d      	bne.n	8006008 <SdoDownloadSegmentInd+0x338>
	{
		/* send the SDO Download Segment response */
		pSdoInd->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	220a      	movs	r2, #10
 8005fb0:	801a      	strh	r2, [r3, #0]
		pSdoInd->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	88db      	ldrh	r3, [r3, #6]
 8005fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	80da      	strh	r2, [r3, #6]
		pSdoInd->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	88db      	ldrh	r3, [r3, #6]
 8005fc4:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	80da      	strh	r2, [r3, #6]
		/* the SDO Download Segment header depends if it was the last segment or not */
		if (bSdoSegLastToggle)
 8005fce:	4b1c      	ldr	r3, [pc, #112]	@ (8006040 <SdoDownloadSegmentInd+0x370>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <SdoDownloadSegmentInd+0x30e>
		{
			pSdoInd->SdoHeader.SegHeader = SWAPWORD(SDOSERVICE_DOWNLOADSEGMENTRES | SEGHEADER_TOGGLE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2230      	movs	r2, #48	@ 0x30
 8005fda:	811a      	strh	r2, [r3, #8]
 8005fdc:	e002      	b.n	8005fe4 <SdoDownloadSegmentInd+0x314>
		}
		else
		{
			pSdoInd->SdoHeader.SegHeader = SWAPWORD(SDOSERVICE_DOWNLOADSEGMENTRES);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	811a      	strh	r2, [r3, #8]
		}

		if (bSdoSegFollows == TRUE)
 8005fe4:	4b17      	ldr	r3, [pc, #92]	@ (8006044 <SdoDownloadSegmentInd+0x374>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d106      	bne.n	8005ffa <SdoDownloadSegmentInd+0x32a>
		{
			/* segments are still expected, nSdoSegBytesToHandle contains the number of received data bytes */
			nSdoSegBytesToHandle += bytesToSave;
 8005fec:	4b16      	ldr	r3, [pc, #88]	@ (8006048 <SdoDownloadSegmentInd+0x378>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	4a14      	ldr	r2, [pc, #80]	@ (8006048 <SdoDownloadSegmentInd+0x378>)
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	e01b      	b.n	8006032 <SdoDownloadSegmentInd+0x362>
		}
		else
		{
			/* the last segment was received, the variables are reset */
			nSdoSegBytesToHandle = 0;
 8005ffa:	4b13      	ldr	r3, [pc, #76]	@ (8006048 <SdoDownloadSegmentInd+0x378>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
			nSdoSegService = 0;
 8006000:	4b12      	ldr	r3, [pc, #72]	@ (800604c <SdoDownloadSegmentInd+0x37c>)
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	e014      	b.n	8006032 <SdoDownloadSegmentInd+0x362>
		}
	}
	else
	{
		/* the Abort-Response will be sent in SDOS_SdoInd*/
		bSdoSegFollows = FALSE;
 8006008:	4b0e      	ldr	r3, [pc, #56]	@ (8006044 <SdoDownloadSegmentInd+0x374>)
 800600a:	2200      	movs	r2, #0
 800600c:	701a      	strb	r2, [r3, #0]
		nSdoSegService = 0;
 800600e:	4b0f      	ldr	r3, [pc, #60]	@ (800604c <SdoDownloadSegmentInd+0x37c>)
 8006010:	2200      	movs	r2, #0
 8006012:	701a      	strb	r2, [r3, #0]
		if (pSdoSegData)
 8006014:	4b09      	ldr	r3, [pc, #36]	@ (800603c <SdoDownloadSegmentInd+0x36c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <SdoDownloadSegmentInd+0x35c>
		{
			/* the memory has to be released if it is not released before.
			In case of AbortIdx_Working the buffer will be freed in SDOS_SdoRes*/
			FREEMEM((UINT16 VARMEM *) pSdoSegData);
 800601c:	4b07      	ldr	r3, [pc, #28]	@ (800603c <SdoDownloadSegmentInd+0x36c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4618      	mov	r0, r3
 8006022:	f006 fa41 	bl	800c4a8 <free>
			pSdoSegData = NULL;
 8006026:	4b05      	ldr	r3, [pc, #20]	@ (800603c <SdoDownloadSegmentInd+0x36c>)
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]
		}

		nSdoSegBytesToHandle = 0;
 800602c:	4b06      	ldr	r3, [pc, #24]	@ (8006048 <SdoDownloadSegmentInd+0x378>)
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]
	}

	return abort;
 8006032:	7dfb      	ldrb	r3, [r7, #23]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3718      	adds	r7, #24
 8006038:	46bd      	mov	sp, r7
 800603a:	bdb0      	pop	{r4, r5, r7, pc}
 800603c:	24000a98 	.word	0x24000a98
 8006040:	24000ab4 	.word	0x24000ab4
 8006044:	24000aaa 	.word	0x24000aaa
 8006048:	24000ab0 	.word	0x24000ab0
 800604c:	24000aa9 	.word	0x24000aa9

08006050 <SdoUploadSegmentInd>:
			is received from the master. It prepares and operates the
			response and sends it by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoUploadSegmentInd(TUPLOADSDOSEGREQMBX MBXMEM * pSdoInd)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
	UINT8 abort = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	77fb      	strb	r3, [r7, #31]
	TUPLOADSDOSEGRESMBX MBXMEM * pSdoSegRes = (TUPLOADSDOSEGRESMBX MBXMEM *)pSdoInd;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	613b      	str	r3, [r7, #16]

	if (SWAPWORD(pSdoInd->SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	7a1b      	ldrb	r3, [r3, #8]
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	4a83      	ldr	r2, [pc, #524]	@ (8006278 <SdoUploadSegmentInd+0x228>)
 800606a:	7812      	ldrb	r2, [r2, #0]
 800606c:	4293      	cmp	r3, r2
 800606e:	d102      	bne.n	8006076 <SdoUploadSegmentInd+0x26>
	{
		/* toggle bit has not toggled... */
		abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 8006070:	2301      	movs	r3, #1
 8006072:	77fb      	strb	r3, [r7, #31]
 8006074:	e0fa      	b.n	800626c <SdoUploadSegmentInd+0x21c>
	}
	else
	{
		/* maxData contains the maximum data to be sent with a SDO-Upload Segment response */

		UINT32 size = 0;
 8006076:	2300      	movs	r3, #0
 8006078:	61bb      	str	r3, [r7, #24]
		UINT16 maxData;

		{
			maxData = u16SendMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 800607a:	4b80      	ldr	r3, [pc, #512]	@ (800627c <SdoUploadSegmentInd+0x22c>)
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	3b09      	subs	r3, #9
 8006080:	81fb      	strh	r3, [r7, #14]
		}

		/* the new toggle bit is stored in bSdoSegLastToggle */
		bSdoSegLastToggle = pSdoInd->SegHeader & SEGHEADER_TOGGLE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	7a1b      	ldrb	r3, [r3, #8]
 8006086:	f003 0310 	and.w	r3, r3, #16
 800608a:	b2da      	uxtb	r2, r3
 800608c:	4b7a      	ldr	r3, [pc, #488]	@ (8006278 <SdoUploadSegmentInd+0x228>)
 800608e:	701a      	strb	r2, [r3, #0]

		if (nSdoSegCompleteSize < (nSdoSegBytesToHandle + maxData))
 8006090:	89fa      	ldrh	r2, [r7, #14]
 8006092:	4b7b      	ldr	r3, [pc, #492]	@ (8006280 <SdoUploadSegmentInd+0x230>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	441a      	add	r2, r3
 8006098:	4b7a      	ldr	r3, [pc, #488]	@ (8006284 <SdoUploadSegmentInd+0x234>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d909      	bls.n	80060b4 <SdoUploadSegmentInd+0x64>
		{
			/* the remaining data can be send with one SDO Upload Segment response,
			   size contains the data to be copied */
			size = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 80060a0:	4b78      	ldr	r3, [pc, #480]	@ (8006284 <SdoUploadSegmentInd+0x234>)
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	4b76      	ldr	r3, [pc, #472]	@ (8006280 <SdoUploadSegmentInd+0x230>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	61bb      	str	r3, [r7, #24]
			bSdoSegFollows = FALSE;
 80060ac:	4b76      	ldr	r3, [pc, #472]	@ (8006288 <SdoUploadSegmentInd+0x238>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e004      	b.n	80060be <SdoUploadSegmentInd+0x6e>
		}
		else
		{
			/* more data will follow, size contains the data to be copied */
			size = maxData;
 80060b4:	89fb      	ldrh	r3, [r7, #14]
 80060b6:	61bb      	str	r3, [r7, #24]
			bSdoSegFollows = TRUE;
 80060b8:	4b73      	ldr	r3, [pc, #460]	@ (8006288 <SdoUploadSegmentInd+0x238>)
 80060ba:	2201      	movs	r2, #1
 80060bc:	701a      	strb	r2, [r3, #0]
		}

		/* copy the object data in the SDO Upload segment response */
		// Clear Data0
		pSdoSegRes->SdoHeader.SegHeader &= ~SEGHDATA_MASK;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	891b      	ldrh	r3, [r3, #8]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	811a      	strh	r2, [r3, #8]
		if ((nSdoSegBytesToHandle & 0x1) == 0x01)
 80060ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006280 <SdoUploadSegmentInd+0x230>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d024      	beq.n	8006120 <SdoUploadSegmentInd+0xd0>
		{
			// Data starts at odd byte number (Segment 2, 4,...): Data0 is at high byte, Data1 lies at an even address
			// Write Data0
			pSdoSegRes->SdoHeader.SegHeader |= (pSdoSegData[(nSdoSegBytesToHandle >> 1)] & SEGHDATA_MASK);
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	891b      	ldrh	r3, [r3, #8]
 80060da:	b21a      	sxth	r2, r3
 80060dc:	4b6b      	ldr	r3, [pc, #428]	@ (800628c <SdoUploadSegmentInd+0x23c>)
 80060de:	6819      	ldr	r1, [r3, #0]
 80060e0:	4b67      	ldr	r3, [pc, #412]	@ (8006280 <SdoUploadSegmentInd+0x230>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	085b      	lsrs	r3, r3, #1
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	440b      	add	r3, r1
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	b21b      	sxth	r3, r3
 80060ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80060f2:	b21b      	sxth	r3, r3
 80060f4:	4313      	orrs	r3, r2
 80060f6:	b21b      	sxth	r3, r3
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	811a      	strh	r2, [r3, #8]
			// Copy Data1 - DataN
			MBXMEMCPY(pSdoSegRes->SdoHeader.Data, &pSdoSegData[(nSdoSegBytesToHandle >> 1) + 1], size - 1);
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f103 000a 	add.w	r0, r3, #10
 8006104:	4b61      	ldr	r3, [pc, #388]	@ (800628c <SdoUploadSegmentInd+0x23c>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	4b5d      	ldr	r3, [pc, #372]	@ (8006280 <SdoUploadSegmentInd+0x230>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	3301      	adds	r3, #1
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	18d1      	adds	r1, r2, r3
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	3b01      	subs	r3, #1
 8006118:	461a      	mov	r2, r3
 800611a:	f006 fabf 	bl	800c69c <memcpy>
 800611e:	e045      	b.n	80061ac <SdoUploadSegmentInd+0x15c>
		}
		else
		{
			UINT16 i = 0;
 8006120:	2300      	movs	r3, #0
 8006122:	82fb      	strh	r3, [r7, #22]
			UINT32 nIndexOffset = nSdoSegBytesToHandle >> 1;
 8006124:	4b56      	ldr	r3, [pc, #344]	@ (8006280 <SdoUploadSegmentInd+0x230>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	085b      	lsrs	r3, r3, #1
 800612a:	60bb      	str	r3, [r7, #8]

			// Data starts at even byte number (Segment 1,3, ...): Data0 is at low byte, Data1 lies at an odd address
			// Write Data0
			pSdoSegRes->SdoHeader.SegHeader |= ((pSdoSegData[(nSdoSegBytesToHandle >> 1)] << SEGDATASHIFT) & SEGHDATA_MASK);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	891b      	ldrh	r3, [r3, #8]
 8006130:	b21a      	sxth	r2, r3
 8006132:	4b56      	ldr	r3, [pc, #344]	@ (800628c <SdoUploadSegmentInd+0x23c>)
 8006134:	6819      	ldr	r1, [r3, #0]
 8006136:	4b52      	ldr	r3, [pc, #328]	@ (8006280 <SdoUploadSegmentInd+0x230>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	440b      	add	r3, r1
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	b21b      	sxth	r3, r3
 8006146:	4313      	orrs	r3, r2
 8006148:	b21b      	sxth	r3, r3
 800614a:	b29a      	uxth	r2, r3
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	811a      	strh	r2, [r3, #8]
			// Copy Data1 - DataN

			for (i = 0; i < (size >> 1); i++)
 8006150:	2300      	movs	r3, #0
 8006152:	82fb      	strh	r3, [r7, #22]
 8006154:	e025      	b.n	80061a2 <SdoUploadSegmentInd+0x152>
			{
				pSdoSegRes->SdoHeader.Data[i] = ((pSdoSegData[i + nIndexOffset] & SEGHDATA_MASK) >> 8) | ((pSdoSegData[i + nIndexOffset + 1] & ~SEGHDATA_MASK) << 8);
 8006156:	4b4d      	ldr	r3, [pc, #308]	@ (800628c <SdoUploadSegmentInd+0x23c>)
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	8af9      	ldrh	r1, [r7, #22]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	440b      	add	r3, r1
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	4413      	add	r3, r2
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	0a1b      	lsrs	r3, r3, #8
 8006168:	b29b      	uxth	r3, r3
 800616a:	b21a      	sxth	r2, r3
 800616c:	4b47      	ldr	r3, [pc, #284]	@ (800628c <SdoUploadSegmentInd+0x23c>)
 800616e:	6819      	ldr	r1, [r3, #0]
 8006170:	8af8      	ldrh	r0, [r7, #22]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	4403      	add	r3, r0
 8006176:	3301      	adds	r3, #1
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	440b      	add	r3, r1
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	021b      	lsls	r3, r3, #8
 8006180:	b21b      	sxth	r3, r3
 8006182:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006186:	b21b      	sxth	r3, r3
 8006188:	4313      	orrs	r3, r2
 800618a:	b21a      	sxth	r2, r3
 800618c:	8afb      	ldrh	r3, [r7, #22]
 800618e:	b291      	uxth	r1, r2
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	3304      	adds	r3, #4
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	4413      	add	r3, r2
 8006198:	460a      	mov	r2, r1
 800619a:	805a      	strh	r2, [r3, #2]
			for (i = 0; i < (size >> 1); i++)
 800619c:	8afb      	ldrh	r3, [r7, #22]
 800619e:	3301      	adds	r3, #1
 80061a0:	82fb      	strh	r3, [r7, #22]
 80061a2:	8afa      	ldrh	r2, [r7, #22]
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	085b      	lsrs	r3, r3, #1
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d3d4      	bcc.n	8006156 <SdoUploadSegmentInd+0x106>
				// (If size is even, one byte too much is copied. But, that is not a problem.)
			}
		}

		/* the SDO Upload Segment header depends if there is still data to be sent */
		pSdoSegRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	88db      	ldrh	r3, [r3, #6]
 80061b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	80da      	strh	r2, [r3, #6]
		pSdoSegRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	88db      	ldrh	r3, [r3, #6]
 80061be:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	80da      	strh	r2, [r3, #6]

		/*Clear SDO header*/
		pSdoSegRes->SdoHeader.SegHeader &= ~SEGHEADER_MASK;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	891b      	ldrh	r3, [r3, #8]
 80061cc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	811a      	strh	r2, [r3, #8]
		if (bSdoSegFollows)
 80061d6:	4b2c      	ldr	r3, [pc, #176]	@ (8006288 <SdoUploadSegmentInd+0x238>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d008      	beq.n	80061f0 <SdoUploadSegmentInd+0x1a0>
		{
			pSdoSegRes->SdoHeader.SegHeader |= SWAPWORD(SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	891b      	ldrh	r3, [r3, #8]
 80061e2:	4a25      	ldr	r2, [pc, #148]	@ (8006278 <SdoUploadSegmentInd+0x228>)
 80061e4:	7812      	ldrb	r2, [r2, #0]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	811a      	strh	r2, [r3, #8]
 80061ee:	e00a      	b.n	8006206 <SdoUploadSegmentInd+0x1b6>
		}
		else
		{
			pSdoSegRes->SdoHeader.SegHeader |= SWAPWORD(SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle | SEGHEADER_NOMOREFOLLOWS);
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	891b      	ldrh	r3, [r3, #8]
 80061f4:	4a20      	ldr	r2, [pc, #128]	@ (8006278 <SdoUploadSegmentInd+0x228>)
 80061f6:	7812      	ldrb	r2, [r2, #0]
 80061f8:	f042 0201 	orr.w	r2, r2, #1
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	4313      	orrs	r3, r2
 8006200:	b29a      	uxth	r2, r3
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	811a      	strh	r2, [r3, #8]
		}

				// operate CAN specific flag segDataSize:
				/* HBu 06.02.06: the sizes were wrong */
		if (size < MIN_SEGMENTED_DATA)
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	2b06      	cmp	r3, #6
 800620a:	d810      	bhi.n	800622e <SdoUploadSegmentInd+0x1de>
		{
			// at least    MIN_SEGMENTED_DATA bytes have to be send:
			pSdoSegRes->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	220a      	movs	r2, #10
 8006210:	801a      	strh	r2, [r3, #0]
			pSdoSegRes->SdoHeader.SegHeader |= (MIN_SEGMENTED_DATA - size) << SEGHEADERSHIFT_SEGDATASIZE;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	891a      	ldrh	r2, [r3, #8]
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	b29b      	uxth	r3, r3
 800621a:	f1c3 0307 	rsb	r3, r3, #7
 800621e:	b29b      	uxth	r3, r3
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	b29b      	uxth	r3, r3
 8006224:	4313      	orrs	r3, r2
 8006226:	b29a      	uxth	r2, r3
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	811a      	strh	r2, [r3, #8]
 800622c:	e005      	b.n	800623a <SdoUploadSegmentInd+0x1ea>
		}
		else
		{
			pSdoSegRes->MbxHeader.Length = ((UINT16)size) + SEGMENT_NORM_HEADER_SIZE;
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	b29b      	uxth	r3, r3
 8006232:	3303      	adds	r3, #3
 8006234:	b29a      	uxth	r2, r3
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	801a      	strh	r2, [r3, #0]
		}

		if (bSdoSegFollows == TRUE)
 800623a:	4b13      	ldr	r3, [pc, #76]	@ (8006288 <SdoUploadSegmentInd+0x238>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d106      	bne.n	8006250 <SdoUploadSegmentInd+0x200>
		{
			// updating the value of send bytes:
			nSdoSegBytesToHandle += size;
 8006242:	4b0f      	ldr	r3, [pc, #60]	@ (8006280 <SdoUploadSegmentInd+0x230>)
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	4413      	add	r3, r2
 800624a:	4a0d      	ldr	r2, [pc, #52]	@ (8006280 <SdoUploadSegmentInd+0x230>)
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	e00d      	b.n	800626c <SdoUploadSegmentInd+0x21c>
		}
		else
		{
			FREEMEM((UINT16 VARMEM *) pSdoSegData);
 8006250:	4b0e      	ldr	r3, [pc, #56]	@ (800628c <SdoUploadSegmentInd+0x23c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4618      	mov	r0, r3
 8006256:	f006 f927 	bl	800c4a8 <free>
			pSdoSegData = NULL;
 800625a:	4b0c      	ldr	r3, [pc, #48]	@ (800628c <SdoUploadSegmentInd+0x23c>)
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]
			nSdoSegBytesToHandle = 0;
 8006260:	4b07      	ldr	r3, [pc, #28]	@ (8006280 <SdoUploadSegmentInd+0x230>)
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
			nSdoSegService = 0;
 8006266:	4b0a      	ldr	r3, [pc, #40]	@ (8006290 <SdoUploadSegmentInd+0x240>)
 8006268:	2200      	movs	r2, #0
 800626a:	701a      	strb	r2, [r3, #0]
		}
	}

	return abort;
 800626c:	7ffb      	ldrb	r3, [r7, #31]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3720      	adds	r7, #32
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	24000ab4 	.word	0x24000ab4
 800627c:	2400095e 	.word	0x2400095e
 8006280:	24000ab0 	.word	0x24000ab0
 8006284:	24000ab8 	.word	0x24000ab8
 8006288:	24000aaa 	.word	0x24000aaa
 800628c:	24000a98 	.word	0x24000a98
 8006290:	24000aa9 	.word	0x24000aa9

08006294 <SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SdoRes(UINT8 abort, UINT8 command, UINT8 completeAccess, UINT16 dataSize, UINT32 objLength, TINITSDOMBX MBXMEM *pSdoRes)
{
 8006294:	b590      	push	{r4, r7, lr}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	4604      	mov	r4, r0
 800629c:	4608      	mov	r0, r1
 800629e:	4611      	mov	r1, r2
 80062a0:	461a      	mov	r2, r3
 80062a2:	4623      	mov	r3, r4
 80062a4:	71fb      	strb	r3, [r7, #7]
 80062a6:	4603      	mov	r3, r0
 80062a8:	71bb      	strb	r3, [r7, #6]
 80062aa:	460b      	mov	r3, r1
 80062ac:	717b      	strb	r3, [r7, #5]
 80062ae:	4613      	mov	r3, r2
 80062b0:	807b      	strh	r3, [r7, #2]
	/* for an upload segment response the toggle bit was overwritten */
	if ((command != SDOSERVICE_UPLOADSEGMENTREQ) && (command != SDOSERVICE_DOWNLOADSEGMENTREQ))
 80062b2:	79bb      	ldrb	r3, [r7, #6]
 80062b4:	2b60      	cmp	r3, #96	@ 0x60
 80062b6:	d009      	beq.n	80062cc <SdoRes+0x38>
 80062b8:	79bb      	ldrb	r3, [r7, #6]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d006      	beq.n	80062cc <SdoRes+0x38>
	{
		pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= 0xFF00;
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	891b      	ldrh	r3, [r3, #8]
 80062c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	811a      	strh	r2, [r3, #8]
	}
	if (abort == 0)
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d171      	bne.n	80063b6 <SdoRes+0x122>
	{
		/* SDO-Download or SDO-Upload was successful, generate the SDO- and CoE-Header */
		pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	88db      	ldrh	r3, [r3, #6]
 80062d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062da:	b29a      	uxth	r2, r3
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	80da      	strh	r2, [r3, #6]
		pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	88db      	ldrh	r3, [r3, #6]
 80062e4:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	80da      	strh	r2, [r3, #6]
		if (command == SDOSERVICE_INITIATEUPLOADREQ)
 80062ee:	79bb      	ldrb	r3, [r7, #6]
 80062f0:	2b40      	cmp	r3, #64	@ 0x40
 80062f2:	d144      	bne.n	800637e <SdoRes+0xea>
		{
			// HBu 06.02.06: Complete Access Bit in the SDO-Upload-Response too */
			if ((objLength <= 4) && (objLength > 0))
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	d81d      	bhi.n	8006336 <SdoRes+0xa2>
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01a      	beq.n	8006336 <SdoRes+0xa2>
			{
				/* Expedited Upload Response */
				pSdoRes->MbxHeader.Length = EXPEDITED_FRAME_SIZE;
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	220a      	movs	r2, #10
 8006304:	801a      	strh	r2, [r3, #0]
				pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SWAPWORD(SDOHEADER_SIZEINDICATOR |
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	891a      	ldrh	r2, [r3, #8]
 800630a:	797b      	ldrb	r3, [r7, #5]
 800630c:	f043 0303 	orr.w	r3, r3, #3
 8006310:	b2db      	uxtb	r3, r3
 8006312:	b219      	sxth	r1, r3
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	b2db      	uxtb	r3, r3
 8006318:	f1c3 0304 	rsb	r3, r3, #4
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	b21b      	sxth	r3, r3
 8006320:	430b      	orrs	r3, r1
 8006322:	b21b      	sxth	r3, r3
 8006324:	b29b      	uxth	r3, r3
 8006326:	4313      	orrs	r3, r2
 8006328:	b29b      	uxth	r3, r3
 800632a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800632e:	b29a      	uxth	r2, r3
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	811a      	strh	r2, [r3, #8]
 8006334:	e05d      	b.n	80063f2 <SdoRes+0x15e>
					SDOSERVICE_INITIATEUPLOADRES);
			}
			else
			{
				/* Normal or Segmented Upload Response */
				if (dataSize < objLength)
 8006336:	887b      	ldrh	r3, [r7, #2]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	429a      	cmp	r2, r3
 800633c:	d905      	bls.n	800634a <SdoRes+0xb6>
				{
					pSdoRes->MbxHeader.Length = UPLOAD_NORM_RES_SIZE + dataSize;
 800633e:	887b      	ldrh	r3, [r7, #2]
 8006340:	330a      	adds	r3, #10
 8006342:	b29a      	uxth	r2, r3
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	801a      	strh	r2, [r3, #0]
 8006348:	e005      	b.n	8006356 <SdoRes+0xc2>
				}
				else
				{
					pSdoRes->MbxHeader.Length = UPLOAD_NORM_RES_SIZE + ((UINT16)objLength);
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	b29b      	uxth	r3, r3
 800634e:	330a      	adds	r3, #10
 8006350:	b29a      	uxth	r2, r3
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	801a      	strh	r2, [r3, #0]
				}
				((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[0] = SWAPWORD((UINT16)objLength);
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	b29a      	uxth	r2, r3
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	819a      	strh	r2, [r3, #12]
				((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[1] = SWAPWORD((UINT16)(objLength >> 16));
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	0c1b      	lsrs	r3, r3, #16
 8006362:	b29a      	uxth	r2, r3
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	81da      	strh	r2, [r3, #14]
				pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SWAPWORD(SDOHEADER_SIZEINDICATOR |
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	891b      	ldrh	r3, [r3, #8]
 800636c:	797a      	ldrb	r2, [r7, #5]
 800636e:	f042 0241 	orr.w	r2, r2, #65	@ 0x41
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	4313      	orrs	r3, r2
 8006376:	b29a      	uxth	r2, r3
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	811a      	strh	r2, [r3, #8]
 800637c:	e039      	b.n	80063f2 <SdoRes+0x15e>
					SDOSERVICE_INITIATEUPLOADRES);

			}
		}
		/* for a segmented response the command was wrong in the response */
		else if (command == SDOSERVICE_DOWNLOADSEGMENTREQ)
 800637e:	79bb      	ldrb	r3, [r7, #6]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <SdoRes+0x106>
		{
			/* Download segmented response */
			pSdoRes->MbxHeader.Length = DOWNLOAD_NORM_RES_SIZE;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	220a      	movs	r2, #10
 8006388:	801a      	strh	r2, [r3, #0]
			pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SWAPWORD(SDOSERVICE_DOWNLOADSEGMENTRES);
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	891b      	ldrh	r3, [r3, #8]
 800638e:	f043 0320 	orr.w	r3, r3, #32
 8006392:	b29a      	uxth	r2, r3
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	811a      	strh	r2, [r3, #8]
 8006398:	e02b      	b.n	80063f2 <SdoRes+0x15e>
		}
		else if (command != SDOSERVICE_UPLOADSEGMENTREQ)
 800639a:	79bb      	ldrb	r3, [r7, #6]
 800639c:	2b60      	cmp	r3, #96	@ 0x60
 800639e:	d028      	beq.n	80063f2 <SdoRes+0x15e>
		{
			/* Download response */
			pSdoRes->MbxHeader.Length = DOWNLOAD_NORM_RES_SIZE;
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	220a      	movs	r2, #10
 80063a4:	801a      	strh	r2, [r3, #0]
			pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SWAPWORD(SDOSERVICE_INITIATEDOWNLOADRES);
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	891b      	ldrh	r3, [r3, #8]
 80063aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	811a      	strh	r2, [r3, #8]
 80063b4:	e01d      	b.n	80063f2 <SdoRes+0x15e>
		}
	}
	else
	{
		/* generate a SDO-Abort-Request */
		pSdoRes->MbxHeader.Length = ABORT_NORM_RES_SIZE;
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	220a      	movs	r2, #10
 80063ba:	801a      	strh	r2, [r3, #0]
		pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	88db      	ldrh	r3, [r3, #6]
 80063c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	80da      	strh	r2, [r3, #6]
		pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDOREQUEST) << COEHEADER_COESERVICESHIFT;
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	88db      	ldrh	r3, [r3, #6]
 80063ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	80da      	strh	r2, [r3, #6]
		pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SWAPWORD(SDOSERVICE_ABORTTRANSFER);
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	891b      	ldrh	r3, [r3, #8]
 80063dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	811a      	strh	r2, [r3, #8]

		((TABORTSDOTRANSFERREQMBX MBXMEM *) pSdoRes)->AbortCode = SWAPDWORD(cAbortCode[abort]);
 80063e6:	79fb      	ldrb	r3, [r7, #7]
 80063e8:	4a09      	ldr	r2, [pc, #36]	@ (8006410 <SdoRes+0x17c>)
 80063ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	60da      	str	r2, [r3, #12]
	}

	// HBu 02.05.06: if the CoE-response could not be sent because the
	//               send mailbox is full it should be stored
	if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoRes, COE_SERVICE) != 0)
 80063f2:	2102      	movs	r1, #2
 80063f4:	69f8      	ldr	r0, [r7, #28]
 80063f6:	f7fd fec5 	bl	8004184 <MBX_MailboxSendReq>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <SdoRes+0x172>
	{
		/* we store the CoE mailbox service to send it later (in COE_ContinueInd) when the mailbox is read */
		pCoeSendStored = (TMBX MBXMEM *) pSdoRes;
 8006400:	4a04      	ldr	r2, [pc, #16]	@ (8006414 <SdoRes+0x180>)
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	6013      	str	r3, [r2, #0]
	}
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	bd90      	pop	{r4, r7, pc}
 800640e:	bf00      	nop
 8006410:	0800cd80 	.word	0x0800cd80
 8006414:	24000908 	.word	0x24000908

08006418 <SDOS_SdoInd>:
			is received from the master and calls depending from
			the command the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInd(TINITSDOMBX MBXMEM *pSdoInd)
{
 8006418:	b590      	push	{r4, r7, lr}
 800641a:	b091      	sub	sp, #68	@ 0x44
 800641c:	af02      	add	r7, sp, #8
 800641e:	6078      	str	r0, [r7, #4]
	UINT8 abort = 0;
 8006420:	2300      	movs	r3, #0
 8006422:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	UINT8 sdoHeader = (pSdoInd->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMANDMASK) >> SDOHEADER_COMMANDSHIFT;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	891b      	ldrh	r3, [r3, #8]
 800642a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	/* the SDO-command is in bit 5-7 of the first SDO-Byte */
	UINT8 command = (sdoHeader & SDOHEADER_COMMAND);
 800642e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006432:	f023 031f 	bic.w	r3, r3, #31
 8006436:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	/* mbxSize contains the size of the mailbox (CoE-Header (2 Bytes) + SDO-Header (8 Bytes) + SDO-Data (if the data length is greater than 4)) */
	UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	83fb      	strh	r3, [r7, #30]
	UINT16 index;
	UINT8 subindex;
	OBJCONST TOBJECT OBJMEM * pObjEntry;
	/* this variable contains the information, if all entries of an object will be read (bCompleteAccess > 0) or a single entry */
	UINT8 bCompleteAccess = 0;
 8006440:	2300      	movs	r3, #0
 8006442:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	UINT32 objLength = 0;
 8006446:	2300      	movs	r3, #0
 8006448:	633b      	str	r3, [r7, #48]	@ 0x30
	UINT32 dataSize = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (bSdoInWork)
 800644e:	4b9d      	ldr	r3, [pc, #628]	@ (80066c4 <SDOS_SdoInd+0x2ac>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <SDOS_SdoInd+0x42>
	{
		/* the last SDO is still in work */
		return MBXERR_SERVICEINWORK;
 8006456:	2309      	movs	r3, #9
 8006458:	e2c0      	b.n	80069dc <SDOS_SdoInd+0x5c4>
	}

/* ECATCHANGE_START(V5.13) COE5*/
	if (sdoHeader & SDOHEADER_COMPLETEACCESS)
 800645a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800645e:	f003 0310 	and.w	r3, r3, #16
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <SDOS_SdoInd+0x54>
	{
		bCompleteAccess = 1;
 8006466:	2301      	movs	r3, #1
 8006468:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	}
/* ECATCHANGE_END(V5.13) COE5*/

	switch (command)
 800646c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006470:	2b60      	cmp	r3, #96	@ 0x60
 8006472:	f000 825d 	beq.w	8006930 <SDOS_SdoInd+0x518>
 8006476:	2b60      	cmp	r3, #96	@ 0x60
 8006478:	f300 8276 	bgt.w	8006968 <SDOS_SdoInd+0x550>
 800647c:	2b40      	cmp	r3, #64	@ 0x40
 800647e:	d008      	beq.n	8006492 <SDOS_SdoInd+0x7a>
 8006480:	2b40      	cmp	r3, #64	@ 0x40
 8006482:	f300 8271 	bgt.w	8006968 <SDOS_SdoInd+0x550>
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 8252 	beq.w	8006930 <SDOS_SdoInd+0x518>
 800648c:	2b20      	cmp	r3, #32
 800648e:	f040 826b 	bne.w	8006968 <SDOS_SdoInd+0x550>
	{
	case SDOSERVICE_INITIATEDOWNLOADREQ:
	case SDOSERVICE_INITIATEUPLOADREQ:
		/* the variable index contains the requested index of the SDO service */
		index = pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXHIOFFSET] & SDOHEADER_INDEXHIMASK;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	895b      	ldrh	r3, [r3, #10]
 8006496:	b2db      	uxtb	r3, r3
 8006498:	83bb      	strh	r3, [r7, #28]
		index <<= 8;
 800649a:	8bbb      	ldrh	r3, [r7, #28]
 800649c:	021b      	lsls	r3, r3, #8
 800649e:	83bb      	strh	r3, [r7, #28]
		index += (pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXLOOFFSET] >> SDOHEADER_INDEXLOSHIFT) & SDOHEADER_INDEXLOMASK;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	891b      	ldrh	r3, [r3, #8]
 80064a4:	0a1b      	lsrs	r3, r3, #8
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	8bbb      	ldrh	r3, [r7, #28]
 80064aa:	4413      	add	r3, r2
 80064ac:	83bb      	strh	r3, [r7, #28]
		/* the variable subindex contains the requested subindex of the SDO service */
		subindex = (pSdoInd->SdoHeader.Sdo[SDOHEADER_SUBINDEXOFFSET] >> SDOHEADER_SUBINDEXSHIFT) & SDOHEADER_SUBINDEXMASK;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	895b      	ldrh	r3, [r3, #10]
 80064b2:	0a1b      	lsrs	r3, r3, #8
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	76fb      	strb	r3, [r7, #27]




		/* OBJ_GetObjectHandle checks if the requested index is defined in the object dictionary */
		pObjEntry = OBJ_GetObjectHandle(index);
 80064b8:	8bbb      	ldrh	r3, [r7, #28]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fe f85c 	bl	8004578 <OBJ_GetObjectHandle>
 80064c0:	6178      	str	r0, [r7, #20]

		if (pObjEntry)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 822f 	beq.w	8006928 <SDOS_SdoInd+0x510>
		{
			/* transferType contains the information if the SDO Download Request or the SDO Upload Response
			   can be an expedited service (SDO data length <= 4, that means the data is stored in the
				SDO-Header completely */
			UINT8 bTransferType = 0;
 80064ca:	2300      	movs	r3, #0
 80064cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* pData is the pointer to the received (SDO-Download) or sent (SDO-Upload) SDO data in the mailbox */
			UINT16 MBXMEM * pData = NULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	627b      	str	r3, [r7, #36]	@ 0x24
			UINT8 segTransfer = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

			{
				UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	899b      	ldrh	r3, [r3, #12]
 80064de:	74fb      	strb	r3, [r7, #19]

				if (subindex > maxSubindex)
 80064e0:	7efa      	ldrb	r2, [r7, #27]
 80064e2:	7cfb      	ldrb	r3, [r7, #19]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d903      	bls.n	80064f0 <SDOS_SdoInd+0xd8>
				{
					abort = ABORTIDX_SUBINDEX_NOT_EXISTING;
 80064e8:	2311      	movs	r3, #17
 80064ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80064ee:	e00c      	b.n	800650a <SDOS_SdoInd+0xf2>
				}
				else
				{
					dataSize = objLength = OBJ_GetObjectLength(index, subindex, pObjEntry, (UINT8)(sdoHeader & SDOHEADER_COMPLETEACCESS));
 80064f0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	7ef9      	ldrb	r1, [r7, #27]
 80064fc:	8bb8      	ldrh	r0, [r7, #28]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	f7fe f855 	bl	80045ae <OBJ_GetObjectLength>
 8006504:	6338      	str	r0, [r7, #48]	@ 0x30
 8006506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006508:	62fb      	str	r3, [r7, #44]	@ 0x2c
				}

				if (abort == 0)
 800650a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800650e:	2b00      	cmp	r3, #0
 8006510:	d132      	bne.n	8006578 <SDOS_SdoInd+0x160>
				{
					if (command == SDOSERVICE_INITIATEUPLOADREQ)
 8006512:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006516:	2b40      	cmp	r3, #64	@ 0x40
 8006518:	d128      	bne.n	800656c <SDOS_SdoInd+0x154>
					{
						/* SDO Upload */
						if (mbxSize != EXPEDITED_FRAME_SIZE)
 800651a:	8bfb      	ldrh	r3, [r7, #30]
 800651c:	2b0a      	cmp	r3, #10
 800651e:	d001      	beq.n	8006524 <SDOS_SdoInd+0x10c>
						{
							/* a SDO Upload request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
							return MBXERR_INVALIDSIZE;
 8006520:	2308      	movs	r3, #8
 8006522:	e25b      	b.n	80069dc <SDOS_SdoInd+0x5c4>
						}
						/* distinguish between expedited and normal upload response within the length of the response data */
						if ((objLength <= MAX_EXPEDITED_DATA) && objLength != 0)
 8006524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006526:	2b04      	cmp	r3, #4
 8006528:	d810      	bhi.n	800654c <SDOS_SdoInd+0x134>
 800652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00d      	beq.n	800654c <SDOS_SdoInd+0x134>
						{
							/* Expedited Upload */
							bTransferType = 1;
 8006530:	2301      	movs	r3, #1
 8006532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
							/* pData is the pointer where the object data has to be copied for the response */
							pData = (UINT16 MBXMEM *) ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoInd)->Data;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	330c      	adds	r3, #12
 800653a:	627b      	str	r3, [r7, #36]	@ 0x24
													/* initialize the 4 data bytes of the SDO upload response because the requested object data
														could be less than 4 */
							pData[0] = 0;
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	2200      	movs	r2, #0
 8006540:	801a      	strh	r2, [r3, #0]
							pData[1] = 0;
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	3302      	adds	r3, #2
 8006546:	2200      	movs	r2, #0
 8006548:	801a      	strh	r2, [r3, #0]
 800654a:	e015      	b.n	8006578 <SDOS_SdoInd+0x160>
						}
						else
						{
							/* HBu 06.02.06: the variable dataSize has to be set to the available size in one mailbox */
							dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 800654c:	4b5e      	ldr	r3, [pc, #376]	@ (80066c8 <SDOS_SdoInd+0x2b0>)
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	3b10      	subs	r3, #16
 8006552:	62fb      	str	r3, [r7, #44]	@ 0x2c
							if (dataSize < objLength)
 8006554:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	429a      	cmp	r2, r3
 800655a:	d203      	bcs.n	8006564 <SDOS_SdoInd+0x14c>
							{
								/* Segmented Upload */
								segTransfer = 1;
 800655c:	2301      	movs	r3, #1
 800655e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006562:	e009      	b.n	8006578 <SDOS_SdoInd+0x160>
							else
							{
								/* Normal Upload */

								/* pData is the pointer where the object data has to be copied for the response */
								pData = (UINT16 MBXMEM *) ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3310      	adds	r3, #16
 8006568:	627b      	str	r3, [r7, #36]	@ 0x24
 800656a:	e005      	b.n	8006578 <SDOS_SdoInd+0x160>
						}
					}
					else
					{
						/* SDO-Download: store if the request is a expedited or normal request  */
						bTransferType = sdoHeader & SDOHEADER_TRANSFERTYPE;
 800656c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
					}
				}
			}

			if ((abort == 0) && (command == SDOSERVICE_INITIATEDOWNLOADREQ))
 8006578:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800657c:	2b00      	cmp	r3, #0
 800657e:	d142      	bne.n	8006606 <SDOS_SdoInd+0x1ee>
 8006580:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006584:	2b20      	cmp	r3, #32
 8006586:	d13e      	bne.n	8006606 <SDOS_SdoInd+0x1ee>
			{
				/* SDO Download */
				if (bTransferType)
 8006588:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800658c:	2b00      	cmp	r3, #0
 800658e:	d010      	beq.n	80065b2 <SDOS_SdoInd+0x19a>
				{
					/* Expedited Download */
					if (mbxSize != EXPEDITED_FRAME_SIZE)
 8006590:	8bfb      	ldrh	r3, [r7, #30]
 8006592:	2b0a      	cmp	r3, #10
 8006594:	d001      	beq.n	800659a <SDOS_SdoInd+0x182>
					{
						/* an Expedited SDO Download request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
						return MBXERR_INVALIDSIZE;
 8006596:	2308      	movs	r3, #8
 8006598:	e220      	b.n	80069dc <SDOS_SdoInd+0x5c4>
					}
					/* dataSize gets the real size of the downloaded object data (1,2,3 or 4) */
					dataSize = MAX_EXPEDITED_DATA - ((sdoHeader & SDOHEADER_DATASETSIZE) >> SDOHEADERSHIFT_DATASETSIZE);
 800659a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800659e:	109b      	asrs	r3, r3, #2
 80065a0:	f003 0303 	and.w	r3, r3, #3
 80065a4:	f1c3 0304 	rsb	r3, r3, #4
 80065a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* pData is the pointer to the downloaded object data */
					pData = (UINT16 MBXMEM *) &pSdoInd[1];
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	330c      	adds	r3, #12
 80065ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80065b0:	e029      	b.n	8006606 <SDOS_SdoInd+0x1ee>
				{
					/* Normal Download */
					/* downloadSize gets the real size of the downloaded data */
					/* '&' operator was too much */

					UINT32 downloadSize = ((UINT32)(SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[1])) << 16) + (SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[0]));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	89db      	ldrh	r3, [r3, #14]
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	8992      	ldrh	r2, [r2, #12]
 80065bc:	4413      	add	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]

					/* HBu 29.03.06: if it is a segmented download the mbxSize has to be the complete mailbox size */
					if ((MBX_HEADER_SIZE + EXPEDITED_FRAME_SIZE + downloadSize) > u16ReceiveMbxSize)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3310      	adds	r3, #16
 80065c4:	4a41      	ldr	r2, [pc, #260]	@ (80066cc <SDOS_SdoInd+0x2b4>)
 80065c6:	8812      	ldrh	r2, [r2, #0]
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d907      	bls.n	80065dc <SDOS_SdoInd+0x1c4>
					{
						if (mbxSize != (u16ReceiveMbxSize - MBX_HEADER_SIZE))
 80065cc:	8bfa      	ldrh	r2, [r7, #30]
 80065ce:	4b3f      	ldr	r3, [pc, #252]	@ (80066cc <SDOS_SdoInd+0x2b4>)
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	3b06      	subs	r3, #6
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d008      	beq.n	80065ea <SDOS_SdoInd+0x1d2>
						{
							return MBXERR_INVALIDSIZE;
 80065d8:	2308      	movs	r3, #8
 80065da:	e1ff      	b.n	80069dc <SDOS_SdoInd+0x5c4>
						}
					}
					else
					{
						if (mbxSize != (EXPEDITED_FRAME_SIZE + downloadSize))
 80065dc:	8bfa      	ldrh	r2, [r7, #30]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	330a      	adds	r3, #10
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d001      	beq.n	80065ea <SDOS_SdoInd+0x1d2>
						{
							/* the mbxSize and the downloadSize are not consistent (mbxSize = downloadSize + 2 byte CoE-Header + 8 byte SDO Header */
							return MBXERR_INVALIDSIZE;
 80065e6:	2308      	movs	r3, #8
 80065e8:	e1f8      	b.n	80069dc <SDOS_SdoInd+0x5c4>
						}
					}

					/* pData is the pointer to the downloaded object data */
					pData = (UINT16 MBXMEM *) ((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3310      	adds	r3, #16
 80065ee:	627b      	str	r3, [r7, #36]	@ 0x24
					/* the received dataSize will be checked in the object specific functions called from
					   OBJ_Write (in objdef.c) */
					dataSize = downloadSize;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
					if (dataSize > (UINT32)(mbxSize - DOWNLOAD_NORM_REQ_SIZE))
 80065f4:	8bfb      	ldrh	r3, [r7, #30]
 80065f6:	3b0a      	subs	r3, #10
 80065f8:	461a      	mov	r2, r3
 80065fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d902      	bls.n	8006606 <SDOS_SdoInd+0x1ee>
					{
						/* Segmented Download */
						segTransfer = 1;
 8006600:	2301      	movs	r3, #1
 8006602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
					}
				}
			}

/* ECATCHANGE_START(V5.13) COE5*/
			if ((abort == 0) && (bCompleteAccess == 1))
 8006606:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800660a:	2b00      	cmp	r3, #0
 800660c:	d109      	bne.n	8006622 <SDOS_SdoInd+0x20a>
 800660e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006612:	2b01      	cmp	r3, #1
 8006614:	d105      	bne.n	8006622 <SDOS_SdoInd+0x20a>
/* ECATCHANGE_END(V5.13) COE5*/
			{
				// HBu 02.05.06: Complete Access is only supported with subindex 0 and 1
				if (subindex > 1)
 8006616:	7efb      	ldrb	r3, [r7, #27]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d902      	bls.n	8006622 <SDOS_SdoInd+0x20a>
				{
					abort = ABORTIDX_UNSUPPORTED_ACCESS;
 800661c:	2305      	movs	r3, #5
 800661e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				}
			}

			if (abort == 0)
 8006622:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006626:	2b00      	cmp	r3, #0
 8006628:	f040 81c0 	bne.w	80069ac <SDOS_SdoInd+0x594>
			{
				if (segTransfer)
 800662c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 80d4 	beq.w	80067de <SDOS_SdoInd+0x3c6>
				{
					bSdoSegFollows = TRUE;
 8006636:	4b26      	ldr	r3, [pc, #152]	@ (80066d0 <SDOS_SdoInd+0x2b8>)
 8006638:	2201      	movs	r2, #1
 800663a:	701a      	strb	r2, [r3, #0]
					bSdoSegLastToggle = 1;
 800663c:	4b25      	ldr	r3, [pc, #148]	@ (80066d4 <SDOS_SdoInd+0x2bc>)
 800663e:	2201      	movs	r2, #1
 8006640:	701a      	strb	r2, [r3, #0]
					bSdoSegAccess = bCompleteAccess;
 8006642:	4a25      	ldr	r2, [pc, #148]	@ (80066d8 <SDOS_SdoInd+0x2c0>)
 8006644:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006648:	7013      	strb	r3, [r2, #0]
					nSdoSegIndex = index;
 800664a:	4a24      	ldr	r2, [pc, #144]	@ (80066dc <SDOS_SdoInd+0x2c4>)
 800664c:	8bbb      	ldrh	r3, [r7, #28]
 800664e:	8013      	strh	r3, [r2, #0]
					nSdoSegSubindex = subindex;
 8006650:	4a23      	ldr	r2, [pc, #140]	@ (80066e0 <SDOS_SdoInd+0x2c8>)
 8006652:	7efb      	ldrb	r3, [r7, #27]
 8006654:	7013      	strb	r3, [r2, #0]
					pSdoSegObjEntry = pObjEntry;
 8006656:	4a23      	ldr	r2, [pc, #140]	@ (80066e4 <SDOS_SdoInd+0x2cc>)
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	6013      	str	r3, [r2, #0]
					if (command == SDOSERVICE_INITIATEUPLOADREQ)
 800665c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006660:	2b40      	cmp	r3, #64	@ 0x40
 8006662:	d103      	bne.n	800666c <SDOS_SdoInd+0x254>
					{
						nSdoSegCompleteSize = objLength;
 8006664:	4a20      	ldr	r2, [pc, #128]	@ (80066e8 <SDOS_SdoInd+0x2d0>)
 8006666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	e002      	b.n	8006672 <SDOS_SdoInd+0x25a>
					}
					else
					{
						nSdoSegCompleteSize = dataSize;
 800666c:	4a1e      	ldr	r2, [pc, #120]	@ (80066e8 <SDOS_SdoInd+0x2d0>)
 800666e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006670:	6013      	str	r3, [r2, #0]
					}

					if (pSdoSegData != NULL)
 8006672:	4b1e      	ldr	r3, [pc, #120]	@ (80066ec <SDOS_SdoInd+0x2d4>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d007      	beq.n	800668a <SDOS_SdoInd+0x272>
					{
						FREEMEM((UINT16 VARMEM *) pSdoSegData);
 800667a:	4b1c      	ldr	r3, [pc, #112]	@ (80066ec <SDOS_SdoInd+0x2d4>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4618      	mov	r0, r3
 8006680:	f005 ff12 	bl	800c4a8 <free>
						pSdoSegData = NULL;
 8006684:	4b19      	ldr	r3, [pc, #100]	@ (80066ec <SDOS_SdoInd+0x2d4>)
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]
					}
					pSdoSegData = (UINT16 VARMEM *) ALLOCMEM(ROUNDUPBYTE2WORD(nSdoSegCompleteSize));
 800668a:	4b17      	ldr	r3, [pc, #92]	@ (80066e8 <SDOS_SdoInd+0x2d0>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3301      	adds	r3, #1
 8006690:	f023 0301 	bic.w	r3, r3, #1
 8006694:	4618      	mov	r0, r3
 8006696:	f005 feff 	bl	800c498 <malloc>
 800669a:	4603      	mov	r3, r0
 800669c:	461a      	mov	r2, r3
 800669e:	4b13      	ldr	r3, [pc, #76]	@ (80066ec <SDOS_SdoInd+0x2d4>)
 80066a0:	601a      	str	r2, [r3, #0]

					if (pSdoSegData == NULL)
 80066a2:	4b12      	ldr	r3, [pc, #72]	@ (80066ec <SDOS_SdoInd+0x2d4>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d122      	bne.n	80066f0 <SDOS_SdoInd+0x2d8>
					{
						if (bCompleteAccess)
 80066aa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <SDOS_SdoInd+0x2a2>
						{
							abort = ABORTIDX_UNSUPPORTED_ACCESS;
 80066b2:	2305      	movs	r3, #5
 80066b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		} //if(pObjEntry) (Object handle found)
		else
		{
			abort = ABORTIDX_OBJECT_NOT_EXISTING;
		}
		break;
 80066b8:	e178      	b.n	80069ac <SDOS_SdoInd+0x594>
							abort = ABORTIDX_OUT_OF_MEMORY;
 80066ba:	2304      	movs	r3, #4
 80066bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 80066c0:	e174      	b.n	80069ac <SDOS_SdoInd+0x594>
 80066c2:	bf00      	nop
 80066c4:	24000aa8 	.word	0x24000aa8
 80066c8:	2400095e 	.word	0x2400095e
 80066cc:	24000960 	.word	0x24000960
 80066d0:	24000aaa 	.word	0x24000aaa
 80066d4:	24000ab4 	.word	0x24000ab4
 80066d8:	24000aab 	.word	0x24000aab
 80066dc:	24000aac 	.word	0x24000aac
 80066e0:	24000aae 	.word	0x24000aae
 80066e4:	24000abc 	.word	0x24000abc
 80066e8:	24000ab8 	.word	0x24000ab8
 80066ec:	24000a98 	.word	0x24000a98
						if (command == SDOSERVICE_INITIATEUPLOADREQ)
 80066f0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80066f4:	2b40      	cmp	r3, #64	@ 0x40
 80066f6:	d15e      	bne.n	80067b6 <SDOS_SdoInd+0x39e>
							abort = OBJ_Read(index, subindex, objLength, pObjEntry, (UINT16 MBXMEM *) pSdoSegData, bCompleteAccess);
 80066f8:	4b9d      	ldr	r3, [pc, #628]	@ (8006970 <SDOS_SdoInd+0x558>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	7ef9      	ldrb	r1, [r7, #27]
 80066fe:	8bb8      	ldrh	r0, [r7, #28]
 8006700:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8006704:	9201      	str	r2, [sp, #4]
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800670c:	f7fe fb90 	bl	8004e30 <OBJ_Read>
 8006710:	4603      	mov	r3, r0
 8006712:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
							if (abort == 0)
 8006716:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10b      	bne.n	8006736 <SDOS_SdoInd+0x31e>
								MBXMEMCPY((UINT16 *)((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data, pSdoSegData, dataSize);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3310      	adds	r3, #16
 8006722:	4a93      	ldr	r2, [pc, #588]	@ (8006970 <SDOS_SdoInd+0x558>)
 8006724:	6811      	ldr	r1, [r2, #0]
 8006726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006728:	4618      	mov	r0, r3
 800672a:	f005 ffb7 	bl	800c69c <memcpy>
								nSdoSegService = SDOSERVICE_UPLOADSEGMENTREQ;
 800672e:	4b91      	ldr	r3, [pc, #580]	@ (8006974 <SDOS_SdoInd+0x55c>)
 8006730:	2260      	movs	r2, #96	@ 0x60
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	e04f      	b.n	80067d6 <SDOS_SdoInd+0x3be>
							else if (abort == ABORTIDX_WORKING)
 8006736:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800673a:	2bff      	cmp	r3, #255	@ 0xff
 800673c:	d14b      	bne.n	80067d6 <SDOS_SdoInd+0x3be>
								u8PendingSdo = SDO_PENDING_SEG_READ;
 800673e:	4b8e      	ldr	r3, [pc, #568]	@ (8006978 <SDOS_SdoInd+0x560>)
 8006740:	2204      	movs	r2, #4
 8006742:	701a      	strb	r2, [r3, #0]
								bStoreCompleteAccess = bCompleteAccess;
 8006744:	4a8d      	ldr	r2, [pc, #564]	@ (800697c <SDOS_SdoInd+0x564>)
 8006746:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800674a:	7013      	strb	r3, [r2, #0]
								u8StoreSubindex = subindex;
 800674c:	4a8c      	ldr	r2, [pc, #560]	@ (8006980 <SDOS_SdoInd+0x568>)
 800674e:	7efb      	ldrb	r3, [r7, #27]
 8006750:	7013      	strb	r3, [r2, #0]
								u16StoreIndex = index;
 8006752:	4a8c      	ldr	r2, [pc, #560]	@ (8006984 <SDOS_SdoInd+0x56c>)
 8006754:	8bbb      	ldrh	r3, [r7, #28]
 8006756:	8013      	strh	r3, [r2, #0]
								u32StoreDataSize = objLength;
 8006758:	4a8b      	ldr	r2, [pc, #556]	@ (8006988 <SDOS_SdoInd+0x570>)
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	6013      	str	r3, [r2, #0]
								pStoreData = pSdoSegData;
 800675e:	4b84      	ldr	r3, [pc, #528]	@ (8006970 <SDOS_SdoInd+0x558>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a8a      	ldr	r2, [pc, #552]	@ (800698c <SDOS_SdoInd+0x574>)
 8006764:	6013      	str	r3, [r2, #0]
								pSdoPendFunc = pObjEntry->Read;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	4a89      	ldr	r2, [pc, #548]	@ (8006990 <SDOS_SdoInd+0x578>)
 800676c:	6013      	str	r3, [r2, #0]
								bSdoInWork = TRUE;
 800676e:	4b89      	ldr	r3, [pc, #548]	@ (8006994 <SDOS_SdoInd+0x57c>)
 8006770:	2201      	movs	r2, #1
 8006772:	701a      	strb	r2, [r3, #0]
								pSdoResStored = pSdoInd;
 8006774:	4a88      	ldr	r2, [pc, #544]	@ (8006998 <SDOS_SdoInd+0x580>)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6013      	str	r3, [r2, #0]
								pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 800677a:	4b87      	ldr	r3, [pc, #540]	@ (8006998 <SDOS_SdoInd+0x580>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	891a      	ldrh	r2, [r3, #8]
 8006780:	4b85      	ldr	r3, [pc, #532]	@ (8006998 <SDOS_SdoInd+0x580>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006788:	b292      	uxth	r2, r2
 800678a:	811a      	strh	r2, [r3, #8]
								pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 800678c:	4b82      	ldr	r3, [pc, #520]	@ (8006998 <SDOS_SdoInd+0x580>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	891b      	ldrh	r3, [r3, #8]
 8006792:	b21a      	sxth	r2, r3
 8006794:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006798:	b21b      	sxth	r3, r3
 800679a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800679e:	b21b      	sxth	r3, r3
 80067a0:	4313      	orrs	r3, r2
 80067a2:	b21a      	sxth	r2, r3
 80067a4:	4b7c      	ldr	r3, [pc, #496]	@ (8006998 <SDOS_SdoInd+0x580>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	b292      	uxth	r2, r2
 80067aa:	811a      	strh	r2, [r3, #8]
								nSdoSegService = SDOSERVICE_UPLOADSEGMENTREQ;
 80067ac:	4b71      	ldr	r3, [pc, #452]	@ (8006974 <SDOS_SdoInd+0x55c>)
 80067ae:	2260      	movs	r2, #96	@ 0x60
 80067b0:	701a      	strb	r2, [r3, #0]
								return 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e112      	b.n	80069dc <SDOS_SdoInd+0x5c4>
							MBXMEMCPY(pSdoSegData, (UINT16 *)((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data, mbxSize - DOWNLOAD_NORM_REQ_SIZE);
 80067b6:	4b6e      	ldr	r3, [pc, #440]	@ (8006970 <SDOS_SdoInd+0x558>)
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f103 0110 	add.w	r1, r3, #16
 80067c0:	8bfb      	ldrh	r3, [r7, #30]
 80067c2:	3b0a      	subs	r3, #10
 80067c4:	461a      	mov	r2, r3
 80067c6:	f005 ff69 	bl	800c69c <memcpy>
							nSdoSegService = SDOSERVICE_DOWNLOADSEGMENTREQ;
 80067ca:	4b6a      	ldr	r3, [pc, #424]	@ (8006974 <SDOS_SdoInd+0x55c>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	701a      	strb	r2, [r3, #0]
							dataSize = (mbxSize - DOWNLOAD_NORM_REQ_SIZE);
 80067d0:	8bfb      	ldrh	r3, [r7, #30]
 80067d2:	3b0a      	subs	r3, #10
 80067d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
						nSdoSegBytesToHandle = dataSize;
 80067d6:	4a71      	ldr	r2, [pc, #452]	@ (800699c <SDOS_SdoInd+0x584>)
 80067d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067da:	6013      	str	r3, [r2, #0]
		break;
 80067dc:	e0e6      	b.n	80069ac <SDOS_SdoInd+0x594>
					if (objLength == 0)
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d108      	bne.n	80067f6 <SDOS_SdoInd+0x3de>
						nSdoSegIndex = index;
 80067e4:	4a6e      	ldr	r2, [pc, #440]	@ (80069a0 <SDOS_SdoInd+0x588>)
 80067e6:	8bbb      	ldrh	r3, [r7, #28]
 80067e8:	8013      	strh	r3, [r2, #0]
						nSdoSegSubindex = subindex;
 80067ea:	4a6e      	ldr	r2, [pc, #440]	@ (80069a4 <SDOS_SdoInd+0x58c>)
 80067ec:	7efb      	ldrb	r3, [r7, #27]
 80067ee:	7013      	strb	r3, [r2, #0]
						pSdoSegObjEntry = pObjEntry;
 80067f0:	4a6d      	ldr	r2, [pc, #436]	@ (80069a8 <SDOS_SdoInd+0x590>)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	6013      	str	r3, [r2, #0]
					if (command == SDOSERVICE_INITIATEUPLOADREQ)
 80067f6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80067fa:	2b40      	cmp	r3, #64	@ 0x40
 80067fc:	d14a      	bne.n	8006894 <SDOS_SdoInd+0x47c>
						abort = OBJ_Read(index, subindex, objLength, pObjEntry, pData, bCompleteAccess);
 80067fe:	7ef9      	ldrb	r1, [r7, #27]
 8006800:	8bb8      	ldrh	r0, [r7, #28]
 8006802:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006810:	f7fe fb0e 	bl	8004e30 <OBJ_Read>
 8006814:	4603      	mov	r3, r0
 8006816:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						if (abort == ABORTIDX_WORKING)
 800681a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800681e:	2bff      	cmp	r3, #255	@ 0xff
 8006820:	f040 80c4 	bne.w	80069ac <SDOS_SdoInd+0x594>
							u8PendingSdo = SDO_PENDING_READ;
 8006824:	4b54      	ldr	r3, [pc, #336]	@ (8006978 <SDOS_SdoInd+0x560>)
 8006826:	2203      	movs	r2, #3
 8006828:	701a      	strb	r2, [r3, #0]
							bStoreCompleteAccess = bCompleteAccess;
 800682a:	4a54      	ldr	r2, [pc, #336]	@ (800697c <SDOS_SdoInd+0x564>)
 800682c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006830:	7013      	strb	r3, [r2, #0]
							u8StoreSubindex = subindex;
 8006832:	4a53      	ldr	r2, [pc, #332]	@ (8006980 <SDOS_SdoInd+0x568>)
 8006834:	7efb      	ldrb	r3, [r7, #27]
 8006836:	7013      	strb	r3, [r2, #0]
							u16StoreIndex = index;
 8006838:	4a52      	ldr	r2, [pc, #328]	@ (8006984 <SDOS_SdoInd+0x56c>)
 800683a:	8bbb      	ldrh	r3, [r7, #28]
 800683c:	8013      	strh	r3, [r2, #0]
							u32StoreDataSize = objLength;
 800683e:	4a52      	ldr	r2, [pc, #328]	@ (8006988 <SDOS_SdoInd+0x570>)
 8006840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006842:	6013      	str	r3, [r2, #0]
							pStoreData = pData;
 8006844:	4a51      	ldr	r2, [pc, #324]	@ (800698c <SDOS_SdoInd+0x574>)
 8006846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006848:	6013      	str	r3, [r2, #0]
							pSdoPendFunc = pObjEntry->Read;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	4a50      	ldr	r2, [pc, #320]	@ (8006990 <SDOS_SdoInd+0x578>)
 8006850:	6013      	str	r3, [r2, #0]
							bSdoInWork = TRUE;
 8006852:	4b50      	ldr	r3, [pc, #320]	@ (8006994 <SDOS_SdoInd+0x57c>)
 8006854:	2201      	movs	r2, #1
 8006856:	701a      	strb	r2, [r3, #0]
							pSdoResStored = pSdoInd;
 8006858:	4a4f      	ldr	r2, [pc, #316]	@ (8006998 <SDOS_SdoInd+0x580>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6013      	str	r3, [r2, #0]
							pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 800685e:	4b4e      	ldr	r3, [pc, #312]	@ (8006998 <SDOS_SdoInd+0x580>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	891a      	ldrh	r2, [r3, #8]
 8006864:	4b4c      	ldr	r3, [pc, #304]	@ (8006998 <SDOS_SdoInd+0x580>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800686c:	b292      	uxth	r2, r2
 800686e:	811a      	strh	r2, [r3, #8]
							pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 8006870:	4b49      	ldr	r3, [pc, #292]	@ (8006998 <SDOS_SdoInd+0x580>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	891b      	ldrh	r3, [r3, #8]
 8006876:	b21a      	sxth	r2, r3
 8006878:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800687c:	b21b      	sxth	r3, r3
 800687e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006882:	b21b      	sxth	r3, r3
 8006884:	4313      	orrs	r3, r2
 8006886:	b21a      	sxth	r2, r3
 8006888:	4b43      	ldr	r3, [pc, #268]	@ (8006998 <SDOS_SdoInd+0x580>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	b292      	uxth	r2, r2
 800688e:	811a      	strh	r2, [r3, #8]
							return 0;
 8006890:	2300      	movs	r3, #0
 8006892:	e0a3      	b.n	80069dc <SDOS_SdoInd+0x5c4>
						abort = OBJ_Write(index, subindex, dataSize, pObjEntry, pData, bCompleteAccess);
 8006894:	7ef9      	ldrb	r1, [r7, #27]
 8006896:	8bb8      	ldrh	r0, [r7, #28]
 8006898:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068a6:	f7fe fe3b 	bl	8005520 <OBJ_Write>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						if (abort == ABORTIDX_WORKING)
 80068b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80068b4:	2bff      	cmp	r3, #255	@ 0xff
 80068b6:	d179      	bne.n	80069ac <SDOS_SdoInd+0x594>
							u8PendingSdo = SDO_PENDING_WRITE;
 80068b8:	4b2f      	ldr	r3, [pc, #188]	@ (8006978 <SDOS_SdoInd+0x560>)
 80068ba:	2201      	movs	r2, #1
 80068bc:	701a      	strb	r2, [r3, #0]
							bStoreCompleteAccess = bCompleteAccess;
 80068be:	4a2f      	ldr	r2, [pc, #188]	@ (800697c <SDOS_SdoInd+0x564>)
 80068c0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80068c4:	7013      	strb	r3, [r2, #0]
							u8StoreSubindex = subindex;
 80068c6:	4a2e      	ldr	r2, [pc, #184]	@ (8006980 <SDOS_SdoInd+0x568>)
 80068c8:	7efb      	ldrb	r3, [r7, #27]
 80068ca:	7013      	strb	r3, [r2, #0]
							u16StoreIndex = index;
 80068cc:	4a2d      	ldr	r2, [pc, #180]	@ (8006984 <SDOS_SdoInd+0x56c>)
 80068ce:	8bbb      	ldrh	r3, [r7, #28]
 80068d0:	8013      	strh	r3, [r2, #0]
							u32StoreDataSize = dataSize;
 80068d2:	4a2d      	ldr	r2, [pc, #180]	@ (8006988 <SDOS_SdoInd+0x570>)
 80068d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d6:	6013      	str	r3, [r2, #0]
							pStoreData = pData;
 80068d8:	4a2c      	ldr	r2, [pc, #176]	@ (800698c <SDOS_SdoInd+0x574>)
 80068da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068dc:	6013      	str	r3, [r2, #0]
							pSdoPendFunc = pObjEntry->Write;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006990 <SDOS_SdoInd+0x578>)
 80068e4:	6013      	str	r3, [r2, #0]
							bSdoInWork = TRUE;
 80068e6:	4b2b      	ldr	r3, [pc, #172]	@ (8006994 <SDOS_SdoInd+0x57c>)
 80068e8:	2201      	movs	r2, #1
 80068ea:	701a      	strb	r2, [r3, #0]
							pSdoResStored = pSdoInd;
 80068ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006998 <SDOS_SdoInd+0x580>)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6013      	str	r3, [r2, #0]
							pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 80068f2:	4b29      	ldr	r3, [pc, #164]	@ (8006998 <SDOS_SdoInd+0x580>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	891a      	ldrh	r2, [r3, #8]
 80068f8:	4b27      	ldr	r3, [pc, #156]	@ (8006998 <SDOS_SdoInd+0x580>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006900:	b292      	uxth	r2, r2
 8006902:	811a      	strh	r2, [r3, #8]
							pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 8006904:	4b24      	ldr	r3, [pc, #144]	@ (8006998 <SDOS_SdoInd+0x580>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	891b      	ldrh	r3, [r3, #8]
 800690a:	b21a      	sxth	r2, r3
 800690c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006910:	b21b      	sxth	r3, r3
 8006912:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006916:	b21b      	sxth	r3, r3
 8006918:	4313      	orrs	r3, r2
 800691a:	b21a      	sxth	r2, r3
 800691c:	4b1e      	ldr	r3, [pc, #120]	@ (8006998 <SDOS_SdoInd+0x580>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	b292      	uxth	r2, r2
 8006922:	811a      	strh	r2, [r3, #8]
							return 0;
 8006924:	2300      	movs	r3, #0
 8006926:	e059      	b.n	80069dc <SDOS_SdoInd+0x5c4>
			abort = ABORTIDX_OBJECT_NOT_EXISTING;
 8006928:	2308      	movs	r3, #8
 800692a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 800692e:	e03d      	b.n	80069ac <SDOS_SdoInd+0x594>

	case SDOSERVICE_DOWNLOADSEGMENTREQ:
	case SDOSERVICE_UPLOADSEGMENTREQ:
		if (command == nSdoSegService)
 8006930:	4b10      	ldr	r3, [pc, #64]	@ (8006974 <SDOS_SdoInd+0x55c>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8006938:	429a      	cmp	r2, r3
 800693a:	d111      	bne.n	8006960 <SDOS_SdoInd+0x548>
		{
			if (command == SDOSERVICE_DOWNLOADSEGMENTREQ)
 800693c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006940:	2b00      	cmp	r3, #0
 8006942:	d106      	bne.n	8006952 <SDOS_SdoInd+0x53a>
			{
				abort = SdoDownloadSegmentInd((TDOWNLOADSDOSEGREQMBX MBXMEM *) pSdoInd);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7ff f9c3 	bl	8005cd0 <SdoDownloadSegmentInd>
 800694a:	4603      	mov	r3, r0
 800694c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}
		else
		{
			abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
		}
		break;
 8006950:	e02d      	b.n	80069ae <SDOS_SdoInd+0x596>
				abort = SdoUploadSegmentInd((TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7ff fb7c 	bl	8006050 <SdoUploadSegmentInd>
 8006958:	4603      	mov	r3, r0
 800695a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 800695e:	e026      	b.n	80069ae <SDOS_SdoInd+0x596>
			abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8006960:	2303      	movs	r3, #3
 8006962:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 8006966:	e022      	b.n	80069ae <SDOS_SdoInd+0x596>

	default:
		abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8006968:	2303      	movs	r3, #3
 800696a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 800696e:	e01e      	b.n	80069ae <SDOS_SdoInd+0x596>
 8006970:	24000a98 	.word	0x24000a98
 8006974:	24000aa9 	.word	0x24000aa9
 8006978:	24000a74 	.word	0x24000a74
 800697c:	24000a75 	.word	0x24000a75
 8006980:	24000a76 	.word	0x24000a76
 8006984:	24000a78 	.word	0x24000a78
 8006988:	24000a7c 	.word	0x24000a7c
 800698c:	24000a80 	.word	0x24000a80
 8006990:	24000a84 	.word	0x24000a84
 8006994:	24000aa8 	.word	0x24000aa8
 8006998:	24000aa4 	.word	0x24000aa4
 800699c:	24000ab0 	.word	0x24000ab0
 80069a0:	24000aac 	.word	0x24000aac
 80069a4:	24000aae 	.word	0x24000aae
 80069a8:	24000abc 	.word	0x24000abc
		break;
 80069ac:	bf00      	nop
	}

	if (abort != ABORTIDX_WORKING)
 80069ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069b2:	2bff      	cmp	r3, #255	@ 0xff
 80069b4:	d011      	beq.n	80069da <SDOS_SdoInd+0x5c2>
	{
		/*  type cast was added because of warning */
		SdoRes(abort, command, (UINT8)(sdoHeader & SDOHEADER_COMPLETEACCESS), (UINT16)dataSize, objLength, pSdoInd);
 80069b6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80069ba:	f003 0310 	and.w	r3, r3, #16
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c2:	b29c      	uxth	r4, r3
 80069c4:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 80069c8:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	4623      	mov	r3, r4
 80069d6:	f7ff fc5d 	bl	8006294 <SdoRes>
	}

	return 0;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	373c      	adds	r7, #60	@ 0x3c
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd90      	pop	{r4, r7, pc}

080069e4 <SDOS_SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SDOS_SdoRes(UINT8 abort, UINT32 objLength, UINT16 MBXMEM *pData)
{
 80069e4:	b590      	push	{r4, r7, lr}
 80069e6:	b089      	sub	sp, #36	@ 0x24
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	4603      	mov	r3, r0
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	73fb      	strb	r3, [r7, #15]
	UINT16 dataSize = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	82fb      	strh	r3, [r7, #22]

	if (bSdoInWork)
 80069f6:	4b38      	ldr	r3, [pc, #224]	@ (8006ad8 <SDOS_SdoRes+0xf4>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d068      	beq.n	8006ad0 <SDOS_SdoRes+0xec>
	{
		/* SDO-Response is expected */
		UINT8 command = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMAND;
 80069fe:	4b37      	ldr	r3, [pc, #220]	@ (8006adc <SDOS_SdoRes+0xf8>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	891b      	ldrh	r3, [r3, #8]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	f023 031f 	bic.w	r3, r3, #31
 8006a0a:	757b      	strb	r3, [r7, #21]
		UINT8 completeAccess = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMPLETEACCESS;
 8006a0c:	4b33      	ldr	r3, [pc, #204]	@ (8006adc <SDOS_SdoRes+0xf8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	891b      	ldrh	r3, [r3, #8]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	753b      	strb	r3, [r7, #20]

		if (command == SDOSERVICE_INITIATEUPLOADREQ)
 8006a1a:	7d7b      	ldrb	r3, [r7, #21]
 8006a1c:	2b40      	cmp	r3, #64	@ 0x40
 8006a1e:	d148      	bne.n	8006ab2 <SDOS_SdoRes+0xce>
		{
			/* dataSize contains the available size in one mailbox */
			dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 8006a20:	4b2f      	ldr	r3, [pc, #188]	@ (8006ae0 <SDOS_SdoRes+0xfc>)
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	3b10      	subs	r3, #16
 8006a26:	82fb      	strh	r3, [r7, #22]
			if (dataSize < objLength)
 8006a28:	8afb      	ldrh	r3, [r7, #22]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d91d      	bls.n	8006a6c <SDOS_SdoRes+0x88>
			{
				/* Segmented Upload, the variables for the segmented transfer should be initialized */
				bSdoSegFollows = TRUE;
 8006a30:	4b2c      	ldr	r3, [pc, #176]	@ (8006ae4 <SDOS_SdoRes+0x100>)
 8006a32:	2201      	movs	r2, #1
 8006a34:	701a      	strb	r2, [r3, #0]
				bSdoSegLastToggle = 1;
 8006a36:	4b2c      	ldr	r3, [pc, #176]	@ (8006ae8 <SDOS_SdoRes+0x104>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	701a      	strb	r2, [r3, #0]
				bSdoSegAccess = completeAccess;
 8006a3c:	4a2b      	ldr	r2, [pc, #172]	@ (8006aec <SDOS_SdoRes+0x108>)
 8006a3e:	7d3b      	ldrb	r3, [r7, #20]
 8006a40:	7013      	strb	r3, [r2, #0]
				nSdoSegCompleteSize = objLength;
 8006a42:	4a2b      	ldr	r2, [pc, #172]	@ (8006af0 <SDOS_SdoRes+0x10c>)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	6013      	str	r3, [r2, #0]
				nSdoSegService = SDOSERVICE_UPLOADSEGMENTREQ;
 8006a48:	4b2a      	ldr	r3, [pc, #168]	@ (8006af4 <SDOS_SdoRes+0x110>)
 8006a4a:	2260      	movs	r2, #96	@ 0x60
 8006a4c:	701a      	strb	r2, [r3, #0]
				pSdoSegData = (UINT16 VARMEM *) pData;
 8006a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8006af8 <SDOS_SdoRes+0x114>)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6013      	str	r3, [r2, #0]
				/* the first segment shall be copied */
				MBXMEMCPY((UINT16 *)((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, dataSize);
 8006a54:	4b21      	ldr	r3, [pc, #132]	@ (8006adc <SDOS_SdoRes+0xf8>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3310      	adds	r3, #16
 8006a5a:	8afa      	ldrh	r2, [r7, #22]
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f005 fe1c 	bl	800c69c <memcpy>
				nSdoSegBytesToHandle = dataSize;
 8006a64:	8afb      	ldrh	r3, [r7, #22]
 8006a66:	4a25      	ldr	r2, [pc, #148]	@ (8006afc <SDOS_SdoRes+0x118>)
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	e022      	b.n	8006ab2 <SDOS_SdoRes+0xce>
			}
			else
				if ((objLength <= 4) && (objLength > 0))
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d811      	bhi.n	8006a96 <SDOS_SdoRes+0xb2>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00e      	beq.n	8006a96 <SDOS_SdoRes+0xb2>
				{
					/* Expedited response */
					if (pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data)
 8006a78:	4b18      	ldr	r3, [pc, #96]	@ (8006adc <SDOS_SdoRes+0xf8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d016      	beq.n	8006ab2 <SDOS_SdoRes+0xce>
					{
						/* the data is not in the response buffer yet, it shall be copied */
						MBXMEMCPY((UINT16 *)((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 8006a84:	4b15      	ldr	r3, [pc, #84]	@ (8006adc <SDOS_SdoRes+0xf8>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f005 fe04 	bl	800c69c <memcpy>
					if (pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data)
 8006a94:	e00d      	b.n	8006ab2 <SDOS_SdoRes+0xce>
					}
				}
				else
				{
					/* Normal response */
					if (pData != ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data)
 8006a96:	4b11      	ldr	r3, [pc, #68]	@ (8006adc <SDOS_SdoRes+0xf8>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3310      	adds	r3, #16
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d007      	beq.n	8006ab2 <SDOS_SdoRes+0xce>
					{
						/* the data is not in the response buffer yet, it shall be copied */
						MBXMEMCPY((UINT16 *)((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 8006aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8006adc <SDOS_SdoRes+0xf8>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3310      	adds	r3, #16
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f005 fdf5 	bl	800c69c <memcpy>
					}
				}
		}

		/* SDO access is finished, send the response */
		bSdoInWork = FALSE;
 8006ab2:	4b09      	ldr	r3, [pc, #36]	@ (8006ad8 <SDOS_SdoRes+0xf4>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
		SdoRes(abort, command, completeAccess, dataSize, objLength, pSdoResStored);
 8006ab8:	4b08      	ldr	r3, [pc, #32]	@ (8006adc <SDOS_SdoRes+0xf8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	8afc      	ldrh	r4, [r7, #22]
 8006abe:	7d3a      	ldrb	r2, [r7, #20]
 8006ac0:	7d79      	ldrb	r1, [r7, #21]
 8006ac2:	7bf8      	ldrb	r0, [r7, #15]
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	4623      	mov	r3, r4
 8006acc:	f7ff fbe2 	bl	8006294 <SdoRes>
	}
}
 8006ad0:	bf00      	nop
 8006ad2:	371c      	adds	r7, #28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd90      	pop	{r4, r7, pc}
 8006ad8:	24000aa8 	.word	0x24000aa8
 8006adc:	24000aa4 	.word	0x24000aa4
 8006ae0:	2400095e 	.word	0x2400095e
 8006ae4:	24000aaa 	.word	0x24000aaa
 8006ae8:	24000ab4 	.word	0x24000ab4
 8006aec:	24000aab 	.word	0x24000aab
 8006af0:	24000ab8 	.word	0x24000ab8
 8006af4:	24000aa9 	.word	0x24000aa9
 8006af8:	24000a98 	.word	0x24000a98
 8006afc:	24000ab0 	.word	0x24000ab0

08006b00 <SDOS_ClearPendingResponse>:
\brief    Clear the variables handling a pending SDO Response
		   This function shall be called before the other mailbox data pointer are set to NULL
*////////////////////////////////////////////////////////////////////////////////////////

void  SDOS_ClearPendingResponse(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
	if ((bSdoInWork == TRUE) && (pSdoResStored != NULL) && (((TMBX MBXMEM *)pSdoResStored) != psRepeatMbx) && (((TMBX MBXMEM *)pSdoResStored) != psStoreMbx))
 8006b04:	4b23      	ldr	r3, [pc, #140]	@ (8006b94 <SDOS_ClearPendingResponse+0x94>)
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d117      	bne.n	8006b3c <SDOS_ClearPendingResponse+0x3c>
 8006b0c:	4b22      	ldr	r3, [pc, #136]	@ (8006b98 <SDOS_ClearPendingResponse+0x98>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d013      	beq.n	8006b3c <SDOS_ClearPendingResponse+0x3c>
 8006b14:	4b20      	ldr	r3, [pc, #128]	@ (8006b98 <SDOS_ClearPendingResponse+0x98>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	4b20      	ldr	r3, [pc, #128]	@ (8006b9c <SDOS_ClearPendingResponse+0x9c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d00d      	beq.n	8006b3c <SDOS_ClearPendingResponse+0x3c>
 8006b20:	4b1d      	ldr	r3, [pc, #116]	@ (8006b98 <SDOS_ClearPendingResponse+0x98>)
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	4b1e      	ldr	r3, [pc, #120]	@ (8006ba0 <SDOS_ClearPendingResponse+0xa0>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d007      	beq.n	8006b3c <SDOS_ClearPendingResponse+0x3c>
	{
		APPL_FreeMailboxBuffer(pSdoResStored);
 8006b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8006b98 <SDOS_ClearPendingResponse+0x98>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f005 fcb9 	bl	800c4a8 <free>
		pSdoResStored = NULL;
 8006b36:	4b18      	ldr	r3, [pc, #96]	@ (8006b98 <SDOS_ClearPendingResponse+0x98>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]
	}

	u8PendingSdo = 0;
 8006b3c:	4b19      	ldr	r3, [pc, #100]	@ (8006ba4 <SDOS_ClearPendingResponse+0xa4>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	701a      	strb	r2, [r3, #0]
	bStoreCompleteAccess = FALSE;
 8006b42:	4b19      	ldr	r3, [pc, #100]	@ (8006ba8 <SDOS_ClearPendingResponse+0xa8>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	701a      	strb	r2, [r3, #0]
	u16StoreIndex = 0;
 8006b48:	4b18      	ldr	r3, [pc, #96]	@ (8006bac <SDOS_ClearPendingResponse+0xac>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	801a      	strh	r2, [r3, #0]
	u8StoreSubindex = 0;
 8006b4e:	4b18      	ldr	r3, [pc, #96]	@ (8006bb0 <SDOS_ClearPendingResponse+0xb0>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	701a      	strb	r2, [r3, #0]
	u32StoreDataSize = 0;
 8006b54:	4b17      	ldr	r3, [pc, #92]	@ (8006bb4 <SDOS_ClearPendingResponse+0xb4>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]
	pStoreData = NULL;
 8006b5a:	4b17      	ldr	r3, [pc, #92]	@ (8006bb8 <SDOS_ClearPendingResponse+0xb8>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]
	pSdoPendFunc = NULL;
 8006b60:	4b16      	ldr	r3, [pc, #88]	@ (8006bbc <SDOS_ClearPendingResponse+0xbc>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]
	bSdoInWork = FALSE;
 8006b66:	4b0b      	ldr	r3, [pc, #44]	@ (8006b94 <SDOS_ClearPendingResponse+0x94>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	701a      	strb	r2, [r3, #0]

	if (pSdoSegData != NULL)
 8006b6c:	4b14      	ldr	r3, [pc, #80]	@ (8006bc0 <SDOS_ClearPendingResponse+0xc0>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d007      	beq.n	8006b84 <SDOS_ClearPendingResponse+0x84>
	{
		FREEMEM((UINT16 VARMEM *) pSdoSegData);
 8006b74:	4b12      	ldr	r3, [pc, #72]	@ (8006bc0 <SDOS_ClearPendingResponse+0xc0>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f005 fc95 	bl	800c4a8 <free>
		pSdoSegData = NULL;
 8006b7e:	4b10      	ldr	r3, [pc, #64]	@ (8006bc0 <SDOS_ClearPendingResponse+0xc0>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]
	}

	nSdoSegBytesToHandle = 0;
 8006b84:	4b0f      	ldr	r3, [pc, #60]	@ (8006bc4 <SDOS_ClearPendingResponse+0xc4>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	601a      	str	r2, [r3, #0]
	nSdoSegService = 0;
 8006b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006bc8 <SDOS_ClearPendingResponse+0xc8>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	701a      	strb	r2, [r3, #0]

}
 8006b90:	bf00      	nop
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	24000aa8 	.word	0x24000aa8
 8006b98:	24000aa4 	.word	0x24000aa4
 8006b9c:	24000974 	.word	0x24000974
 8006ba0:	24000978 	.word	0x24000978
 8006ba4:	24000a74 	.word	0x24000a74
 8006ba8:	24000a75 	.word	0x24000a75
 8006bac:	24000a78 	.word	0x24000a78
 8006bb0:	24000a76 	.word	0x24000a76
 8006bb4:	24000a7c 	.word	0x24000a7c
 8006bb8:	24000a80 	.word	0x24000a80
 8006bbc:	24000a84 	.word	0x24000a84
 8006bc0:	24000a98 	.word	0x24000a98
 8006bc4:	24000ab0 	.word	0x24000ab0
 8006bc8:	24000aa9 	.word	0x24000aa9

08006bcc <SDOS_SdoInfoInd>:
			is received from the master and calls depending from
			the opcode the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInfoInd(TSDOINFORMATION MBXMEM *pSdoInfoInd)
{
 8006bcc:	b590      	push	{r4, r7, lr}
 8006bce:	b08f      	sub	sp, #60	@ 0x3c
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	6078      	str	r0, [r7, #4]
	UINT8 abort = 0;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	73fb      	strb	r3, [r7, #15]
	/* the variable opCode contains the requested SDO Information type */
	UINT8 opCode = (UINT8)((pSdoInfoInd->SdoHeader.InfoHead & INFOHEAD_OPCODE_MASK) >> INFOHEAD_OPCODE_SHIFT);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	891b      	ldrh	r3, [r3, #8]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006be2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	OBJCONST TOBJECT OBJMEM * pObjEntry;
	UINT16 index;
	UINT8 flags = COE_SERVICE;
 8006be6:	2302      	movs	r3, #2
 8006be8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	/* it has to be checked if the mailbox protocol is correct, the sent mailbox data length has to
	   great enough for the service header of the requested SDO Information type */
	if (opCode == SDOINFOSERVICE_ENTRYDESCRIPTION_Q)
 8006bec:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006bf0:	2b05      	cmp	r3, #5
 8006bf2:	d105      	bne.n	8006c00 <SDOS_SdoInfoInd+0x34>
	{
		if (pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOENTRYREQSTRUCT)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	2b09      	cmp	r3, #9
 8006bfa:	d807      	bhi.n	8006c0c <SDOS_SdoInfoInd+0x40>
		{
			return MBXERR_SIZETOOSHORT;
 8006bfc:	2306      	movs	r3, #6
 8006bfe:	e1d6      	b.n	8006fae <SDOS_SdoInfoInd+0x3e2>
		}
	}
	else
	{
		if (pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOLISTSTRUCT)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	2b07      	cmp	r3, #7
 8006c06:	d801      	bhi.n	8006c0c <SDOS_SdoInfoInd+0x40>
		{
			return MBXERR_SIZETOOSHORT;
 8006c08:	2306      	movs	r3, #6
 8006c0a:	e1d0      	b.n	8006fae <SDOS_SdoInfoInd+0x3e2>
		}
	}

	switch (opCode)
 8006c0c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006c10:	2b05      	cmp	r3, #5
 8006c12:	f000 80c9 	beq.w	8006da8 <SDOS_SdoInfoInd+0x1dc>
 8006c16:	2b05      	cmp	r3, #5
 8006c18:	f300 8195 	bgt.w	8006f46 <SDOS_SdoInfoInd+0x37a>
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d003      	beq.n	8006c28 <SDOS_SdoInfoInd+0x5c>
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	f000 80c1 	beq.w	8006da8 <SDOS_SdoInfoInd+0x1dc>
 8006c26:	e18e      	b.n	8006f46 <SDOS_SdoInfoInd+0x37a>
	{
	case SDOINFOSERVICE_OBJDICTIONARYLIST_Q:
		/* an object list is requested, check if the list type is supported */
		if (SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType) <= INFO_LIST_TYPE_MAX)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	899b      	ldrh	r3, [r3, #12]
 8006c2c:	2b05      	cmp	r3, #5
 8006c2e:	f200 818d 	bhi.w	8006f4c <SDOS_SdoInfoInd+0x380>
		{
			UINT16 size = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			/* the variable listType contains the requested listType */
			UINT8 listType = (UINT8)SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	899b      	ldrh	r3, [r3, #12]
 8006c3a:	75fb      	strb	r3, [r7, #23]

			/* the SDO Information Header has to be stored because this function will be
			   called again if the response could not be sent with one mailbox service, the
			   variable nSdoInfoFragmentsLeft is 0 zero for the first call and unequal 0
			   for the following calls */
			MBXMEMCPY(aSdoInfoHeader, pSdoInfoInd, SDO_INFO_HEADER_BYTE_SIZE);
 8006c3c:	220e      	movs	r2, #14
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	489c      	ldr	r0, [pc, #624]	@ (8006eb4 <SDOS_SdoInfoInd+0x2e8>)
 8006c42:	f005 fd2b 	bl	800c69c <memcpy>
			if (listType-- == 0)
 8006c46:	7dfb      	ldrb	r3, [r7, #23]
 8006c48:	1e5a      	subs	r2, r3, #1
 8006c4a:	75fa      	strb	r2, [r7, #23]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d122      	bne.n	8006c96 <SDOS_SdoInfoInd+0xca>
				/* List-Type 0: length of the lists */
				UINT8 i;

				/* the needed mailbox size for List-Type 0 response is just 24 bytes, the mailbox has always
				   to be at least 24 bytes to support the SDO Information service */
				nSdoInfoFragmentsLeft = 0;
 8006c50:	4b99      	ldr	r3, [pc, #612]	@ (8006eb8 <SDOS_SdoInfoInd+0x2ec>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	801a      	strh	r2, [r3, #0]
				for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 8006c56:	2300      	movs	r3, #0
 8006c58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c5c:	e014      	b.n	8006c88 <SDOS_SdoInfoInd+0xbc>
				{
					UINT16 n = OBJ_GetNoOfObjects(i);
 8006c5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fd fd7e 	bl	8004764 <OBJ_GetNoOfObjects>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	823b      	strh	r3, [r7, #16]

					/* copy the number of objects of the list type in the SDO Information response */
					((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[(SIZEOF_SDOINFOLISTSTRUCT >> 1) + i] = SWAPWORD(n);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	1d9a      	adds	r2, r3, #6
 8006c70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c74:	3304      	adds	r3, #4
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	4413      	add	r3, r2
 8006c7a:	8a3a      	ldrh	r2, [r7, #16]
 8006c7c:	801a      	strh	r2, [r3, #0]
				for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 8006c7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c82:	3301      	adds	r3, #1
 8006c84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	d9e6      	bls.n	8006c5e <SDOS_SdoInfoInd+0x92>
				}

				/* size of the mailbox service response */
				size = (INFO_LIST_TYPE_MAX << 1) + SIZEOF_SDOINFOLISTSTRUCT;
 8006c90:	2312      	movs	r3, #18
 8006c92:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006c94:	e058      	b.n	8006d48 <SDOS_SdoInfoInd+0x17c>
			}
			else
			{
				/* object list with indexes is requested */
				UINT16 MBXMEM * pData;
				UINT16 n = 0;
 8006c96:	2300      	movs	r3, #0
 8006c98:	82bb      	strh	r3, [r7, #20]

				if (nSdoInfoFragmentsLeft)
 8006c9a:	4b87      	ldr	r3, [pc, #540]	@ (8006eb8 <SDOS_SdoInfoInd+0x2ec>)
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d011      	beq.n	8006cc6 <SDOS_SdoInfoInd+0xfa>
				{
					/* the next fragment of the SDO Information response shall be sent */
					/* initialize size with the maximum size fits into one mailbox service */
					{
						size = u16SendMbxSize - SIZEOF_SDOINFO - MBX_HEADER_SIZE;
 8006ca2:	4b86      	ldr	r3, [pc, #536]	@ (8006ebc <SDOS_SdoInfoInd+0x2f0>)
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	3b0c      	subs	r3, #12
 8006ca8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					}
					/* initialize pData with the pointer where the fragment has to be copied */
					pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFO >> 1];
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3306      	adds	r3, #6
 8006cae:	3306      	adds	r3, #6
 8006cb0:	627b      	str	r3, [r7, #36]	@ 0x24
					/* initialize index with the next index to be sent */
					index = nSdoInfoIndex;
 8006cb2:	4b83      	ldr	r3, [pc, #524]	@ (8006ec0 <SDOS_SdoInfoInd+0x2f4>)
 8006cb4:	881b      	ldrh	r3, [r3, #0]
 8006cb6:	81bb      	strh	r3, [r7, #12]
					/* decrement the number of fragments to be sent */
					nSdoInfoFragmentsLeft--;
 8006cb8:	4b7f      	ldr	r3, [pc, #508]	@ (8006eb8 <SDOS_SdoInfoInd+0x2ec>)
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	4b7d      	ldr	r3, [pc, #500]	@ (8006eb8 <SDOS_SdoInfoInd+0x2ec>)
 8006cc2:	801a      	strh	r2, [r3, #0]
 8006cc4:	e029      	b.n	8006d1a <SDOS_SdoInfoInd+0x14e>
				}
				else
				{
					/* the first fragment of the SDO Information response has to be sent */
					/* get the number of objects of the requested object list */
					n = OBJ_GetNoOfObjects(listType);
 8006cc6:	7dfb      	ldrb	r3, [r7, #23]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7fd fd4b 	bl	8004764 <OBJ_GetNoOfObjects>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	82bb      	strh	r3, [r7, #20]
					/* we start with index 0x1000 */
					index = 0x1000;
 8006cd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006cd6:	81bb      	strh	r3, [r7, #12]
					/* initialize size with the maximum size fits into one mailbox service */
					{
						size = u16SendMbxSize - SIZEOF_SDOINFOLISTSTRUCT - MBX_HEADER_SIZE;
 8006cd8:	4b78      	ldr	r3, [pc, #480]	@ (8006ebc <SDOS_SdoInfoInd+0x2f0>)
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	3b0e      	subs	r3, #14
 8006cde:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					}
					/* initialize pData with the pointer where the fragment has to be copied */
					pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFOLISTSTRUCT >> 1];
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3306      	adds	r3, #6
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	627b      	str	r3, [r7, #36]	@ 0x24
					/*Check if List need to be send in fragments*/
					if ((n << 1) > size)
 8006ce8:	8abb      	ldrh	r3, [r7, #20]
 8006cea:	005a      	lsls	r2, r3, #1
 8006cec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	dd10      	ble.n	8006d14 <SDOS_SdoInfoInd+0x148>
						/*number of Bytes to transmit don't fit into one mailbox datagram*/

						/*calculate number of fragments which need to be send
						total number of bytes - bytes which will be transmitted with the current response plus the fragment size - 1 (to round up) divided by the size of the following fragments
						*/
						UINT16 Fragsize = size + 2;
 8006cf2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006cf4:	3302      	adds	r3, #2
 8006cf6:	827b      	strh	r3, [r7, #18]

						nSdoInfoFragmentsLeft = (((n << 1) - size + (Fragsize - 1)) / Fragsize);
 8006cf8:	8abb      	ldrh	r3, [r7, #20]
 8006cfa:	005a      	lsls	r2, r3, #1
 8006cfc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	8a7b      	ldrh	r3, [r7, #18]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	441a      	add	r2, r3
 8006d06:	8a7b      	ldrh	r3, [r7, #18]
 8006d08:	fb92 f3f3 	sdiv	r3, r2, r3
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	4b6a      	ldr	r3, [pc, #424]	@ (8006eb8 <SDOS_SdoInfoInd+0x2ec>)
 8006d10:	801a      	strh	r2, [r3, #0]
 8006d12:	e002      	b.n	8006d1a <SDOS_SdoInfoInd+0x14e>
					}
					else
					{
						nSdoInfoFragmentsLeft = 0;
 8006d14:	4b68      	ldr	r3, [pc, #416]	@ (8006eb8 <SDOS_SdoInfoInd+0x2ec>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	801a      	strh	r2, [r3, #0]
					}
				}

				/* get the next part of the requested object list */
				size = OBJ_GetObjectList(listType, &index, size, pData, &abort);
 8006d1a:	7dfb      	ldrb	r3, [r7, #23]
 8006d1c:	b298      	uxth	r0, r3
 8006d1e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006d20:	f107 010c 	add.w	r1, r7, #12
 8006d24:	f107 030f 	add.w	r3, r7, #15
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	f7fd fd66 	bl	80047fc <OBJ_GetObjectList>
 8006d30:	4603      	mov	r3, r0
 8006d32:	85bb      	strh	r3, [r7, #44]	@ 0x2c

				/* store index for next fragment */
				nSdoInfoIndex = index;
 8006d34:	89ba      	ldrh	r2, [r7, #12]
 8006d36:	4b62      	ldr	r3, [pc, #392]	@ (8006ec0 <SDOS_SdoInfoInd+0x2f4>)
 8006d38:	801a      	strh	r2, [r3, #0]
				/* size contains before the instruction the size still available in the mailbox buffer
					and shall contain the size of the mailbox response data after the next instruction */
				{
					size = u16SendMbxSize - size - MBX_HEADER_SIZE;
 8006d3a:	4b60      	ldr	r3, [pc, #384]	@ (8006ebc <SDOS_SdoInfoInd+0x2f0>)
 8006d3c:	881a      	ldrh	r2, [r3, #0]
 8006d3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	3b06      	subs	r3, #6
 8006d46:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				}
			}

			/* size of the mailbox response data */
			pSdoInfoInd->MbxHeader.Length = size;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006d4c:	801a      	strh	r2, [r3, #0]

			if (abort == 0)
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f040 80fb 	bne.w	8006f4c <SDOS_SdoInfoInd+0x380>
			{
				pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	891b      	ldrh	r3, [r3, #8]
 8006d5a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	811a      	strh	r2, [r3, #8]
				pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)(SDOINFOSERVICE_OBJDICTIONARYLIST_S << INFOHEAD_OPCODE_SHIFT);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	891b      	ldrh	r3, [r3, #8]
 8006d68:	f043 0302 	orr.w	r3, r3, #2
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	811a      	strh	r2, [r3, #8]
				/* number of fragments still has to be sent */
				pSdoInfoInd->SdoHeader.FragmentsLeft = SWAPWORD(nSdoInfoFragmentsLeft);
 8006d72:	4b51      	ldr	r3, [pc, #324]	@ (8006eb8 <SDOS_SdoInfoInd+0x2ec>)
 8006d74:	881a      	ldrh	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	815a      	strh	r2, [r3, #10]

				if (nSdoInfoFragmentsLeft)
 8006d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8006eb8 <SDOS_SdoInfoInd+0x2ec>)
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 80e4 	beq.w	8006f4c <SDOS_SdoInfoInd+0x380>
				{
					/* there still are fragments to be sent,
					   the InComplete flag in the SDO Information response has to be sent */
					pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEADER_INCOMPLETE_MASK;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	891b      	ldrh	r3, [r3, #8]
 8006d88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	811a      	strh	r2, [r3, #8]
					pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)(SDOINFOSERVICE_INCOMPLETE << INFOHEAD_OPCODE_SHIFT);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	891b      	ldrh	r3, [r3, #8]
 8006d96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	811a      	strh	r2, [r3, #8]
					/* the FRAGMENTS_FOLLOW flag has to be set for the function MBX_MailboxSendReq to
					   indicate the mailbox handler that still fragments has to be sent so that this
						function shall be called again from COE_ContinueInd when the actual mailbox buffer
						was sent */
					flags = FRAGMENTS_FOLLOW | COE_SERVICE;
 8006da0:	2382      	movs	r3, #130	@ 0x82
 8006da2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				}
			}
		}
		break;
 8006da6:	e0d1      	b.n	8006f4c <SDOS_SdoInfoInd+0x380>

	case SDOINFOSERVICE_OBJDESCRIPTION_Q:
	case SDOINFOSERVICE_ENTRYDESCRIPTION_Q:
		/* get the requested index */
		index = SWAPWORD(pSdoInfoInd->SdoHeader.Data.Obj.Index);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	899b      	ldrh	r3, [r3, #12]
 8006dac:	81bb      	strh	r3, [r7, #12]



		if (index < 0x1000)
 8006dae:	89bb      	ldrh	r3, [r7, #12]
 8006db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006db4:	d202      	bcs.n	8006dbc <SDOS_SdoInfoInd+0x1f0>
		{
			/*SDO Info access is only allowed for objects >= 0x1000*/
			abort = ABORTIDX_UNSUPPORTED_ACCESS;
 8006db6:	2305      	movs	r3, #5
 8006db8:	73fb      	strb	r3, [r7, #15]
			else
			{
				abort = ABORTIDX_OBJECT_NOT_EXISTING;
			}
		}
		break;
 8006dba:	e0c9      	b.n	8006f50 <SDOS_SdoInfoInd+0x384>
			pObjEntry = OBJ_GetObjectHandle(index);
 8006dbc:	89bb      	ldrh	r3, [r7, #12]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fd fbda 	bl	8004578 <OBJ_GetObjectHandle>
 8006dc4:	61f8      	str	r0, [r7, #28]
			if (pObjEntry)
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 80b9 	beq.w	8006f40 <SDOS_SdoInfoInd+0x374>
				UINT16 size = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (opCode == SDOINFOSERVICE_OBJDESCRIPTION_Q)
 8006dd2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d126      	bne.n	8006e28 <SDOS_SdoInfoInd+0x25c>
					OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Obj.Res, OBJ_GetObjDesc(pObjEntry), SDO_INFO_OBJ_DESC_SIZE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f103 040e 	add.w	r4, r3, #14
 8006de0:	69f8      	ldr	r0, [r7, #28]
 8006de2:	f7fd fe49 	bl	8004a78 <OBJ_GetObjDesc>
 8006de6:	4603      	mov	r3, r0
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6023      	str	r3, [r4, #0]
					size = OBJ_GetDesc(index, 0, pObjEntry, NULL) + SIZEOF_SDOINFOOBJSTRUCT;
 8006dec:	89b8      	ldrh	r0, [r7, #12]
 8006dee:	2300      	movs	r3, #0
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	2100      	movs	r1, #0
 8006df4:	f7fd fd80 	bl	80048f8 <OBJ_GetDesc>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	330c      	adds	r3, #12
 8006dfc:	847b      	strh	r3, [r7, #34]	@ 0x22
					if (size > (u16SendMbxSize - MBX_HEADER_SIZE))
 8006dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8006ebc <SDOS_SdoInfoInd+0x2f0>)
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	1f5a      	subs	r2, r3, #5
 8006e04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006e06:	429a      	cmp	r2, r3
 8006e08:	dc02      	bgt.n	8006e10 <SDOS_SdoInfoInd+0x244>
						size = SIZEOF_SDOINFOOBJSTRUCT;
 8006e0a:	230c      	movs	r3, #12
 8006e0c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006e0e:	e07b      	b.n	8006f08 <SDOS_SdoInfoInd+0x33c>
						size = OBJ_GetDesc(index, 0, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Obj.Res)[1])) + SIZEOF_SDOINFOOBJSTRUCT;
 8006e10:	89b8      	ldrh	r0, [r7, #12]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	330e      	adds	r3, #14
 8006e16:	3304      	adds	r3, #4
 8006e18:	69fa      	ldr	r2, [r7, #28]
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	f7fd fd6c 	bl	80048f8 <OBJ_GetDesc>
 8006e20:	4603      	mov	r3, r0
 8006e22:	330c      	adds	r3, #12
 8006e24:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006e26:	e06f      	b.n	8006f08 <SDOS_SdoInfoInd+0x33c>
					UINT8 subindex = (UINT8)((pSdoInfoInd->SdoHeader.Data.Entry.Info & ENTRY_MASK_SUBINDEX) >> ENTRY_SUBINDEX_SHIFT);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	89db      	ldrh	r3, [r3, #14]
 8006e2c:	76fb      	strb	r3, [r7, #27]
					UINT8 maxSubindex = (OBJ_GetObjDesc(pObjEntry)->ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8006e2e:	69f8      	ldr	r0, [r7, #28]
 8006e30:	f7fd fe22 	bl	8004a78 <OBJ_GetObjDesc>
 8006e34:	4603      	mov	r3, r0
 8006e36:	885b      	ldrh	r3, [r3, #2]
 8006e38:	76bb      	strb	r3, [r7, #26]
					if (subindex <= maxSubindex)
 8006e3a:	7efa      	ldrb	r2, [r7, #27]
 8006e3c:	7ebb      	ldrb	r3, [r7, #26]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d860      	bhi.n	8006f04 <SDOS_SdoInfoInd+0x338>
						OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Entry.Res, OBJ_GetEntryDesc(pObjEntry, subindex), SIZEOF(TSDOINFOENTRYDESC));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f103 0410 	add.w	r4, r3, #16
 8006e48:	7efb      	ldrb	r3, [r7, #27]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	69f8      	ldr	r0, [r7, #28]
 8006e4e:	f7fd fde7 	bl	8004a20 <OBJ_GetEntryDesc>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2206      	movs	r2, #6
 8006e56:	4619      	mov	r1, r3
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f005 fc1f 	bl	800c69c <memcpy>
						pSdoInfoInd->SdoHeader.Data.Entry.Info &= ~ENTRY_MASK_VALUEINFO;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	89db      	ldrh	r3, [r3, #14]
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	81da      	strh	r2, [r3, #14]
						ObjectFlags = OBJ_GetObjDesc(pObjEntry)->ObjFlags;
 8006e6a:	69f8      	ldr	r0, [r7, #28]
 8006e6c:	f7fd fe04 	bl	8004a78 <OBJ_GetObjDesc>
 8006e70:	4603      	mov	r3, r0
 8006e72:	885b      	ldrh	r3, [r3, #2]
 8006e74:	833b      	strh	r3, [r7, #24]
						ObjectFlags = (ObjectFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8006e76:	8b3b      	ldrh	r3, [r7, #24]
 8006e78:	121b      	asrs	r3, r3, #8
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	f003 030f 	and.w	r3, r3, #15
 8006e80:	833b      	strh	r3, [r7, #24]
						if (((ObjectFlags == OBJCODE_ARR) || (ObjectFlags == OBJCODE_REC)) && (subindex == 0))
 8006e82:	8b3b      	ldrh	r3, [r7, #24]
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d002      	beq.n	8006e8e <SDOS_SdoInfoInd+0x2c2>
 8006e88:	8b3b      	ldrh	r3, [r7, #24]
 8006e8a:	2b09      	cmp	r3, #9
 8006e8c:	d11c      	bne.n	8006ec8 <SDOS_SdoInfoInd+0x2fc>
 8006e8e:	7efb      	ldrb	r3, [r7, #27]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d119      	bne.n	8006ec8 <SDOS_SdoInfoInd+0x2fc>
							OBJTOMBXSTRCPY(((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1]), aSubindexDesc, SIZEOF(aSubindexDesc));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3310      	adds	r3, #16
 8006e98:	3306      	adds	r3, #6
 8006e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8006ec4 <SDOS_SdoInfoInd+0x2f8>)
 8006e9c:	6814      	ldr	r4, [r2, #0]
 8006e9e:	6850      	ldr	r0, [r2, #4]
 8006ea0:	6891      	ldr	r1, [r2, #8]
 8006ea2:	601c      	str	r4, [r3, #0]
 8006ea4:	6058      	str	r0, [r3, #4]
 8006ea6:	6099      	str	r1, [r3, #8]
 8006ea8:	7b12      	ldrb	r2, [r2, #12]
 8006eaa:	731a      	strb	r2, [r3, #12]
							size = 12 + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY); // 12: Length of "SubIndex 000"
 8006eac:	231c      	movs	r3, #28
 8006eae:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006eb0:	e02a      	b.n	8006f08 <SDOS_SdoInfoInd+0x33c>
 8006eb2:	bf00      	nop
 8006eb4:	24000a88 	.word	0x24000a88
 8006eb8:	24000a9c 	.word	0x24000a9c
 8006ebc:	2400095e 	.word	0x2400095e
 8006ec0:	24000a9e 	.word	0x24000a9e
 8006ec4:	240003a0 	.word	0x240003a0
							size = OBJ_GetDesc(index, subindex, pObjEntry, NULL) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 8006ec8:	89b8      	ldrh	r0, [r7, #12]
 8006eca:	7ef9      	ldrb	r1, [r7, #27]
 8006ecc:	2300      	movs	r3, #0
 8006ece:	69fa      	ldr	r2, [r7, #28]
 8006ed0:	f7fd fd12 	bl	80048f8 <OBJ_GetDesc>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	3310      	adds	r3, #16
 8006ed8:	847b      	strh	r3, [r7, #34]	@ 0x22
							if (size > (u16SendMbxSize - MBX_HEADER_SIZE))
 8006eda:	4b37      	ldr	r3, [pc, #220]	@ (8006fb8 <SDOS_SdoInfoInd+0x3ec>)
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	1f5a      	subs	r2, r3, #5
 8006ee0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	dc02      	bgt.n	8006eec <SDOS_SdoInfoInd+0x320>
								size = SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 8006ee6:	2310      	movs	r3, #16
 8006ee8:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006eea:	e00d      	b.n	8006f08 <SDOS_SdoInfoInd+0x33c>
								size = OBJ_GetDesc(index, subindex, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1])) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 8006eec:	89b8      	ldrh	r0, [r7, #12]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3310      	adds	r3, #16
 8006ef2:	3306      	adds	r3, #6
 8006ef4:	7ef9      	ldrb	r1, [r7, #27]
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	f7fd fcfe 	bl	80048f8 <OBJ_GetDesc>
 8006efc:	4603      	mov	r3, r0
 8006efe:	3310      	adds	r3, #16
 8006f00:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006f02:	e001      	b.n	8006f08 <SDOS_SdoInfoInd+0x33c>
						abort = ABORTIDX_SUBINDEX_NOT_EXISTING;
 8006f04:	2311      	movs	r3, #17
 8006f06:	73fb      	strb	r3, [r7, #15]
				if (abort == 0)
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d120      	bne.n	8006f50 <SDOS_SdoInfoInd+0x384>
						pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	815a      	strh	r2, [r3, #10]
						pSdoInfoInd->MbxHeader.Length = size;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006f18:	801a      	strh	r2, [r3, #0]
						pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	891b      	ldrh	r3, [r3, #8]
 8006f1e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	811a      	strh	r2, [r3, #8]
						pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)((opCode + 1) << INFOHEAD_OPCODE_SHIFT);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	891a      	ldrh	r2, [r3, #8]
 8006f2c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	3301      	adds	r3, #1
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	4313      	orrs	r3, r2
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	811a      	strh	r2, [r3, #8]
		break;
 8006f3e:	e007      	b.n	8006f50 <SDOS_SdoInfoInd+0x384>
				abort = ABORTIDX_OBJECT_NOT_EXISTING;
 8006f40:	2308      	movs	r3, #8
 8006f42:	73fb      	strb	r3, [r7, #15]
		break;
 8006f44:	e004      	b.n	8006f50 <SDOS_SdoInfoInd+0x384>
	default:
		abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8006f46:	2303      	movs	r3, #3
 8006f48:	73fb      	strb	r3, [r7, #15]
 8006f4a:	e002      	b.n	8006f52 <SDOS_SdoInfoInd+0x386>
		break;
 8006f4c:	bf00      	nop
 8006f4e:	e000      	b.n	8006f52 <SDOS_SdoInfoInd+0x386>
		break;
 8006f50:	bf00      	nop
	}

	if (abort)
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01d      	beq.n	8006f94 <SDOS_SdoInfoInd+0x3c8>
	{
		/* send a SDO Information Error response */
		pSdoInfoInd->MbxHeader.Length = SIZEOF_SDOINFOERRORSTRUCT;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	220a      	movs	r2, #10
 8006f5c:	801a      	strh	r2, [r3, #0]

		pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	891b      	ldrh	r3, [r3, #8]
 8006f62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	811a      	strh	r2, [r3, #8]
		pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)((SDOINFOSERVICE_ERROR_Q) << INFOHEAD_OPCODE_SHIFT);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	891b      	ldrh	r3, [r3, #8]
 8006f70:	f043 0307 	orr.w	r3, r3, #7
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	811a      	strh	r2, [r3, #8]

		pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	815a      	strh	r2, [r3, #10]
		pSdoInfoInd->SdoHeader.Data.Error.ErrorCode = SWAPDWORD(cAbortCode[abort]);
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	461a      	mov	r2, r3
 8006f84:	4b0d      	ldr	r3, [pc, #52]	@ (8006fbc <SDOS_SdoInfoInd+0x3f0>)
 8006f86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	60da      	str	r2, [r3, #12]

		nSdoInfoFragmentsLeft = 0;
 8006f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006fc0 <SDOS_SdoInfoInd+0x3f4>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	801a      	strh	r2, [r3, #0]
	}

	if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoInfoInd, flags) != 0)
 8006f94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fd f8f2 	bl	8004184 <MBX_MailboxSendReq>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d002      	beq.n	8006fac <SDOS_SdoInfoInd+0x3e0>
	{
		/* if the mailbox response could not be sent (or stored), the response will be
		   stored in the variable pCoeSendStored and will be sent automatically
			from the mailbox handler (COE_ContinueInd) when the send mailbox will be read
			the next time from the master */
		pCoeSendStored = (TMBX MBXMEM *) pSdoInfoInd;
 8006fa6:	4a07      	ldr	r2, [pc, #28]	@ (8006fc4 <SDOS_SdoInfoInd+0x3f8>)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6013      	str	r3, [r2, #0]
	}

	return 0;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3734      	adds	r7, #52	@ 0x34
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd90      	pop	{r4, r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	2400095e 	.word	0x2400095e
 8006fbc:	0800cd80 	.word	0x0800cd80
 8006fc0:	24000a9c 	.word	0x24000a9c
 8006fc4:	24000908 	.word	0x24000908

08006fc8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	@ 0x28
 8006fcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fce:	f107 0314 	add.w	r3, r7, #20
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	605a      	str	r2, [r3, #4]
 8006fd8:	609a      	str	r2, [r3, #8]
 8006fda:	60da      	str	r2, [r3, #12]
 8006fdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fde:	4b6c      	ldr	r3, [pc, #432]	@ (8007190 <MX_GPIO_Init+0x1c8>)
 8006fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fe4:	4a6a      	ldr	r2, [pc, #424]	@ (8007190 <MX_GPIO_Init+0x1c8>)
 8006fe6:	f043 0304 	orr.w	r3, r3, #4
 8006fea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006fee:	4b68      	ldr	r3, [pc, #416]	@ (8007190 <MX_GPIO_Init+0x1c8>)
 8006ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ff4:	f003 0304 	and.w	r3, r3, #4
 8006ff8:	613b      	str	r3, [r7, #16]
 8006ffa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006ffc:	4b64      	ldr	r3, [pc, #400]	@ (8007190 <MX_GPIO_Init+0x1c8>)
 8006ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007002:	4a63      	ldr	r2, [pc, #396]	@ (8007190 <MX_GPIO_Init+0x1c8>)
 8007004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007008:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800700c:	4b60      	ldr	r3, [pc, #384]	@ (8007190 <MX_GPIO_Init+0x1c8>)
 800700e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800701a:	4b5d      	ldr	r3, [pc, #372]	@ (8007190 <MX_GPIO_Init+0x1c8>)
 800701c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007020:	4a5b      	ldr	r2, [pc, #364]	@ (8007190 <MX_GPIO_Init+0x1c8>)
 8007022:	f043 0301 	orr.w	r3, r3, #1
 8007026:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800702a:	4b59      	ldr	r3, [pc, #356]	@ (8007190 <MX_GPIO_Init+0x1c8>)
 800702c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	60bb      	str	r3, [r7, #8]
 8007036:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007038:	4b55      	ldr	r3, [pc, #340]	@ (8007190 <MX_GPIO_Init+0x1c8>)
 800703a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800703e:	4a54      	ldr	r2, [pc, #336]	@ (8007190 <MX_GPIO_Init+0x1c8>)
 8007040:	f043 0302 	orr.w	r3, r3, #2
 8007044:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007048:	4b51      	ldr	r3, [pc, #324]	@ (8007190 <MX_GPIO_Init+0x1c8>)
 800704a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	607b      	str	r3, [r7, #4]
 8007054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007056:	4b4e      	ldr	r3, [pc, #312]	@ (8007190 <MX_GPIO_Init+0x1c8>)
 8007058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800705c:	4a4c      	ldr	r2, [pc, #304]	@ (8007190 <MX_GPIO_Init+0x1c8>)
 800705e:	f043 0310 	orr.w	r3, r3, #16
 8007062:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007066:	4b4a      	ldr	r3, [pc, #296]	@ (8007190 <MX_GPIO_Init+0x1c8>)
 8007068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800706c:	f003 0310 	and.w	r3, r3, #16
 8007070:	603b      	str	r3, [r7, #0]
 8007072:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin, GPIO_PIN_RESET);
 8007074:	2200      	movs	r2, #0
 8007076:	2104      	movs	r1, #4
 8007078:	4846      	ldr	r0, [pc, #280]	@ (8007194 <MX_GPIO_Init+0x1cc>)
 800707a:	f001 fbe9 	bl	8008850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_TO_ESC_RST_GPIO_Port, MCU_TO_ESC_RST_Pin, GPIO_PIN_RESET);
 800707e:	2200      	movs	r2, #0
 8007080:	2101      	movs	r1, #1
 8007082:	4845      	ldr	r0, [pc, #276]	@ (8007198 <MX_GPIO_Init+0x1d0>)
 8007084:	f001 fbe4 	bl	8008850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_SPI_CS_GPIO_Port, ESC_SPI_CS_Pin, GPIO_PIN_RESET);
 8007088:	2200      	movs	r2, #0
 800708a:	2180      	movs	r1, #128	@ 0x80
 800708c:	4843      	ldr	r0, [pc, #268]	@ (800719c <MX_GPIO_Init+0x1d4>)
 800708e:	f001 fbdf 	bl	8008850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8007092:	2200      	movs	r2, #0
 8007094:	2102      	movs	r1, #2
 8007096:	4842      	ldr	r0, [pc, #264]	@ (80071a0 <MX_GPIO_Init+0x1d8>)
 8007098:	f001 fbda 	bl	8008850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESC_TO_MCU_RST_Pin;
 800709c:	2301      	movs	r3, #1
 800709e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070a0:	2300      	movs	r3, #0
 80070a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a4:	2300      	movs	r3, #0
 80070a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESC_TO_MCU_RST_GPIO_Port, &GPIO_InitStruct);
 80070a8:	f107 0314 	add.w	r3, r7, #20
 80070ac:	4619      	mov	r1, r3
 80070ae:	4839      	ldr	r0, [pc, #228]	@ (8007194 <MX_GPIO_Init+0x1cc>)
 80070b0:	f001 fa06 	bl	80084c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLINK_Pin;
 80070b4:	2304      	movs	r3, #4
 80070b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070b8:	2301      	movs	r3, #1
 80070ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80070bc:	2302      	movs	r3, #2
 80070be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070c0:	2300      	movs	r3, #0
 80070c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLINK_GPIO_Port, &GPIO_InitStruct);
 80070c4:	f107 0314 	add.w	r3, r7, #20
 80070c8:	4619      	mov	r1, r3
 80070ca:	4832      	ldr	r0, [pc, #200]	@ (8007194 <MX_GPIO_Init+0x1cc>)
 80070cc:	f001 f9f8 	bl	80084c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ESC_SPI_SINT_Pin|ESC_SYNC_L1_Pin|ESC_SYNC_L0_Pin;
 80070d0:	f241 0318 	movw	r3, #4120	@ 0x1018
 80070d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80070d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80070da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80070dc:	2301      	movs	r3, #1
 80070de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070e0:	f107 0314 	add.w	r3, r7, #20
 80070e4:	4619      	mov	r1, r3
 80070e6:	482b      	ldr	r0, [pc, #172]	@ (8007194 <MX_GPIO_Init+0x1cc>)
 80070e8:	f001 f9ea 	bl	80084c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_TO_ESC_RST_Pin;
 80070ec:	2301      	movs	r3, #1
 80070ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070f0:	2301      	movs	r3, #1
 80070f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80070f8:	2301      	movs	r3, #1
 80070fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_TO_ESC_RST_GPIO_Port, &GPIO_InitStruct);
 80070fc:	f107 0314 	add.w	r3, r7, #20
 8007100:	4619      	mov	r1, r3
 8007102:	4825      	ldr	r0, [pc, #148]	@ (8007198 <MX_GPIO_Init+0x1d0>)
 8007104:	f001 f9dc 	bl	80084c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESC_EEP_DONE_Pin;
 8007108:	2302      	movs	r3, #2
 800710a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800710c:	2300      	movs	r3, #0
 800710e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007110:	2302      	movs	r3, #2
 8007112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESC_EEP_DONE_GPIO_Port, &GPIO_InitStruct);
 8007114:	f107 0314 	add.w	r3, r7, #20
 8007118:	4619      	mov	r1, r3
 800711a:	481f      	ldr	r0, [pc, #124]	@ (8007198 <MX_GPIO_Init+0x1d0>)
 800711c:	f001 f9d0 	bl	80084c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESC_SPI_CS_Pin;
 8007120:	2380      	movs	r3, #128	@ 0x80
 8007122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007124:	2301      	movs	r3, #1
 8007126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007128:	2302      	movs	r3, #2
 800712a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800712c:	2303      	movs	r3, #3
 800712e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESC_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8007130:	f107 0314 	add.w	r3, r7, #20
 8007134:	4619      	mov	r1, r3
 8007136:	4819      	ldr	r0, [pc, #100]	@ (800719c <MX_GPIO_Init+0x1d4>)
 8007138:	f001 f9c2 	bl	80084c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800713c:	2302      	movs	r3, #2
 800713e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007140:	2301      	movs	r3, #1
 8007142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007144:	2300      	movs	r3, #0
 8007146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007148:	2300      	movs	r3, #0
 800714a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800714c:	f107 0314 	add.w	r3, r7, #20
 8007150:	4619      	mov	r1, r3
 8007152:	4813      	ldr	r0, [pc, #76]	@ (80071a0 <MX_GPIO_Init+0x1d8>)
 8007154:	f001 f9b4 	bl	80084c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8007158:	2200      	movs	r2, #0
 800715a:	2100      	movs	r1, #0
 800715c:	2009      	movs	r0, #9
 800715e:	f000 febc 	bl	8007eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8007162:	2009      	movs	r0, #9
 8007164:	f000 fed3 	bl	8007f0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8007168:	2200      	movs	r2, #0
 800716a:	2100      	movs	r1, #0
 800716c:	200a      	movs	r0, #10
 800716e:	f000 feb4 	bl	8007eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8007172:	200a      	movs	r0, #10
 8007174:	f000 fecb 	bl	8007f0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007178:	2200      	movs	r2, #0
 800717a:	2100      	movs	r1, #0
 800717c:	2028      	movs	r0, #40	@ 0x28
 800717e:	f000 feac 	bl	8007eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007182:	2028      	movs	r0, #40	@ 0x28
 8007184:	f000 fec3 	bl	8007f0e <HAL_NVIC_EnableIRQ>

}
 8007188:	bf00      	nop
 800718a:	3728      	adds	r7, #40	@ 0x28
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	58024400 	.word	0x58024400
 8007194:	58020000 	.word	0x58020000
 8007198:	58020400 	.word	0x58020400
 800719c:	58020800 	.word	0x58020800
 80071a0:	58021000 	.word	0x58021000

080071a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80071a8:	f000 f890 	bl	80072cc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80071ac:	f000 fd1c 	bl	8007be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80071b0:	f000 f810 	bl	80071d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80071b4:	f7ff ff08 	bl	8006fc8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80071b8:	f000 f8ba 	bl	8007330 <MX_SPI1_Init>
  MX_SPI2_Init();
 80071bc:	f000 f910 	bl	80073e0 <MX_SPI2_Init>
  MX_TIM6_Init();
 80071c0:	f000 fc4c 	bl	8007a5c <MX_TIM6_Init>
  MX_TIM16_Init();
 80071c4:	f000 fc80 	bl	8007ac8 <MX_TIM16_Init>
  MX_SPI3_Init();
 80071c8:	f000 f962 	bl	8007490 <MX_SPI3_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 //HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_1);
	 // HAL_Delay(100);
	 main_initial();
 80071cc:	f7f9 f9ac 	bl	8000528 <main_initial>
  {
 80071d0:	bf00      	nop
 80071d2:	e7fb      	b.n	80071cc <main+0x28>

080071d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b09c      	sub	sp, #112	@ 0x70
 80071d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80071da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071de:	224c      	movs	r2, #76	@ 0x4c
 80071e0:	2100      	movs	r1, #0
 80071e2:	4618      	mov	r0, r3
 80071e4:	f005 fa16 	bl	800c614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80071e8:	1d3b      	adds	r3, r7, #4
 80071ea:	2220      	movs	r2, #32
 80071ec:	2100      	movs	r1, #0
 80071ee:	4618      	mov	r0, r3
 80071f0:	f005 fa10 	bl	800c614 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80071f4:	2002      	movs	r0, #2
 80071f6:	f001 fb69 	bl	80088cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80071fa:	2300      	movs	r3, #0
 80071fc:	603b      	str	r3, [r7, #0]
 80071fe:	4b31      	ldr	r3, [pc, #196]	@ (80072c4 <SystemClock_Config+0xf0>)
 8007200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007202:	4a30      	ldr	r2, [pc, #192]	@ (80072c4 <SystemClock_Config+0xf0>)
 8007204:	f023 0301 	bic.w	r3, r3, #1
 8007208:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800720a:	4b2e      	ldr	r3, [pc, #184]	@ (80072c4 <SystemClock_Config+0xf0>)
 800720c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	4b2c      	ldr	r3, [pc, #176]	@ (80072c8 <SystemClock_Config+0xf4>)
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800721c:	4a2a      	ldr	r2, [pc, #168]	@ (80072c8 <SystemClock_Config+0xf4>)
 800721e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007222:	6193      	str	r3, [r2, #24]
 8007224:	4b28      	ldr	r3, [pc, #160]	@ (80072c8 <SystemClock_Config+0xf4>)
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800722c:	603b      	str	r3, [r7, #0]
 800722e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007230:	bf00      	nop
 8007232:	4b25      	ldr	r3, [pc, #148]	@ (80072c8 <SystemClock_Config+0xf4>)
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800723a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800723e:	d1f8      	bne.n	8007232 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007240:	2301      	movs	r3, #1
 8007242:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007244:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007248:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800724a:	2302      	movs	r3, #2
 800724c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800724e:	2302      	movs	r3, #2
 8007250:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8007252:	2303      	movs	r3, #3
 8007254:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8007256:	2318      	movs	r3, #24
 8007258:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800725a:	2302      	movs	r3, #2
 800725c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800725e:	2302      	movs	r3, #2
 8007260:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007262:	2302      	movs	r3, #2
 8007264:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8007266:	230c      	movs	r3, #12
 8007268:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800726a:	2300      	movs	r3, #0
 800726c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007276:	4618      	mov	r0, r3
 8007278:	f001 fb62 	bl	8008940 <HAL_RCC_OscConfig>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007282:	f000 f84f 	bl	8007324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007286:	233f      	movs	r3, #63	@ 0x3f
 8007288:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800728a:	2303      	movs	r3, #3
 800728c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800728e:	2300      	movs	r3, #0
 8007290:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8007292:	2300      	movs	r3, #0
 8007294:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800729a:	2300      	movs	r3, #0
 800729c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800729e:	2300      	movs	r3, #0
 80072a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80072a2:	2300      	movs	r3, #0
 80072a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80072a6:	1d3b      	adds	r3, r7, #4
 80072a8:	2102      	movs	r1, #2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 ffa2 	bl	80091f4 <HAL_RCC_ClockConfig>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80072b6:	f000 f835 	bl	8007324 <Error_Handler>
  }
}
 80072ba:	bf00      	nop
 80072bc:	3770      	adds	r7, #112	@ 0x70
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	58000400 	.word	0x58000400
 80072c8:	58024800 	.word	0x58024800

080072cc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80072d2:	463b      	mov	r3, r7
 80072d4:	2200      	movs	r2, #0
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	605a      	str	r2, [r3, #4]
 80072da:	609a      	str	r2, [r3, #8]
 80072dc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80072de:	f000 fe31 	bl	8007f44 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80072e2:	2301      	movs	r3, #1
 80072e4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80072ee:	231f      	movs	r3, #31
 80072f0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80072f2:	2387      	movs	r3, #135	@ 0x87
 80072f4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80072f6:	2300      	movs	r3, #0
 80072f8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80072fa:	2300      	movs	r3, #0
 80072fc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80072fe:	2301      	movs	r3, #1
 8007300:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007302:	2301      	movs	r3, #1
 8007304:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007306:	2300      	movs	r3, #0
 8007308:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800730a:	2300      	movs	r3, #0
 800730c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800730e:	463b      	mov	r3, r7
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fe4f 	bl	8007fb4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007316:	2004      	movs	r0, #4
 8007318:	f000 fe2c 	bl	8007f74 <HAL_MPU_Enable>

}
 800731c:	bf00      	nop
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007328:	b672      	cpsid	i
}
 800732a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800732c:	bf00      	nop
 800732e:	e7fd      	b.n	800732c <Error_Handler+0x8>

08007330 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007334:	4b28      	ldr	r3, [pc, #160]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 8007336:	4a29      	ldr	r2, [pc, #164]	@ (80073dc <MX_SPI1_Init+0xac>)
 8007338:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800733a:	4b27      	ldr	r3, [pc, #156]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 800733c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007340:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007342:	4b25      	ldr	r3, [pc, #148]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 8007344:	2200      	movs	r2, #0
 8007346:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007348:	4b23      	ldr	r3, [pc, #140]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 800734a:	2207      	movs	r2, #7
 800734c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800734e:	4b22      	ldr	r3, [pc, #136]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 8007350:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007354:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007356:	4b20      	ldr	r3, [pc, #128]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 8007358:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800735c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800735e:	4b1e      	ldr	r3, [pc, #120]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 8007360:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007364:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007366:	4b1c      	ldr	r3, [pc, #112]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 8007368:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800736c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800736e:	4b1a      	ldr	r3, [pc, #104]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 8007370:	2200      	movs	r2, #0
 8007372:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007374:	4b18      	ldr	r3, [pc, #96]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 8007376:	2200      	movs	r2, #0
 8007378:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800737a:	4b17      	ldr	r3, [pc, #92]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 800737c:	2200      	movs	r2, #0
 800737e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8007380:	4b15      	ldr	r3, [pc, #84]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 8007382:	2200      	movs	r2, #0
 8007384:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007386:	4b14      	ldr	r3, [pc, #80]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 8007388:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800738c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800738e:	4b12      	ldr	r3, [pc, #72]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 8007390:	2200      	movs	r2, #0
 8007392:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007394:	4b10      	ldr	r3, [pc, #64]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 8007396:	2200      	movs	r2, #0
 8007398:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800739a:	4b0f      	ldr	r3, [pc, #60]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 800739c:	2200      	movs	r2, #0
 800739e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80073a0:	4b0d      	ldr	r3, [pc, #52]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80073a6:	4b0c      	ldr	r3, [pc, #48]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80073ac:	4b0a      	ldr	r3, [pc, #40]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 80073ae:	2200      	movs	r2, #0
 80073b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80073b2:	4b09      	ldr	r3, [pc, #36]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80073b8:	4b07      	ldr	r3, [pc, #28]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80073be:	4b06      	ldr	r3, [pc, #24]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80073c4:	4804      	ldr	r0, [pc, #16]	@ (80073d8 <MX_SPI1_Init+0xa8>)
 80073c6:	f003 fdb3 	bl	800af30 <HAL_SPI_Init>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80073d0:	f7ff ffa8 	bl	8007324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80073d4:	bf00      	nop
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	24000ac0 	.word	0x24000ac0
 80073dc:	40013000 	.word	0x40013000

080073e0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80073e4:	4b28      	ldr	r3, [pc, #160]	@ (8007488 <MX_SPI2_Init+0xa8>)
 80073e6:	4a29      	ldr	r2, [pc, #164]	@ (800748c <MX_SPI2_Init+0xac>)
 80073e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80073ea:	4b27      	ldr	r3, [pc, #156]	@ (8007488 <MX_SPI2_Init+0xa8>)
 80073ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80073f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80073f2:	4b25      	ldr	r3, [pc, #148]	@ (8007488 <MX_SPI2_Init+0xa8>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80073f8:	4b23      	ldr	r3, [pc, #140]	@ (8007488 <MX_SPI2_Init+0xa8>)
 80073fa:	2207      	movs	r2, #7
 80073fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80073fe:	4b22      	ldr	r3, [pc, #136]	@ (8007488 <MX_SPI2_Init+0xa8>)
 8007400:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007404:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007406:	4b20      	ldr	r3, [pc, #128]	@ (8007488 <MX_SPI2_Init+0xa8>)
 8007408:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800740c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800740e:	4b1e      	ldr	r3, [pc, #120]	@ (8007488 <MX_SPI2_Init+0xa8>)
 8007410:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007414:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007416:	4b1c      	ldr	r3, [pc, #112]	@ (8007488 <MX_SPI2_Init+0xa8>)
 8007418:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800741c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800741e:	4b1a      	ldr	r3, [pc, #104]	@ (8007488 <MX_SPI2_Init+0xa8>)
 8007420:	2200      	movs	r2, #0
 8007422:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007424:	4b18      	ldr	r3, [pc, #96]	@ (8007488 <MX_SPI2_Init+0xa8>)
 8007426:	2200      	movs	r2, #0
 8007428:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800742a:	4b17      	ldr	r3, [pc, #92]	@ (8007488 <MX_SPI2_Init+0xa8>)
 800742c:	2200      	movs	r2, #0
 800742e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007430:	4b15      	ldr	r3, [pc, #84]	@ (8007488 <MX_SPI2_Init+0xa8>)
 8007432:	2200      	movs	r2, #0
 8007434:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007436:	4b14      	ldr	r3, [pc, #80]	@ (8007488 <MX_SPI2_Init+0xa8>)
 8007438:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800743c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800743e:	4b12      	ldr	r3, [pc, #72]	@ (8007488 <MX_SPI2_Init+0xa8>)
 8007440:	2200      	movs	r2, #0
 8007442:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007444:	4b10      	ldr	r3, [pc, #64]	@ (8007488 <MX_SPI2_Init+0xa8>)
 8007446:	2200      	movs	r2, #0
 8007448:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800744a:	4b0f      	ldr	r3, [pc, #60]	@ (8007488 <MX_SPI2_Init+0xa8>)
 800744c:	2200      	movs	r2, #0
 800744e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007450:	4b0d      	ldr	r3, [pc, #52]	@ (8007488 <MX_SPI2_Init+0xa8>)
 8007452:	2200      	movs	r2, #0
 8007454:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007456:	4b0c      	ldr	r3, [pc, #48]	@ (8007488 <MX_SPI2_Init+0xa8>)
 8007458:	2200      	movs	r2, #0
 800745a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800745c:	4b0a      	ldr	r3, [pc, #40]	@ (8007488 <MX_SPI2_Init+0xa8>)
 800745e:	2200      	movs	r2, #0
 8007460:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007462:	4b09      	ldr	r3, [pc, #36]	@ (8007488 <MX_SPI2_Init+0xa8>)
 8007464:	2200      	movs	r2, #0
 8007466:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007468:	4b07      	ldr	r3, [pc, #28]	@ (8007488 <MX_SPI2_Init+0xa8>)
 800746a:	2200      	movs	r2, #0
 800746c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800746e:	4b06      	ldr	r3, [pc, #24]	@ (8007488 <MX_SPI2_Init+0xa8>)
 8007470:	2200      	movs	r2, #0
 8007472:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007474:	4804      	ldr	r0, [pc, #16]	@ (8007488 <MX_SPI2_Init+0xa8>)
 8007476:	f003 fd5b 	bl	800af30 <HAL_SPI_Init>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8007480:	f7ff ff50 	bl	8007324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007484:	bf00      	nop
 8007486:	bd80      	pop	{r7, pc}
 8007488:	24000b48 	.word	0x24000b48
 800748c:	40003800 	.word	0x40003800

08007490 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8007494:	4b28      	ldr	r3, [pc, #160]	@ (8007538 <MX_SPI3_Init+0xa8>)
 8007496:	4a29      	ldr	r2, [pc, #164]	@ (800753c <MX_SPI3_Init+0xac>)
 8007498:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800749a:	4b27      	ldr	r3, [pc, #156]	@ (8007538 <MX_SPI3_Init+0xa8>)
 800749c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80074a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80074a2:	4b25      	ldr	r3, [pc, #148]	@ (8007538 <MX_SPI3_Init+0xa8>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80074a8:	4b23      	ldr	r3, [pc, #140]	@ (8007538 <MX_SPI3_Init+0xa8>)
 80074aa:	2207      	movs	r2, #7
 80074ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80074ae:	4b22      	ldr	r3, [pc, #136]	@ (8007538 <MX_SPI3_Init+0xa8>)
 80074b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80074b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80074b6:	4b20      	ldr	r3, [pc, #128]	@ (8007538 <MX_SPI3_Init+0xa8>)
 80074b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80074bc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80074be:	4b1e      	ldr	r3, [pc, #120]	@ (8007538 <MX_SPI3_Init+0xa8>)
 80074c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80074c4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80074c6:	4b1c      	ldr	r3, [pc, #112]	@ (8007538 <MX_SPI3_Init+0xa8>)
 80074c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80074ce:	4b1a      	ldr	r3, [pc, #104]	@ (8007538 <MX_SPI3_Init+0xa8>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80074d4:	4b18      	ldr	r3, [pc, #96]	@ (8007538 <MX_SPI3_Init+0xa8>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074da:	4b17      	ldr	r3, [pc, #92]	@ (8007538 <MX_SPI3_Init+0xa8>)
 80074dc:	2200      	movs	r2, #0
 80074de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80074e0:	4b15      	ldr	r3, [pc, #84]	@ (8007538 <MX_SPI3_Init+0xa8>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80074e6:	4b14      	ldr	r3, [pc, #80]	@ (8007538 <MX_SPI3_Init+0xa8>)
 80074e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80074ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80074ee:	4b12      	ldr	r3, [pc, #72]	@ (8007538 <MX_SPI3_Init+0xa8>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80074f4:	4b10      	ldr	r3, [pc, #64]	@ (8007538 <MX_SPI3_Init+0xa8>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80074fa:	4b0f      	ldr	r3, [pc, #60]	@ (8007538 <MX_SPI3_Init+0xa8>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007500:	4b0d      	ldr	r3, [pc, #52]	@ (8007538 <MX_SPI3_Init+0xa8>)
 8007502:	2200      	movs	r2, #0
 8007504:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007506:	4b0c      	ldr	r3, [pc, #48]	@ (8007538 <MX_SPI3_Init+0xa8>)
 8007508:	2200      	movs	r2, #0
 800750a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800750c:	4b0a      	ldr	r3, [pc, #40]	@ (8007538 <MX_SPI3_Init+0xa8>)
 800750e:	2200      	movs	r2, #0
 8007510:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007512:	4b09      	ldr	r3, [pc, #36]	@ (8007538 <MX_SPI3_Init+0xa8>)
 8007514:	2200      	movs	r2, #0
 8007516:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007518:	4b07      	ldr	r3, [pc, #28]	@ (8007538 <MX_SPI3_Init+0xa8>)
 800751a:	2200      	movs	r2, #0
 800751c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800751e:	4b06      	ldr	r3, [pc, #24]	@ (8007538 <MX_SPI3_Init+0xa8>)
 8007520:	2200      	movs	r2, #0
 8007522:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007524:	4804      	ldr	r0, [pc, #16]	@ (8007538 <MX_SPI3_Init+0xa8>)
 8007526:	f003 fd03 	bl	800af30 <HAL_SPI_Init>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <MX_SPI3_Init+0xa4>
  {
    Error_Handler();
 8007530:	f7ff fef8 	bl	8007324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007534:	bf00      	nop
 8007536:	bd80      	pop	{r7, pc}
 8007538:	24000bd0 	.word	0x24000bd0
 800753c:	40003c00 	.word	0x40003c00

08007540 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b0c0      	sub	sp, #256	@ 0x100
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007548:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	605a      	str	r2, [r3, #4]
 8007552:	609a      	str	r2, [r3, #8]
 8007554:	60da      	str	r2, [r3, #12]
 8007556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007558:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800755c:	22c0      	movs	r2, #192	@ 0xc0
 800755e:	2100      	movs	r1, #0
 8007560:	4618      	mov	r0, r3
 8007562:	f005 f857 	bl	800c614 <memset>
  if(spiHandle->Instance==SPI1)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4aa0      	ldr	r2, [pc, #640]	@ (80077ec <HAL_SPI_MspInit+0x2ac>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d16a      	bne.n	8007646 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8007570:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007574:	f04f 0300 	mov.w	r3, #0
 8007578:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800757c:	2300      	movs	r3, #0
 800757e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007582:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007586:	4618      	mov	r0, r3
 8007588:	f002 f964 	bl	8009854 <HAL_RCCEx_PeriphCLKConfig>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8007592:	f7ff fec7 	bl	8007324 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007596:	4b96      	ldr	r3, [pc, #600]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 8007598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800759c:	4a94      	ldr	r2, [pc, #592]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 800759e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80075a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80075a6:	4b92      	ldr	r3, [pc, #584]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 80075a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075b4:	4b8e      	ldr	r3, [pc, #568]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 80075b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075ba:	4a8d      	ldr	r2, [pc, #564]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 80075bc:	f043 0301 	orr.w	r3, r3, #1
 80075c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80075c4:	4b8a      	ldr	r3, [pc, #552]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 80075c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	623b      	str	r3, [r7, #32]
 80075d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075d2:	4b87      	ldr	r3, [pc, #540]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 80075d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075d8:	4a85      	ldr	r2, [pc, #532]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 80075da:	f043 0302 	orr.w	r3, r3, #2
 80075de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80075e2:	4b83      	ldr	r3, [pc, #524]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 80075e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075e8:	f003 0302 	and.w	r3, r3, #2
 80075ec:	61fb      	str	r3, [r7, #28]
 80075ee:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ESC_SPI_CLK_Pin|ESC_SPI_MISO_Pin;
 80075f0:	2360      	movs	r3, #96	@ 0x60
 80075f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075f6:	2302      	movs	r3, #2
 80075f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fc:	2300      	movs	r3, #0
 80075fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007602:	2302      	movs	r3, #2
 8007604:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007608:	2305      	movs	r3, #5
 800760a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800760e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8007612:	4619      	mov	r1, r3
 8007614:	4877      	ldr	r0, [pc, #476]	@ (80077f4 <HAL_SPI_MspInit+0x2b4>)
 8007616:	f000 ff53 	bl	80084c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESC_SPI_MOSI_Pin;
 800761a:	2320      	movs	r3, #32
 800761c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007620:	2302      	movs	r3, #2
 8007622:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007626:	2300      	movs	r3, #0
 8007628:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800762c:	2302      	movs	r3, #2
 800762e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007632:	2305      	movs	r3, #5
 8007634:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(ESC_SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8007638:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800763c:	4619      	mov	r1, r3
 800763e:	486e      	ldr	r0, [pc, #440]	@ (80077f8 <HAL_SPI_MspInit+0x2b8>)
 8007640:	f000 ff3e 	bl	80084c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007644:	e0cc      	b.n	80077e0 <HAL_SPI_MspInit+0x2a0>
  else if(spiHandle->Instance==SPI2)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a6c      	ldr	r2, [pc, #432]	@ (80077fc <HAL_SPI_MspInit+0x2bc>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d165      	bne.n	800771c <HAL_SPI_MspInit+0x1dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8007650:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007654:	f04f 0300 	mov.w	r3, #0
 8007658:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800765c:	2300      	movs	r3, #0
 800765e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007662:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007666:	4618      	mov	r0, r3
 8007668:	f002 f8f4 	bl	8009854 <HAL_RCCEx_PeriphCLKConfig>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <HAL_SPI_MspInit+0x136>
      Error_Handler();
 8007672:	f7ff fe57 	bl	8007324 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007676:	4b5e      	ldr	r3, [pc, #376]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 8007678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800767c:	4a5c      	ldr	r2, [pc, #368]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 800767e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007682:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007686:	4b5a      	ldr	r3, [pc, #360]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 8007688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800768c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007690:	61bb      	str	r3, [r7, #24]
 8007692:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007694:	4b56      	ldr	r3, [pc, #344]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 8007696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800769a:	4a55      	ldr	r2, [pc, #340]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 800769c:	f043 0302 	orr.w	r3, r3, #2
 80076a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80076a4:	4b52      	ldr	r3, [pc, #328]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 80076a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ADC_SPI_CS_Pin|ADC_SPI_MISO_Pin|ADC_SPI_MOSI_Pin;
 80076b2:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80076b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076ba:	2302      	movs	r3, #2
 80076bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076c0:	2300      	movs	r3, #0
 80076c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076c6:	2300      	movs	r3, #0
 80076c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80076cc:	2305      	movs	r3, #5
 80076ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076d2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80076d6:	4619      	mov	r1, r3
 80076d8:	4847      	ldr	r0, [pc, #284]	@ (80077f8 <HAL_SPI_MspInit+0x2b8>)
 80076da:	f000 fef1 	bl	80084c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_SPI_SCK_Pin;
 80076de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80076e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076e6:	2302      	movs	r3, #2
 80076e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076ec:	2301      	movs	r3, #1
 80076ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076f2:	2300      	movs	r3, #0
 80076f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80076f8:	2305      	movs	r3, #5
 80076fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(ADC_SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 80076fe:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8007702:	4619      	mov	r1, r3
 8007704:	483c      	ldr	r0, [pc, #240]	@ (80077f8 <HAL_SPI_MspInit+0x2b8>)
 8007706:	f000 fedb 	bl	80084c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800770a:	2200      	movs	r2, #0
 800770c:	2100      	movs	r1, #0
 800770e:	2024      	movs	r0, #36	@ 0x24
 8007710:	f000 fbe3 	bl	8007eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007714:	2024      	movs	r0, #36	@ 0x24
 8007716:	f000 fbfa 	bl	8007f0e <HAL_NVIC_EnableIRQ>
}
 800771a:	e061      	b.n	80077e0 <HAL_SPI_MspInit+0x2a0>
  else if(spiHandle->Instance==SPI3)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a37      	ldr	r2, [pc, #220]	@ (8007800 <HAL_SPI_MspInit+0x2c0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d15c      	bne.n	80077e0 <HAL_SPI_MspInit+0x2a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8007726:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800772a:	f04f 0300 	mov.w	r3, #0
 800772e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8007732:	2300      	movs	r3, #0
 8007734:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007738:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800773c:	4618      	mov	r0, r3
 800773e:	f002 f889 	bl	8009854 <HAL_RCCEx_PeriphCLKConfig>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <HAL_SPI_MspInit+0x20c>
      Error_Handler();
 8007748:	f7ff fdec 	bl	8007324 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800774c:	4b28      	ldr	r3, [pc, #160]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 800774e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007752:	4a27      	ldr	r2, [pc, #156]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 8007754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007758:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800775c:	4b24      	ldr	r3, [pc, #144]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 800775e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007766:	613b      	str	r3, [r7, #16]
 8007768:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800776a:	4b21      	ldr	r3, [pc, #132]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 800776c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007770:	4a1f      	ldr	r2, [pc, #124]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 8007772:	f043 0304 	orr.w	r3, r3, #4
 8007776:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800777a:	4b1d      	ldr	r3, [pc, #116]	@ (80077f0 <HAL_SPI_MspInit+0x2b0>)
 800777c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	60fb      	str	r3, [r7, #12]
 8007786:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESC_SPI_SCK_2_Pin|ESC_SPI_MISO_2_Pin;
 8007788:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800778c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007790:	2302      	movs	r3, #2
 8007792:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007796:	2300      	movs	r3, #0
 8007798:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800779c:	2302      	movs	r3, #2
 800779e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80077a2:	2306      	movs	r3, #6
 80077a4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077a8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80077ac:	4619      	mov	r1, r3
 80077ae:	4815      	ldr	r0, [pc, #84]	@ (8007804 <HAL_SPI_MspInit+0x2c4>)
 80077b0:	f000 fe86 	bl	80084c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ESC_SPI_MOSI_2_Pin;
 80077b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077bc:	2302      	movs	r3, #2
 80077be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80077c2:	2301      	movs	r3, #1
 80077c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80077c8:	2302      	movs	r3, #2
 80077ca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80077ce:	2306      	movs	r3, #6
 80077d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(ESC_SPI_MOSI_2_GPIO_Port, &GPIO_InitStruct);
 80077d4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80077d8:	4619      	mov	r1, r3
 80077da:	480a      	ldr	r0, [pc, #40]	@ (8007804 <HAL_SPI_MspInit+0x2c4>)
 80077dc:	f000 fe70 	bl	80084c0 <HAL_GPIO_Init>
}
 80077e0:	bf00      	nop
 80077e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	40013000 	.word	0x40013000
 80077f0:	58024400 	.word	0x58024400
 80077f4:	58020000 	.word	0x58020000
 80077f8:	58020400 	.word	0x58020400
 80077fc:	40003800 	.word	0x40003800
 8007800:	40003c00 	.word	0x40003c00
 8007804:	58020800 	.word	0x58020800

08007808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800780e:	4b0a      	ldr	r3, [pc, #40]	@ (8007838 <HAL_MspInit+0x30>)
 8007810:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007814:	4a08      	ldr	r2, [pc, #32]	@ (8007838 <HAL_MspInit+0x30>)
 8007816:	f043 0302 	orr.w	r3, r3, #2
 800781a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800781e:	4b06      	ldr	r3, [pc, #24]	@ (8007838 <HAL_MspInit+0x30>)
 8007820:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	607b      	str	r3, [r7, #4]
 800782a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	58024400 	.word	0x58024400

0800783c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007840:	bf00      	nop
 8007842:	e7fd      	b.n	8007840 <NMI_Handler+0x4>

08007844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007844:	b480      	push	{r7}
 8007846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007848:	bf00      	nop
 800784a:	e7fd      	b.n	8007848 <HardFault_Handler+0x4>

0800784c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800784c:	b480      	push	{r7}
 800784e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007850:	bf00      	nop
 8007852:	e7fd      	b.n	8007850 <MemManage_Handler+0x4>

08007854 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007854:	b480      	push	{r7}
 8007856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007858:	bf00      	nop
 800785a:	e7fd      	b.n	8007858 <BusFault_Handler+0x4>

0800785c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007860:	bf00      	nop
 8007862:	e7fd      	b.n	8007860 <UsageFault_Handler+0x4>

08007864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007868:	bf00      	nop
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007872:	b480      	push	{r7}
 8007874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007876:	bf00      	nop
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007880:	b480      	push	{r7}
 8007882:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007884:	bf00      	nop
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007892:	f000 fa1b 	bl	8007ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007896:	bf00      	nop
 8007898:	bd80      	pop	{r7, pc}

0800789a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ESC_SPI_SINT_Pin);
 800789e:	2008      	movs	r0, #8
 80078a0:	f000 ffef 	bl	8008882 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80078a4:	bf00      	nop
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80078ac:	4802      	ldr	r0, [pc, #8]	@ (80078b8 <SPI2_IRQHandler+0x10>)
 80078ae:	f003 ff9d 	bl	800b7ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80078b2:	bf00      	nop
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	24000b48 	.word	0x24000b48

080078bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ESC_SYNC_L0_Pin);
 80078c0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80078c4:	f000 ffdd 	bl	8008882 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80078c8:	bf00      	nop
 80078ca:	bd80      	pop	{r7, pc}

080078cc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80078d0:	4802      	ldr	r0, [pc, #8]	@ (80078dc <TIM16_IRQHandler+0x10>)
 80078d2:	f004 fb55 	bl	800bf80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80078d6:	bf00      	nop
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	24000ca8 	.word	0x24000ca8

080078e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80078e8:	4a14      	ldr	r2, [pc, #80]	@ (800793c <_sbrk+0x5c>)
 80078ea:	4b15      	ldr	r3, [pc, #84]	@ (8007940 <_sbrk+0x60>)
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80078f4:	4b13      	ldr	r3, [pc, #76]	@ (8007944 <_sbrk+0x64>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80078fc:	4b11      	ldr	r3, [pc, #68]	@ (8007944 <_sbrk+0x64>)
 80078fe:	4a12      	ldr	r2, [pc, #72]	@ (8007948 <_sbrk+0x68>)
 8007900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007902:	4b10      	ldr	r3, [pc, #64]	@ (8007944 <_sbrk+0x64>)
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4413      	add	r3, r2
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	429a      	cmp	r2, r3
 800790e:	d207      	bcs.n	8007920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007910:	f004 fe98 	bl	800c644 <__errno>
 8007914:	4603      	mov	r3, r0
 8007916:	220c      	movs	r2, #12
 8007918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800791a:	f04f 33ff 	mov.w	r3, #4294967295
 800791e:	e009      	b.n	8007934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007920:	4b08      	ldr	r3, [pc, #32]	@ (8007944 <_sbrk+0x64>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007926:	4b07      	ldr	r3, [pc, #28]	@ (8007944 <_sbrk+0x64>)
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4413      	add	r3, r2
 800792e:	4a05      	ldr	r2, [pc, #20]	@ (8007944 <_sbrk+0x64>)
 8007930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007932:	68fb      	ldr	r3, [r7, #12]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3718      	adds	r7, #24
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	24080000 	.word	0x24080000
 8007940:	00000400 	.word	0x00000400
 8007944:	24000c58 	.word	0x24000c58
 8007948:	24000e40 	.word	0x24000e40

0800794c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007950:	4b37      	ldr	r3, [pc, #220]	@ (8007a30 <SystemInit+0xe4>)
 8007952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007956:	4a36      	ldr	r2, [pc, #216]	@ (8007a30 <SystemInit+0xe4>)
 8007958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800795c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007960:	4b34      	ldr	r3, [pc, #208]	@ (8007a34 <SystemInit+0xe8>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 030f 	and.w	r3, r3, #15
 8007968:	2b06      	cmp	r3, #6
 800796a:	d807      	bhi.n	800797c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800796c:	4b31      	ldr	r3, [pc, #196]	@ (8007a34 <SystemInit+0xe8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f023 030f 	bic.w	r3, r3, #15
 8007974:	4a2f      	ldr	r2, [pc, #188]	@ (8007a34 <SystemInit+0xe8>)
 8007976:	f043 0307 	orr.w	r3, r3, #7
 800797a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800797c:	4b2e      	ldr	r3, [pc, #184]	@ (8007a38 <SystemInit+0xec>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a2d      	ldr	r2, [pc, #180]	@ (8007a38 <SystemInit+0xec>)
 8007982:	f043 0301 	orr.w	r3, r3, #1
 8007986:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007988:	4b2b      	ldr	r3, [pc, #172]	@ (8007a38 <SystemInit+0xec>)
 800798a:	2200      	movs	r2, #0
 800798c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800798e:	4b2a      	ldr	r3, [pc, #168]	@ (8007a38 <SystemInit+0xec>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4929      	ldr	r1, [pc, #164]	@ (8007a38 <SystemInit+0xec>)
 8007994:	4b29      	ldr	r3, [pc, #164]	@ (8007a3c <SystemInit+0xf0>)
 8007996:	4013      	ands	r3, r2
 8007998:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800799a:	4b26      	ldr	r3, [pc, #152]	@ (8007a34 <SystemInit+0xe8>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0308 	and.w	r3, r3, #8
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d007      	beq.n	80079b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80079a6:	4b23      	ldr	r3, [pc, #140]	@ (8007a34 <SystemInit+0xe8>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f023 030f 	bic.w	r3, r3, #15
 80079ae:	4a21      	ldr	r2, [pc, #132]	@ (8007a34 <SystemInit+0xe8>)
 80079b0:	f043 0307 	orr.w	r3, r3, #7
 80079b4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80079b6:	4b20      	ldr	r3, [pc, #128]	@ (8007a38 <SystemInit+0xec>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80079bc:	4b1e      	ldr	r3, [pc, #120]	@ (8007a38 <SystemInit+0xec>)
 80079be:	2200      	movs	r2, #0
 80079c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80079c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007a38 <SystemInit+0xec>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80079c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007a38 <SystemInit+0xec>)
 80079ca:	4a1d      	ldr	r2, [pc, #116]	@ (8007a40 <SystemInit+0xf4>)
 80079cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80079ce:	4b1a      	ldr	r3, [pc, #104]	@ (8007a38 <SystemInit+0xec>)
 80079d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007a44 <SystemInit+0xf8>)
 80079d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80079d4:	4b18      	ldr	r3, [pc, #96]	@ (8007a38 <SystemInit+0xec>)
 80079d6:	4a1c      	ldr	r2, [pc, #112]	@ (8007a48 <SystemInit+0xfc>)
 80079d8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80079da:	4b17      	ldr	r3, [pc, #92]	@ (8007a38 <SystemInit+0xec>)
 80079dc:	2200      	movs	r2, #0
 80079de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80079e0:	4b15      	ldr	r3, [pc, #84]	@ (8007a38 <SystemInit+0xec>)
 80079e2:	4a19      	ldr	r2, [pc, #100]	@ (8007a48 <SystemInit+0xfc>)
 80079e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80079e6:	4b14      	ldr	r3, [pc, #80]	@ (8007a38 <SystemInit+0xec>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80079ec:	4b12      	ldr	r3, [pc, #72]	@ (8007a38 <SystemInit+0xec>)
 80079ee:	4a16      	ldr	r2, [pc, #88]	@ (8007a48 <SystemInit+0xfc>)
 80079f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80079f2:	4b11      	ldr	r3, [pc, #68]	@ (8007a38 <SystemInit+0xec>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80079f8:	4b0f      	ldr	r3, [pc, #60]	@ (8007a38 <SystemInit+0xec>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a0e      	ldr	r2, [pc, #56]	@ (8007a38 <SystemInit+0xec>)
 80079fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007a04:	4b0c      	ldr	r3, [pc, #48]	@ (8007a38 <SystemInit+0xec>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007a0a:	4b10      	ldr	r3, [pc, #64]	@ (8007a4c <SystemInit+0x100>)
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	4b10      	ldr	r3, [pc, #64]	@ (8007a50 <SystemInit+0x104>)
 8007a10:	4013      	ands	r3, r2
 8007a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a16:	d202      	bcs.n	8007a1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007a18:	4b0e      	ldr	r3, [pc, #56]	@ (8007a54 <SystemInit+0x108>)
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8007a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007a58 <SystemInit+0x10c>)
 8007a20:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8007a24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8007a26:	bf00      	nop
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	e000ed00 	.word	0xe000ed00
 8007a34:	52002000 	.word	0x52002000
 8007a38:	58024400 	.word	0x58024400
 8007a3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8007a40:	02020200 	.word	0x02020200
 8007a44:	01ff0000 	.word	0x01ff0000
 8007a48:	01010280 	.word	0x01010280
 8007a4c:	5c001000 	.word	0x5c001000
 8007a50:	ffff0000 	.word	0xffff0000
 8007a54:	51008108 	.word	0x51008108
 8007a58:	52004000 	.word	0x52004000

08007a5c <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a62:	1d3b      	adds	r3, r7, #4
 8007a64:	2200      	movs	r2, #0
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	605a      	str	r2, [r3, #4]
 8007a6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8007a6c:	4b14      	ldr	r3, [pc, #80]	@ (8007ac0 <MX_TIM6_Init+0x64>)
 8007a6e:	4a15      	ldr	r2, [pc, #84]	@ (8007ac4 <MX_TIM6_Init+0x68>)
 8007a70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 49;
 8007a72:	4b13      	ldr	r3, [pc, #76]	@ (8007ac0 <MX_TIM6_Init+0x64>)
 8007a74:	2231      	movs	r2, #49	@ 0x31
 8007a76:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a78:	4b11      	ldr	r3, [pc, #68]	@ (8007ac0 <MX_TIM6_Init+0x64>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8007a7e:	4b10      	ldr	r3, [pc, #64]	@ (8007ac0 <MX_TIM6_Init+0x64>)
 8007a80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007a84:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a86:	4b0e      	ldr	r3, [pc, #56]	@ (8007ac0 <MX_TIM6_Init+0x64>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007a8c:	480c      	ldr	r0, [pc, #48]	@ (8007ac0 <MX_TIM6_Init+0x64>)
 8007a8e:	f004 f9b0 	bl	800bdf2 <HAL_TIM_Base_Init>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8007a98:	f7ff fc44 	bl	8007324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8007aa4:	1d3b      	adds	r3, r7, #4
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4805      	ldr	r0, [pc, #20]	@ (8007ac0 <MX_TIM6_Init+0x64>)
 8007aaa:	f004 fc49 	bl	800c340 <HAL_TIMEx_MasterConfigSynchronization>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8007ab4:	f7ff fc36 	bl	8007324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8007ab8:	bf00      	nop
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	24000c5c 	.word	0x24000c5c
 8007ac4:	40001000 	.word	0x40001000

08007ac8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8007acc:	4b0f      	ldr	r3, [pc, #60]	@ (8007b0c <MX_TIM16_Init+0x44>)
 8007ace:	4a10      	ldr	r2, [pc, #64]	@ (8007b10 <MX_TIM16_Init+0x48>)
 8007ad0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 99;
 8007ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8007b0c <MX_TIM16_Init+0x44>)
 8007ad4:	2263      	movs	r2, #99	@ 0x63
 8007ad6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8007b0c <MX_TIM16_Init+0x44>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8007ade:	4b0b      	ldr	r3, [pc, #44]	@ (8007b0c <MX_TIM16_Init+0x44>)
 8007ae0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007ae4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ae6:	4b09      	ldr	r3, [pc, #36]	@ (8007b0c <MX_TIM16_Init+0x44>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007aec:	4b07      	ldr	r3, [pc, #28]	@ (8007b0c <MX_TIM16_Init+0x44>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007af2:	4b06      	ldr	r3, [pc, #24]	@ (8007b0c <MX_TIM16_Init+0x44>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007af8:	4804      	ldr	r0, [pc, #16]	@ (8007b0c <MX_TIM16_Init+0x44>)
 8007afa:	f004 f97a 	bl	800bdf2 <HAL_TIM_Base_Init>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8007b04:	f7ff fc0e 	bl	8007324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8007b08:	bf00      	nop
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	24000ca8 	.word	0x24000ca8
 8007b10:	40014400 	.word	0x40014400

08007b14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a19      	ldr	r2, [pc, #100]	@ (8007b88 <HAL_TIM_Base_MspInit+0x74>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d10f      	bne.n	8007b46 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007b26:	4b19      	ldr	r3, [pc, #100]	@ (8007b8c <HAL_TIM_Base_MspInit+0x78>)
 8007b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b2c:	4a17      	ldr	r2, [pc, #92]	@ (8007b8c <HAL_TIM_Base_MspInit+0x78>)
 8007b2e:	f043 0310 	orr.w	r3, r3, #16
 8007b32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007b36:	4b15      	ldr	r3, [pc, #84]	@ (8007b8c <HAL_TIM_Base_MspInit+0x78>)
 8007b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b3c:	f003 0310 	and.w	r3, r3, #16
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8007b44:	e01b      	b.n	8007b7e <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM16)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a11      	ldr	r2, [pc, #68]	@ (8007b90 <HAL_TIM_Base_MspInit+0x7c>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d116      	bne.n	8007b7e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007b50:	4b0e      	ldr	r3, [pc, #56]	@ (8007b8c <HAL_TIM_Base_MspInit+0x78>)
 8007b52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b56:	4a0d      	ldr	r2, [pc, #52]	@ (8007b8c <HAL_TIM_Base_MspInit+0x78>)
 8007b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b5c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007b60:	4b0a      	ldr	r3, [pc, #40]	@ (8007b8c <HAL_TIM_Base_MspInit+0x78>)
 8007b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b6a:	60bb      	str	r3, [r7, #8]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2100      	movs	r1, #0
 8007b72:	2075      	movs	r0, #117	@ 0x75
 8007b74:	f000 f9b1 	bl	8007eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8007b78:	2075      	movs	r0, #117	@ 0x75
 8007b7a:	f000 f9c8 	bl	8007f0e <HAL_NVIC_EnableIRQ>
}
 8007b7e:	bf00      	nop
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	40001000 	.word	0x40001000
 8007b8c:	58024400 	.word	0x58024400
 8007b90:	40014400 	.word	0x40014400

08007b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007b94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007bcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007b98:	f7ff fed8 	bl	800794c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007b9c:	480c      	ldr	r0, [pc, #48]	@ (8007bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007b9e:	490d      	ldr	r1, [pc, #52]	@ (8007bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8007bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007ba4:	e002      	b.n	8007bac <LoopCopyDataInit>

08007ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007baa:	3304      	adds	r3, #4

08007bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007bb0:	d3f9      	bcc.n	8007ba6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8007bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8007be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007bb8:	e001      	b.n	8007bbe <LoopFillZerobss>

08007bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007bbc:	3204      	adds	r2, #4

08007bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007bc0:	d3fb      	bcc.n	8007bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007bc2:	f004 fd45 	bl	800c650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007bc6:	f7ff faed 	bl	80071a4 <main>
  bx  lr
 8007bca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007bcc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8007bd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007bd4:	24000410 	.word	0x24000410
  ldr r2, =_sidata
 8007bd8:	0800ce18 	.word	0x0800ce18
  ldr r2, =_sbss
 8007bdc:	24000410 	.word	0x24000410
  ldr r4, =_ebss
 8007be0:	24000e40 	.word	0x24000e40

08007be4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007be4:	e7fe      	b.n	8007be4 <ADC3_IRQHandler>
	...

08007be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007bee:	2003      	movs	r0, #3
 8007bf0:	f000 f968 	bl	8007ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007bf4:	f001 fcb4 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	4b15      	ldr	r3, [pc, #84]	@ (8007c50 <HAL_Init+0x68>)
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	0a1b      	lsrs	r3, r3, #8
 8007c00:	f003 030f 	and.w	r3, r3, #15
 8007c04:	4913      	ldr	r1, [pc, #76]	@ (8007c54 <HAL_Init+0x6c>)
 8007c06:	5ccb      	ldrb	r3, [r1, r3]
 8007c08:	f003 031f 	and.w	r3, r3, #31
 8007c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c12:	4b0f      	ldr	r3, [pc, #60]	@ (8007c50 <HAL_Init+0x68>)
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	f003 030f 	and.w	r3, r3, #15
 8007c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8007c54 <HAL_Init+0x6c>)
 8007c1c:	5cd3      	ldrb	r3, [r2, r3]
 8007c1e:	f003 031f 	and.w	r3, r3, #31
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	fa22 f303 	lsr.w	r3, r2, r3
 8007c28:	4a0b      	ldr	r2, [pc, #44]	@ (8007c58 <HAL_Init+0x70>)
 8007c2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8007c5c <HAL_Init+0x74>)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007c32:	200f      	movs	r0, #15
 8007c34:	f000 f814 	bl	8007c60 <HAL_InitTick>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e002      	b.n	8007c48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007c42:	f7ff fde1 	bl	8007808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	58024400 	.word	0x58024400
 8007c54:	0800cdf8 	.word	0x0800cdf8
 8007c58:	240003b4 	.word	0x240003b4
 8007c5c:	240003b0 	.word	0x240003b0

08007c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007c68:	4b15      	ldr	r3, [pc, #84]	@ (8007cc0 <HAL_InitTick+0x60>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e021      	b.n	8007cb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007c74:	4b13      	ldr	r3, [pc, #76]	@ (8007cc4 <HAL_InitTick+0x64>)
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	4b11      	ldr	r3, [pc, #68]	@ (8007cc0 <HAL_InitTick+0x60>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 f94d 	bl	8007f2a <HAL_SYSTICK_Config>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e00e      	b.n	8007cb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b0f      	cmp	r3, #15
 8007c9e:	d80a      	bhi.n	8007cb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca8:	f000 f917 	bl	8007eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007cac:	4a06      	ldr	r2, [pc, #24]	@ (8007cc8 <HAL_InitTick+0x68>)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e000      	b.n	8007cb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	240003bc 	.word	0x240003bc
 8007cc4:	240003b0 	.word	0x240003b0
 8007cc8:	240003b8 	.word	0x240003b8

08007ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007cd0:	4b06      	ldr	r3, [pc, #24]	@ (8007cec <HAL_IncTick+0x20>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4b06      	ldr	r3, [pc, #24]	@ (8007cf0 <HAL_IncTick+0x24>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4413      	add	r3, r2
 8007cdc:	4a04      	ldr	r2, [pc, #16]	@ (8007cf0 <HAL_IncTick+0x24>)
 8007cde:	6013      	str	r3, [r2, #0]
}
 8007ce0:	bf00      	nop
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	240003bc 	.word	0x240003bc
 8007cf0:	24000cf4 	.word	0x24000cf4

08007cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8007cf8:	4b03      	ldr	r3, [pc, #12]	@ (8007d08 <HAL_GetTick+0x14>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	24000cf4 	.word	0x24000cf4

08007d0c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007d10:	4b03      	ldr	r3, [pc, #12]	@ (8007d20 <HAL_GetREVID+0x14>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	0c1b      	lsrs	r3, r3, #16
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	5c001000 	.word	0x5c001000

08007d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f003 0307 	and.w	r3, r3, #7
 8007d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d34:	4b0b      	ldr	r3, [pc, #44]	@ (8007d64 <__NVIC_SetPriorityGrouping+0x40>)
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007d40:	4013      	ands	r3, r2
 8007d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007d4c:	4b06      	ldr	r3, [pc, #24]	@ (8007d68 <__NVIC_SetPriorityGrouping+0x44>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007d52:	4a04      	ldr	r2, [pc, #16]	@ (8007d64 <__NVIC_SetPriorityGrouping+0x40>)
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	60d3      	str	r3, [r2, #12]
}
 8007d58:	bf00      	nop
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	e000ed00 	.word	0xe000ed00
 8007d68:	05fa0000 	.word	0x05fa0000

08007d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d70:	4b04      	ldr	r3, [pc, #16]	@ (8007d84 <__NVIC_GetPriorityGrouping+0x18>)
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	0a1b      	lsrs	r3, r3, #8
 8007d76:	f003 0307 	and.w	r3, r3, #7
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	e000ed00 	.word	0xe000ed00

08007d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	db0b      	blt.n	8007db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d9a:	88fb      	ldrh	r3, [r7, #6]
 8007d9c:	f003 021f 	and.w	r2, r3, #31
 8007da0:	4907      	ldr	r1, [pc, #28]	@ (8007dc0 <__NVIC_EnableIRQ+0x38>)
 8007da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007da6:	095b      	lsrs	r3, r3, #5
 8007da8:	2001      	movs	r0, #1
 8007daa:	fa00 f202 	lsl.w	r2, r0, r2
 8007dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	e000e100 	.word	0xe000e100

08007dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	4603      	mov	r3, r0
 8007dcc:	6039      	str	r1, [r7, #0]
 8007dce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	db0a      	blt.n	8007dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	490c      	ldr	r1, [pc, #48]	@ (8007e10 <__NVIC_SetPriority+0x4c>)
 8007dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007de2:	0112      	lsls	r2, r2, #4
 8007de4:	b2d2      	uxtb	r2, r2
 8007de6:	440b      	add	r3, r1
 8007de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007dec:	e00a      	b.n	8007e04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	4908      	ldr	r1, [pc, #32]	@ (8007e14 <__NVIC_SetPriority+0x50>)
 8007df4:	88fb      	ldrh	r3, [r7, #6]
 8007df6:	f003 030f 	and.w	r3, r3, #15
 8007dfa:	3b04      	subs	r3, #4
 8007dfc:	0112      	lsls	r2, r2, #4
 8007dfe:	b2d2      	uxtb	r2, r2
 8007e00:	440b      	add	r3, r1
 8007e02:	761a      	strb	r2, [r3, #24]
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	e000e100 	.word	0xe000e100
 8007e14:	e000ed00 	.word	0xe000ed00

08007e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b089      	sub	sp, #36	@ 0x24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f003 0307 	and.w	r3, r3, #7
 8007e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	f1c3 0307 	rsb	r3, r3, #7
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	bf28      	it	cs
 8007e36:	2304      	movcs	r3, #4
 8007e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	2b06      	cmp	r3, #6
 8007e40:	d902      	bls.n	8007e48 <NVIC_EncodePriority+0x30>
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	3b03      	subs	r3, #3
 8007e46:	e000      	b.n	8007e4a <NVIC_EncodePriority+0x32>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	fa02 f303 	lsl.w	r3, r2, r3
 8007e56:	43da      	mvns	r2, r3
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	401a      	ands	r2, r3
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e60:	f04f 31ff 	mov.w	r1, #4294967295
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	fa01 f303 	lsl.w	r3, r1, r3
 8007e6a:	43d9      	mvns	r1, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e70:	4313      	orrs	r3, r2
         );
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3724      	adds	r7, #36	@ 0x24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
	...

08007e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e90:	d301      	bcc.n	8007e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007e92:	2301      	movs	r3, #1
 8007e94:	e00f      	b.n	8007eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007e96:	4a0a      	ldr	r2, [pc, #40]	@ (8007ec0 <SysTick_Config+0x40>)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007e9e:	210f      	movs	r1, #15
 8007ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea4:	f7ff ff8e 	bl	8007dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ea8:	4b05      	ldr	r3, [pc, #20]	@ (8007ec0 <SysTick_Config+0x40>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007eae:	4b04      	ldr	r3, [pc, #16]	@ (8007ec0 <SysTick_Config+0x40>)
 8007eb0:	2207      	movs	r2, #7
 8007eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	e000e010 	.word	0xe000e010

08007ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff ff29 	bl	8007d24 <__NVIC_SetPriorityGrouping>
}
 8007ed2:	bf00      	nop
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b086      	sub	sp, #24
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	607a      	str	r2, [r7, #4]
 8007ee6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007ee8:	f7ff ff40 	bl	8007d6c <__NVIC_GetPriorityGrouping>
 8007eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	68b9      	ldr	r1, [r7, #8]
 8007ef2:	6978      	ldr	r0, [r7, #20]
 8007ef4:	f7ff ff90 	bl	8007e18 <NVIC_EncodePriority>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007efe:	4611      	mov	r1, r2
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7ff ff5f 	bl	8007dc4 <__NVIC_SetPriority>
}
 8007f06:	bf00      	nop
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b082      	sub	sp, #8
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	4603      	mov	r3, r0
 8007f16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7ff ff33 	bl	8007d88 <__NVIC_EnableIRQ>
}
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b082      	sub	sp, #8
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff ffa4 	bl	8007e80 <SysTick_Config>
 8007f38:	4603      	mov	r3, r0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
	...

08007f44 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007f44:	b480      	push	{r7}
 8007f46:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8007f48:	f3bf 8f5f 	dmb	sy
}
 8007f4c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007f4e:	4b07      	ldr	r3, [pc, #28]	@ (8007f6c <HAL_MPU_Disable+0x28>)
 8007f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f52:	4a06      	ldr	r2, [pc, #24]	@ (8007f6c <HAL_MPU_Disable+0x28>)
 8007f54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f58:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8007f5a:	4b05      	ldr	r3, [pc, #20]	@ (8007f70 <HAL_MPU_Disable+0x2c>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	605a      	str	r2, [r3, #4]
}
 8007f60:	bf00      	nop
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	e000ed00 	.word	0xe000ed00
 8007f70:	e000ed90 	.word	0xe000ed90

08007f74 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8007fac <HAL_MPU_Enable+0x38>)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f043 0301 	orr.w	r3, r3, #1
 8007f84:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007f86:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb0 <HAL_MPU_Enable+0x3c>)
 8007f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8a:	4a09      	ldr	r2, [pc, #36]	@ (8007fb0 <HAL_MPU_Enable+0x3c>)
 8007f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f90:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007f92:	f3bf 8f4f 	dsb	sy
}
 8007f96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007f98:	f3bf 8f6f 	isb	sy
}
 8007f9c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8007f9e:	bf00      	nop
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	e000ed90 	.word	0xe000ed90
 8007fb0:	e000ed00 	.word	0xe000ed00

08007fb4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	785a      	ldrb	r2, [r3, #1]
 8007fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8008030 <HAL_MPU_ConfigRegion+0x7c>)
 8007fc2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8007fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8008030 <HAL_MPU_ConfigRegion+0x7c>)
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	4a19      	ldr	r2, [pc, #100]	@ (8008030 <HAL_MPU_ConfigRegion+0x7c>)
 8007fca:	f023 0301 	bic.w	r3, r3, #1
 8007fce:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8007fd0:	4a17      	ldr	r2, [pc, #92]	@ (8008030 <HAL_MPU_ConfigRegion+0x7c>)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	7b1b      	ldrb	r3, [r3, #12]
 8007fdc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	7adb      	ldrb	r3, [r3, #11]
 8007fe2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007fe4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	7a9b      	ldrb	r3, [r3, #10]
 8007fea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007fec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	7b5b      	ldrb	r3, [r3, #13]
 8007ff2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007ff4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	7b9b      	ldrb	r3, [r3, #14]
 8007ffa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007ffc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	7bdb      	ldrb	r3, [r3, #15]
 8008002:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008004:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	7a5b      	ldrb	r3, [r3, #9]
 800800a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800800c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	7a1b      	ldrb	r3, [r3, #8]
 8008012:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008014:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	7812      	ldrb	r2, [r2, #0]
 800801a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800801c:	4a04      	ldr	r2, [pc, #16]	@ (8008030 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800801e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008020:	6113      	str	r3, [r2, #16]
}
 8008022:	bf00      	nop
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	e000ed90 	.word	0xe000ed90

08008034 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e237      	b.n	80084b6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d004      	beq.n	800805c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2280      	movs	r2, #128	@ 0x80
 8008056:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e22c      	b.n	80084b6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a5c      	ldr	r2, [pc, #368]	@ (80081d4 <HAL_DMA_Abort_IT+0x1a0>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d04a      	beq.n	80080fc <HAL_DMA_Abort_IT+0xc8>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a5b      	ldr	r2, [pc, #364]	@ (80081d8 <HAL_DMA_Abort_IT+0x1a4>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d045      	beq.n	80080fc <HAL_DMA_Abort_IT+0xc8>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a59      	ldr	r2, [pc, #356]	@ (80081dc <HAL_DMA_Abort_IT+0x1a8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d040      	beq.n	80080fc <HAL_DMA_Abort_IT+0xc8>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a58      	ldr	r2, [pc, #352]	@ (80081e0 <HAL_DMA_Abort_IT+0x1ac>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d03b      	beq.n	80080fc <HAL_DMA_Abort_IT+0xc8>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a56      	ldr	r2, [pc, #344]	@ (80081e4 <HAL_DMA_Abort_IT+0x1b0>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d036      	beq.n	80080fc <HAL_DMA_Abort_IT+0xc8>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a55      	ldr	r2, [pc, #340]	@ (80081e8 <HAL_DMA_Abort_IT+0x1b4>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d031      	beq.n	80080fc <HAL_DMA_Abort_IT+0xc8>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a53      	ldr	r2, [pc, #332]	@ (80081ec <HAL_DMA_Abort_IT+0x1b8>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d02c      	beq.n	80080fc <HAL_DMA_Abort_IT+0xc8>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a52      	ldr	r2, [pc, #328]	@ (80081f0 <HAL_DMA_Abort_IT+0x1bc>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d027      	beq.n	80080fc <HAL_DMA_Abort_IT+0xc8>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a50      	ldr	r2, [pc, #320]	@ (80081f4 <HAL_DMA_Abort_IT+0x1c0>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d022      	beq.n	80080fc <HAL_DMA_Abort_IT+0xc8>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a4f      	ldr	r2, [pc, #316]	@ (80081f8 <HAL_DMA_Abort_IT+0x1c4>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d01d      	beq.n	80080fc <HAL_DMA_Abort_IT+0xc8>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a4d      	ldr	r2, [pc, #308]	@ (80081fc <HAL_DMA_Abort_IT+0x1c8>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d018      	beq.n	80080fc <HAL_DMA_Abort_IT+0xc8>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a4c      	ldr	r2, [pc, #304]	@ (8008200 <HAL_DMA_Abort_IT+0x1cc>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d013      	beq.n	80080fc <HAL_DMA_Abort_IT+0xc8>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a4a      	ldr	r2, [pc, #296]	@ (8008204 <HAL_DMA_Abort_IT+0x1d0>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d00e      	beq.n	80080fc <HAL_DMA_Abort_IT+0xc8>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a49      	ldr	r2, [pc, #292]	@ (8008208 <HAL_DMA_Abort_IT+0x1d4>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d009      	beq.n	80080fc <HAL_DMA_Abort_IT+0xc8>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a47      	ldr	r2, [pc, #284]	@ (800820c <HAL_DMA_Abort_IT+0x1d8>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d004      	beq.n	80080fc <HAL_DMA_Abort_IT+0xc8>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a46      	ldr	r2, [pc, #280]	@ (8008210 <HAL_DMA_Abort_IT+0x1dc>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d101      	bne.n	8008100 <HAL_DMA_Abort_IT+0xcc>
 80080fc:	2301      	movs	r3, #1
 80080fe:	e000      	b.n	8008102 <HAL_DMA_Abort_IT+0xce>
 8008100:	2300      	movs	r3, #0
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 8086 	beq.w	8008214 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2204      	movs	r2, #4
 800810c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a2f      	ldr	r2, [pc, #188]	@ (80081d4 <HAL_DMA_Abort_IT+0x1a0>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d04a      	beq.n	80081b0 <HAL_DMA_Abort_IT+0x17c>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a2e      	ldr	r2, [pc, #184]	@ (80081d8 <HAL_DMA_Abort_IT+0x1a4>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d045      	beq.n	80081b0 <HAL_DMA_Abort_IT+0x17c>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a2c      	ldr	r2, [pc, #176]	@ (80081dc <HAL_DMA_Abort_IT+0x1a8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d040      	beq.n	80081b0 <HAL_DMA_Abort_IT+0x17c>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a2b      	ldr	r2, [pc, #172]	@ (80081e0 <HAL_DMA_Abort_IT+0x1ac>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d03b      	beq.n	80081b0 <HAL_DMA_Abort_IT+0x17c>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a29      	ldr	r2, [pc, #164]	@ (80081e4 <HAL_DMA_Abort_IT+0x1b0>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d036      	beq.n	80081b0 <HAL_DMA_Abort_IT+0x17c>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a28      	ldr	r2, [pc, #160]	@ (80081e8 <HAL_DMA_Abort_IT+0x1b4>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d031      	beq.n	80081b0 <HAL_DMA_Abort_IT+0x17c>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a26      	ldr	r2, [pc, #152]	@ (80081ec <HAL_DMA_Abort_IT+0x1b8>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d02c      	beq.n	80081b0 <HAL_DMA_Abort_IT+0x17c>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a25      	ldr	r2, [pc, #148]	@ (80081f0 <HAL_DMA_Abort_IT+0x1bc>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d027      	beq.n	80081b0 <HAL_DMA_Abort_IT+0x17c>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a23      	ldr	r2, [pc, #140]	@ (80081f4 <HAL_DMA_Abort_IT+0x1c0>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d022      	beq.n	80081b0 <HAL_DMA_Abort_IT+0x17c>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a22      	ldr	r2, [pc, #136]	@ (80081f8 <HAL_DMA_Abort_IT+0x1c4>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d01d      	beq.n	80081b0 <HAL_DMA_Abort_IT+0x17c>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a20      	ldr	r2, [pc, #128]	@ (80081fc <HAL_DMA_Abort_IT+0x1c8>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d018      	beq.n	80081b0 <HAL_DMA_Abort_IT+0x17c>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a1f      	ldr	r2, [pc, #124]	@ (8008200 <HAL_DMA_Abort_IT+0x1cc>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d013      	beq.n	80081b0 <HAL_DMA_Abort_IT+0x17c>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a1d      	ldr	r2, [pc, #116]	@ (8008204 <HAL_DMA_Abort_IT+0x1d0>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d00e      	beq.n	80081b0 <HAL_DMA_Abort_IT+0x17c>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a1c      	ldr	r2, [pc, #112]	@ (8008208 <HAL_DMA_Abort_IT+0x1d4>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d009      	beq.n	80081b0 <HAL_DMA_Abort_IT+0x17c>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a1a      	ldr	r2, [pc, #104]	@ (800820c <HAL_DMA_Abort_IT+0x1d8>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d004      	beq.n	80081b0 <HAL_DMA_Abort_IT+0x17c>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a19      	ldr	r2, [pc, #100]	@ (8008210 <HAL_DMA_Abort_IT+0x1dc>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d108      	bne.n	80081c2 <HAL_DMA_Abort_IT+0x18e>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0201 	bic.w	r2, r2, #1
 80081be:	601a      	str	r2, [r3, #0]
 80081c0:	e178      	b.n	80084b4 <HAL_DMA_Abort_IT+0x480>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0201 	bic.w	r2, r2, #1
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	e16f      	b.n	80084b4 <HAL_DMA_Abort_IT+0x480>
 80081d4:	40020010 	.word	0x40020010
 80081d8:	40020028 	.word	0x40020028
 80081dc:	40020040 	.word	0x40020040
 80081e0:	40020058 	.word	0x40020058
 80081e4:	40020070 	.word	0x40020070
 80081e8:	40020088 	.word	0x40020088
 80081ec:	400200a0 	.word	0x400200a0
 80081f0:	400200b8 	.word	0x400200b8
 80081f4:	40020410 	.word	0x40020410
 80081f8:	40020428 	.word	0x40020428
 80081fc:	40020440 	.word	0x40020440
 8008200:	40020458 	.word	0x40020458
 8008204:	40020470 	.word	0x40020470
 8008208:	40020488 	.word	0x40020488
 800820c:	400204a0 	.word	0x400204a0
 8008210:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 020e 	bic.w	r2, r2, #14
 8008222:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a6c      	ldr	r2, [pc, #432]	@ (80083dc <HAL_DMA_Abort_IT+0x3a8>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d04a      	beq.n	80082c4 <HAL_DMA_Abort_IT+0x290>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a6b      	ldr	r2, [pc, #428]	@ (80083e0 <HAL_DMA_Abort_IT+0x3ac>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d045      	beq.n	80082c4 <HAL_DMA_Abort_IT+0x290>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a69      	ldr	r2, [pc, #420]	@ (80083e4 <HAL_DMA_Abort_IT+0x3b0>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d040      	beq.n	80082c4 <HAL_DMA_Abort_IT+0x290>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a68      	ldr	r2, [pc, #416]	@ (80083e8 <HAL_DMA_Abort_IT+0x3b4>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d03b      	beq.n	80082c4 <HAL_DMA_Abort_IT+0x290>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a66      	ldr	r2, [pc, #408]	@ (80083ec <HAL_DMA_Abort_IT+0x3b8>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d036      	beq.n	80082c4 <HAL_DMA_Abort_IT+0x290>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a65      	ldr	r2, [pc, #404]	@ (80083f0 <HAL_DMA_Abort_IT+0x3bc>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d031      	beq.n	80082c4 <HAL_DMA_Abort_IT+0x290>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a63      	ldr	r2, [pc, #396]	@ (80083f4 <HAL_DMA_Abort_IT+0x3c0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d02c      	beq.n	80082c4 <HAL_DMA_Abort_IT+0x290>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a62      	ldr	r2, [pc, #392]	@ (80083f8 <HAL_DMA_Abort_IT+0x3c4>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d027      	beq.n	80082c4 <HAL_DMA_Abort_IT+0x290>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a60      	ldr	r2, [pc, #384]	@ (80083fc <HAL_DMA_Abort_IT+0x3c8>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d022      	beq.n	80082c4 <HAL_DMA_Abort_IT+0x290>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a5f      	ldr	r2, [pc, #380]	@ (8008400 <HAL_DMA_Abort_IT+0x3cc>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d01d      	beq.n	80082c4 <HAL_DMA_Abort_IT+0x290>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a5d      	ldr	r2, [pc, #372]	@ (8008404 <HAL_DMA_Abort_IT+0x3d0>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d018      	beq.n	80082c4 <HAL_DMA_Abort_IT+0x290>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a5c      	ldr	r2, [pc, #368]	@ (8008408 <HAL_DMA_Abort_IT+0x3d4>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d013      	beq.n	80082c4 <HAL_DMA_Abort_IT+0x290>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a5a      	ldr	r2, [pc, #360]	@ (800840c <HAL_DMA_Abort_IT+0x3d8>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d00e      	beq.n	80082c4 <HAL_DMA_Abort_IT+0x290>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a59      	ldr	r2, [pc, #356]	@ (8008410 <HAL_DMA_Abort_IT+0x3dc>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d009      	beq.n	80082c4 <HAL_DMA_Abort_IT+0x290>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a57      	ldr	r2, [pc, #348]	@ (8008414 <HAL_DMA_Abort_IT+0x3e0>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d004      	beq.n	80082c4 <HAL_DMA_Abort_IT+0x290>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a56      	ldr	r2, [pc, #344]	@ (8008418 <HAL_DMA_Abort_IT+0x3e4>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d108      	bne.n	80082d6 <HAL_DMA_Abort_IT+0x2a2>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0201 	bic.w	r2, r2, #1
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	e007      	b.n	80082e6 <HAL_DMA_Abort_IT+0x2b2>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f022 0201 	bic.w	r2, r2, #1
 80082e4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a3c      	ldr	r2, [pc, #240]	@ (80083dc <HAL_DMA_Abort_IT+0x3a8>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d072      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a3a      	ldr	r2, [pc, #232]	@ (80083e0 <HAL_DMA_Abort_IT+0x3ac>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d06d      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a39      	ldr	r2, [pc, #228]	@ (80083e4 <HAL_DMA_Abort_IT+0x3b0>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d068      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a37      	ldr	r2, [pc, #220]	@ (80083e8 <HAL_DMA_Abort_IT+0x3b4>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d063      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a36      	ldr	r2, [pc, #216]	@ (80083ec <HAL_DMA_Abort_IT+0x3b8>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d05e      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a34      	ldr	r2, [pc, #208]	@ (80083f0 <HAL_DMA_Abort_IT+0x3bc>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d059      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a33      	ldr	r2, [pc, #204]	@ (80083f4 <HAL_DMA_Abort_IT+0x3c0>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d054      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a31      	ldr	r2, [pc, #196]	@ (80083f8 <HAL_DMA_Abort_IT+0x3c4>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d04f      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a30      	ldr	r2, [pc, #192]	@ (80083fc <HAL_DMA_Abort_IT+0x3c8>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d04a      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a2e      	ldr	r2, [pc, #184]	@ (8008400 <HAL_DMA_Abort_IT+0x3cc>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d045      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a2d      	ldr	r2, [pc, #180]	@ (8008404 <HAL_DMA_Abort_IT+0x3d0>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d040      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a2b      	ldr	r2, [pc, #172]	@ (8008408 <HAL_DMA_Abort_IT+0x3d4>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d03b      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a2a      	ldr	r2, [pc, #168]	@ (800840c <HAL_DMA_Abort_IT+0x3d8>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d036      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a28      	ldr	r2, [pc, #160]	@ (8008410 <HAL_DMA_Abort_IT+0x3dc>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d031      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a27      	ldr	r2, [pc, #156]	@ (8008414 <HAL_DMA_Abort_IT+0x3e0>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d02c      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a25      	ldr	r2, [pc, #148]	@ (8008418 <HAL_DMA_Abort_IT+0x3e4>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d027      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a24      	ldr	r2, [pc, #144]	@ (800841c <HAL_DMA_Abort_IT+0x3e8>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d022      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a22      	ldr	r2, [pc, #136]	@ (8008420 <HAL_DMA_Abort_IT+0x3ec>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d01d      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a21      	ldr	r2, [pc, #132]	@ (8008424 <HAL_DMA_Abort_IT+0x3f0>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d018      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a1f      	ldr	r2, [pc, #124]	@ (8008428 <HAL_DMA_Abort_IT+0x3f4>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d013      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a1e      	ldr	r2, [pc, #120]	@ (800842c <HAL_DMA_Abort_IT+0x3f8>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d00e      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008430 <HAL_DMA_Abort_IT+0x3fc>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d009      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008434 <HAL_DMA_Abort_IT+0x400>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d004      	beq.n	80083d6 <HAL_DMA_Abort_IT+0x3a2>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a19      	ldr	r2, [pc, #100]	@ (8008438 <HAL_DMA_Abort_IT+0x404>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d132      	bne.n	800843c <HAL_DMA_Abort_IT+0x408>
 80083d6:	2301      	movs	r3, #1
 80083d8:	e031      	b.n	800843e <HAL_DMA_Abort_IT+0x40a>
 80083da:	bf00      	nop
 80083dc:	40020010 	.word	0x40020010
 80083e0:	40020028 	.word	0x40020028
 80083e4:	40020040 	.word	0x40020040
 80083e8:	40020058 	.word	0x40020058
 80083ec:	40020070 	.word	0x40020070
 80083f0:	40020088 	.word	0x40020088
 80083f4:	400200a0 	.word	0x400200a0
 80083f8:	400200b8 	.word	0x400200b8
 80083fc:	40020410 	.word	0x40020410
 8008400:	40020428 	.word	0x40020428
 8008404:	40020440 	.word	0x40020440
 8008408:	40020458 	.word	0x40020458
 800840c:	40020470 	.word	0x40020470
 8008410:	40020488 	.word	0x40020488
 8008414:	400204a0 	.word	0x400204a0
 8008418:	400204b8 	.word	0x400204b8
 800841c:	58025408 	.word	0x58025408
 8008420:	5802541c 	.word	0x5802541c
 8008424:	58025430 	.word	0x58025430
 8008428:	58025444 	.word	0x58025444
 800842c:	58025458 	.word	0x58025458
 8008430:	5802546c 	.word	0x5802546c
 8008434:	58025480 	.word	0x58025480
 8008438:	58025494 	.word	0x58025494
 800843c:	2300      	movs	r3, #0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d028      	beq.n	8008494 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800844c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008450:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008456:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800845c:	f003 031f 	and.w	r3, r3, #31
 8008460:	2201      	movs	r2, #1
 8008462:	409a      	lsls	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008470:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00c      	beq.n	8008494 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008484:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008488:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008492:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop

080084c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b089      	sub	sp, #36	@ 0x24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80084ce:	4b89      	ldr	r3, [pc, #548]	@ (80086f4 <HAL_GPIO_Init+0x234>)
 80084d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084d2:	e194      	b.n	80087fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	2101      	movs	r1, #1
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	fa01 f303 	lsl.w	r3, r1, r3
 80084e0:	4013      	ands	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 8186 	beq.w	80087f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f003 0303 	and.w	r3, r3, #3
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d005      	beq.n	8008504 <HAL_GPIO_Init+0x44>
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f003 0303 	and.w	r3, r3, #3
 8008500:	2b02      	cmp	r3, #2
 8008502:	d130      	bne.n	8008566 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	005b      	lsls	r3, r3, #1
 800850e:	2203      	movs	r2, #3
 8008510:	fa02 f303 	lsl.w	r3, r2, r3
 8008514:	43db      	mvns	r3, r3
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	4013      	ands	r3, r2
 800851a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	68da      	ldr	r2, [r3, #12]
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	005b      	lsls	r3, r3, #1
 8008524:	fa02 f303 	lsl.w	r3, r2, r3
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	4313      	orrs	r3, r2
 800852c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800853a:	2201      	movs	r2, #1
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	fa02 f303 	lsl.w	r3, r2, r3
 8008542:	43db      	mvns	r3, r3
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	4013      	ands	r3, r2
 8008548:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	091b      	lsrs	r3, r3, #4
 8008550:	f003 0201 	and.w	r2, r3, #1
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	fa02 f303 	lsl.w	r3, r2, r3
 800855a:	69ba      	ldr	r2, [r7, #24]
 800855c:	4313      	orrs	r3, r2
 800855e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f003 0303 	and.w	r3, r3, #3
 800856e:	2b03      	cmp	r3, #3
 8008570:	d017      	beq.n	80085a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	005b      	lsls	r3, r3, #1
 800857c:	2203      	movs	r2, #3
 800857e:	fa02 f303 	lsl.w	r3, r2, r3
 8008582:	43db      	mvns	r3, r3
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	4013      	ands	r3, r2
 8008588:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	689a      	ldr	r2, [r3, #8]
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	fa02 f303 	lsl.w	r3, r2, r3
 8008596:	69ba      	ldr	r2, [r7, #24]
 8008598:	4313      	orrs	r3, r2
 800859a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f003 0303 	and.w	r3, r3, #3
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d123      	bne.n	80085f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	08da      	lsrs	r2, r3, #3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	3208      	adds	r2, #8
 80085b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	f003 0307 	and.w	r3, r3, #7
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	220f      	movs	r2, #15
 80085c6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ca:	43db      	mvns	r3, r3
 80085cc:	69ba      	ldr	r2, [r7, #24]
 80085ce:	4013      	ands	r3, r2
 80085d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	691a      	ldr	r2, [r3, #16]
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	f003 0307 	and.w	r3, r3, #7
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	fa02 f303 	lsl.w	r3, r2, r3
 80085e2:	69ba      	ldr	r2, [r7, #24]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	08da      	lsrs	r2, r3, #3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3208      	adds	r2, #8
 80085f0:	69b9      	ldr	r1, [r7, #24]
 80085f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	005b      	lsls	r3, r3, #1
 8008600:	2203      	movs	r2, #3
 8008602:	fa02 f303 	lsl.w	r3, r2, r3
 8008606:	43db      	mvns	r3, r3
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	4013      	ands	r3, r2
 800860c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f003 0203 	and.w	r2, r3, #3
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	005b      	lsls	r3, r3, #1
 800861a:	fa02 f303 	lsl.w	r3, r2, r3
 800861e:	69ba      	ldr	r2, [r7, #24]
 8008620:	4313      	orrs	r3, r2
 8008622:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 80e0 	beq.w	80087f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008638:	4b2f      	ldr	r3, [pc, #188]	@ (80086f8 <HAL_GPIO_Init+0x238>)
 800863a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800863e:	4a2e      	ldr	r2, [pc, #184]	@ (80086f8 <HAL_GPIO_Init+0x238>)
 8008640:	f043 0302 	orr.w	r3, r3, #2
 8008644:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008648:	4b2b      	ldr	r3, [pc, #172]	@ (80086f8 <HAL_GPIO_Init+0x238>)
 800864a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800864e:	f003 0302 	and.w	r3, r3, #2
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008656:	4a29      	ldr	r2, [pc, #164]	@ (80086fc <HAL_GPIO_Init+0x23c>)
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	089b      	lsrs	r3, r3, #2
 800865c:	3302      	adds	r3, #2
 800865e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	f003 0303 	and.w	r3, r3, #3
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	220f      	movs	r2, #15
 800866e:	fa02 f303 	lsl.w	r3, r2, r3
 8008672:	43db      	mvns	r3, r3
 8008674:	69ba      	ldr	r2, [r7, #24]
 8008676:	4013      	ands	r3, r2
 8008678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a20      	ldr	r2, [pc, #128]	@ (8008700 <HAL_GPIO_Init+0x240>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d052      	beq.n	8008728 <HAL_GPIO_Init+0x268>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a1f      	ldr	r2, [pc, #124]	@ (8008704 <HAL_GPIO_Init+0x244>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d031      	beq.n	80086ee <HAL_GPIO_Init+0x22e>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a1e      	ldr	r2, [pc, #120]	@ (8008708 <HAL_GPIO_Init+0x248>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d02b      	beq.n	80086ea <HAL_GPIO_Init+0x22a>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a1d      	ldr	r2, [pc, #116]	@ (800870c <HAL_GPIO_Init+0x24c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d025      	beq.n	80086e6 <HAL_GPIO_Init+0x226>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a1c      	ldr	r2, [pc, #112]	@ (8008710 <HAL_GPIO_Init+0x250>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d01f      	beq.n	80086e2 <HAL_GPIO_Init+0x222>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008714 <HAL_GPIO_Init+0x254>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d019      	beq.n	80086de <HAL_GPIO_Init+0x21e>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a1a      	ldr	r2, [pc, #104]	@ (8008718 <HAL_GPIO_Init+0x258>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d013      	beq.n	80086da <HAL_GPIO_Init+0x21a>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a19      	ldr	r2, [pc, #100]	@ (800871c <HAL_GPIO_Init+0x25c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d00d      	beq.n	80086d6 <HAL_GPIO_Init+0x216>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a18      	ldr	r2, [pc, #96]	@ (8008720 <HAL_GPIO_Init+0x260>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d007      	beq.n	80086d2 <HAL_GPIO_Init+0x212>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a17      	ldr	r2, [pc, #92]	@ (8008724 <HAL_GPIO_Init+0x264>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d101      	bne.n	80086ce <HAL_GPIO_Init+0x20e>
 80086ca:	2309      	movs	r3, #9
 80086cc:	e02d      	b.n	800872a <HAL_GPIO_Init+0x26a>
 80086ce:	230a      	movs	r3, #10
 80086d0:	e02b      	b.n	800872a <HAL_GPIO_Init+0x26a>
 80086d2:	2308      	movs	r3, #8
 80086d4:	e029      	b.n	800872a <HAL_GPIO_Init+0x26a>
 80086d6:	2307      	movs	r3, #7
 80086d8:	e027      	b.n	800872a <HAL_GPIO_Init+0x26a>
 80086da:	2306      	movs	r3, #6
 80086dc:	e025      	b.n	800872a <HAL_GPIO_Init+0x26a>
 80086de:	2305      	movs	r3, #5
 80086e0:	e023      	b.n	800872a <HAL_GPIO_Init+0x26a>
 80086e2:	2304      	movs	r3, #4
 80086e4:	e021      	b.n	800872a <HAL_GPIO_Init+0x26a>
 80086e6:	2303      	movs	r3, #3
 80086e8:	e01f      	b.n	800872a <HAL_GPIO_Init+0x26a>
 80086ea:	2302      	movs	r3, #2
 80086ec:	e01d      	b.n	800872a <HAL_GPIO_Init+0x26a>
 80086ee:	2301      	movs	r3, #1
 80086f0:	e01b      	b.n	800872a <HAL_GPIO_Init+0x26a>
 80086f2:	bf00      	nop
 80086f4:	58000080 	.word	0x58000080
 80086f8:	58024400 	.word	0x58024400
 80086fc:	58000400 	.word	0x58000400
 8008700:	58020000 	.word	0x58020000
 8008704:	58020400 	.word	0x58020400
 8008708:	58020800 	.word	0x58020800
 800870c:	58020c00 	.word	0x58020c00
 8008710:	58021000 	.word	0x58021000
 8008714:	58021400 	.word	0x58021400
 8008718:	58021800 	.word	0x58021800
 800871c:	58021c00 	.word	0x58021c00
 8008720:	58022000 	.word	0x58022000
 8008724:	58022400 	.word	0x58022400
 8008728:	2300      	movs	r3, #0
 800872a:	69fa      	ldr	r2, [r7, #28]
 800872c:	f002 0203 	and.w	r2, r2, #3
 8008730:	0092      	lsls	r2, r2, #2
 8008732:	4093      	lsls	r3, r2
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	4313      	orrs	r3, r2
 8008738:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800873a:	4938      	ldr	r1, [pc, #224]	@ (800881c <HAL_GPIO_Init+0x35c>)
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	089b      	lsrs	r3, r3, #2
 8008740:	3302      	adds	r3, #2
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	43db      	mvns	r3, r3
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	4013      	ands	r3, r2
 8008758:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	4313      	orrs	r3, r2
 800876c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800876e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	43db      	mvns	r3, r3
 8008782:	69ba      	ldr	r2, [r7, #24]
 8008784:	4013      	ands	r3, r2
 8008786:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d003      	beq.n	800879c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008794:	69ba      	ldr	r2, [r7, #24]
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	4313      	orrs	r3, r2
 800879a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800879c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	43db      	mvns	r3, r3
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	4013      	ands	r3, r2
 80087b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d003      	beq.n	80087c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80087c0:	69ba      	ldr	r2, [r7, #24]
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	43db      	mvns	r3, r3
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	4013      	ands	r3, r2
 80087dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80087ea:	69ba      	ldr	r2, [r7, #24]
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	69ba      	ldr	r2, [r7, #24]
 80087f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	3301      	adds	r3, #1
 80087fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	fa22 f303 	lsr.w	r3, r2, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	f47f ae63 	bne.w	80084d4 <HAL_GPIO_Init+0x14>
  }
}
 800880e:	bf00      	nop
 8008810:	bf00      	nop
 8008812:	3724      	adds	r7, #36	@ 0x24
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	58000400 	.word	0x58000400

08008820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	691a      	ldr	r2, [r3, #16]
 8008830:	887b      	ldrh	r3, [r7, #2]
 8008832:	4013      	ands	r3, r2
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008838:	2301      	movs	r3, #1
 800883a:	73fb      	strb	r3, [r7, #15]
 800883c:	e001      	b.n	8008842 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800883e:	2300      	movs	r3, #0
 8008840:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008842:	7bfb      	ldrb	r3, [r7, #15]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	807b      	strh	r3, [r7, #2]
 800885c:	4613      	mov	r3, r2
 800885e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008860:	787b      	ldrb	r3, [r7, #1]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d003      	beq.n	800886e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008866:	887a      	ldrh	r2, [r7, #2]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800886c:	e003      	b.n	8008876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800886e:	887b      	ldrh	r3, [r7, #2]
 8008870:	041a      	lsls	r2, r3, #16
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	619a      	str	r2, [r3, #24]
}
 8008876:	bf00      	nop
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	4603      	mov	r3, r0
 800888a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800888c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008890:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008894:	88fb      	ldrh	r3, [r7, #6]
 8008896:	4013      	ands	r3, r2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d008      	beq.n	80088ae <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800889c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80088a0:	88fb      	ldrh	r3, [r7, #6]
 80088a2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80088a6:	88fb      	ldrh	r3, [r7, #6]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 f804 	bl	80088b6 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80088ae:	bf00      	nop
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	4603      	mov	r3, r0
 80088be:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80088d4:	4b19      	ldr	r3, [pc, #100]	@ (800893c <HAL_PWREx_ConfigSupply+0x70>)
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	f003 0304 	and.w	r3, r3, #4
 80088dc:	2b04      	cmp	r3, #4
 80088de:	d00a      	beq.n	80088f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80088e0:	4b16      	ldr	r3, [pc, #88]	@ (800893c <HAL_PWREx_ConfigSupply+0x70>)
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	f003 0307 	and.w	r3, r3, #7
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d001      	beq.n	80088f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e01f      	b.n	8008932 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	e01d      	b.n	8008932 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80088f6:	4b11      	ldr	r3, [pc, #68]	@ (800893c <HAL_PWREx_ConfigSupply+0x70>)
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	f023 0207 	bic.w	r2, r3, #7
 80088fe:	490f      	ldr	r1, [pc, #60]	@ (800893c <HAL_PWREx_ConfigSupply+0x70>)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4313      	orrs	r3, r2
 8008904:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008906:	f7ff f9f5 	bl	8007cf4 <HAL_GetTick>
 800890a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800890c:	e009      	b.n	8008922 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800890e:	f7ff f9f1 	bl	8007cf4 <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800891c:	d901      	bls.n	8008922 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e007      	b.n	8008932 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008922:	4b06      	ldr	r3, [pc, #24]	@ (800893c <HAL_PWREx_ConfigSupply+0x70>)
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800892a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800892e:	d1ee      	bne.n	800890e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	58024800 	.word	0x58024800

08008940 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b08c      	sub	sp, #48	@ 0x30
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d102      	bne.n	8008954 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	f000 bc48 	b.w	80091e4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 8088 	beq.w	8008a72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008962:	4b99      	ldr	r3, [pc, #612]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800896a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800896c:	4b96      	ldr	r3, [pc, #600]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 800896e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008970:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008974:	2b10      	cmp	r3, #16
 8008976:	d007      	beq.n	8008988 <HAL_RCC_OscConfig+0x48>
 8008978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897a:	2b18      	cmp	r3, #24
 800897c:	d111      	bne.n	80089a2 <HAL_RCC_OscConfig+0x62>
 800897e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008980:	f003 0303 	and.w	r3, r3, #3
 8008984:	2b02      	cmp	r3, #2
 8008986:	d10c      	bne.n	80089a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008988:	4b8f      	ldr	r3, [pc, #572]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d06d      	beq.n	8008a70 <HAL_RCC_OscConfig+0x130>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d169      	bne.n	8008a70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	f000 bc21 	b.w	80091e4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089aa:	d106      	bne.n	80089ba <HAL_RCC_OscConfig+0x7a>
 80089ac:	4b86      	ldr	r3, [pc, #536]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a85      	ldr	r2, [pc, #532]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 80089b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	e02e      	b.n	8008a18 <HAL_RCC_OscConfig+0xd8>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10c      	bne.n	80089dc <HAL_RCC_OscConfig+0x9c>
 80089c2:	4b81      	ldr	r3, [pc, #516]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a80      	ldr	r2, [pc, #512]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 80089c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	4b7e      	ldr	r3, [pc, #504]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a7d      	ldr	r2, [pc, #500]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 80089d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	e01d      	b.n	8008a18 <HAL_RCC_OscConfig+0xd8>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80089e4:	d10c      	bne.n	8008a00 <HAL_RCC_OscConfig+0xc0>
 80089e6:	4b78      	ldr	r3, [pc, #480]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a77      	ldr	r2, [pc, #476]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 80089ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80089f0:	6013      	str	r3, [r2, #0]
 80089f2:	4b75      	ldr	r3, [pc, #468]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a74      	ldr	r2, [pc, #464]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 80089f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089fc:	6013      	str	r3, [r2, #0]
 80089fe:	e00b      	b.n	8008a18 <HAL_RCC_OscConfig+0xd8>
 8008a00:	4b71      	ldr	r3, [pc, #452]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a70      	ldr	r2, [pc, #448]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a0a:	6013      	str	r3, [r2, #0]
 8008a0c:	4b6e      	ldr	r3, [pc, #440]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a6d      	ldr	r2, [pc, #436]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d013      	beq.n	8008a48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a20:	f7ff f968 	bl	8007cf4 <HAL_GetTick>
 8008a24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a26:	e008      	b.n	8008a3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a28:	f7ff f964 	bl	8007cf4 <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	2b64      	cmp	r3, #100	@ 0x64
 8008a34:	d901      	bls.n	8008a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e3d4      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a3a:	4b63      	ldr	r3, [pc, #396]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d0f0      	beq.n	8008a28 <HAL_RCC_OscConfig+0xe8>
 8008a46:	e014      	b.n	8008a72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a48:	f7ff f954 	bl	8007cf4 <HAL_GetTick>
 8008a4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008a4e:	e008      	b.n	8008a62 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a50:	f7ff f950 	bl	8007cf4 <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	2b64      	cmp	r3, #100	@ 0x64
 8008a5c:	d901      	bls.n	8008a62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e3c0      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008a62:	4b59      	ldr	r3, [pc, #356]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1f0      	bne.n	8008a50 <HAL_RCC_OscConfig+0x110>
 8008a6e:	e000      	b.n	8008a72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 80ca 	beq.w	8008c14 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a80:	4b51      	ldr	r3, [pc, #324]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a88:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a8a:	4b4f      	ldr	r3, [pc, #316]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d007      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x166>
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	2b18      	cmp	r3, #24
 8008a9a:	d156      	bne.n	8008b4a <HAL_RCC_OscConfig+0x20a>
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	f003 0303 	and.w	r3, r3, #3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d151      	bne.n	8008b4a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008aa6:	4b48      	ldr	r3, [pc, #288]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0304 	and.w	r3, r3, #4
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d005      	beq.n	8008abe <HAL_RCC_OscConfig+0x17e>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e392      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008abe:	4b42      	ldr	r3, [pc, #264]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f023 0219 	bic.w	r2, r3, #25
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	493f      	ldr	r1, [pc, #252]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008acc:	4313      	orrs	r3, r2
 8008ace:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad0:	f7ff f910 	bl	8007cf4 <HAL_GetTick>
 8008ad4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ad6:	e008      	b.n	8008aea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ad8:	f7ff f90c 	bl	8007cf4 <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d901      	bls.n	8008aea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e37c      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008aea:	4b37      	ldr	r3, [pc, #220]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0304 	and.w	r3, r3, #4
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d0f0      	beq.n	8008ad8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008af6:	f7ff f909 	bl	8007d0c <HAL_GetREVID>
 8008afa:	4603      	mov	r3, r0
 8008afc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d817      	bhi.n	8008b34 <HAL_RCC_OscConfig+0x1f4>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	2b40      	cmp	r3, #64	@ 0x40
 8008b0a:	d108      	bne.n	8008b1e <HAL_RCC_OscConfig+0x1de>
 8008b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008b14:	4a2c      	ldr	r2, [pc, #176]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008b16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b1a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b1c:	e07a      	b.n	8008c14 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	031b      	lsls	r3, r3, #12
 8008b2c:	4926      	ldr	r1, [pc, #152]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b32:	e06f      	b.n	8008c14 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b34:	4b24      	ldr	r3, [pc, #144]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	061b      	lsls	r3, r3, #24
 8008b42:	4921      	ldr	r1, [pc, #132]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b48:	e064      	b.n	8008c14 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d047      	beq.n	8008be2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008b52:	4b1d      	ldr	r3, [pc, #116]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f023 0219 	bic.w	r2, r3, #25
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	491a      	ldr	r1, [pc, #104]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b64:	f7ff f8c6 	bl	8007cf4 <HAL_GetTick>
 8008b68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b6c:	f7ff f8c2 	bl	8007cf4 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e332      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b7e:	4b12      	ldr	r3, [pc, #72]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0304 	and.w	r3, r3, #4
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d0f0      	beq.n	8008b6c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b8a:	f7ff f8bf 	bl	8007d0c <HAL_GetREVID>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d819      	bhi.n	8008bcc <HAL_RCC_OscConfig+0x28c>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	2b40      	cmp	r3, #64	@ 0x40
 8008b9e:	d108      	bne.n	8008bb2 <HAL_RCC_OscConfig+0x272>
 8008ba0:	4b09      	ldr	r3, [pc, #36]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008ba8:	4a07      	ldr	r2, [pc, #28]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bae:	6053      	str	r3, [r2, #4]
 8008bb0:	e030      	b.n	8008c14 <HAL_RCC_OscConfig+0x2d4>
 8008bb2:	4b05      	ldr	r3, [pc, #20]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	031b      	lsls	r3, r3, #12
 8008bc0:	4901      	ldr	r1, [pc, #4]	@ (8008bc8 <HAL_RCC_OscConfig+0x288>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	604b      	str	r3, [r1, #4]
 8008bc6:	e025      	b.n	8008c14 <HAL_RCC_OscConfig+0x2d4>
 8008bc8:	58024400 	.word	0x58024400
 8008bcc:	4b9a      	ldr	r3, [pc, #616]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	061b      	lsls	r3, r3, #24
 8008bda:	4997      	ldr	r1, [pc, #604]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	604b      	str	r3, [r1, #4]
 8008be0:	e018      	b.n	8008c14 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008be2:	4b95      	ldr	r3, [pc, #596]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a94      	ldr	r2, [pc, #592]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008be8:	f023 0301 	bic.w	r3, r3, #1
 8008bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bee:	f7ff f881 	bl	8007cf4 <HAL_GetTick>
 8008bf2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008bf4:	e008      	b.n	8008c08 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bf6:	f7ff f87d 	bl	8007cf4 <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d901      	bls.n	8008c08 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e2ed      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008c08:	4b8b      	ldr	r3, [pc, #556]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1f0      	bne.n	8008bf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0310 	and.w	r3, r3, #16
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 80a9 	beq.w	8008d74 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c22:	4b85      	ldr	r3, [pc, #532]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c2a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c2c:	4b82      	ldr	r3, [pc, #520]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c30:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	2b08      	cmp	r3, #8
 8008c36:	d007      	beq.n	8008c48 <HAL_RCC_OscConfig+0x308>
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	2b18      	cmp	r3, #24
 8008c3c:	d13a      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x374>
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f003 0303 	and.w	r3, r3, #3
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d135      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008c48:	4b7b      	ldr	r3, [pc, #492]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d005      	beq.n	8008c60 <HAL_RCC_OscConfig+0x320>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	2b80      	cmp	r3, #128	@ 0x80
 8008c5a:	d001      	beq.n	8008c60 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e2c1      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c60:	f7ff f854 	bl	8007d0c <HAL_GetREVID>
 8008c64:	4603      	mov	r3, r0
 8008c66:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d817      	bhi.n	8008c9e <HAL_RCC_OscConfig+0x35e>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	2b20      	cmp	r3, #32
 8008c74:	d108      	bne.n	8008c88 <HAL_RCC_OscConfig+0x348>
 8008c76:	4b70      	ldr	r3, [pc, #448]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008c7e:	4a6e      	ldr	r2, [pc, #440]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008c80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c84:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008c86:	e075      	b.n	8008d74 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c88:	4b6b      	ldr	r3, [pc, #428]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a1b      	ldr	r3, [r3, #32]
 8008c94:	069b      	lsls	r3, r3, #26
 8008c96:	4968      	ldr	r1, [pc, #416]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008c9c:	e06a      	b.n	8008d74 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c9e:	4b66      	ldr	r3, [pc, #408]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	061b      	lsls	r3, r3, #24
 8008cac:	4962      	ldr	r1, [pc, #392]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008cb2:	e05f      	b.n	8008d74 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d042      	beq.n	8008d42 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008cbc:	4b5e      	ldr	r3, [pc, #376]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a5d      	ldr	r2, [pc, #372]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc8:	f7ff f814 	bl	8007cf4 <HAL_GetTick>
 8008ccc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008cce:	e008      	b.n	8008ce2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008cd0:	f7ff f810 	bl	8007cf4 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e280      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ce2:	4b55      	ldr	r3, [pc, #340]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0f0      	beq.n	8008cd0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008cee:	f7ff f80d 	bl	8007d0c <HAL_GetREVID>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d817      	bhi.n	8008d2c <HAL_RCC_OscConfig+0x3ec>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a1b      	ldr	r3, [r3, #32]
 8008d00:	2b20      	cmp	r3, #32
 8008d02:	d108      	bne.n	8008d16 <HAL_RCC_OscConfig+0x3d6>
 8008d04:	4b4c      	ldr	r3, [pc, #304]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008d0c:	4a4a      	ldr	r2, [pc, #296]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008d0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d12:	6053      	str	r3, [r2, #4]
 8008d14:	e02e      	b.n	8008d74 <HAL_RCC_OscConfig+0x434>
 8008d16:	4b48      	ldr	r3, [pc, #288]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	069b      	lsls	r3, r3, #26
 8008d24:	4944      	ldr	r1, [pc, #272]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	604b      	str	r3, [r1, #4]
 8008d2a:	e023      	b.n	8008d74 <HAL_RCC_OscConfig+0x434>
 8008d2c:	4b42      	ldr	r3, [pc, #264]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a1b      	ldr	r3, [r3, #32]
 8008d38:	061b      	lsls	r3, r3, #24
 8008d3a:	493f      	ldr	r1, [pc, #252]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	60cb      	str	r3, [r1, #12]
 8008d40:	e018      	b.n	8008d74 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008d42:	4b3d      	ldr	r3, [pc, #244]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a3c      	ldr	r2, [pc, #240]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008d48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d4e:	f7fe ffd1 	bl	8007cf4 <HAL_GetTick>
 8008d52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008d54:	e008      	b.n	8008d68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008d56:	f7fe ffcd 	bl	8007cf4 <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d901      	bls.n	8008d68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e23d      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008d68:	4b33      	ldr	r3, [pc, #204]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1f0      	bne.n	8008d56 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0308 	and.w	r3, r3, #8
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d036      	beq.n	8008dee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d019      	beq.n	8008dbc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d88:	4b2b      	ldr	r3, [pc, #172]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008d8e:	f043 0301 	orr.w	r3, r3, #1
 8008d92:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d94:	f7fe ffae 	bl	8007cf4 <HAL_GetTick>
 8008d98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008d9a:	e008      	b.n	8008dae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d9c:	f7fe ffaa 	bl	8007cf4 <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d901      	bls.n	8008dae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e21a      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008dae:	4b22      	ldr	r3, [pc, #136]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d0f0      	beq.n	8008d9c <HAL_RCC_OscConfig+0x45c>
 8008dba:	e018      	b.n	8008dee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008dc2:	f023 0301 	bic.w	r3, r3, #1
 8008dc6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dc8:	f7fe ff94 	bl	8007cf4 <HAL_GetTick>
 8008dcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008dce:	e008      	b.n	8008de2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008dd0:	f7fe ff90 	bl	8007cf4 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d901      	bls.n	8008de2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e200      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008de2:	4b15      	ldr	r3, [pc, #84]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1f0      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d039      	beq.n	8008e6e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d01c      	beq.n	8008e3c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e02:	4b0d      	ldr	r3, [pc, #52]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a0c      	ldr	r2, [pc, #48]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008e08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008e0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008e0e:	f7fe ff71 	bl	8007cf4 <HAL_GetTick>
 8008e12:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008e14:	e008      	b.n	8008e28 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e16:	f7fe ff6d 	bl	8007cf4 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d901      	bls.n	8008e28 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e1dd      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008e28:	4b03      	ldr	r3, [pc, #12]	@ (8008e38 <HAL_RCC_OscConfig+0x4f8>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d0f0      	beq.n	8008e16 <HAL_RCC_OscConfig+0x4d6>
 8008e34:	e01b      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
 8008e36:	bf00      	nop
 8008e38:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008e3c:	4b9b      	ldr	r3, [pc, #620]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a9a      	ldr	r2, [pc, #616]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008e42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008e48:	f7fe ff54 	bl	8007cf4 <HAL_GetTick>
 8008e4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008e4e:	e008      	b.n	8008e62 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e50:	f7fe ff50 	bl	8007cf4 <HAL_GetTick>
 8008e54:	4602      	mov	r2, r0
 8008e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d901      	bls.n	8008e62 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e1c0      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008e62:	4b92      	ldr	r3, [pc, #584]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1f0      	bne.n	8008e50 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0304 	and.w	r3, r3, #4
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 8081 	beq.w	8008f7e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008e7c:	4b8c      	ldr	r3, [pc, #560]	@ (80090b0 <HAL_RCC_OscConfig+0x770>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a8b      	ldr	r2, [pc, #556]	@ (80090b0 <HAL_RCC_OscConfig+0x770>)
 8008e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e88:	f7fe ff34 	bl	8007cf4 <HAL_GetTick>
 8008e8c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e8e:	e008      	b.n	8008ea2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e90:	f7fe ff30 	bl	8007cf4 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	2b64      	cmp	r3, #100	@ 0x64
 8008e9c:	d901      	bls.n	8008ea2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e1a0      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ea2:	4b83      	ldr	r3, [pc, #524]	@ (80090b0 <HAL_RCC_OscConfig+0x770>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0f0      	beq.n	8008e90 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d106      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x584>
 8008eb6:	4b7d      	ldr	r3, [pc, #500]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eba:	4a7c      	ldr	r2, [pc, #496]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008ebc:	f043 0301 	orr.w	r3, r3, #1
 8008ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ec2:	e02d      	b.n	8008f20 <HAL_RCC_OscConfig+0x5e0>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10c      	bne.n	8008ee6 <HAL_RCC_OscConfig+0x5a6>
 8008ecc:	4b77      	ldr	r3, [pc, #476]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ed0:	4a76      	ldr	r2, [pc, #472]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008ed2:	f023 0301 	bic.w	r3, r3, #1
 8008ed6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ed8:	4b74      	ldr	r3, [pc, #464]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008edc:	4a73      	ldr	r2, [pc, #460]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008ede:	f023 0304 	bic.w	r3, r3, #4
 8008ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ee4:	e01c      	b.n	8008f20 <HAL_RCC_OscConfig+0x5e0>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	2b05      	cmp	r3, #5
 8008eec:	d10c      	bne.n	8008f08 <HAL_RCC_OscConfig+0x5c8>
 8008eee:	4b6f      	ldr	r3, [pc, #444]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ef2:	4a6e      	ldr	r2, [pc, #440]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008ef4:	f043 0304 	orr.w	r3, r3, #4
 8008ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8008efa:	4b6c      	ldr	r3, [pc, #432]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008efe:	4a6b      	ldr	r2, [pc, #428]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008f00:	f043 0301 	orr.w	r3, r3, #1
 8008f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f06:	e00b      	b.n	8008f20 <HAL_RCC_OscConfig+0x5e0>
 8008f08:	4b68      	ldr	r3, [pc, #416]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f0c:	4a67      	ldr	r2, [pc, #412]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008f0e:	f023 0301 	bic.w	r3, r3, #1
 8008f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f14:	4b65      	ldr	r3, [pc, #404]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f18:	4a64      	ldr	r2, [pc, #400]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008f1a:	f023 0304 	bic.w	r3, r3, #4
 8008f1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d015      	beq.n	8008f54 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f28:	f7fe fee4 	bl	8007cf4 <HAL_GetTick>
 8008f2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f2e:	e00a      	b.n	8008f46 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f30:	f7fe fee0 	bl	8007cf4 <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d901      	bls.n	8008f46 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e14e      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f46:	4b59      	ldr	r3, [pc, #356]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f4a:	f003 0302 	and.w	r3, r3, #2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d0ee      	beq.n	8008f30 <HAL_RCC_OscConfig+0x5f0>
 8008f52:	e014      	b.n	8008f7e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f54:	f7fe fece 	bl	8007cf4 <HAL_GetTick>
 8008f58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008f5a:	e00a      	b.n	8008f72 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f5c:	f7fe feca 	bl	8007cf4 <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d901      	bls.n	8008f72 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	e138      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008f72:	4b4e      	ldr	r3, [pc, #312]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1ee      	bne.n	8008f5c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 812d 	beq.w	80091e2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008f88:	4b48      	ldr	r3, [pc, #288]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f90:	2b18      	cmp	r3, #24
 8008f92:	f000 80bd 	beq.w	8009110 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	f040 809e 	bne.w	80090dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fa0:	4b42      	ldr	r3, [pc, #264]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a41      	ldr	r2, [pc, #260]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fac:	f7fe fea2 	bl	8007cf4 <HAL_GetTick>
 8008fb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fb2:	e008      	b.n	8008fc6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fb4:	f7fe fe9e 	bl	8007cf4 <HAL_GetTick>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d901      	bls.n	8008fc6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e10e      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fc6:	4b39      	ldr	r3, [pc, #228]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1f0      	bne.n	8008fb4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008fd2:	4b36      	ldr	r3, [pc, #216]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008fd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008fd6:	4b37      	ldr	r3, [pc, #220]	@ (80090b4 <HAL_RCC_OscConfig+0x774>)
 8008fd8:	4013      	ands	r3, r2
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008fe2:	0112      	lsls	r2, r2, #4
 8008fe4:	430a      	orrs	r2, r1
 8008fe6:	4931      	ldr	r1, [pc, #196]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	628b      	str	r3, [r1, #40]	@ 0x28
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	025b      	lsls	r3, r3, #9
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	431a      	orrs	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009006:	3b01      	subs	r3, #1
 8009008:	041b      	lsls	r3, r3, #16
 800900a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800900e:	431a      	orrs	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009014:	3b01      	subs	r3, #1
 8009016:	061b      	lsls	r3, r3, #24
 8009018:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800901c:	4923      	ldr	r1, [pc, #140]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 800901e:	4313      	orrs	r3, r2
 8009020:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009022:	4b22      	ldr	r3, [pc, #136]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8009024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009026:	4a21      	ldr	r2, [pc, #132]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8009028:	f023 0301 	bic.w	r3, r3, #1
 800902c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800902e:	4b1f      	ldr	r3, [pc, #124]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8009030:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009032:	4b21      	ldr	r3, [pc, #132]	@ (80090b8 <HAL_RCC_OscConfig+0x778>)
 8009034:	4013      	ands	r3, r2
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800903a:	00d2      	lsls	r2, r2, #3
 800903c:	491b      	ldr	r1, [pc, #108]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 800903e:	4313      	orrs	r3, r2
 8009040:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009042:	4b1a      	ldr	r3, [pc, #104]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8009044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009046:	f023 020c 	bic.w	r2, r3, #12
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800904e:	4917      	ldr	r1, [pc, #92]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8009050:	4313      	orrs	r3, r2
 8009052:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009054:	4b15      	ldr	r3, [pc, #84]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8009056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009058:	f023 0202 	bic.w	r2, r3, #2
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009060:	4912      	ldr	r1, [pc, #72]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8009062:	4313      	orrs	r3, r2
 8009064:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009066:	4b11      	ldr	r3, [pc, #68]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8009068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906a:	4a10      	ldr	r2, [pc, #64]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 800906c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009070:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009072:	4b0e      	ldr	r3, [pc, #56]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8009074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009076:	4a0d      	ldr	r2, [pc, #52]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8009078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800907c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800907e:	4b0b      	ldr	r3, [pc, #44]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8009080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009082:	4a0a      	ldr	r2, [pc, #40]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8009084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009088:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800908a:	4b08      	ldr	r3, [pc, #32]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 800908c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908e:	4a07      	ldr	r2, [pc, #28]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8009090:	f043 0301 	orr.w	r3, r3, #1
 8009094:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009096:	4b05      	ldr	r3, [pc, #20]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a04      	ldr	r2, [pc, #16]	@ (80090ac <HAL_RCC_OscConfig+0x76c>)
 800909c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090a2:	f7fe fe27 	bl	8007cf4 <HAL_GetTick>
 80090a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80090a8:	e011      	b.n	80090ce <HAL_RCC_OscConfig+0x78e>
 80090aa:	bf00      	nop
 80090ac:	58024400 	.word	0x58024400
 80090b0:	58024800 	.word	0x58024800
 80090b4:	fffffc0c 	.word	0xfffffc0c
 80090b8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090bc:	f7fe fe1a 	bl	8007cf4 <HAL_GetTick>
 80090c0:	4602      	mov	r2, r0
 80090c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d901      	bls.n	80090ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e08a      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80090ce:	4b47      	ldr	r3, [pc, #284]	@ (80091ec <HAL_RCC_OscConfig+0x8ac>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d0f0      	beq.n	80090bc <HAL_RCC_OscConfig+0x77c>
 80090da:	e082      	b.n	80091e2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090dc:	4b43      	ldr	r3, [pc, #268]	@ (80091ec <HAL_RCC_OscConfig+0x8ac>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a42      	ldr	r2, [pc, #264]	@ (80091ec <HAL_RCC_OscConfig+0x8ac>)
 80090e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090e8:	f7fe fe04 	bl	8007cf4 <HAL_GetTick>
 80090ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80090ee:	e008      	b.n	8009102 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090f0:	f7fe fe00 	bl	8007cf4 <HAL_GetTick>
 80090f4:	4602      	mov	r2, r0
 80090f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d901      	bls.n	8009102 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e070      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009102:	4b3a      	ldr	r3, [pc, #232]	@ (80091ec <HAL_RCC_OscConfig+0x8ac>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1f0      	bne.n	80090f0 <HAL_RCC_OscConfig+0x7b0>
 800910e:	e068      	b.n	80091e2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009110:	4b36      	ldr	r3, [pc, #216]	@ (80091ec <HAL_RCC_OscConfig+0x8ac>)
 8009112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009114:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009116:	4b35      	ldr	r3, [pc, #212]	@ (80091ec <HAL_RCC_OscConfig+0x8ac>)
 8009118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009120:	2b01      	cmp	r3, #1
 8009122:	d031      	beq.n	8009188 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	f003 0203 	and.w	r2, r3, #3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800912e:	429a      	cmp	r2, r3
 8009130:	d12a      	bne.n	8009188 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	091b      	lsrs	r3, r3, #4
 8009136:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800913e:	429a      	cmp	r2, r3
 8009140:	d122      	bne.n	8009188 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800914e:	429a      	cmp	r2, r3
 8009150:	d11a      	bne.n	8009188 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	0a5b      	lsrs	r3, r3, #9
 8009156:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800915e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009160:	429a      	cmp	r2, r3
 8009162:	d111      	bne.n	8009188 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	0c1b      	lsrs	r3, r3, #16
 8009168:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009170:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009172:	429a      	cmp	r2, r3
 8009174:	d108      	bne.n	8009188 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	0e1b      	lsrs	r3, r3, #24
 800917a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009182:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009184:	429a      	cmp	r2, r3
 8009186:	d001      	beq.n	800918c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e02b      	b.n	80091e4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800918c:	4b17      	ldr	r3, [pc, #92]	@ (80091ec <HAL_RCC_OscConfig+0x8ac>)
 800918e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009190:	08db      	lsrs	r3, r3, #3
 8009192:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009196:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d01f      	beq.n	80091e2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80091a2:	4b12      	ldr	r3, [pc, #72]	@ (80091ec <HAL_RCC_OscConfig+0x8ac>)
 80091a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a6:	4a11      	ldr	r2, [pc, #68]	@ (80091ec <HAL_RCC_OscConfig+0x8ac>)
 80091a8:	f023 0301 	bic.w	r3, r3, #1
 80091ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80091ae:	f7fe fda1 	bl	8007cf4 <HAL_GetTick>
 80091b2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80091b4:	bf00      	nop
 80091b6:	f7fe fd9d 	bl	8007cf4 <HAL_GetTick>
 80091ba:	4602      	mov	r2, r0
 80091bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091be:	4293      	cmp	r3, r2
 80091c0:	d0f9      	beq.n	80091b6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80091c2:	4b0a      	ldr	r3, [pc, #40]	@ (80091ec <HAL_RCC_OscConfig+0x8ac>)
 80091c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091c6:	4b0a      	ldr	r3, [pc, #40]	@ (80091f0 <HAL_RCC_OscConfig+0x8b0>)
 80091c8:	4013      	ands	r3, r2
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80091ce:	00d2      	lsls	r2, r2, #3
 80091d0:	4906      	ldr	r1, [pc, #24]	@ (80091ec <HAL_RCC_OscConfig+0x8ac>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80091d6:	4b05      	ldr	r3, [pc, #20]	@ (80091ec <HAL_RCC_OscConfig+0x8ac>)
 80091d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091da:	4a04      	ldr	r2, [pc, #16]	@ (80091ec <HAL_RCC_OscConfig+0x8ac>)
 80091dc:	f043 0301 	orr.w	r3, r3, #1
 80091e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3730      	adds	r7, #48	@ 0x30
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	58024400 	.word	0x58024400
 80091f0:	ffff0007 	.word	0xffff0007

080091f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d101      	bne.n	8009208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e19c      	b.n	8009542 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009208:	4b8a      	ldr	r3, [pc, #552]	@ (8009434 <HAL_RCC_ClockConfig+0x240>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 030f 	and.w	r3, r3, #15
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	429a      	cmp	r2, r3
 8009214:	d910      	bls.n	8009238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009216:	4b87      	ldr	r3, [pc, #540]	@ (8009434 <HAL_RCC_ClockConfig+0x240>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f023 020f 	bic.w	r2, r3, #15
 800921e:	4985      	ldr	r1, [pc, #532]	@ (8009434 <HAL_RCC_ClockConfig+0x240>)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	4313      	orrs	r3, r2
 8009224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009226:	4b83      	ldr	r3, [pc, #524]	@ (8009434 <HAL_RCC_ClockConfig+0x240>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 030f 	and.w	r3, r3, #15
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	429a      	cmp	r2, r3
 8009232:	d001      	beq.n	8009238 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e184      	b.n	8009542 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 0304 	and.w	r3, r3, #4
 8009240:	2b00      	cmp	r3, #0
 8009242:	d010      	beq.n	8009266 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	691a      	ldr	r2, [r3, #16]
 8009248:	4b7b      	ldr	r3, [pc, #492]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 800924a:	699b      	ldr	r3, [r3, #24]
 800924c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009250:	429a      	cmp	r2, r3
 8009252:	d908      	bls.n	8009266 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009254:	4b78      	ldr	r3, [pc, #480]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 8009256:	699b      	ldr	r3, [r3, #24]
 8009258:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	4975      	ldr	r1, [pc, #468]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 8009262:	4313      	orrs	r3, r2
 8009264:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0308 	and.w	r3, r3, #8
 800926e:	2b00      	cmp	r3, #0
 8009270:	d010      	beq.n	8009294 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	695a      	ldr	r2, [r3, #20]
 8009276:	4b70      	ldr	r3, [pc, #448]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800927e:	429a      	cmp	r2, r3
 8009280:	d908      	bls.n	8009294 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009282:	4b6d      	ldr	r3, [pc, #436]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	496a      	ldr	r1, [pc, #424]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 8009290:	4313      	orrs	r3, r2
 8009292:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 0310 	and.w	r3, r3, #16
 800929c:	2b00      	cmp	r3, #0
 800929e:	d010      	beq.n	80092c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	699a      	ldr	r2, [r3, #24]
 80092a4:	4b64      	ldr	r3, [pc, #400]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 80092a6:	69db      	ldr	r3, [r3, #28]
 80092a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d908      	bls.n	80092c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80092b0:	4b61      	ldr	r3, [pc, #388]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	495e      	ldr	r1, [pc, #376]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 0320 	and.w	r3, r3, #32
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d010      	beq.n	80092f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	69da      	ldr	r2, [r3, #28]
 80092d2:	4b59      	ldr	r3, [pc, #356]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 80092d4:	6a1b      	ldr	r3, [r3, #32]
 80092d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092da:	429a      	cmp	r2, r3
 80092dc:	d908      	bls.n	80092f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80092de:	4b56      	ldr	r3, [pc, #344]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	4953      	ldr	r1, [pc, #332]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0302 	and.w	r3, r3, #2
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d010      	beq.n	800931e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68da      	ldr	r2, [r3, #12]
 8009300:	4b4d      	ldr	r3, [pc, #308]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	f003 030f 	and.w	r3, r3, #15
 8009308:	429a      	cmp	r2, r3
 800930a:	d908      	bls.n	800931e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800930c:	4b4a      	ldr	r3, [pc, #296]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	f023 020f 	bic.w	r2, r3, #15
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	4947      	ldr	r1, [pc, #284]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 800931a:	4313      	orrs	r3, r2
 800931c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	2b00      	cmp	r3, #0
 8009328:	d055      	beq.n	80093d6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800932a:	4b43      	ldr	r3, [pc, #268]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	4940      	ldr	r1, [pc, #256]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 8009338:	4313      	orrs	r3, r2
 800933a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	2b02      	cmp	r3, #2
 8009342:	d107      	bne.n	8009354 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009344:	4b3c      	ldr	r3, [pc, #240]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d121      	bne.n	8009394 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e0f6      	b.n	8009542 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	2b03      	cmp	r3, #3
 800935a:	d107      	bne.n	800936c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800935c:	4b36      	ldr	r3, [pc, #216]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d115      	bne.n	8009394 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e0ea      	b.n	8009542 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d107      	bne.n	8009384 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009374:	4b30      	ldr	r3, [pc, #192]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800937c:	2b00      	cmp	r3, #0
 800937e:	d109      	bne.n	8009394 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e0de      	b.n	8009542 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009384:	4b2c      	ldr	r3, [pc, #176]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 0304 	and.w	r3, r3, #4
 800938c:	2b00      	cmp	r3, #0
 800938e:	d101      	bne.n	8009394 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e0d6      	b.n	8009542 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009394:	4b28      	ldr	r3, [pc, #160]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	f023 0207 	bic.w	r2, r3, #7
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	4925      	ldr	r1, [pc, #148]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093a6:	f7fe fca5 	bl	8007cf4 <HAL_GetTick>
 80093aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093ac:	e00a      	b.n	80093c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093ae:	f7fe fca1 	bl	8007cf4 <HAL_GetTick>
 80093b2:	4602      	mov	r2, r0
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093bc:	4293      	cmp	r3, r2
 80093be:	d901      	bls.n	80093c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80093c0:	2303      	movs	r3, #3
 80093c2:	e0be      	b.n	8009542 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	00db      	lsls	r3, r3, #3
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d1eb      	bne.n	80093ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0302 	and.w	r3, r3, #2
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d010      	beq.n	8009404 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	4b14      	ldr	r3, [pc, #80]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	f003 030f 	and.w	r3, r3, #15
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d208      	bcs.n	8009404 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093f2:	4b11      	ldr	r3, [pc, #68]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	f023 020f 	bic.w	r2, r3, #15
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	490e      	ldr	r1, [pc, #56]	@ (8009438 <HAL_RCC_ClockConfig+0x244>)
 8009400:	4313      	orrs	r3, r2
 8009402:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009404:	4b0b      	ldr	r3, [pc, #44]	@ (8009434 <HAL_RCC_ClockConfig+0x240>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 030f 	and.w	r3, r3, #15
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	429a      	cmp	r2, r3
 8009410:	d214      	bcs.n	800943c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009412:	4b08      	ldr	r3, [pc, #32]	@ (8009434 <HAL_RCC_ClockConfig+0x240>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f023 020f 	bic.w	r2, r3, #15
 800941a:	4906      	ldr	r1, [pc, #24]	@ (8009434 <HAL_RCC_ClockConfig+0x240>)
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	4313      	orrs	r3, r2
 8009420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009422:	4b04      	ldr	r3, [pc, #16]	@ (8009434 <HAL_RCC_ClockConfig+0x240>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 030f 	and.w	r3, r3, #15
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d005      	beq.n	800943c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e086      	b.n	8009542 <HAL_RCC_ClockConfig+0x34e>
 8009434:	52002000 	.word	0x52002000
 8009438:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0304 	and.w	r3, r3, #4
 8009444:	2b00      	cmp	r3, #0
 8009446:	d010      	beq.n	800946a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	691a      	ldr	r2, [r3, #16]
 800944c:	4b3f      	ldr	r3, [pc, #252]	@ (800954c <HAL_RCC_ClockConfig+0x358>)
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009454:	429a      	cmp	r2, r3
 8009456:	d208      	bcs.n	800946a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009458:	4b3c      	ldr	r3, [pc, #240]	@ (800954c <HAL_RCC_ClockConfig+0x358>)
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	4939      	ldr	r1, [pc, #228]	@ (800954c <HAL_RCC_ClockConfig+0x358>)
 8009466:	4313      	orrs	r3, r2
 8009468:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0308 	and.w	r3, r3, #8
 8009472:	2b00      	cmp	r3, #0
 8009474:	d010      	beq.n	8009498 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	695a      	ldr	r2, [r3, #20]
 800947a:	4b34      	ldr	r3, [pc, #208]	@ (800954c <HAL_RCC_ClockConfig+0x358>)
 800947c:	69db      	ldr	r3, [r3, #28]
 800947e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009482:	429a      	cmp	r2, r3
 8009484:	d208      	bcs.n	8009498 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009486:	4b31      	ldr	r3, [pc, #196]	@ (800954c <HAL_RCC_ClockConfig+0x358>)
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	695b      	ldr	r3, [r3, #20]
 8009492:	492e      	ldr	r1, [pc, #184]	@ (800954c <HAL_RCC_ClockConfig+0x358>)
 8009494:	4313      	orrs	r3, r2
 8009496:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 0310 	and.w	r3, r3, #16
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d010      	beq.n	80094c6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	699a      	ldr	r2, [r3, #24]
 80094a8:	4b28      	ldr	r3, [pc, #160]	@ (800954c <HAL_RCC_ClockConfig+0x358>)
 80094aa:	69db      	ldr	r3, [r3, #28]
 80094ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d208      	bcs.n	80094c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80094b4:	4b25      	ldr	r3, [pc, #148]	@ (800954c <HAL_RCC_ClockConfig+0x358>)
 80094b6:	69db      	ldr	r3, [r3, #28]
 80094b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	4922      	ldr	r1, [pc, #136]	@ (800954c <HAL_RCC_ClockConfig+0x358>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0320 	and.w	r3, r3, #32
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d010      	beq.n	80094f4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	69da      	ldr	r2, [r3, #28]
 80094d6:	4b1d      	ldr	r3, [pc, #116]	@ (800954c <HAL_RCC_ClockConfig+0x358>)
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80094de:	429a      	cmp	r2, r3
 80094e0:	d208      	bcs.n	80094f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80094e2:	4b1a      	ldr	r3, [pc, #104]	@ (800954c <HAL_RCC_ClockConfig+0x358>)
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	4917      	ldr	r1, [pc, #92]	@ (800954c <HAL_RCC_ClockConfig+0x358>)
 80094f0:	4313      	orrs	r3, r2
 80094f2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80094f4:	f000 f834 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 80094f8:	4602      	mov	r2, r0
 80094fa:	4b14      	ldr	r3, [pc, #80]	@ (800954c <HAL_RCC_ClockConfig+0x358>)
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	0a1b      	lsrs	r3, r3, #8
 8009500:	f003 030f 	and.w	r3, r3, #15
 8009504:	4912      	ldr	r1, [pc, #72]	@ (8009550 <HAL_RCC_ClockConfig+0x35c>)
 8009506:	5ccb      	ldrb	r3, [r1, r3]
 8009508:	f003 031f 	and.w	r3, r3, #31
 800950c:	fa22 f303 	lsr.w	r3, r2, r3
 8009510:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009512:	4b0e      	ldr	r3, [pc, #56]	@ (800954c <HAL_RCC_ClockConfig+0x358>)
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	f003 030f 	and.w	r3, r3, #15
 800951a:	4a0d      	ldr	r2, [pc, #52]	@ (8009550 <HAL_RCC_ClockConfig+0x35c>)
 800951c:	5cd3      	ldrb	r3, [r2, r3]
 800951e:	f003 031f 	and.w	r3, r3, #31
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	fa22 f303 	lsr.w	r3, r2, r3
 8009528:	4a0a      	ldr	r2, [pc, #40]	@ (8009554 <HAL_RCC_ClockConfig+0x360>)
 800952a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800952c:	4a0a      	ldr	r2, [pc, #40]	@ (8009558 <HAL_RCC_ClockConfig+0x364>)
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009532:	4b0a      	ldr	r3, [pc, #40]	@ (800955c <HAL_RCC_ClockConfig+0x368>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe fb92 	bl	8007c60 <HAL_InitTick>
 800953c:	4603      	mov	r3, r0
 800953e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009540:	7bfb      	ldrb	r3, [r7, #15]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3718      	adds	r7, #24
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	58024400 	.word	0x58024400
 8009550:	0800cdf8 	.word	0x0800cdf8
 8009554:	240003b4 	.word	0x240003b4
 8009558:	240003b0 	.word	0x240003b0
 800955c:	240003b8 	.word	0x240003b8

08009560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009560:	b480      	push	{r7}
 8009562:	b089      	sub	sp, #36	@ 0x24
 8009564:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009566:	4bb3      	ldr	r3, [pc, #716]	@ (8009834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800956e:	2b18      	cmp	r3, #24
 8009570:	f200 8155 	bhi.w	800981e <HAL_RCC_GetSysClockFreq+0x2be>
 8009574:	a201      	add	r2, pc, #4	@ (adr r2, 800957c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957a:	bf00      	nop
 800957c:	080095e1 	.word	0x080095e1
 8009580:	0800981f 	.word	0x0800981f
 8009584:	0800981f 	.word	0x0800981f
 8009588:	0800981f 	.word	0x0800981f
 800958c:	0800981f 	.word	0x0800981f
 8009590:	0800981f 	.word	0x0800981f
 8009594:	0800981f 	.word	0x0800981f
 8009598:	0800981f 	.word	0x0800981f
 800959c:	08009607 	.word	0x08009607
 80095a0:	0800981f 	.word	0x0800981f
 80095a4:	0800981f 	.word	0x0800981f
 80095a8:	0800981f 	.word	0x0800981f
 80095ac:	0800981f 	.word	0x0800981f
 80095b0:	0800981f 	.word	0x0800981f
 80095b4:	0800981f 	.word	0x0800981f
 80095b8:	0800981f 	.word	0x0800981f
 80095bc:	0800960d 	.word	0x0800960d
 80095c0:	0800981f 	.word	0x0800981f
 80095c4:	0800981f 	.word	0x0800981f
 80095c8:	0800981f 	.word	0x0800981f
 80095cc:	0800981f 	.word	0x0800981f
 80095d0:	0800981f 	.word	0x0800981f
 80095d4:	0800981f 	.word	0x0800981f
 80095d8:	0800981f 	.word	0x0800981f
 80095dc:	08009613 	.word	0x08009613
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095e0:	4b94      	ldr	r3, [pc, #592]	@ (8009834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 0320 	and.w	r3, r3, #32
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d009      	beq.n	8009600 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095ec:	4b91      	ldr	r3, [pc, #580]	@ (8009834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	08db      	lsrs	r3, r3, #3
 80095f2:	f003 0303 	and.w	r3, r3, #3
 80095f6:	4a90      	ldr	r2, [pc, #576]	@ (8009838 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80095f8:	fa22 f303 	lsr.w	r3, r2, r3
 80095fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80095fe:	e111      	b.n	8009824 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009600:	4b8d      	ldr	r3, [pc, #564]	@ (8009838 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009602:	61bb      	str	r3, [r7, #24]
      break;
 8009604:	e10e      	b.n	8009824 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009606:	4b8d      	ldr	r3, [pc, #564]	@ (800983c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009608:	61bb      	str	r3, [r7, #24]
      break;
 800960a:	e10b      	b.n	8009824 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800960c:	4b8c      	ldr	r3, [pc, #560]	@ (8009840 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800960e:	61bb      	str	r3, [r7, #24]
      break;
 8009610:	e108      	b.n	8009824 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009612:	4b88      	ldr	r3, [pc, #544]	@ (8009834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009616:	f003 0303 	and.w	r3, r3, #3
 800961a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800961c:	4b85      	ldr	r3, [pc, #532]	@ (8009834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800961e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009620:	091b      	lsrs	r3, r3, #4
 8009622:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009626:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009628:	4b82      	ldr	r3, [pc, #520]	@ (8009834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800962a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800962c:	f003 0301 	and.w	r3, r3, #1
 8009630:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009632:	4b80      	ldr	r3, [pc, #512]	@ (8009834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009636:	08db      	lsrs	r3, r3, #3
 8009638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	fb02 f303 	mul.w	r3, r2, r3
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 80e1 	beq.w	8009818 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b02      	cmp	r3, #2
 800965a:	f000 8083 	beq.w	8009764 <HAL_RCC_GetSysClockFreq+0x204>
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2b02      	cmp	r3, #2
 8009662:	f200 80a1 	bhi.w	80097a8 <HAL_RCC_GetSysClockFreq+0x248>
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d003      	beq.n	8009674 <HAL_RCC_GetSysClockFreq+0x114>
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d056      	beq.n	8009720 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009672:	e099      	b.n	80097a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009674:	4b6f      	ldr	r3, [pc, #444]	@ (8009834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0320 	and.w	r3, r3, #32
 800967c:	2b00      	cmp	r3, #0
 800967e:	d02d      	beq.n	80096dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009680:	4b6c      	ldr	r3, [pc, #432]	@ (8009834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	08db      	lsrs	r3, r3, #3
 8009686:	f003 0303 	and.w	r3, r3, #3
 800968a:	4a6b      	ldr	r2, [pc, #428]	@ (8009838 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800968c:	fa22 f303 	lsr.w	r3, r2, r3
 8009690:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	ee07 3a90 	vmov	s15, r3
 8009698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	ee07 3a90 	vmov	s15, r3
 80096a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096aa:	4b62      	ldr	r3, [pc, #392]	@ (8009834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b2:	ee07 3a90 	vmov	s15, r3
 80096b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80096be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009844 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80096da:	e087      	b.n	80097ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	ee07 3a90 	vmov	s15, r3
 80096e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009848 <HAL_RCC_GetSysClockFreq+0x2e8>
 80096ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ee:	4b51      	ldr	r3, [pc, #324]	@ (8009834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f6:	ee07 3a90 	vmov	s15, r3
 80096fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009702:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009844 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800970a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800970e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800971a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800971e:	e065      	b.n	80097ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800984c <HAL_RCC_GetSysClockFreq+0x2ec>
 800972e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009732:	4b40      	ldr	r3, [pc, #256]	@ (8009834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800973a:	ee07 3a90 	vmov	s15, r3
 800973e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009742:	ed97 6a02 	vldr	s12, [r7, #8]
 8009746:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009844 <HAL_RCC_GetSysClockFreq+0x2e4>
 800974a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800974e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800975a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800975e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009762:	e043      	b.n	80097ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	ee07 3a90 	vmov	s15, r3
 800976a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800976e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009850 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009776:	4b2f      	ldr	r3, [pc, #188]	@ (8009834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800977a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800977e:	ee07 3a90 	vmov	s15, r3
 8009782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009786:	ed97 6a02 	vldr	s12, [r7, #8]
 800978a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009844 <HAL_RCC_GetSysClockFreq+0x2e4>
 800978e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800979a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800979e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80097a6:	e021      	b.n	80097ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	ee07 3a90 	vmov	s15, r3
 80097ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800984c <HAL_RCC_GetSysClockFreq+0x2ec>
 80097b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ba:	4b1e      	ldr	r3, [pc, #120]	@ (8009834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097c2:	ee07 3a90 	vmov	s15, r3
 80097c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80097ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009844 <HAL_RCC_GetSysClockFreq+0x2e4>
 80097d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80097ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80097ec:	4b11      	ldr	r3, [pc, #68]	@ (8009834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f0:	0a5b      	lsrs	r3, r3, #9
 80097f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097f6:	3301      	adds	r3, #1
 80097f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	ee07 3a90 	vmov	s15, r3
 8009800:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009804:	edd7 6a07 	vldr	s13, [r7, #28]
 8009808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800980c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009810:	ee17 3a90 	vmov	r3, s15
 8009814:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009816:	e005      	b.n	8009824 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	61bb      	str	r3, [r7, #24]
      break;
 800981c:	e002      	b.n	8009824 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800981e:	4b07      	ldr	r3, [pc, #28]	@ (800983c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009820:	61bb      	str	r3, [r7, #24]
      break;
 8009822:	bf00      	nop
  }

  return sysclockfreq;
 8009824:	69bb      	ldr	r3, [r7, #24]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3724      	adds	r7, #36	@ 0x24
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	58024400 	.word	0x58024400
 8009838:	03d09000 	.word	0x03d09000
 800983c:	003d0900 	.word	0x003d0900
 8009840:	017d7840 	.word	0x017d7840
 8009844:	46000000 	.word	0x46000000
 8009848:	4c742400 	.word	0x4c742400
 800984c:	4a742400 	.word	0x4a742400
 8009850:	4bbebc20 	.word	0x4bbebc20

08009854 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009858:	b0ca      	sub	sp, #296	@ 0x128
 800985a:	af00      	add	r7, sp, #0
 800985c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009860:	2300      	movs	r3, #0
 8009862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009866:	2300      	movs	r3, #0
 8009868:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800986c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009874:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009878:	2500      	movs	r5, #0
 800987a:	ea54 0305 	orrs.w	r3, r4, r5
 800987e:	d049      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009884:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009886:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800988a:	d02f      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800988c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009890:	d828      	bhi.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009892:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009896:	d01a      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009898:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800989c:	d822      	bhi.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80098a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098a6:	d007      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80098a8:	e01c      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098aa:	4bb8      	ldr	r3, [pc, #736]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ae:	4ab7      	ldr	r2, [pc, #732]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098b6:	e01a      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80098b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098bc:	3308      	adds	r3, #8
 80098be:	2102      	movs	r1, #2
 80098c0:	4618      	mov	r0, r3
 80098c2:	f001 f9d1 	bl	800ac68 <RCCEx_PLL2_Config>
 80098c6:	4603      	mov	r3, r0
 80098c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098cc:	e00f      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d2:	3328      	adds	r3, #40	@ 0x28
 80098d4:	2102      	movs	r1, #2
 80098d6:	4618      	mov	r0, r3
 80098d8:	f001 fa78 	bl	800adcc <RCCEx_PLL3_Config>
 80098dc:	4603      	mov	r3, r0
 80098de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098e2:	e004      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098ea:	e000      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80098ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10a      	bne.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80098f6:	4ba5      	ldr	r3, [pc, #660]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80098fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009902:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009904:	4aa1      	ldr	r2, [pc, #644]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009906:	430b      	orrs	r3, r1
 8009908:	6513      	str	r3, [r2, #80]	@ 0x50
 800990a:	e003      	b.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800990c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009910:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009920:	f04f 0900 	mov.w	r9, #0
 8009924:	ea58 0309 	orrs.w	r3, r8, r9
 8009928:	d047      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800992a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800992e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009930:	2b04      	cmp	r3, #4
 8009932:	d82a      	bhi.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009934:	a201      	add	r2, pc, #4	@ (adr r2, 800993c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993a:	bf00      	nop
 800993c:	08009951 	.word	0x08009951
 8009940:	0800995f 	.word	0x0800995f
 8009944:	08009975 	.word	0x08009975
 8009948:	08009993 	.word	0x08009993
 800994c:	08009993 	.word	0x08009993
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009950:	4b8e      	ldr	r3, [pc, #568]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009954:	4a8d      	ldr	r2, [pc, #564]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800995a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800995c:	e01a      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800995e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009962:	3308      	adds	r3, #8
 8009964:	2100      	movs	r1, #0
 8009966:	4618      	mov	r0, r3
 8009968:	f001 f97e 	bl	800ac68 <RCCEx_PLL2_Config>
 800996c:	4603      	mov	r3, r0
 800996e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009972:	e00f      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009978:	3328      	adds	r3, #40	@ 0x28
 800997a:	2100      	movs	r1, #0
 800997c:	4618      	mov	r0, r3
 800997e:	f001 fa25 	bl	800adcc <RCCEx_PLL3_Config>
 8009982:	4603      	mov	r3, r0
 8009984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009988:	e004      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009990:	e000      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10a      	bne.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800999c:	4b7b      	ldr	r3, [pc, #492]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800999e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099a0:	f023 0107 	bic.w	r1, r3, #7
 80099a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099aa:	4a78      	ldr	r2, [pc, #480]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099ac:	430b      	orrs	r3, r1
 80099ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80099b0:	e003      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80099ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80099c6:	f04f 0b00 	mov.w	fp, #0
 80099ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80099ce:	d04c      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80099d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099da:	d030      	beq.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80099dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099e0:	d829      	bhi.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80099e4:	d02d      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80099e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80099e8:	d825      	bhi.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099ea:	2b80      	cmp	r3, #128	@ 0x80
 80099ec:	d018      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80099ee:	2b80      	cmp	r3, #128	@ 0x80
 80099f0:	d821      	bhi.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d002      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80099f6:	2b40      	cmp	r3, #64	@ 0x40
 80099f8:	d007      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80099fa:	e01c      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099fc:	4b63      	ldr	r3, [pc, #396]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a00:	4a62      	ldr	r2, [pc, #392]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009a08:	e01c      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a0e:	3308      	adds	r3, #8
 8009a10:	2100      	movs	r1, #0
 8009a12:	4618      	mov	r0, r3
 8009a14:	f001 f928 	bl	800ac68 <RCCEx_PLL2_Config>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009a1e:	e011      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a24:	3328      	adds	r3, #40	@ 0x28
 8009a26:	2100      	movs	r1, #0
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f001 f9cf 	bl	800adcc <RCCEx_PLL3_Config>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009a34:	e006      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a3c:	e002      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009a3e:	bf00      	nop
 8009a40:	e000      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10a      	bne.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009a4c:	4b4f      	ldr	r3, [pc, #316]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a50:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a5a:	4a4c      	ldr	r2, [pc, #304]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a5c:	430b      	orrs	r3, r1
 8009a5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a60:	e003      	b.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009a76:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009a80:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009a84:	460b      	mov	r3, r1
 8009a86:	4313      	orrs	r3, r2
 8009a88:	d053      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009a92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a96:	d035      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009a98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a9c:	d82e      	bhi.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a9e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009aa2:	d031      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009aa4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009aa8:	d828      	bhi.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009aaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009aae:	d01a      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009ab0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ab4:	d822      	bhi.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009aba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009abe:	d007      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009ac0:	e01c      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ac2:	4b32      	ldr	r3, [pc, #200]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac6:	4a31      	ldr	r2, [pc, #196]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009acc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ace:	e01c      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f001 f8c5 	bl	800ac68 <RCCEx_PLL2_Config>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ae4:	e011      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aea:	3328      	adds	r3, #40	@ 0x28
 8009aec:	2100      	movs	r1, #0
 8009aee:	4618      	mov	r0, r3
 8009af0:	f001 f96c 	bl	800adcc <RCCEx_PLL3_Config>
 8009af4:	4603      	mov	r3, r0
 8009af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009afa:	e006      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b02:	e002      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009b04:	bf00      	nop
 8009b06:	e000      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10b      	bne.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009b12:	4b1e      	ldr	r3, [pc, #120]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b16:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009b22:	4a1a      	ldr	r2, [pc, #104]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b24:	430b      	orrs	r3, r1
 8009b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b28:	e003      	b.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009b3e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009b42:	2300      	movs	r3, #0
 8009b44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009b48:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	d056      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009b5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b5e:	d038      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009b60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b64:	d831      	bhi.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009b6a:	d034      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009b6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009b70:	d82b      	bhi.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b76:	d01d      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009b78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b7c:	d825      	bhi.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d006      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009b82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b86:	d00a      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009b88:	e01f      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b8a:	bf00      	nop
 8009b8c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b90:	4ba2      	ldr	r3, [pc, #648]	@ (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b94:	4aa1      	ldr	r2, [pc, #644]	@ (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b9c:	e01c      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ba2:	3308      	adds	r3, #8
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f001 f85e 	bl	800ac68 <RCCEx_PLL2_Config>
 8009bac:	4603      	mov	r3, r0
 8009bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009bb2:	e011      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bb8:	3328      	adds	r3, #40	@ 0x28
 8009bba:	2100      	movs	r1, #0
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f001 f905 	bl	800adcc <RCCEx_PLL3_Config>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009bc8:	e006      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bd0:	e002      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009bd2:	bf00      	nop
 8009bd4:	e000      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10b      	bne.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009be0:	4b8e      	ldr	r3, [pc, #568]	@ (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009be4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009bf0:	4a8a      	ldr	r2, [pc, #552]	@ (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bf2:	430b      	orrs	r3, r1
 8009bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bf6:	e003      	b.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009c10:	2300      	movs	r3, #0
 8009c12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009c16:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	d03a      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c26:	2b30      	cmp	r3, #48	@ 0x30
 8009c28:	d01f      	beq.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009c2a:	2b30      	cmp	r3, #48	@ 0x30
 8009c2c:	d819      	bhi.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009c2e:	2b20      	cmp	r3, #32
 8009c30:	d00c      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	d815      	bhi.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d019      	beq.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009c3a:	2b10      	cmp	r3, #16
 8009c3c:	d111      	bne.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c3e:	4b77      	ldr	r3, [pc, #476]	@ (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c42:	4a76      	ldr	r2, [pc, #472]	@ (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009c4a:	e011      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c50:	3308      	adds	r3, #8
 8009c52:	2102      	movs	r1, #2
 8009c54:	4618      	mov	r0, r3
 8009c56:	f001 f807 	bl	800ac68 <RCCEx_PLL2_Config>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009c60:	e006      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c68:	e002      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009c6a:	bf00      	nop
 8009c6c:	e000      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009c6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10a      	bne.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009c78:	4b68      	ldr	r3, [pc, #416]	@ (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c7c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c86:	4a65      	ldr	r2, [pc, #404]	@ (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c88:	430b      	orrs	r3, r1
 8009c8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009c8c:	e003      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009ca2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009cac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	d051      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009cc0:	d035      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009cc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009cc6:	d82e      	bhi.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009cc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ccc:	d031      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009cce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009cd2:	d828      	bhi.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009cd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cd8:	d01a      	beq.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cde:	d822      	bhi.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d003      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ce8:	d007      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009cea:	e01c      	b.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cec:	4b4b      	ldr	r3, [pc, #300]	@ (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf0:	4a4a      	ldr	r2, [pc, #296]	@ (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009cf8:	e01c      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cfe:	3308      	adds	r3, #8
 8009d00:	2100      	movs	r1, #0
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 ffb0 	bl	800ac68 <RCCEx_PLL2_Config>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009d0e:	e011      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d14:	3328      	adds	r3, #40	@ 0x28
 8009d16:	2100      	movs	r1, #0
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f001 f857 	bl	800adcc <RCCEx_PLL3_Config>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009d24:	e006      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d2c:	e002      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009d2e:	bf00      	nop
 8009d30:	e000      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10a      	bne.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009d3c:	4b37      	ldr	r3, [pc, #220]	@ (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d40:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d4a:	4a34      	ldr	r2, [pc, #208]	@ (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d4c:	430b      	orrs	r3, r1
 8009d4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009d50:	e003      	b.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009d66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009d70:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009d74:	460b      	mov	r3, r1
 8009d76:	4313      	orrs	r3, r2
 8009d78:	d056      	beq.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009d84:	d033      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009d86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009d8a:	d82c      	bhi.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009d90:	d02f      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009d92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009d96:	d826      	bhi.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009d9c:	d02b      	beq.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009d9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009da2:	d820      	bhi.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009da4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009da8:	d012      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009daa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dae:	d81a      	bhi.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d022      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009db8:	d115      	bne.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 ff50 	bl	800ac68 <RCCEx_PLL2_Config>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009dce:	e015      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd4:	3328      	adds	r3, #40	@ 0x28
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 fff7 	bl	800adcc <RCCEx_PLL3_Config>
 8009dde:	4603      	mov	r3, r0
 8009de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009de4:	e00a      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009dec:	e006      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dee:	bf00      	nop
 8009df0:	e004      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009df2:	bf00      	nop
 8009df4:	e002      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009df6:	bf00      	nop
 8009df8:	e000      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10d      	bne.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009e04:	4b05      	ldr	r3, [pc, #20]	@ (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e08:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e12:	4a02      	ldr	r2, [pc, #8]	@ (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e14:	430b      	orrs	r3, r1
 8009e16:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e18:	e006      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009e1a:	bf00      	nop
 8009e1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009e34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009e3e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4313      	orrs	r3, r2
 8009e46:	d055      	beq.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e54:	d033      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e5a:	d82c      	bhi.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e60:	d02f      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e66:	d826      	bhi.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009e6c:	d02b      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009e6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009e72:	d820      	bhi.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e78:	d012      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009e7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e7e:	d81a      	bhi.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d022      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009e84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e88:	d115      	bne.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e8e:	3308      	adds	r3, #8
 8009e90:	2101      	movs	r1, #1
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 fee8 	bl	800ac68 <RCCEx_PLL2_Config>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009e9e:	e015      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ea4:	3328      	adds	r3, #40	@ 0x28
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f000 ff8f 	bl	800adcc <RCCEx_PLL3_Config>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009eb4:	e00a      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ebc:	e006      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ebe:	bf00      	nop
 8009ec0:	e004      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ec2:	bf00      	nop
 8009ec4:	e002      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ec6:	bf00      	nop
 8009ec8:	e000      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10b      	bne.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009ed4:	4ba3      	ldr	r3, [pc, #652]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ed8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009ee4:	4a9f      	ldr	r2, [pc, #636]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ee6:	430b      	orrs	r3, r1
 8009ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8009eea:	e003      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ef0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009f00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009f04:	2300      	movs	r3, #0
 8009f06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009f0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4313      	orrs	r3, r2
 8009f12:	d037      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f1e:	d00e      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009f20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f24:	d816      	bhi.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d018      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009f2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f2e:	d111      	bne.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f30:	4b8c      	ldr	r3, [pc, #560]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f34:	4a8b      	ldr	r2, [pc, #556]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009f3c:	e00f      	b.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f42:	3308      	adds	r3, #8
 8009f44:	2101      	movs	r1, #1
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 fe8e 	bl	800ac68 <RCCEx_PLL2_Config>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009f52:	e004      	b.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f5a:	e000      	b.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10a      	bne.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009f66:	4b7f      	ldr	r3, [pc, #508]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f6a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f74:	4a7b      	ldr	r2, [pc, #492]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f76:	430b      	orrs	r3, r1
 8009f78:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f7a:	e003      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009f90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009f94:	2300      	movs	r3, #0
 8009f96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009f9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	d039      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009faa:	2b03      	cmp	r3, #3
 8009fac:	d81c      	bhi.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009fae:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb4:	08009ff1 	.word	0x08009ff1
 8009fb8:	08009fc5 	.word	0x08009fc5
 8009fbc:	08009fd3 	.word	0x08009fd3
 8009fc0:	08009ff1 	.word	0x08009ff1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fc4:	4b67      	ldr	r3, [pc, #412]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc8:	4a66      	ldr	r2, [pc, #408]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009fd0:	e00f      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	2102      	movs	r1, #2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 fe44 	bl	800ac68 <RCCEx_PLL2_Config>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009fe6:	e004      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fee:	e000      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10a      	bne.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009ffa:	4b5a      	ldr	r3, [pc, #360]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ffe:	f023 0103 	bic.w	r1, r3, #3
 800a002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a008:	4a56      	ldr	r2, [pc, #344]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a00a:	430b      	orrs	r3, r1
 800a00c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a00e:	e003      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a010:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a014:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a024:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a028:	2300      	movs	r3, #0
 800a02a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a02e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a032:	460b      	mov	r3, r1
 800a034:	4313      	orrs	r3, r2
 800a036:	f000 809f 	beq.w	800a178 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a03a:	4b4b      	ldr	r3, [pc, #300]	@ (800a168 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a4a      	ldr	r2, [pc, #296]	@ (800a168 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a044:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a046:	f7fd fe55 	bl	8007cf4 <HAL_GetTick>
 800a04a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a04e:	e00b      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a050:	f7fd fe50 	bl	8007cf4 <HAL_GetTick>
 800a054:	4602      	mov	r2, r0
 800a056:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	2b64      	cmp	r3, #100	@ 0x64
 800a05e:	d903      	bls.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a066:	e005      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a068:	4b3f      	ldr	r3, [pc, #252]	@ (800a168 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a070:	2b00      	cmp	r3, #0
 800a072:	d0ed      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d179      	bne.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a07c:	4b39      	ldr	r3, [pc, #228]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a07e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a084:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a088:	4053      	eors	r3, r2
 800a08a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d015      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a092:	4b34      	ldr	r3, [pc, #208]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a09a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a09e:	4b31      	ldr	r3, [pc, #196]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0a2:	4a30      	ldr	r2, [pc, #192]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0a8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a0aa:	4b2e      	ldr	r3, [pc, #184]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0ae:	4a2d      	ldr	r2, [pc, #180]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0b4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a0b6:	4a2b      	ldr	r2, [pc, #172]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a0bc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a0c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0ca:	d118      	bne.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0cc:	f7fd fe12 	bl	8007cf4 <HAL_GetTick>
 800a0d0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0d4:	e00d      	b.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0d6:	f7fd fe0d 	bl	8007cf4 <HAL_GetTick>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a0e0:	1ad2      	subs	r2, r2, r3
 800a0e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d903      	bls.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a0f0:	e005      	b.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0f2:	4b1c      	ldr	r3, [pc, #112]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0f6:	f003 0302 	and.w	r3, r3, #2
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d0eb      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a0fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a102:	2b00      	cmp	r3, #0
 800a104:	d129      	bne.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a10a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a10e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a112:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a116:	d10e      	bne.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a118:	4b12      	ldr	r3, [pc, #72]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a124:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a128:	091a      	lsrs	r2, r3, #4
 800a12a:	4b10      	ldr	r3, [pc, #64]	@ (800a16c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a12c:	4013      	ands	r3, r2
 800a12e:	4a0d      	ldr	r2, [pc, #52]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a130:	430b      	orrs	r3, r1
 800a132:	6113      	str	r3, [r2, #16]
 800a134:	e005      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a136:	4b0b      	ldr	r3, [pc, #44]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	4a0a      	ldr	r2, [pc, #40]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a13c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a140:	6113      	str	r3, [r2, #16]
 800a142:	4b08      	ldr	r3, [pc, #32]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a144:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a14a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a14e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a152:	4a04      	ldr	r2, [pc, #16]	@ (800a164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a154:	430b      	orrs	r3, r1
 800a156:	6713      	str	r3, [r2, #112]	@ 0x70
 800a158:	e00e      	b.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a15a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a15e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a162:	e009      	b.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a164:	58024400 	.word	0x58024400
 800a168:	58024800 	.word	0x58024800
 800a16c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a174:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a180:	f002 0301 	and.w	r3, r2, #1
 800a184:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a188:	2300      	movs	r3, #0
 800a18a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a18e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a192:	460b      	mov	r3, r1
 800a194:	4313      	orrs	r3, r2
 800a196:	f000 8089 	beq.w	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a19e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1a0:	2b28      	cmp	r3, #40	@ 0x28
 800a1a2:	d86b      	bhi.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a1a4:	a201      	add	r2, pc, #4	@ (adr r2, 800a1ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1aa:	bf00      	nop
 800a1ac:	0800a285 	.word	0x0800a285
 800a1b0:	0800a27d 	.word	0x0800a27d
 800a1b4:	0800a27d 	.word	0x0800a27d
 800a1b8:	0800a27d 	.word	0x0800a27d
 800a1bc:	0800a27d 	.word	0x0800a27d
 800a1c0:	0800a27d 	.word	0x0800a27d
 800a1c4:	0800a27d 	.word	0x0800a27d
 800a1c8:	0800a27d 	.word	0x0800a27d
 800a1cc:	0800a251 	.word	0x0800a251
 800a1d0:	0800a27d 	.word	0x0800a27d
 800a1d4:	0800a27d 	.word	0x0800a27d
 800a1d8:	0800a27d 	.word	0x0800a27d
 800a1dc:	0800a27d 	.word	0x0800a27d
 800a1e0:	0800a27d 	.word	0x0800a27d
 800a1e4:	0800a27d 	.word	0x0800a27d
 800a1e8:	0800a27d 	.word	0x0800a27d
 800a1ec:	0800a267 	.word	0x0800a267
 800a1f0:	0800a27d 	.word	0x0800a27d
 800a1f4:	0800a27d 	.word	0x0800a27d
 800a1f8:	0800a27d 	.word	0x0800a27d
 800a1fc:	0800a27d 	.word	0x0800a27d
 800a200:	0800a27d 	.word	0x0800a27d
 800a204:	0800a27d 	.word	0x0800a27d
 800a208:	0800a27d 	.word	0x0800a27d
 800a20c:	0800a285 	.word	0x0800a285
 800a210:	0800a27d 	.word	0x0800a27d
 800a214:	0800a27d 	.word	0x0800a27d
 800a218:	0800a27d 	.word	0x0800a27d
 800a21c:	0800a27d 	.word	0x0800a27d
 800a220:	0800a27d 	.word	0x0800a27d
 800a224:	0800a27d 	.word	0x0800a27d
 800a228:	0800a27d 	.word	0x0800a27d
 800a22c:	0800a285 	.word	0x0800a285
 800a230:	0800a27d 	.word	0x0800a27d
 800a234:	0800a27d 	.word	0x0800a27d
 800a238:	0800a27d 	.word	0x0800a27d
 800a23c:	0800a27d 	.word	0x0800a27d
 800a240:	0800a27d 	.word	0x0800a27d
 800a244:	0800a27d 	.word	0x0800a27d
 800a248:	0800a27d 	.word	0x0800a27d
 800a24c:	0800a285 	.word	0x0800a285
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a254:	3308      	adds	r3, #8
 800a256:	2101      	movs	r1, #1
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 fd05 	bl	800ac68 <RCCEx_PLL2_Config>
 800a25e:	4603      	mov	r3, r0
 800a260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a264:	e00f      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a26a:	3328      	adds	r3, #40	@ 0x28
 800a26c:	2101      	movs	r1, #1
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 fdac 	bl	800adcc <RCCEx_PLL3_Config>
 800a274:	4603      	mov	r3, r0
 800a276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a27a:	e004      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a282:	e000      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a284:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10a      	bne.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a28e:	4bbf      	ldr	r3, [pc, #764]	@ (800a58c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a292:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a29a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a29c:	4abb      	ldr	r2, [pc, #748]	@ (800a58c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a29e:	430b      	orrs	r3, r1
 800a2a0:	6553      	str	r3, [r2, #84]	@ 0x54
 800a2a2:	e003      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b4:	f002 0302 	and.w	r3, r2, #2
 800a2b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a2c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	d041      	beq.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2d2:	2b05      	cmp	r3, #5
 800a2d4:	d824      	bhi.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a2d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2dc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2dc:	0800a329 	.word	0x0800a329
 800a2e0:	0800a2f5 	.word	0x0800a2f5
 800a2e4:	0800a30b 	.word	0x0800a30b
 800a2e8:	0800a329 	.word	0x0800a329
 800a2ec:	0800a329 	.word	0x0800a329
 800a2f0:	0800a329 	.word	0x0800a329
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2f8:	3308      	adds	r3, #8
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 fcb3 	bl	800ac68 <RCCEx_PLL2_Config>
 800a302:	4603      	mov	r3, r0
 800a304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a308:	e00f      	b.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a30e:	3328      	adds	r3, #40	@ 0x28
 800a310:	2101      	movs	r1, #1
 800a312:	4618      	mov	r0, r3
 800a314:	f000 fd5a 	bl	800adcc <RCCEx_PLL3_Config>
 800a318:	4603      	mov	r3, r0
 800a31a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a31e:	e004      	b.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a326:	e000      	b.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a32a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10a      	bne.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a332:	4b96      	ldr	r3, [pc, #600]	@ (800a58c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a336:	f023 0107 	bic.w	r1, r3, #7
 800a33a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a33e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a340:	4a92      	ldr	r2, [pc, #584]	@ (800a58c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a342:	430b      	orrs	r3, r1
 800a344:	6553      	str	r3, [r2, #84]	@ 0x54
 800a346:	e003      	b.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a34c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	f002 0304 	and.w	r3, r2, #4
 800a35c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a360:	2300      	movs	r3, #0
 800a362:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a366:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a36a:	460b      	mov	r3, r1
 800a36c:	4313      	orrs	r3, r2
 800a36e:	d044      	beq.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a378:	2b05      	cmp	r3, #5
 800a37a:	d825      	bhi.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a37c:	a201      	add	r2, pc, #4	@ (adr r2, 800a384 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a382:	bf00      	nop
 800a384:	0800a3d1 	.word	0x0800a3d1
 800a388:	0800a39d 	.word	0x0800a39d
 800a38c:	0800a3b3 	.word	0x0800a3b3
 800a390:	0800a3d1 	.word	0x0800a3d1
 800a394:	0800a3d1 	.word	0x0800a3d1
 800a398:	0800a3d1 	.word	0x0800a3d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3a0:	3308      	adds	r3, #8
 800a3a2:	2101      	movs	r1, #1
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 fc5f 	bl	800ac68 <RCCEx_PLL2_Config>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a3b0:	e00f      	b.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3b6:	3328      	adds	r3, #40	@ 0x28
 800a3b8:	2101      	movs	r1, #1
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f000 fd06 	bl	800adcc <RCCEx_PLL3_Config>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a3c6:	e004      	b.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a3ce:	e000      	b.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a3d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10b      	bne.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a3da:	4b6c      	ldr	r3, [pc, #432]	@ (800a58c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3de:	f023 0107 	bic.w	r1, r3, #7
 800a3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3ea:	4a68      	ldr	r2, [pc, #416]	@ (800a58c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3ec:	430b      	orrs	r3, r1
 800a3ee:	6593      	str	r3, [r2, #88]	@ 0x58
 800a3f0:	e003      	b.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	f002 0320 	and.w	r3, r2, #32
 800a406:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a40a:	2300      	movs	r3, #0
 800a40c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a410:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a414:	460b      	mov	r3, r1
 800a416:	4313      	orrs	r3, r2
 800a418:	d055      	beq.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a422:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a426:	d033      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a428:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a42c:	d82c      	bhi.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a42e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a432:	d02f      	beq.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a438:	d826      	bhi.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a43a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a43e:	d02b      	beq.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a440:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a444:	d820      	bhi.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a446:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a44a:	d012      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a44c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a450:	d81a      	bhi.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a452:	2b00      	cmp	r3, #0
 800a454:	d022      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a456:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a45a:	d115      	bne.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a45c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a460:	3308      	adds	r3, #8
 800a462:	2100      	movs	r1, #0
 800a464:	4618      	mov	r0, r3
 800a466:	f000 fbff 	bl	800ac68 <RCCEx_PLL2_Config>
 800a46a:	4603      	mov	r3, r0
 800a46c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a470:	e015      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a476:	3328      	adds	r3, #40	@ 0x28
 800a478:	2102      	movs	r1, #2
 800a47a:	4618      	mov	r0, r3
 800a47c:	f000 fca6 	bl	800adcc <RCCEx_PLL3_Config>
 800a480:	4603      	mov	r3, r0
 800a482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a486:	e00a      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a48e:	e006      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a490:	bf00      	nop
 800a492:	e004      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a494:	bf00      	nop
 800a496:	e002      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a498:	bf00      	nop
 800a49a:	e000      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a49c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a49e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10b      	bne.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a4a6:	4b39      	ldr	r3, [pc, #228]	@ (800a58c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a4a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a4ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4b6:	4a35      	ldr	r2, [pc, #212]	@ (800a58c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a4b8:	430b      	orrs	r3, r1
 800a4ba:	6553      	str	r3, [r2, #84]	@ 0x54
 800a4bc:	e003      	b.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a4d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a4dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	d058      	beq.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a4ee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a4f2:	d033      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a4f4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a4f8:	d82c      	bhi.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4fe:	d02f      	beq.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a504:	d826      	bhi.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a506:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a50a:	d02b      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a50c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a510:	d820      	bhi.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a512:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a516:	d012      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a51c:	d81a      	bhi.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d022      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a526:	d115      	bne.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a52c:	3308      	adds	r3, #8
 800a52e:	2100      	movs	r1, #0
 800a530:	4618      	mov	r0, r3
 800a532:	f000 fb99 	bl	800ac68 <RCCEx_PLL2_Config>
 800a536:	4603      	mov	r3, r0
 800a538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a53c:	e015      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a542:	3328      	adds	r3, #40	@ 0x28
 800a544:	2102      	movs	r1, #2
 800a546:	4618      	mov	r0, r3
 800a548:	f000 fc40 	bl	800adcc <RCCEx_PLL3_Config>
 800a54c:	4603      	mov	r3, r0
 800a54e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a552:	e00a      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a55a:	e006      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a55c:	bf00      	nop
 800a55e:	e004      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a560:	bf00      	nop
 800a562:	e002      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a564:	bf00      	nop
 800a566:	e000      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a56a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10e      	bne.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a572:	4b06      	ldr	r3, [pc, #24]	@ (800a58c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a576:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a57e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a582:	4a02      	ldr	r2, [pc, #8]	@ (800a58c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a584:	430b      	orrs	r3, r1
 800a586:	6593      	str	r3, [r2, #88]	@ 0x58
 800a588:	e006      	b.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a58a:	bf00      	nop
 800a58c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a594:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a5a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a5ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	d055      	beq.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a5c0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a5c4:	d033      	beq.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a5c6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a5ca:	d82c      	bhi.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5d0:	d02f      	beq.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a5d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5d6:	d826      	bhi.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5d8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a5dc:	d02b      	beq.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a5de:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a5e2:	d820      	bhi.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5e8:	d012      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a5ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5ee:	d81a      	bhi.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d022      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a5f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5f8:	d115      	bne.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5fe:	3308      	adds	r3, #8
 800a600:	2100      	movs	r1, #0
 800a602:	4618      	mov	r0, r3
 800a604:	f000 fb30 	bl	800ac68 <RCCEx_PLL2_Config>
 800a608:	4603      	mov	r3, r0
 800a60a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a60e:	e015      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a614:	3328      	adds	r3, #40	@ 0x28
 800a616:	2102      	movs	r1, #2
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 fbd7 	bl	800adcc <RCCEx_PLL3_Config>
 800a61e:	4603      	mov	r3, r0
 800a620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a624:	e00a      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a62c:	e006      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a62e:	bf00      	nop
 800a630:	e004      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a632:	bf00      	nop
 800a634:	e002      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a636:	bf00      	nop
 800a638:	e000      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a63a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a63c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10b      	bne.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a644:	4ba1      	ldr	r3, [pc, #644]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a648:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a64c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a650:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a654:	4a9d      	ldr	r2, [pc, #628]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a656:	430b      	orrs	r3, r1
 800a658:	6593      	str	r3, [r2, #88]	@ 0x58
 800a65a:	e003      	b.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a65c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a660:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66c:	f002 0308 	and.w	r3, r2, #8
 800a670:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a674:	2300      	movs	r3, #0
 800a676:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a67a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a67e:	460b      	mov	r3, r1
 800a680:	4313      	orrs	r3, r2
 800a682:	d01e      	beq.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a68c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a690:	d10c      	bne.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a696:	3328      	adds	r3, #40	@ 0x28
 800a698:	2102      	movs	r1, #2
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 fb96 	bl	800adcc <RCCEx_PLL3_Config>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d002      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a6ac:	4b87      	ldr	r3, [pc, #540]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a6b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6bc:	4a83      	ldr	r2, [pc, #524]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6be:	430b      	orrs	r3, r1
 800a6c0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ca:	f002 0310 	and.w	r3, r2, #16
 800a6ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a6d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a6dc:	460b      	mov	r3, r1
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	d01e      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a6ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6ee:	d10c      	bne.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a6f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6f4:	3328      	adds	r3, #40	@ 0x28
 800a6f6:	2102      	movs	r1, #2
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 fb67 	bl	800adcc <RCCEx_PLL3_Config>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d002      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a70a:	4b70      	ldr	r3, [pc, #448]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a70c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a70e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a716:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a71a:	4a6c      	ldr	r2, [pc, #432]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a71c:	430b      	orrs	r3, r1
 800a71e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a728:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a72c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a730:	2300      	movs	r3, #0
 800a732:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a736:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a73a:	460b      	mov	r3, r1
 800a73c:	4313      	orrs	r3, r2
 800a73e:	d03e      	beq.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a744:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a74c:	d022      	beq.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a74e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a752:	d81b      	bhi.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a754:	2b00      	cmp	r3, #0
 800a756:	d003      	beq.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a75c:	d00b      	beq.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a75e:	e015      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a764:	3308      	adds	r3, #8
 800a766:	2100      	movs	r1, #0
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 fa7d 	bl	800ac68 <RCCEx_PLL2_Config>
 800a76e:	4603      	mov	r3, r0
 800a770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a774:	e00f      	b.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a77a:	3328      	adds	r3, #40	@ 0x28
 800a77c:	2102      	movs	r1, #2
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 fb24 	bl	800adcc <RCCEx_PLL3_Config>
 800a784:	4603      	mov	r3, r0
 800a786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a78a:	e004      	b.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a792:	e000      	b.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a794:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10b      	bne.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a79e:	4b4b      	ldr	r3, [pc, #300]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a7ae:	4a47      	ldr	r2, [pc, #284]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7b0:	430b      	orrs	r3, r1
 800a7b2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a7b4:	e003      	b.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a7ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a7d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	d03b      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a7da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a7e6:	d01f      	beq.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a7e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a7ec:	d818      	bhi.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a7ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7f2:	d003      	beq.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a7f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a7f8:	d007      	beq.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a7fa:	e011      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7fc:	4b33      	ldr	r3, [pc, #204]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a800:	4a32      	ldr	r2, [pc, #200]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a806:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a808:	e00f      	b.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a80a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a80e:	3328      	adds	r3, #40	@ 0x28
 800a810:	2101      	movs	r1, #1
 800a812:	4618      	mov	r0, r3
 800a814:	f000 fada 	bl	800adcc <RCCEx_PLL3_Config>
 800a818:	4603      	mov	r3, r0
 800a81a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a81e:	e004      	b.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a820:	2301      	movs	r3, #1
 800a822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a826:	e000      	b.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a82a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10b      	bne.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a832:	4b26      	ldr	r3, [pc, #152]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a836:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a83a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a83e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a842:	4a22      	ldr	r2, [pc, #136]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a844:	430b      	orrs	r3, r1
 800a846:	6553      	str	r3, [r2, #84]	@ 0x54
 800a848:	e003      	b.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a84a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a84e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a85e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a860:	2300      	movs	r3, #0
 800a862:	677b      	str	r3, [r7, #116]	@ 0x74
 800a864:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a868:	460b      	mov	r3, r1
 800a86a:	4313      	orrs	r3, r2
 800a86c:	d034      	beq.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a86e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a874:	2b00      	cmp	r3, #0
 800a876:	d003      	beq.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a87c:	d007      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a87e:	e011      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a880:	4b12      	ldr	r3, [pc, #72]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a884:	4a11      	ldr	r2, [pc, #68]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a88a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a88c:	e00e      	b.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a892:	3308      	adds	r3, #8
 800a894:	2102      	movs	r1, #2
 800a896:	4618      	mov	r0, r3
 800a898:	f000 f9e6 	bl	800ac68 <RCCEx_PLL2_Config>
 800a89c:	4603      	mov	r3, r0
 800a89e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a8a2:	e003      	b.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a8aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10d      	bne.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a8b4:	4b05      	ldr	r3, [pc, #20]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8b8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a8bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8c2:	4a02      	ldr	r2, [pc, #8]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8c4:	430b      	orrs	r3, r1
 800a8c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a8c8:	e006      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a8ca:	bf00      	nop
 800a8cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a8e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a8ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	d00c      	beq.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a8f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8f8:	3328      	adds	r3, #40	@ 0x28
 800a8fa:	2102      	movs	r1, #2
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 fa65 	bl	800adcc <RCCEx_PLL3_Config>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a90e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a916:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a91a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a91c:	2300      	movs	r3, #0
 800a91e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a920:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a924:	460b      	mov	r3, r1
 800a926:	4313      	orrs	r3, r2
 800a928:	d038      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a92e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a932:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a936:	d018      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a938:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a93c:	d811      	bhi.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a93e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a942:	d014      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a948:	d80b      	bhi.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d011      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a94e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a952:	d106      	bne.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a954:	4bc3      	ldr	r3, [pc, #780]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a958:	4ac2      	ldr	r2, [pc, #776]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a95a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a95e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a960:	e008      	b.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a968:	e004      	b.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a96a:	bf00      	nop
 800a96c:	e002      	b.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a96e:	bf00      	nop
 800a970:	e000      	b.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a972:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10b      	bne.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a97c:	4bb9      	ldr	r3, [pc, #740]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a97e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a980:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a98c:	4ab5      	ldr	r2, [pc, #724]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a98e:	430b      	orrs	r3, r1
 800a990:	6553      	str	r3, [r2, #84]	@ 0x54
 800a992:	e003      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a998:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a9a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	d009      	beq.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a9b8:	4baa      	ldr	r3, [pc, #680]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a9c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9c6:	4aa7      	ldr	r2, [pc, #668]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9c8:	430b      	orrs	r3, r1
 800a9ca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a9cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a9d8:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9da:	2300      	movs	r3, #0
 800a9dc:	657b      	str	r3, [r7, #84]	@ 0x54
 800a9de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	d00a      	beq.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a9e8:	4b9e      	ldr	r3, [pc, #632]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a9f8:	4a9a      	ldr	r2, [pc, #616]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9fa:	430b      	orrs	r3, r1
 800a9fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa06:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800aa0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa10:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800aa14:	460b      	mov	r3, r1
 800aa16:	4313      	orrs	r3, r2
 800aa18:	d009      	beq.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aa1a:	4b92      	ldr	r3, [pc, #584]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa1e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800aa22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa28:	4a8e      	ldr	r2, [pc, #568]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa2a:	430b      	orrs	r3, r1
 800aa2c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aa2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa36:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800aa3a:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa40:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800aa44:	460b      	mov	r3, r1
 800aa46:	4313      	orrs	r3, r2
 800aa48:	d00e      	beq.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aa4a:	4b86      	ldr	r3, [pc, #536]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	4a85      	ldr	r2, [pc, #532]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa50:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aa54:	6113      	str	r3, [r2, #16]
 800aa56:	4b83      	ldr	r3, [pc, #524]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa58:	6919      	ldr	r1, [r3, #16]
 800aa5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800aa62:	4a80      	ldr	r2, [pc, #512]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa64:	430b      	orrs	r3, r1
 800aa66:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aa68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa70:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800aa74:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa76:	2300      	movs	r3, #0
 800aa78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa7a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800aa7e:	460b      	mov	r3, r1
 800aa80:	4313      	orrs	r3, r2
 800aa82:	d009      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aa84:	4b77      	ldr	r3, [pc, #476]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa88:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800aa8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa92:	4a74      	ldr	r2, [pc, #464]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa94:	430b      	orrs	r3, r1
 800aa96:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aa98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800aaa4:	633b      	str	r3, [r7, #48]	@ 0x30
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaaa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800aaae:	460b      	mov	r3, r1
 800aab0:	4313      	orrs	r3, r2
 800aab2:	d00a      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aab4:	4b6b      	ldr	r3, [pc, #428]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aab8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800aabc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aac4:	4a67      	ldr	r2, [pc, #412]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aac6:	430b      	orrs	r3, r1
 800aac8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800aaca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad2:	2100      	movs	r1, #0
 800aad4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800aad6:	f003 0301 	and.w	r3, r3, #1
 800aada:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aadc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800aae0:	460b      	mov	r3, r1
 800aae2:	4313      	orrs	r3, r2
 800aae4:	d011      	beq.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaea:	3308      	adds	r3, #8
 800aaec:	2100      	movs	r1, #0
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 f8ba 	bl	800ac68 <RCCEx_PLL2_Config>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800aafa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d003      	beq.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ab0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab12:	2100      	movs	r1, #0
 800ab14:	6239      	str	r1, [r7, #32]
 800ab16:	f003 0302 	and.w	r3, r3, #2
 800ab1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab1c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ab20:	460b      	mov	r3, r1
 800ab22:	4313      	orrs	r3, r2
 800ab24:	d011      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab2a:	3308      	adds	r3, #8
 800ab2c:	2101      	movs	r1, #1
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 f89a 	bl	800ac68 <RCCEx_PLL2_Config>
 800ab34:	4603      	mov	r3, r0
 800ab36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ab3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d003      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ab4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab52:	2100      	movs	r1, #0
 800ab54:	61b9      	str	r1, [r7, #24]
 800ab56:	f003 0304 	and.w	r3, r3, #4
 800ab5a:	61fb      	str	r3, [r7, #28]
 800ab5c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ab60:	460b      	mov	r3, r1
 800ab62:	4313      	orrs	r3, r2
 800ab64:	d011      	beq.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab6a:	3308      	adds	r3, #8
 800ab6c:	2102      	movs	r1, #2
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 f87a 	bl	800ac68 <RCCEx_PLL2_Config>
 800ab74:	4603      	mov	r3, r0
 800ab76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ab7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d003      	beq.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ab8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab92:	2100      	movs	r1, #0
 800ab94:	6139      	str	r1, [r7, #16]
 800ab96:	f003 0308 	and.w	r3, r3, #8
 800ab9a:	617b      	str	r3, [r7, #20]
 800ab9c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aba0:	460b      	mov	r3, r1
 800aba2:	4313      	orrs	r3, r2
 800aba4:	d011      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abaa:	3328      	adds	r3, #40	@ 0x28
 800abac:	2100      	movs	r1, #0
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 f90c 	bl	800adcc <RCCEx_PLL3_Config>
 800abb4:	4603      	mov	r3, r0
 800abb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800abba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d003      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800abca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	2100      	movs	r1, #0
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	f003 0310 	and.w	r3, r3, #16
 800abda:	60fb      	str	r3, [r7, #12]
 800abdc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800abe0:	460b      	mov	r3, r1
 800abe2:	4313      	orrs	r3, r2
 800abe4:	d011      	beq.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abea:	3328      	adds	r3, #40	@ 0x28
 800abec:	2101      	movs	r1, #1
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 f8ec 	bl	800adcc <RCCEx_PLL3_Config>
 800abf4:	4603      	mov	r3, r0
 800abf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800abfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d003      	beq.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ac0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac12:	2100      	movs	r1, #0
 800ac14:	6039      	str	r1, [r7, #0]
 800ac16:	f003 0320 	and.w	r3, r3, #32
 800ac1a:	607b      	str	r3, [r7, #4]
 800ac1c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ac20:	460b      	mov	r3, r1
 800ac22:	4313      	orrs	r3, r2
 800ac24:	d011      	beq.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac2a:	3328      	adds	r3, #40	@ 0x28
 800ac2c:	2102      	movs	r1, #2
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 f8cc 	bl	800adcc <RCCEx_PLL3_Config>
 800ac34:	4603      	mov	r3, r0
 800ac36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ac3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d003      	beq.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800ac4a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ac52:	2300      	movs	r3, #0
 800ac54:	e000      	b.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac64:	58024400 	.word	0x58024400

0800ac68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac76:	4b53      	ldr	r3, [pc, #332]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ac78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac7a:	f003 0303 	and.w	r3, r3, #3
 800ac7e:	2b03      	cmp	r3, #3
 800ac80:	d101      	bne.n	800ac86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	e099      	b.n	800adba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ac86:	4b4f      	ldr	r3, [pc, #316]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a4e      	ldr	r2, [pc, #312]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ac8c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ac90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac92:	f7fd f82f 	bl	8007cf4 <HAL_GetTick>
 800ac96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac98:	e008      	b.n	800acac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ac9a:	f7fd f82b 	bl	8007cf4 <HAL_GetTick>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d901      	bls.n	800acac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aca8:	2303      	movs	r3, #3
 800acaa:	e086      	b.n	800adba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800acac:	4b45      	ldr	r3, [pc, #276]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d1f0      	bne.n	800ac9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800acb8:	4b42      	ldr	r3, [pc, #264]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800acba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acbc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	031b      	lsls	r3, r3, #12
 800acc6:	493f      	ldr	r1, [pc, #252]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800acc8:	4313      	orrs	r3, r2
 800acca:	628b      	str	r3, [r1, #40]	@ 0x28
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	3b01      	subs	r3, #1
 800acd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	3b01      	subs	r3, #1
 800acdc:	025b      	lsls	r3, r3, #9
 800acde:	b29b      	uxth	r3, r3
 800ace0:	431a      	orrs	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	041b      	lsls	r3, r3, #16
 800acea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800acee:	431a      	orrs	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	691b      	ldr	r3, [r3, #16]
 800acf4:	3b01      	subs	r3, #1
 800acf6:	061b      	lsls	r3, r3, #24
 800acf8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800acfc:	4931      	ldr	r1, [pc, #196]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800acfe:	4313      	orrs	r3, r2
 800ad00:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ad02:	4b30      	ldr	r3, [pc, #192]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	695b      	ldr	r3, [r3, #20]
 800ad0e:	492d      	ldr	r1, [pc, #180]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad10:	4313      	orrs	r3, r2
 800ad12:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ad14:	4b2b      	ldr	r3, [pc, #172]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad18:	f023 0220 	bic.w	r2, r3, #32
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	4928      	ldr	r1, [pc, #160]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad22:	4313      	orrs	r3, r2
 800ad24:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ad26:	4b27      	ldr	r3, [pc, #156]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad2a:	4a26      	ldr	r2, [pc, #152]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad2c:	f023 0310 	bic.w	r3, r3, #16
 800ad30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ad32:	4b24      	ldr	r3, [pc, #144]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad36:	4b24      	ldr	r3, [pc, #144]	@ (800adc8 <RCCEx_PLL2_Config+0x160>)
 800ad38:	4013      	ands	r3, r2
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	69d2      	ldr	r2, [r2, #28]
 800ad3e:	00d2      	lsls	r2, r2, #3
 800ad40:	4920      	ldr	r1, [pc, #128]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad42:	4313      	orrs	r3, r2
 800ad44:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ad46:	4b1f      	ldr	r3, [pc, #124]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad4a:	4a1e      	ldr	r2, [pc, #120]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad4c:	f043 0310 	orr.w	r3, r3, #16
 800ad50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d106      	bne.n	800ad66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad58:	4b1a      	ldr	r3, [pc, #104]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad5c:	4a19      	ldr	r2, [pc, #100]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ad64:	e00f      	b.n	800ad86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d106      	bne.n	800ad7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ad6c:	4b15      	ldr	r3, [pc, #84]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad70:	4a14      	ldr	r2, [pc, #80]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ad78:	e005      	b.n	800ad86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad7a:	4b12      	ldr	r3, [pc, #72]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad7e:	4a11      	ldr	r2, [pc, #68]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ad84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ad86:	4b0f      	ldr	r3, [pc, #60]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a0e      	ldr	r2, [pc, #56]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ad90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad92:	f7fc ffaf 	bl	8007cf4 <HAL_GetTick>
 800ad96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad98:	e008      	b.n	800adac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ad9a:	f7fc ffab 	bl	8007cf4 <HAL_GetTick>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	1ad3      	subs	r3, r2, r3
 800ada4:	2b02      	cmp	r3, #2
 800ada6:	d901      	bls.n	800adac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ada8:	2303      	movs	r3, #3
 800adaa:	e006      	b.n	800adba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800adac:	4b05      	ldr	r3, [pc, #20]	@ (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d0f0      	beq.n	800ad9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800adb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	58024400 	.word	0x58024400
 800adc8:	ffff0007 	.word	0xffff0007

0800adcc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800add6:	2300      	movs	r3, #0
 800add8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800adda:	4b53      	ldr	r3, [pc, #332]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800addc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adde:	f003 0303 	and.w	r3, r3, #3
 800ade2:	2b03      	cmp	r3, #3
 800ade4:	d101      	bne.n	800adea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	e099      	b.n	800af1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800adea:	4b4f      	ldr	r3, [pc, #316]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a4e      	ldr	r2, [pc, #312]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800adf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800adf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adf6:	f7fc ff7d 	bl	8007cf4 <HAL_GetTick>
 800adfa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800adfc:	e008      	b.n	800ae10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800adfe:	f7fc ff79 	bl	8007cf4 <HAL_GetTick>
 800ae02:	4602      	mov	r2, r0
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d901      	bls.n	800ae10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	e086      	b.n	800af1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae10:	4b45      	ldr	r3, [pc, #276]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1f0      	bne.n	800adfe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ae1c:	4b42      	ldr	r3, [pc, #264]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae20:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	051b      	lsls	r3, r3, #20
 800ae2a:	493f      	ldr	r1, [pc, #252]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	628b      	str	r3, [r1, #40]	@ 0x28
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	3b01      	subs	r3, #1
 800ae36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	025b      	lsls	r3, r3, #9
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	431a      	orrs	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	041b      	lsls	r3, r3, #16
 800ae4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ae52:	431a      	orrs	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	061b      	lsls	r3, r3, #24
 800ae5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ae60:	4931      	ldr	r1, [pc, #196]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae62:	4313      	orrs	r3, r2
 800ae64:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ae66:	4b30      	ldr	r3, [pc, #192]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	492d      	ldr	r1, [pc, #180]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae74:	4313      	orrs	r3, r2
 800ae76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ae78:	4b2b      	ldr	r3, [pc, #172]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae7c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	699b      	ldr	r3, [r3, #24]
 800ae84:	4928      	ldr	r1, [pc, #160]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae86:	4313      	orrs	r3, r2
 800ae88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ae8a:	4b27      	ldr	r3, [pc, #156]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae8e:	4a26      	ldr	r2, [pc, #152]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ae96:	4b24      	ldr	r3, [pc, #144]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae9a:	4b24      	ldr	r3, [pc, #144]	@ (800af2c <RCCEx_PLL3_Config+0x160>)
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	69d2      	ldr	r2, [r2, #28]
 800aea2:	00d2      	lsls	r2, r2, #3
 800aea4:	4920      	ldr	r1, [pc, #128]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aea6:	4313      	orrs	r3, r2
 800aea8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aeaa:	4b1f      	ldr	r3, [pc, #124]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aeac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeae:	4a1e      	ldr	r2, [pc, #120]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aeb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aeb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d106      	bne.n	800aeca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aebc:	4b1a      	ldr	r3, [pc, #104]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec0:	4a19      	ldr	r2, [pc, #100]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aec2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800aec6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aec8:	e00f      	b.n	800aeea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d106      	bne.n	800aede <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aed0:	4b15      	ldr	r3, [pc, #84]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed4:	4a14      	ldr	r2, [pc, #80]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aed6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aeda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aedc:	e005      	b.n	800aeea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aede:	4b12      	ldr	r3, [pc, #72]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee2:	4a11      	ldr	r2, [pc, #68]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aee4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aee8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aeea:	4b0f      	ldr	r3, [pc, #60]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a0e      	ldr	r2, [pc, #56]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aef6:	f7fc fefd 	bl	8007cf4 <HAL_GetTick>
 800aefa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aefc:	e008      	b.n	800af10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aefe:	f7fc fef9 	bl	8007cf4 <HAL_GetTick>
 800af02:	4602      	mov	r2, r0
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	2b02      	cmp	r3, #2
 800af0a:	d901      	bls.n	800af10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af0c:	2303      	movs	r3, #3
 800af0e:	e006      	b.n	800af1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af10:	4b05      	ldr	r3, [pc, #20]	@ (800af28 <RCCEx_PLL3_Config+0x15c>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d0f0      	beq.n	800aefe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800af1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	58024400 	.word	0x58024400
 800af2c:	ffff0007 	.word	0xffff0007

0800af30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d101      	bne.n	800af42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e10f      	b.n	800b162 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a87      	ldr	r2, [pc, #540]	@ (800b16c <HAL_SPI_Init+0x23c>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d00f      	beq.n	800af72 <HAL_SPI_Init+0x42>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a86      	ldr	r2, [pc, #536]	@ (800b170 <HAL_SPI_Init+0x240>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d00a      	beq.n	800af72 <HAL_SPI_Init+0x42>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a84      	ldr	r2, [pc, #528]	@ (800b174 <HAL_SPI_Init+0x244>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d005      	beq.n	800af72 <HAL_SPI_Init+0x42>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	2b0f      	cmp	r3, #15
 800af6c:	d901      	bls.n	800af72 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e0f7      	b.n	800b162 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 ff22 	bl	800bdbc <SPI_GetPacketSize>
 800af78:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a7b      	ldr	r2, [pc, #492]	@ (800b16c <HAL_SPI_Init+0x23c>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d00c      	beq.n	800af9e <HAL_SPI_Init+0x6e>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a79      	ldr	r2, [pc, #484]	@ (800b170 <HAL_SPI_Init+0x240>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d007      	beq.n	800af9e <HAL_SPI_Init+0x6e>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a78      	ldr	r2, [pc, #480]	@ (800b174 <HAL_SPI_Init+0x244>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d002      	beq.n	800af9e <HAL_SPI_Init+0x6e>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2b08      	cmp	r3, #8
 800af9c:	d811      	bhi.n	800afc2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800afa2:	4a72      	ldr	r2, [pc, #456]	@ (800b16c <HAL_SPI_Init+0x23c>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d009      	beq.n	800afbc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a70      	ldr	r2, [pc, #448]	@ (800b170 <HAL_SPI_Init+0x240>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d004      	beq.n	800afbc <HAL_SPI_Init+0x8c>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a6f      	ldr	r2, [pc, #444]	@ (800b174 <HAL_SPI_Init+0x244>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d104      	bne.n	800afc6 <HAL_SPI_Init+0x96>
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2b10      	cmp	r3, #16
 800afc0:	d901      	bls.n	800afc6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	e0cd      	b.n	800b162 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d106      	bne.n	800afe0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7fc fab0 	bl	8007540 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2202      	movs	r2, #2
 800afe4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f022 0201 	bic.w	r2, r2, #1
 800aff6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b002:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b00c:	d119      	bne.n	800b042 <HAL_SPI_Init+0x112>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b016:	d103      	bne.n	800b020 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d008      	beq.n	800b032 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10c      	bne.n	800b042 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b02c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b030:	d107      	bne.n	800b042 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b040:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00f      	beq.n	800b06e <HAL_SPI_Init+0x13e>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	2b06      	cmp	r3, #6
 800b054:	d90b      	bls.n	800b06e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	430a      	orrs	r2, r1
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	e007      	b.n	800b07e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b07c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	69da      	ldr	r2, [r3, #28]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b086:	431a      	orrs	r2, r3
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	431a      	orrs	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b090:	ea42 0103 	orr.w	r1, r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	68da      	ldr	r2, [r3, #12]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	430a      	orrs	r2, r1
 800b09e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a8:	431a      	orrs	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ae:	431a      	orrs	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	431a      	orrs	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	695b      	ldr	r3, [r3, #20]
 800b0c0:	431a      	orrs	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	431a      	orrs	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	431a      	orrs	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0d2:	431a      	orrs	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	431a      	orrs	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b0de:	ea42 0103 	orr.w	r1, r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	430a      	orrs	r2, r1
 800b0ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d113      	bne.n	800b11e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b108:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b11c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f022 0201 	bic.w	r2, r2, #1
 800b12c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00a      	beq.n	800b150 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	430a      	orrs	r2, r1
 800b14e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	40013000 	.word	0x40013000
 800b170:	40003800 	.word	0x40003800
 800b174:	40003c00 	.word	0x40003c00

0800b178 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b08e      	sub	sp, #56	@ 0x38
 800b17c:	af02      	add	r7, sp, #8
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	607a      	str	r2, [r7, #4]
 800b184:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	3320      	adds	r3, #32
 800b18c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	3330      	adds	r3, #48	@ 0x30
 800b194:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b19a:	095b      	lsrs	r3, r3, #5
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	3301      	adds	r3, #1
 800b1a0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b1a2:	f7fc fda7 	bl	8007cf4 <HAL_GetTick>
 800b1a6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800b1a8:	887b      	ldrh	r3, [r7, #2]
 800b1aa:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800b1ac:	887b      	ldrh	r3, [r7, #2]
 800b1ae:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d001      	beq.n	800b1c0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800b1bc:	2302      	movs	r3, #2
 800b1be:	e310      	b.n	800b7e2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d005      	beq.n	800b1d2 <HAL_SPI_TransmitReceive+0x5a>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d002      	beq.n	800b1d2 <HAL_SPI_TransmitReceive+0x5a>
 800b1cc:	887b      	ldrh	r3, [r7, #2]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d101      	bne.n	800b1d6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e305      	b.n	800b7e2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d101      	bne.n	800b1e4 <HAL_SPI_TransmitReceive+0x6c>
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	e2fe      	b.n	800b7e2 <HAL_SPI_TransmitReceive+0x66a>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2205      	movs	r2, #5
 800b1f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	887a      	ldrh	r2, [r7, #2]
 800b206:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	887a      	ldrh	r2, [r7, #2]
 800b20e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	887a      	ldrh	r2, [r7, #2]
 800b21c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	887a      	ldrh	r2, [r7, #2]
 800b224:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2200      	movs	r2, #0
 800b232:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68da      	ldr	r2, [r3, #12]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800b242:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a70      	ldr	r2, [pc, #448]	@ (800b40c <HAL_SPI_TransmitReceive+0x294>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d009      	beq.n	800b262 <HAL_SPI_TransmitReceive+0xea>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a6f      	ldr	r2, [pc, #444]	@ (800b410 <HAL_SPI_TransmitReceive+0x298>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d004      	beq.n	800b262 <HAL_SPI_TransmitReceive+0xea>
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a6d      	ldr	r2, [pc, #436]	@ (800b414 <HAL_SPI_TransmitReceive+0x29c>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d102      	bne.n	800b268 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800b262:	2310      	movs	r3, #16
 800b264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b266:	e001      	b.n	800b26c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800b268:	2308      	movs	r3, #8
 800b26a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	685a      	ldr	r2, [r3, #4]
 800b272:	4b69      	ldr	r3, [pc, #420]	@ (800b418 <HAL_SPI_TransmitReceive+0x2a0>)
 800b274:	4013      	ands	r3, r2
 800b276:	8879      	ldrh	r1, [r7, #2]
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	6812      	ldr	r2, [r2, #0]
 800b27c:	430b      	orrs	r3, r1
 800b27e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f042 0201 	orr.w	r2, r2, #1
 800b28e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b298:	d107      	bne.n	800b2aa <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b2a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	2b0f      	cmp	r3, #15
 800b2b0:	f240 80a2 	bls.w	800b3f8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800b2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b6:	089b      	lsrs	r3, r3, #2
 800b2b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b2ba:	e094      	b.n	800b3e6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	695b      	ldr	r3, [r3, #20]
 800b2c2:	f003 0302 	and.w	r3, r3, #2
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	d120      	bne.n	800b30c <HAL_SPI_TransmitReceive+0x194>
 800b2ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d01d      	beq.n	800b30c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b2d0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b2d2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d217      	bcs.n	800b30c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	6812      	ldr	r2, [r2, #0]
 800b2e6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2ec:	1d1a      	adds	r2, r3, #4
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b30a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	695b      	ldr	r3, [r3, #20]
 800b312:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b314:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b316:	2b00      	cmp	r3, #0
 800b318:	d065      	beq.n	800b3e6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	695b      	ldr	r3, [r3, #20]
 800b320:	f003 0301 	and.w	r3, r3, #1
 800b324:	2b01      	cmp	r3, #1
 800b326:	d118      	bne.n	800b35a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b330:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b332:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b338:	1d1a      	adds	r2, r3, #4
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b344:	b29b      	uxth	r3, r3
 800b346:	3b01      	subs	r3, #1
 800b348:	b29a      	uxth	r2, r3
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b356:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b358:	e045      	b.n	800b3e6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b35a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b35c:	8bfb      	ldrh	r3, [r7, #30]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d21d      	bcs.n	800b39e <HAL_SPI_TransmitReceive+0x226>
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d018      	beq.n	800b39e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b374:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b376:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b37c:	1d1a      	adds	r2, r3, #4
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b388:	b29b      	uxth	r3, r3
 800b38a:	3b01      	subs	r3, #1
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b39a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b39c:	e023      	b.n	800b3e6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b39e:	f7fc fca9 	bl	8007cf4 <HAL_GetTick>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	1ad3      	subs	r3, r2, r3
 800b3a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d803      	bhi.n	800b3b6 <HAL_SPI_TransmitReceive+0x23e>
 800b3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b4:	d102      	bne.n	800b3bc <HAL_SPI_TransmitReceive+0x244>
 800b3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d114      	bne.n	800b3e6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f000 fc2f 	bl	800bc20 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	e1fd      	b.n	800b7e2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b3e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f47f af67 	bne.w	800b2bc <HAL_SPI_TransmitReceive+0x144>
 800b3ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f47f af63 	bne.w	800b2bc <HAL_SPI_TransmitReceive+0x144>
 800b3f6:	e1ce      	b.n	800b796 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	2b07      	cmp	r3, #7
 800b3fe:	f240 81c2 	bls.w	800b786 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800b402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b404:	085b      	lsrs	r3, r3, #1
 800b406:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b408:	e0c9      	b.n	800b59e <HAL_SPI_TransmitReceive+0x426>
 800b40a:	bf00      	nop
 800b40c:	40013000 	.word	0x40013000
 800b410:	40003800 	.word	0x40003800
 800b414:	40003c00 	.word	0x40003c00
 800b418:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	695b      	ldr	r3, [r3, #20]
 800b422:	f003 0302 	and.w	r3, r3, #2
 800b426:	2b02      	cmp	r3, #2
 800b428:	d11f      	bne.n	800b46a <HAL_SPI_TransmitReceive+0x2f2>
 800b42a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d01c      	beq.n	800b46a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b430:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b432:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b436:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b438:	429a      	cmp	r2, r3
 800b43a:	d216      	bcs.n	800b46a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b440:	881a      	ldrh	r2, [r3, #0]
 800b442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b444:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b44a:	1c9a      	adds	r2, r3, #2
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b456:	b29b      	uxth	r3, r3
 800b458:	3b01      	subs	r3, #1
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b468:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	695b      	ldr	r3, [r3, #20]
 800b470:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b472:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b474:	2b00      	cmp	r3, #0
 800b476:	f000 8092 	beq.w	800b59e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	695b      	ldr	r3, [r3, #20]
 800b480:	f003 0301 	and.w	r3, r3, #1
 800b484:	2b01      	cmp	r3, #1
 800b486:	d118      	bne.n	800b4ba <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b48c:	6a3a      	ldr	r2, [r7, #32]
 800b48e:	8812      	ldrh	r2, [r2, #0]
 800b490:	b292      	uxth	r2, r2
 800b492:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b498:	1c9a      	adds	r2, r3, #2
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b4b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b4b8:	e071      	b.n	800b59e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b4ba:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b4bc:	8bfb      	ldrh	r3, [r7, #30]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d228      	bcs.n	800b514 <HAL_SPI_TransmitReceive+0x39c>
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d023      	beq.n	800b514 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4d0:	6a3a      	ldr	r2, [r7, #32]
 800b4d2:	8812      	ldrh	r2, [r2, #0]
 800b4d4:	b292      	uxth	r2, r2
 800b4d6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4dc:	1c9a      	adds	r2, r3, #2
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4e6:	6a3a      	ldr	r2, [r7, #32]
 800b4e8:	8812      	ldrh	r2, [r2, #0]
 800b4ea:	b292      	uxth	r2, r2
 800b4ec:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4f2:	1c9a      	adds	r2, r3, #2
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	3b02      	subs	r3, #2
 800b502:	b29a      	uxth	r2, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b510:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b512:	e044      	b.n	800b59e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b514:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b516:	2b01      	cmp	r3, #1
 800b518:	d11d      	bne.n	800b556 <HAL_SPI_TransmitReceive+0x3de>
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b520:	2b00      	cmp	r3, #0
 800b522:	d018      	beq.n	800b556 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b528:	6a3a      	ldr	r2, [r7, #32]
 800b52a:	8812      	ldrh	r2, [r2, #0]
 800b52c:	b292      	uxth	r2, r2
 800b52e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b534:	1c9a      	adds	r2, r3, #2
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b540:	b29b      	uxth	r3, r3
 800b542:	3b01      	subs	r3, #1
 800b544:	b29a      	uxth	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b552:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b554:	e023      	b.n	800b59e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b556:	f7fc fbcd 	bl	8007cf4 <HAL_GetTick>
 800b55a:	4602      	mov	r2, r0
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b562:	429a      	cmp	r2, r3
 800b564:	d803      	bhi.n	800b56e <HAL_SPI_TransmitReceive+0x3f6>
 800b566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56c:	d102      	bne.n	800b574 <HAL_SPI_TransmitReceive+0x3fc>
 800b56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b570:	2b00      	cmp	r3, #0
 800b572:	d114      	bne.n	800b59e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f000 fb53 	bl	800bc20 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b580:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2201      	movs	r2, #1
 800b58e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2200      	movs	r2, #0
 800b596:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b59a:	2303      	movs	r3, #3
 800b59c:	e121      	b.n	800b7e2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b59e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f47f af3b 	bne.w	800b41c <HAL_SPI_TransmitReceive+0x2a4>
 800b5a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f47f af37 	bne.w	800b41c <HAL_SPI_TransmitReceive+0x2a4>
 800b5ae:	e0f2      	b.n	800b796 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	695b      	ldr	r3, [r3, #20]
 800b5b6:	f003 0302 	and.w	r3, r3, #2
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d121      	bne.n	800b602 <HAL_SPI_TransmitReceive+0x48a>
 800b5be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d01e      	beq.n	800b602 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b5c4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b5c6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ca:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d218      	bcs.n	800b602 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	3320      	adds	r3, #32
 800b5da:	7812      	ldrb	r2, [r2, #0]
 800b5dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5e2:	1c5a      	adds	r2, r3, #1
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b600:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	695b      	ldr	r3, [r3, #20]
 800b608:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b60a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f000 80ba 	beq.w	800b786 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	695b      	ldr	r3, [r3, #20]
 800b618:	f003 0301 	and.w	r3, r3, #1
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d11b      	bne.n	800b658 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b62c:	7812      	ldrb	r2, [r2, #0]
 800b62e:	b2d2      	uxtb	r2, r2
 800b630:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b636:	1c5a      	adds	r2, r3, #1
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b642:	b29b      	uxth	r3, r3
 800b644:	3b01      	subs	r3, #1
 800b646:	b29a      	uxth	r2, r3
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b654:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b656:	e096      	b.n	800b786 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b658:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b65a:	8bfb      	ldrh	r3, [r7, #30]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d24a      	bcs.n	800b6f6 <HAL_SPI_TransmitReceive+0x57e>
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b666:	2b00      	cmp	r3, #0
 800b668:	d045      	beq.n	800b6f6 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b676:	7812      	ldrb	r2, [r2, #0]
 800b678:	b2d2      	uxtb	r2, r2
 800b67a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b680:	1c5a      	adds	r2, r3, #1
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b692:	7812      	ldrb	r2, [r2, #0]
 800b694:	b2d2      	uxtb	r2, r2
 800b696:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b69c:	1c5a      	adds	r2, r3, #1
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6ae:	7812      	ldrb	r2, [r2, #0]
 800b6b0:	b2d2      	uxtb	r2, r2
 800b6b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6b8:	1c5a      	adds	r2, r3, #1
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6ca:	7812      	ldrb	r2, [r2, #0]
 800b6cc:	b2d2      	uxtb	r2, r2
 800b6ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6d4:	1c5a      	adds	r2, r3, #1
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	3b04      	subs	r3, #4
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b6f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b6f4:	e047      	b.n	800b786 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b6f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b6f8:	2b03      	cmp	r3, #3
 800b6fa:	d820      	bhi.n	800b73e <HAL_SPI_TransmitReceive+0x5c6>
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800b702:	2b00      	cmp	r3, #0
 800b704:	d01b      	beq.n	800b73e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b712:	7812      	ldrb	r2, [r2, #0]
 800b714:	b2d2      	uxtb	r2, r2
 800b716:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b71c:	1c5a      	adds	r2, r3, #1
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b728:	b29b      	uxth	r3, r3
 800b72a:	3b01      	subs	r3, #1
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b73a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b73c:	e023      	b.n	800b786 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b73e:	f7fc fad9 	bl	8007cf4 <HAL_GetTick>
 800b742:	4602      	mov	r2, r0
 800b744:	69bb      	ldr	r3, [r7, #24]
 800b746:	1ad3      	subs	r3, r2, r3
 800b748:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d803      	bhi.n	800b756 <HAL_SPI_TransmitReceive+0x5de>
 800b74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b754:	d102      	bne.n	800b75c <HAL_SPI_TransmitReceive+0x5e4>
 800b756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d114      	bne.n	800b786 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b75c:	68f8      	ldr	r0, [r7, #12]
 800b75e:	f000 fa5f 	bl	800bc20 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b768:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2201      	movs	r2, #1
 800b776:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b782:	2303      	movs	r3, #3
 800b784:	e02d      	b.n	800b7e2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b786:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f47f af11 	bne.w	800b5b0 <HAL_SPI_TransmitReceive+0x438>
 800b78e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b790:	2b00      	cmp	r3, #0
 800b792:	f47f af0d 	bne.w	800b5b0 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79c:	2200      	movs	r2, #0
 800b79e:	2108      	movs	r1, #8
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f000 fadd 	bl	800bd60 <SPI_WaitOnFlagUntilTimeout>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d007      	beq.n	800b7bc <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7b2:	f043 0220 	orr.w	r2, r3, #32
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f000 fa2f 	bl	800bc20 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e000      	b.n	800b7e2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800b7e0:	2300      	movs	r3, #0
  }
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3730      	adds	r7, #48	@ 0x30
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop

0800b7ec <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b08a      	sub	sp, #40	@ 0x28
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b804:	6a3a      	ldr	r2, [r7, #32]
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	4013      	ands	r3, r2
 800b80a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b814:	2300      	movs	r3, #0
 800b816:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b81e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	3330      	adds	r3, #48	@ 0x30
 800b826:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d010      	beq.n	800b854 <HAL_SPI_IRQHandler+0x68>
 800b832:	6a3b      	ldr	r3, [r7, #32]
 800b834:	f003 0308 	and.w	r3, r3, #8
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00b      	beq.n	800b854 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	699a      	ldr	r2, [r3, #24]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b84a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f9c3 	bl	800bbd8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800b852:	e192      	b.n	800bb7a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d113      	bne.n	800b886 <HAL_SPI_IRQHandler+0x9a>
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	f003 0320 	and.w	r3, r3, #32
 800b864:	2b00      	cmp	r3, #0
 800b866:	d10e      	bne.n	800b886 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d009      	beq.n	800b886 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	4798      	blx	r3
    handled = 1UL;
 800b882:	2301      	movs	r3, #1
 800b884:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10f      	bne.n	800b8b0 <HAL_SPI_IRQHandler+0xc4>
 800b890:	69bb      	ldr	r3, [r7, #24]
 800b892:	f003 0301 	and.w	r3, r3, #1
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00a      	beq.n	800b8b0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d105      	bne.n	800b8b0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	4798      	blx	r3
    handled = 1UL;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	f003 0320 	and.w	r3, r3, #32
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10f      	bne.n	800b8da <HAL_SPI_IRQHandler+0xee>
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	f003 0302 	and.w	r3, r3, #2
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d00a      	beq.n	800b8da <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d105      	bne.n	800b8da <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	4798      	blx	r3
    handled = 1UL;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800b8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f040 8147 	bne.w	800bb70 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	f003 0308 	and.w	r3, r3, #8
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	f000 808b 	beq.w	800ba04 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	699a      	ldr	r2, [r3, #24]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f042 0208 	orr.w	r2, r2, #8
 800b8fc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	699a      	ldr	r2, [r3, #24]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f042 0210 	orr.w	r2, r2, #16
 800b90c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	699a      	ldr	r2, [r3, #24]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b91c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	691a      	ldr	r2, [r3, #16]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f022 0208 	bic.w	r2, r2, #8
 800b92c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d13d      	bne.n	800b9b8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800b93c:	e036      	b.n	800b9ac <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	2b0f      	cmp	r3, #15
 800b944:	d90b      	bls.n	800b95e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b94e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b950:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b956:	1d1a      	adds	r2, r3, #4
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	665a      	str	r2, [r3, #100]	@ 0x64
 800b95c:	e01d      	b.n	800b99a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	2b07      	cmp	r3, #7
 800b964:	d90b      	bls.n	800b97e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	8812      	ldrh	r2, [r2, #0]
 800b96e:	b292      	uxth	r2, r2
 800b970:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b976:	1c9a      	adds	r2, r3, #2
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	665a      	str	r2, [r3, #100]	@ 0x64
 800b97c:	e00d      	b.n	800b99a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b98a:	7812      	ldrb	r2, [r2, #0]
 800b98c:	b2d2      	uxtb	r2, r2
 800b98e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b994:	1c5a      	adds	r2, r3, #1
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9a0:	b29b      	uxth	r3, r3
 800b9a2:	3b01      	subs	r3, #1
 800b9a4:	b29a      	uxth	r2, r3
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d1c2      	bne.n	800b93e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 f931 	bl	800bc20 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d003      	beq.n	800b9d8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 f8f7 	bl	800bbc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b9d6:	e0d0      	b.n	800bb7a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b9d8:	7cfb      	ldrb	r3, [r7, #19]
 800b9da:	2b05      	cmp	r3, #5
 800b9dc:	d103      	bne.n	800b9e6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 f8e6 	bl	800bbb0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800b9e4:	e0c6      	b.n	800bb74 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b9e6:	7cfb      	ldrb	r3, [r7, #19]
 800b9e8:	2b04      	cmp	r3, #4
 800b9ea:	d103      	bne.n	800b9f4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 f8d5 	bl	800bb9c <HAL_SPI_RxCpltCallback>
    return;
 800b9f2:	e0bf      	b.n	800bb74 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b9f4:	7cfb      	ldrb	r3, [r7, #19]
 800b9f6:	2b03      	cmp	r3, #3
 800b9f8:	f040 80bc 	bne.w	800bb74 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 f8c3 	bl	800bb88 <HAL_SPI_TxCpltCallback>
    return;
 800ba02:	e0b7      	b.n	800bb74 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f000 80b5 	beq.w	800bb7a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00f      	beq.n	800ba3a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba20:	f043 0204 	orr.w	r2, r3, #4
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	699a      	ldr	r2, [r3, #24]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba38:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00f      	beq.n	800ba64 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba4a:	f043 0201 	orr.w	r2, r3, #1
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	699a      	ldr	r2, [r3, #24]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba62:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00f      	beq.n	800ba8e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba74:	f043 0208 	orr.w	r2, r3, #8
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	699a      	ldr	r2, [r3, #24]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba8c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	f003 0320 	and.w	r3, r3, #32
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00f      	beq.n	800bab8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba9e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	699a      	ldr	r2, [r3, #24]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f042 0220 	orr.w	r2, r2, #32
 800bab6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d05a      	beq.n	800bb78 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f022 0201 	bic.w	r2, r2, #1
 800bad0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	6919      	ldr	r1, [r3, #16]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	4b28      	ldr	r3, [pc, #160]	@ (800bb80 <HAL_SPI_IRQHandler+0x394>)
 800bade:	400b      	ands	r3, r1
 800bae0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bae8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800baec:	d138      	bne.n	800bb60 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	689a      	ldr	r2, [r3, #8]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bafc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d013      	beq.n	800bb2e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb0a:	4a1e      	ldr	r2, [pc, #120]	@ (800bb84 <HAL_SPI_IRQHandler+0x398>)
 800bb0c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fc fa8e 	bl	8008034 <HAL_DMA_Abort_IT>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d007      	beq.n	800bb2e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d020      	beq.n	800bb78 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bb3a:	4a12      	ldr	r2, [pc, #72]	@ (800bb84 <HAL_SPI_IRQHandler+0x398>)
 800bb3c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fc fa76 	bl	8008034 <HAL_DMA_Abort_IT>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d014      	beq.n	800bb78 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bb5e:	e00b      	b.n	800bb78 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f82b 	bl	800bbc4 <HAL_SPI_ErrorCallback>
    return;
 800bb6e:	e003      	b.n	800bb78 <HAL_SPI_IRQHandler+0x38c>
    return;
 800bb70:	bf00      	nop
 800bb72:	e002      	b.n	800bb7a <HAL_SPI_IRQHandler+0x38e>
    return;
 800bb74:	bf00      	nop
 800bb76:	e000      	b.n	800bb7a <HAL_SPI_IRQHandler+0x38e>
    return;
 800bb78:	bf00      	nop
  }
}
 800bb7a:	3728      	adds	r7, #40	@ 0x28
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	fffffc94 	.word	0xfffffc94
 800bb84:	0800bbed 	.word	0x0800bbed

0800bb88 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800bb90:	bf00      	nop
 800bb92:	370c      	adds	r7, #12
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800bba4:	bf00      	nop
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800bbb8:	bf00      	nop
 800bbba:	370c      	adds	r7, #12
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr

0800bbc4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bbcc:	bf00      	nop
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800bbe0:	bf00      	nop
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbf8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f7ff ffd6 	bl	800bbc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bc18:	bf00      	nop
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b085      	sub	sp, #20
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	695b      	ldr	r3, [r3, #20]
 800bc2e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	699a      	ldr	r2, [r3, #24]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f042 0208 	orr.w	r2, r2, #8
 800bc3e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	699a      	ldr	r2, [r3, #24]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f042 0210 	orr.w	r2, r2, #16
 800bc4e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f022 0201 	bic.w	r2, r2, #1
 800bc5e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	6919      	ldr	r1, [r3, #16]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	4b3c      	ldr	r3, [pc, #240]	@ (800bd5c <SPI_CloseTransfer+0x13c>)
 800bc6c:	400b      	ands	r3, r1
 800bc6e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	689a      	ldr	r2, [r3, #8]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bc7e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	2b04      	cmp	r3, #4
 800bc8a:	d014      	beq.n	800bcb6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f003 0320 	and.w	r3, r3, #32
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00f      	beq.n	800bcb6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc9c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	699a      	ldr	r2, [r3, #24]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f042 0220 	orr.w	r2, r2, #32
 800bcb4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	2b03      	cmp	r3, #3
 800bcc0:	d014      	beq.n	800bcec <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00f      	beq.n	800bcec <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bcd2:	f043 0204 	orr.w	r2, r3, #4
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	699a      	ldr	r2, [r3, #24]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bcea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00f      	beq.n	800bd16 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bcfc:	f043 0201 	orr.w	r2, r3, #1
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	699a      	ldr	r2, [r3, #24]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd14:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00f      	beq.n	800bd40 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd26:	f043 0208 	orr.w	r2, r3, #8
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	699a      	ldr	r2, [r3, #24]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bd3e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bd50:	bf00      	nop
 800bd52:	3714      	adds	r7, #20
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	fffffc90 	.word	0xfffffc90

0800bd60 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	603b      	str	r3, [r7, #0]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bd70:	e010      	b.n	800bd94 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd72:	f7fb ffbf 	bl	8007cf4 <HAL_GetTick>
 800bd76:	4602      	mov	r2, r0
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	683a      	ldr	r2, [r7, #0]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d803      	bhi.n	800bd8a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd88:	d102      	bne.n	800bd90 <SPI_WaitOnFlagUntilTimeout+0x30>
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d101      	bne.n	800bd94 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bd90:	2303      	movs	r3, #3
 800bd92:	e00f      	b.n	800bdb4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	695a      	ldr	r2, [r3, #20]
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	bf0c      	ite	eq
 800bda4:	2301      	moveq	r3, #1
 800bda6:	2300      	movne	r3, #0
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	461a      	mov	r2, r3
 800bdac:	79fb      	ldrb	r3, [r7, #7]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d0df      	beq.n	800bd72 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bdb2:	2300      	movs	r3, #0
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdc8:	095b      	lsrs	r3, r3, #5
 800bdca:	3301      	adds	r3, #1
 800bdcc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	68db      	ldr	r3, [r3, #12]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	3307      	adds	r3, #7
 800bdda:	08db      	lsrs	r3, r3, #3
 800bddc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	fb02 f303 	mul.w	r3, r2, r3
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3714      	adds	r7, #20
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr

0800bdf2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bdf2:	b580      	push	{r7, lr}
 800bdf4:	b082      	sub	sp, #8
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d101      	bne.n	800be04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	e049      	b.n	800be98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d106      	bne.n	800be1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7fb fe7b 	bl	8007b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2202      	movs	r2, #2
 800be22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	3304      	adds	r3, #4
 800be2e:	4619      	mov	r1, r3
 800be30:	4610      	mov	r0, r2
 800be32:	f000 f9df 	bl	800c1f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2201      	movs	r2, #1
 800be3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2201      	movs	r2, #1
 800be42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2201      	movs	r2, #1
 800be4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2201      	movs	r2, #1
 800be52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2201      	movs	r2, #1
 800be5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2201      	movs	r2, #1
 800be62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2201      	movs	r2, #1
 800be6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2201      	movs	r2, #1
 800be72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2201      	movs	r2, #1
 800be7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2201      	movs	r2, #1
 800be82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2201      	movs	r2, #1
 800be8a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2201      	movs	r2, #1
 800be92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3708      	adds	r7, #8
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d001      	beq.n	800beb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800beb4:	2301      	movs	r3, #1
 800beb6:	e04c      	b.n	800bf52 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2202      	movs	r2, #2
 800bebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a26      	ldr	r2, [pc, #152]	@ (800bf60 <HAL_TIM_Base_Start+0xc0>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d022      	beq.n	800bf10 <HAL_TIM_Base_Start+0x70>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bed2:	d01d      	beq.n	800bf10 <HAL_TIM_Base_Start+0x70>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a22      	ldr	r2, [pc, #136]	@ (800bf64 <HAL_TIM_Base_Start+0xc4>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d018      	beq.n	800bf10 <HAL_TIM_Base_Start+0x70>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a21      	ldr	r2, [pc, #132]	@ (800bf68 <HAL_TIM_Base_Start+0xc8>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d013      	beq.n	800bf10 <HAL_TIM_Base_Start+0x70>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a1f      	ldr	r2, [pc, #124]	@ (800bf6c <HAL_TIM_Base_Start+0xcc>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d00e      	beq.n	800bf10 <HAL_TIM_Base_Start+0x70>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a1e      	ldr	r2, [pc, #120]	@ (800bf70 <HAL_TIM_Base_Start+0xd0>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d009      	beq.n	800bf10 <HAL_TIM_Base_Start+0x70>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a1c      	ldr	r2, [pc, #112]	@ (800bf74 <HAL_TIM_Base_Start+0xd4>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d004      	beq.n	800bf10 <HAL_TIM_Base_Start+0x70>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4a1b      	ldr	r2, [pc, #108]	@ (800bf78 <HAL_TIM_Base_Start+0xd8>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d115      	bne.n	800bf3c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	689a      	ldr	r2, [r3, #8]
 800bf16:	4b19      	ldr	r3, [pc, #100]	@ (800bf7c <HAL_TIM_Base_Start+0xdc>)
 800bf18:	4013      	ands	r3, r2
 800bf1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2b06      	cmp	r3, #6
 800bf20:	d015      	beq.n	800bf4e <HAL_TIM_Base_Start+0xae>
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf28:	d011      	beq.n	800bf4e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f042 0201 	orr.w	r2, r2, #1
 800bf38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf3a:	e008      	b.n	800bf4e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f042 0201 	orr.w	r2, r2, #1
 800bf4a:	601a      	str	r2, [r3, #0]
 800bf4c:	e000      	b.n	800bf50 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3714      	adds	r7, #20
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	40010000 	.word	0x40010000
 800bf64:	40000400 	.word	0x40000400
 800bf68:	40000800 	.word	0x40000800
 800bf6c:	40000c00 	.word	0x40000c00
 800bf70:	40010400 	.word	0x40010400
 800bf74:	40001800 	.word	0x40001800
 800bf78:	40014000 	.word	0x40014000
 800bf7c:	00010007 	.word	0x00010007

0800bf80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	f003 0302 	and.w	r3, r3, #2
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d020      	beq.n	800bfe4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f003 0302 	and.w	r3, r3, #2
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d01b      	beq.n	800bfe4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f06f 0202 	mvn.w	r2, #2
 800bfb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	699b      	ldr	r3, [r3, #24]
 800bfc2:	f003 0303 	and.w	r3, r3, #3
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d003      	beq.n	800bfd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f8f3 	bl	800c1b6 <HAL_TIM_IC_CaptureCallback>
 800bfd0:	e005      	b.n	800bfde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 f8e5 	bl	800c1a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 f8f6 	bl	800c1ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	f003 0304 	and.w	r3, r3, #4
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d020      	beq.n	800c030 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f003 0304 	and.w	r3, r3, #4
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d01b      	beq.n	800c030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f06f 0204 	mvn.w	r2, #4
 800c000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2202      	movs	r2, #2
 800c006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	699b      	ldr	r3, [r3, #24]
 800c00e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c012:	2b00      	cmp	r3, #0
 800c014:	d003      	beq.n	800c01e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 f8cd 	bl	800c1b6 <HAL_TIM_IC_CaptureCallback>
 800c01c:	e005      	b.n	800c02a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 f8bf 	bl	800c1a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 f8d0 	bl	800c1ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	f003 0308 	and.w	r3, r3, #8
 800c036:	2b00      	cmp	r3, #0
 800c038:	d020      	beq.n	800c07c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f003 0308 	and.w	r3, r3, #8
 800c040:	2b00      	cmp	r3, #0
 800c042:	d01b      	beq.n	800c07c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f06f 0208 	mvn.w	r2, #8
 800c04c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2204      	movs	r2, #4
 800c052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	69db      	ldr	r3, [r3, #28]
 800c05a:	f003 0303 	and.w	r3, r3, #3
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d003      	beq.n	800c06a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 f8a7 	bl	800c1b6 <HAL_TIM_IC_CaptureCallback>
 800c068:	e005      	b.n	800c076 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 f899 	bl	800c1a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 f8aa 	bl	800c1ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2200      	movs	r2, #0
 800c07a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	f003 0310 	and.w	r3, r3, #16
 800c082:	2b00      	cmp	r3, #0
 800c084:	d020      	beq.n	800c0c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f003 0310 	and.w	r3, r3, #16
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d01b      	beq.n	800c0c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f06f 0210 	mvn.w	r2, #16
 800c098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2208      	movs	r2, #8
 800c09e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	69db      	ldr	r3, [r3, #28]
 800c0a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d003      	beq.n	800c0b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 f881 	bl	800c1b6 <HAL_TIM_IC_CaptureCallback>
 800c0b4:	e005      	b.n	800c0c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 f873 	bl	800c1a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 f884 	bl	800c1ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	f003 0301 	and.w	r3, r3, #1
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00c      	beq.n	800c0ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f003 0301 	and.w	r3, r3, #1
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d007      	beq.n	800c0ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f06f 0201 	mvn.w	r2, #1
 800c0e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 f851 	bl	800c18e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d104      	bne.n	800c100 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00c      	beq.n	800c11a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c106:	2b00      	cmp	r3, #0
 800c108:	d007      	beq.n	800c11a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 f9ab 	bl	800c470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c120:	2b00      	cmp	r3, #0
 800c122:	d00c      	beq.n	800c13e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d007      	beq.n	800c13e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 f9a3 	bl	800c484 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c144:	2b00      	cmp	r3, #0
 800c146:	d00c      	beq.n	800c162 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d007      	beq.n	800c162 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c15a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 f83e 	bl	800c1de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	f003 0320 	and.w	r3, r3, #32
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d00c      	beq.n	800c186 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f003 0320 	and.w	r3, r3, #32
 800c172:	2b00      	cmp	r3, #0
 800c174:	d007      	beq.n	800c186 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f06f 0220 	mvn.w	r2, #32
 800c17e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 f96b 	bl	800c45c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c186:	bf00      	nop
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c18e:	b480      	push	{r7}
 800c190:	b083      	sub	sp, #12
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c196:	bf00      	nop
 800c198:	370c      	adds	r7, #12
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr

0800c1a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1a2:	b480      	push	{r7}
 800c1a4:	b083      	sub	sp, #12
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1aa:	bf00      	nop
 800c1ac:	370c      	adds	r7, #12
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr

0800c1b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c1b6:	b480      	push	{r7}
 800c1b8:	b083      	sub	sp, #12
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c1be:	bf00      	nop
 800c1c0:	370c      	adds	r7, #12
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr

0800c1ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	b083      	sub	sp, #12
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c1d2:	bf00      	nop
 800c1d4:	370c      	adds	r7, #12
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr

0800c1de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	b083      	sub	sp, #12
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c1e6:	bf00      	nop
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr
	...

0800c1f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	4a46      	ldr	r2, [pc, #280]	@ (800c320 <TIM_Base_SetConfig+0x12c>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d013      	beq.n	800c234 <TIM_Base_SetConfig+0x40>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c212:	d00f      	beq.n	800c234 <TIM_Base_SetConfig+0x40>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	4a43      	ldr	r2, [pc, #268]	@ (800c324 <TIM_Base_SetConfig+0x130>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d00b      	beq.n	800c234 <TIM_Base_SetConfig+0x40>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	4a42      	ldr	r2, [pc, #264]	@ (800c328 <TIM_Base_SetConfig+0x134>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d007      	beq.n	800c234 <TIM_Base_SetConfig+0x40>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	4a41      	ldr	r2, [pc, #260]	@ (800c32c <TIM_Base_SetConfig+0x138>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d003      	beq.n	800c234 <TIM_Base_SetConfig+0x40>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a40      	ldr	r2, [pc, #256]	@ (800c330 <TIM_Base_SetConfig+0x13c>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d108      	bne.n	800c246 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c23a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	68fa      	ldr	r2, [r7, #12]
 800c242:	4313      	orrs	r3, r2
 800c244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4a35      	ldr	r2, [pc, #212]	@ (800c320 <TIM_Base_SetConfig+0x12c>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d01f      	beq.n	800c28e <TIM_Base_SetConfig+0x9a>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c254:	d01b      	beq.n	800c28e <TIM_Base_SetConfig+0x9a>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	4a32      	ldr	r2, [pc, #200]	@ (800c324 <TIM_Base_SetConfig+0x130>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d017      	beq.n	800c28e <TIM_Base_SetConfig+0x9a>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4a31      	ldr	r2, [pc, #196]	@ (800c328 <TIM_Base_SetConfig+0x134>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d013      	beq.n	800c28e <TIM_Base_SetConfig+0x9a>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4a30      	ldr	r2, [pc, #192]	@ (800c32c <TIM_Base_SetConfig+0x138>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d00f      	beq.n	800c28e <TIM_Base_SetConfig+0x9a>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4a2f      	ldr	r2, [pc, #188]	@ (800c330 <TIM_Base_SetConfig+0x13c>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d00b      	beq.n	800c28e <TIM_Base_SetConfig+0x9a>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	4a2e      	ldr	r2, [pc, #184]	@ (800c334 <TIM_Base_SetConfig+0x140>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d007      	beq.n	800c28e <TIM_Base_SetConfig+0x9a>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4a2d      	ldr	r2, [pc, #180]	@ (800c338 <TIM_Base_SetConfig+0x144>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d003      	beq.n	800c28e <TIM_Base_SetConfig+0x9a>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4a2c      	ldr	r2, [pc, #176]	@ (800c33c <TIM_Base_SetConfig+0x148>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d108      	bne.n	800c2a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	695b      	ldr	r3, [r3, #20]
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	68fa      	ldr	r2, [r7, #12]
 800c2b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	689a      	ldr	r2, [r3, #8]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	4a16      	ldr	r2, [pc, #88]	@ (800c320 <TIM_Base_SetConfig+0x12c>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d00f      	beq.n	800c2ec <TIM_Base_SetConfig+0xf8>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	4a18      	ldr	r2, [pc, #96]	@ (800c330 <TIM_Base_SetConfig+0x13c>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d00b      	beq.n	800c2ec <TIM_Base_SetConfig+0xf8>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	4a17      	ldr	r2, [pc, #92]	@ (800c334 <TIM_Base_SetConfig+0x140>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d007      	beq.n	800c2ec <TIM_Base_SetConfig+0xf8>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4a16      	ldr	r2, [pc, #88]	@ (800c338 <TIM_Base_SetConfig+0x144>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d003      	beq.n	800c2ec <TIM_Base_SetConfig+0xf8>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a15      	ldr	r2, [pc, #84]	@ (800c33c <TIM_Base_SetConfig+0x148>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d103      	bne.n	800c2f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	691a      	ldr	r2, [r3, #16]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	691b      	ldr	r3, [r3, #16]
 800c2fe:	f003 0301 	and.w	r3, r3, #1
 800c302:	2b01      	cmp	r3, #1
 800c304:	d105      	bne.n	800c312 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	691b      	ldr	r3, [r3, #16]
 800c30a:	f023 0201 	bic.w	r2, r3, #1
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	611a      	str	r2, [r3, #16]
  }
}
 800c312:	bf00      	nop
 800c314:	3714      	adds	r7, #20
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	40010000 	.word	0x40010000
 800c324:	40000400 	.word	0x40000400
 800c328:	40000800 	.word	0x40000800
 800c32c:	40000c00 	.word	0x40000c00
 800c330:	40010400 	.word	0x40010400
 800c334:	40014000 	.word	0x40014000
 800c338:	40014400 	.word	0x40014400
 800c33c:	40014800 	.word	0x40014800

0800c340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c350:	2b01      	cmp	r3, #1
 800c352:	d101      	bne.n	800c358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c354:	2302      	movs	r3, #2
 800c356:	e06d      	b.n	800c434 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2201      	movs	r2, #1
 800c35c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2202      	movs	r2, #2
 800c364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a30      	ldr	r2, [pc, #192]	@ (800c440 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d004      	beq.n	800c38c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4a2f      	ldr	r2, [pc, #188]	@ (800c444 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d108      	bne.n	800c39e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c392:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	68fa      	ldr	r2, [r7, #12]
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a20      	ldr	r2, [pc, #128]	@ (800c440 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d022      	beq.n	800c408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3ca:	d01d      	beq.n	800c408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a1d      	ldr	r2, [pc, #116]	@ (800c448 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d018      	beq.n	800c408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a1c      	ldr	r2, [pc, #112]	@ (800c44c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d013      	beq.n	800c408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a1a      	ldr	r2, [pc, #104]	@ (800c450 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d00e      	beq.n	800c408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4a15      	ldr	r2, [pc, #84]	@ (800c444 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d009      	beq.n	800c408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4a16      	ldr	r2, [pc, #88]	@ (800c454 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d004      	beq.n	800c408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4a15      	ldr	r2, [pc, #84]	@ (800c458 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d10c      	bne.n	800c422 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c40e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	68ba      	ldr	r2, [r7, #8]
 800c416:	4313      	orrs	r3, r2
 800c418:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2201      	movs	r2, #1
 800c426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2200      	movs	r2, #0
 800c42e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c432:	2300      	movs	r3, #0
}
 800c434:	4618      	mov	r0, r3
 800c436:	3714      	adds	r7, #20
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr
 800c440:	40010000 	.word	0x40010000
 800c444:	40010400 	.word	0x40010400
 800c448:	40000400 	.word	0x40000400
 800c44c:	40000800 	.word	0x40000800
 800c450:	40000c00 	.word	0x40000c00
 800c454:	40001800 	.word	0x40001800
 800c458:	40014000 	.word	0x40014000

0800c45c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c464:	bf00      	nop
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c470:	b480      	push	{r7}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c478:	bf00      	nop
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c48c:	bf00      	nop
 800c48e:	370c      	adds	r7, #12
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr

0800c498 <malloc>:
 800c498:	4b02      	ldr	r3, [pc, #8]	@ (800c4a4 <malloc+0xc>)
 800c49a:	4601      	mov	r1, r0
 800c49c:	6818      	ldr	r0, [r3, #0]
 800c49e:	f000 b82d 	b.w	800c4fc <_malloc_r>
 800c4a2:	bf00      	nop
 800c4a4:	240003c0 	.word	0x240003c0

0800c4a8 <free>:
 800c4a8:	4b02      	ldr	r3, [pc, #8]	@ (800c4b4 <free+0xc>)
 800c4aa:	4601      	mov	r1, r0
 800c4ac:	6818      	ldr	r0, [r3, #0]
 800c4ae:	f000 b903 	b.w	800c6b8 <_free_r>
 800c4b2:	bf00      	nop
 800c4b4:	240003c0 	.word	0x240003c0

0800c4b8 <sbrk_aligned>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	4e0f      	ldr	r6, [pc, #60]	@ (800c4f8 <sbrk_aligned+0x40>)
 800c4bc:	460c      	mov	r4, r1
 800c4be:	6831      	ldr	r1, [r6, #0]
 800c4c0:	4605      	mov	r5, r0
 800c4c2:	b911      	cbnz	r1, 800c4ca <sbrk_aligned+0x12>
 800c4c4:	f000 f8ae 	bl	800c624 <_sbrk_r>
 800c4c8:	6030      	str	r0, [r6, #0]
 800c4ca:	4621      	mov	r1, r4
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	f000 f8a9 	bl	800c624 <_sbrk_r>
 800c4d2:	1c43      	adds	r3, r0, #1
 800c4d4:	d103      	bne.n	800c4de <sbrk_aligned+0x26>
 800c4d6:	f04f 34ff 	mov.w	r4, #4294967295
 800c4da:	4620      	mov	r0, r4
 800c4dc:	bd70      	pop	{r4, r5, r6, pc}
 800c4de:	1cc4      	adds	r4, r0, #3
 800c4e0:	f024 0403 	bic.w	r4, r4, #3
 800c4e4:	42a0      	cmp	r0, r4
 800c4e6:	d0f8      	beq.n	800c4da <sbrk_aligned+0x22>
 800c4e8:	1a21      	subs	r1, r4, r0
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	f000 f89a 	bl	800c624 <_sbrk_r>
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	d1f2      	bne.n	800c4da <sbrk_aligned+0x22>
 800c4f4:	e7ef      	b.n	800c4d6 <sbrk_aligned+0x1e>
 800c4f6:	bf00      	nop
 800c4f8:	24000cf8 	.word	0x24000cf8

0800c4fc <_malloc_r>:
 800c4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c500:	1ccd      	adds	r5, r1, #3
 800c502:	f025 0503 	bic.w	r5, r5, #3
 800c506:	3508      	adds	r5, #8
 800c508:	2d0c      	cmp	r5, #12
 800c50a:	bf38      	it	cc
 800c50c:	250c      	movcc	r5, #12
 800c50e:	2d00      	cmp	r5, #0
 800c510:	4606      	mov	r6, r0
 800c512:	db01      	blt.n	800c518 <_malloc_r+0x1c>
 800c514:	42a9      	cmp	r1, r5
 800c516:	d904      	bls.n	800c522 <_malloc_r+0x26>
 800c518:	230c      	movs	r3, #12
 800c51a:	6033      	str	r3, [r6, #0]
 800c51c:	2000      	movs	r0, #0
 800c51e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c522:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5f8 <_malloc_r+0xfc>
 800c526:	f000 f869 	bl	800c5fc <__malloc_lock>
 800c52a:	f8d8 3000 	ldr.w	r3, [r8]
 800c52e:	461c      	mov	r4, r3
 800c530:	bb44      	cbnz	r4, 800c584 <_malloc_r+0x88>
 800c532:	4629      	mov	r1, r5
 800c534:	4630      	mov	r0, r6
 800c536:	f7ff ffbf 	bl	800c4b8 <sbrk_aligned>
 800c53a:	1c43      	adds	r3, r0, #1
 800c53c:	4604      	mov	r4, r0
 800c53e:	d158      	bne.n	800c5f2 <_malloc_r+0xf6>
 800c540:	f8d8 4000 	ldr.w	r4, [r8]
 800c544:	4627      	mov	r7, r4
 800c546:	2f00      	cmp	r7, #0
 800c548:	d143      	bne.n	800c5d2 <_malloc_r+0xd6>
 800c54a:	2c00      	cmp	r4, #0
 800c54c:	d04b      	beq.n	800c5e6 <_malloc_r+0xea>
 800c54e:	6823      	ldr	r3, [r4, #0]
 800c550:	4639      	mov	r1, r7
 800c552:	4630      	mov	r0, r6
 800c554:	eb04 0903 	add.w	r9, r4, r3
 800c558:	f000 f864 	bl	800c624 <_sbrk_r>
 800c55c:	4581      	cmp	r9, r0
 800c55e:	d142      	bne.n	800c5e6 <_malloc_r+0xea>
 800c560:	6821      	ldr	r1, [r4, #0]
 800c562:	1a6d      	subs	r5, r5, r1
 800c564:	4629      	mov	r1, r5
 800c566:	4630      	mov	r0, r6
 800c568:	f7ff ffa6 	bl	800c4b8 <sbrk_aligned>
 800c56c:	3001      	adds	r0, #1
 800c56e:	d03a      	beq.n	800c5e6 <_malloc_r+0xea>
 800c570:	6823      	ldr	r3, [r4, #0]
 800c572:	442b      	add	r3, r5
 800c574:	6023      	str	r3, [r4, #0]
 800c576:	f8d8 3000 	ldr.w	r3, [r8]
 800c57a:	685a      	ldr	r2, [r3, #4]
 800c57c:	bb62      	cbnz	r2, 800c5d8 <_malloc_r+0xdc>
 800c57e:	f8c8 7000 	str.w	r7, [r8]
 800c582:	e00f      	b.n	800c5a4 <_malloc_r+0xa8>
 800c584:	6822      	ldr	r2, [r4, #0]
 800c586:	1b52      	subs	r2, r2, r5
 800c588:	d420      	bmi.n	800c5cc <_malloc_r+0xd0>
 800c58a:	2a0b      	cmp	r2, #11
 800c58c:	d917      	bls.n	800c5be <_malloc_r+0xc2>
 800c58e:	1961      	adds	r1, r4, r5
 800c590:	42a3      	cmp	r3, r4
 800c592:	6025      	str	r5, [r4, #0]
 800c594:	bf18      	it	ne
 800c596:	6059      	strne	r1, [r3, #4]
 800c598:	6863      	ldr	r3, [r4, #4]
 800c59a:	bf08      	it	eq
 800c59c:	f8c8 1000 	streq.w	r1, [r8]
 800c5a0:	5162      	str	r2, [r4, r5]
 800c5a2:	604b      	str	r3, [r1, #4]
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	f000 f82f 	bl	800c608 <__malloc_unlock>
 800c5aa:	f104 000b 	add.w	r0, r4, #11
 800c5ae:	1d23      	adds	r3, r4, #4
 800c5b0:	f020 0007 	bic.w	r0, r0, #7
 800c5b4:	1ac2      	subs	r2, r0, r3
 800c5b6:	bf1c      	itt	ne
 800c5b8:	1a1b      	subne	r3, r3, r0
 800c5ba:	50a3      	strne	r3, [r4, r2]
 800c5bc:	e7af      	b.n	800c51e <_malloc_r+0x22>
 800c5be:	6862      	ldr	r2, [r4, #4]
 800c5c0:	42a3      	cmp	r3, r4
 800c5c2:	bf0c      	ite	eq
 800c5c4:	f8c8 2000 	streq.w	r2, [r8]
 800c5c8:	605a      	strne	r2, [r3, #4]
 800c5ca:	e7eb      	b.n	800c5a4 <_malloc_r+0xa8>
 800c5cc:	4623      	mov	r3, r4
 800c5ce:	6864      	ldr	r4, [r4, #4]
 800c5d0:	e7ae      	b.n	800c530 <_malloc_r+0x34>
 800c5d2:	463c      	mov	r4, r7
 800c5d4:	687f      	ldr	r7, [r7, #4]
 800c5d6:	e7b6      	b.n	800c546 <_malloc_r+0x4a>
 800c5d8:	461a      	mov	r2, r3
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	42a3      	cmp	r3, r4
 800c5de:	d1fb      	bne.n	800c5d8 <_malloc_r+0xdc>
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	6053      	str	r3, [r2, #4]
 800c5e4:	e7de      	b.n	800c5a4 <_malloc_r+0xa8>
 800c5e6:	230c      	movs	r3, #12
 800c5e8:	6033      	str	r3, [r6, #0]
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	f000 f80c 	bl	800c608 <__malloc_unlock>
 800c5f0:	e794      	b.n	800c51c <_malloc_r+0x20>
 800c5f2:	6005      	str	r5, [r0, #0]
 800c5f4:	e7d6      	b.n	800c5a4 <_malloc_r+0xa8>
 800c5f6:	bf00      	nop
 800c5f8:	24000cfc 	.word	0x24000cfc

0800c5fc <__malloc_lock>:
 800c5fc:	4801      	ldr	r0, [pc, #4]	@ (800c604 <__malloc_lock+0x8>)
 800c5fe:	f000 b84b 	b.w	800c698 <__retarget_lock_acquire_recursive>
 800c602:	bf00      	nop
 800c604:	24000e3c 	.word	0x24000e3c

0800c608 <__malloc_unlock>:
 800c608:	4801      	ldr	r0, [pc, #4]	@ (800c610 <__malloc_unlock+0x8>)
 800c60a:	f000 b846 	b.w	800c69a <__retarget_lock_release_recursive>
 800c60e:	bf00      	nop
 800c610:	24000e3c 	.word	0x24000e3c

0800c614 <memset>:
 800c614:	4402      	add	r2, r0
 800c616:	4603      	mov	r3, r0
 800c618:	4293      	cmp	r3, r2
 800c61a:	d100      	bne.n	800c61e <memset+0xa>
 800c61c:	4770      	bx	lr
 800c61e:	f803 1b01 	strb.w	r1, [r3], #1
 800c622:	e7f9      	b.n	800c618 <memset+0x4>

0800c624 <_sbrk_r>:
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	4d06      	ldr	r5, [pc, #24]	@ (800c640 <_sbrk_r+0x1c>)
 800c628:	2300      	movs	r3, #0
 800c62a:	4604      	mov	r4, r0
 800c62c:	4608      	mov	r0, r1
 800c62e:	602b      	str	r3, [r5, #0]
 800c630:	f7fb f956 	bl	80078e0 <_sbrk>
 800c634:	1c43      	adds	r3, r0, #1
 800c636:	d102      	bne.n	800c63e <_sbrk_r+0x1a>
 800c638:	682b      	ldr	r3, [r5, #0]
 800c63a:	b103      	cbz	r3, 800c63e <_sbrk_r+0x1a>
 800c63c:	6023      	str	r3, [r4, #0]
 800c63e:	bd38      	pop	{r3, r4, r5, pc}
 800c640:	24000e38 	.word	0x24000e38

0800c644 <__errno>:
 800c644:	4b01      	ldr	r3, [pc, #4]	@ (800c64c <__errno+0x8>)
 800c646:	6818      	ldr	r0, [r3, #0]
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	240003c0 	.word	0x240003c0

0800c650 <__libc_init_array>:
 800c650:	b570      	push	{r4, r5, r6, lr}
 800c652:	4d0d      	ldr	r5, [pc, #52]	@ (800c688 <__libc_init_array+0x38>)
 800c654:	4c0d      	ldr	r4, [pc, #52]	@ (800c68c <__libc_init_array+0x3c>)
 800c656:	1b64      	subs	r4, r4, r5
 800c658:	10a4      	asrs	r4, r4, #2
 800c65a:	2600      	movs	r6, #0
 800c65c:	42a6      	cmp	r6, r4
 800c65e:	d109      	bne.n	800c674 <__libc_init_array+0x24>
 800c660:	4d0b      	ldr	r5, [pc, #44]	@ (800c690 <__libc_init_array+0x40>)
 800c662:	4c0c      	ldr	r4, [pc, #48]	@ (800c694 <__libc_init_array+0x44>)
 800c664:	f000 f872 	bl	800c74c <_init>
 800c668:	1b64      	subs	r4, r4, r5
 800c66a:	10a4      	asrs	r4, r4, #2
 800c66c:	2600      	movs	r6, #0
 800c66e:	42a6      	cmp	r6, r4
 800c670:	d105      	bne.n	800c67e <__libc_init_array+0x2e>
 800c672:	bd70      	pop	{r4, r5, r6, pc}
 800c674:	f855 3b04 	ldr.w	r3, [r5], #4
 800c678:	4798      	blx	r3
 800c67a:	3601      	adds	r6, #1
 800c67c:	e7ee      	b.n	800c65c <__libc_init_array+0xc>
 800c67e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c682:	4798      	blx	r3
 800c684:	3601      	adds	r6, #1
 800c686:	e7f2      	b.n	800c66e <__libc_init_array+0x1e>
 800c688:	0800ce10 	.word	0x0800ce10
 800c68c:	0800ce10 	.word	0x0800ce10
 800c690:	0800ce10 	.word	0x0800ce10
 800c694:	0800ce14 	.word	0x0800ce14

0800c698 <__retarget_lock_acquire_recursive>:
 800c698:	4770      	bx	lr

0800c69a <__retarget_lock_release_recursive>:
 800c69a:	4770      	bx	lr

0800c69c <memcpy>:
 800c69c:	440a      	add	r2, r1
 800c69e:	4291      	cmp	r1, r2
 800c6a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6a4:	d100      	bne.n	800c6a8 <memcpy+0xc>
 800c6a6:	4770      	bx	lr
 800c6a8:	b510      	push	{r4, lr}
 800c6aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6b2:	4291      	cmp	r1, r2
 800c6b4:	d1f9      	bne.n	800c6aa <memcpy+0xe>
 800c6b6:	bd10      	pop	{r4, pc}

0800c6b8 <_free_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	4605      	mov	r5, r0
 800c6bc:	2900      	cmp	r1, #0
 800c6be:	d041      	beq.n	800c744 <_free_r+0x8c>
 800c6c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6c4:	1f0c      	subs	r4, r1, #4
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	bfb8      	it	lt
 800c6ca:	18e4      	addlt	r4, r4, r3
 800c6cc:	f7ff ff96 	bl	800c5fc <__malloc_lock>
 800c6d0:	4a1d      	ldr	r2, [pc, #116]	@ (800c748 <_free_r+0x90>)
 800c6d2:	6813      	ldr	r3, [r2, #0]
 800c6d4:	b933      	cbnz	r3, 800c6e4 <_free_r+0x2c>
 800c6d6:	6063      	str	r3, [r4, #4]
 800c6d8:	6014      	str	r4, [r2, #0]
 800c6da:	4628      	mov	r0, r5
 800c6dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6e0:	f7ff bf92 	b.w	800c608 <__malloc_unlock>
 800c6e4:	42a3      	cmp	r3, r4
 800c6e6:	d908      	bls.n	800c6fa <_free_r+0x42>
 800c6e8:	6820      	ldr	r0, [r4, #0]
 800c6ea:	1821      	adds	r1, r4, r0
 800c6ec:	428b      	cmp	r3, r1
 800c6ee:	bf01      	itttt	eq
 800c6f0:	6819      	ldreq	r1, [r3, #0]
 800c6f2:	685b      	ldreq	r3, [r3, #4]
 800c6f4:	1809      	addeq	r1, r1, r0
 800c6f6:	6021      	streq	r1, [r4, #0]
 800c6f8:	e7ed      	b.n	800c6d6 <_free_r+0x1e>
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	b10b      	cbz	r3, 800c704 <_free_r+0x4c>
 800c700:	42a3      	cmp	r3, r4
 800c702:	d9fa      	bls.n	800c6fa <_free_r+0x42>
 800c704:	6811      	ldr	r1, [r2, #0]
 800c706:	1850      	adds	r0, r2, r1
 800c708:	42a0      	cmp	r0, r4
 800c70a:	d10b      	bne.n	800c724 <_free_r+0x6c>
 800c70c:	6820      	ldr	r0, [r4, #0]
 800c70e:	4401      	add	r1, r0
 800c710:	1850      	adds	r0, r2, r1
 800c712:	4283      	cmp	r3, r0
 800c714:	6011      	str	r1, [r2, #0]
 800c716:	d1e0      	bne.n	800c6da <_free_r+0x22>
 800c718:	6818      	ldr	r0, [r3, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	6053      	str	r3, [r2, #4]
 800c71e:	4408      	add	r0, r1
 800c720:	6010      	str	r0, [r2, #0]
 800c722:	e7da      	b.n	800c6da <_free_r+0x22>
 800c724:	d902      	bls.n	800c72c <_free_r+0x74>
 800c726:	230c      	movs	r3, #12
 800c728:	602b      	str	r3, [r5, #0]
 800c72a:	e7d6      	b.n	800c6da <_free_r+0x22>
 800c72c:	6820      	ldr	r0, [r4, #0]
 800c72e:	1821      	adds	r1, r4, r0
 800c730:	428b      	cmp	r3, r1
 800c732:	bf04      	itt	eq
 800c734:	6819      	ldreq	r1, [r3, #0]
 800c736:	685b      	ldreq	r3, [r3, #4]
 800c738:	6063      	str	r3, [r4, #4]
 800c73a:	bf04      	itt	eq
 800c73c:	1809      	addeq	r1, r1, r0
 800c73e:	6021      	streq	r1, [r4, #0]
 800c740:	6054      	str	r4, [r2, #4]
 800c742:	e7ca      	b.n	800c6da <_free_r+0x22>
 800c744:	bd38      	pop	{r3, r4, r5, pc}
 800c746:	bf00      	nop
 800c748:	24000cfc 	.word	0x24000cfc

0800c74c <_init>:
 800c74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74e:	bf00      	nop
 800c750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c752:	bc08      	pop	{r3}
 800c754:	469e      	mov	lr, r3
 800c756:	4770      	bx	lr

0800c758 <_fini>:
 800c758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75a:	bf00      	nop
 800c75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c75e:	bc08      	pop	{r3}
 800c760:	469e      	mov	lr, r3
 800c762:	4770      	bx	lr
