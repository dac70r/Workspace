
BH1750_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019c8  08007740  08007740  00017740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009108  08009108  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009108  08009108  00019108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009110  08009110  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009110  08009110  00019110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009114  08009114  00019114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  24000000  08009118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  24000080  08009198  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240002ec  08009198  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001386f  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000252f  00000000  00000000  00033960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  00035e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b2c  00000000  00000000  00036d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039ff9  00000000  00000000  0003782c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014bbb  00000000  00000000  00071825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0017b7f4  00000000  00000000  000863e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000432c  00000000  00000000  00201bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00205f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007728 	.word	0x08007728

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08007728 	.word	0x08007728

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemInit+0xfc>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <SystemInit+0xfc>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0xfc>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemInit+0xfc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemInit+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x100>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <SystemInit+0x104>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemInit+0x104>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492c      	ldr	r1, [pc, #176]	; (8000790 <SystemInit+0x104>)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemInit+0x108>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemInit+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemInit+0x100>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemInit+0x104>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemInit+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemInit+0x104>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <SystemInit+0x104>)
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <SystemInit+0x110>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <SystemInit+0x104>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SystemInit+0x114>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <SystemInit+0x104>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0x114>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x104>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <SystemInit+0x114>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SystemInit+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <SystemInit+0x104>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <SystemInit+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x118>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x118>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x11c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x120>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SystemInit+0x124>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0x128>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	52002000 	.word	0x52002000
 8000790:	58024400 	.word	0x58024400
 8000794:	eaf6ed7f 	.word	0xeaf6ed7f
 8000798:	02020200 	.word	0x02020200
 800079c:	01ff0000 	.word	0x01ff0000
 80007a0:	01010280 	.word	0x01010280
 80007a4:	580000c0 	.word	0x580000c0
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <light_on_Init>:
uint8_t index_number = 0;                                   //index 
uint8_t light_status = LIGHT_STATUS_INITIAL;                //default light status


void light_on_Init()
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i<NUMBER_OF_SAMPLES; i++)
 80007be:	2300      	movs	r3, #0
 80007c0:	71fb      	strb	r3, [r7, #7]
 80007c2:	e010      	b.n	80007e6 <light_on_Init+0x2e>
        {
            light_on_initial[i] = 0;            //Light_on_initial = {0, 0, 0, 0, 0, 0....0, 0}
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <light_on_Init+0x44>)
 80007c8:	2100      	movs	r1, #0
 80007ca:	54d1      	strb	r1, [r2, r3]
            light_on[i] = light_on_initial[i];  //Light_on = Light_on_initial
 80007cc:	79fa      	ldrb	r2, [r7, #7]
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	490a      	ldr	r1, [pc, #40]	; (80007fc <light_on_Init+0x44>)
 80007d2:	5c89      	ldrb	r1, [r1, r2]
 80007d4:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <light_on_Init+0x48>)
 80007d6:	54d1      	strb	r1, [r2, r3]
            sum_of_light_on[i] = 1;             //Array with all 1's {1, 1, 1, 1, 1, 1....1, 1}
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <light_on_Init+0x4c>)
 80007dc:	2101      	movs	r1, #1
 80007de:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i<NUMBER_OF_SAMPLES; i++)
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	3301      	adds	r3, #1
 80007e4:	71fb      	strb	r3, [r7, #7]
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	d9eb      	bls.n	80007c4 <light_on_Init+0xc>
        }
    //printf("%d"*pdummy);
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	240000a4 	.word	0x240000a4
 8000800:	2400009c 	.word	0x2400009c
 8000804:	240000ac 	.word	0x240000ac

08000808 <light_status_indicator>:
    return index;
}


uint8_t light_status_indicator(uint8_t light_mode, uint16_t* lux_array)
{   
 8000808:	b480      	push	{r7}
 800080a:	b087      	sub	sp, #28
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	71fb      	strb	r3, [r7, #7]
    uint8_t activate_light = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	75fb      	strb	r3, [r7, #23]
    uint8_t Sum_Light_On = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	75bb      	strb	r3, [r7, #22]
    switch(light_mode)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b02      	cmp	r3, #2
 8000820:	d038      	beq.n	8000894 <light_status_indicator+0x8c>
 8000822:	2b02      	cmp	r3, #2
 8000824:	dc76      	bgt.n	8000914 <light_status_indicator+0x10c>
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <light_status_indicator+0x28>
 800082a:	2b01      	cmp	r3, #1
 800082c:	d052      	beq.n	80008d4 <light_status_indicator+0xcc>
 800082e:	e071      	b.n	8000914 <light_status_indicator+0x10c>
    {
        case LIGHT_MODE_AUTO:
            //printf("-------------------------------------------------------Now in auto mode\n");
            /* Part 1: Determine array for light on */
            for (int x=0; x<NUMBER_OF_SAMPLES; x++)
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	e00b      	b.n	800084e <light_status_indicator+0x46>
            {
                //light_on_array(lux_array[x]);
                Sum_Light_On = Sum_Light_On + lux_array[x];  
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	683a      	ldr	r2, [r7, #0]
 800083c:	4413      	add	r3, r2
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	7dbb      	ldrb	r3, [r7, #22]
 8000844:	4413      	add	r3, r2
 8000846:	75bb      	strb	r3, [r7, #22]
            for (int x=0; x<NUMBER_OF_SAMPLES; x++)
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	3301      	adds	r3, #1
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	2b04      	cmp	r3, #4
 8000852:	ddf0      	ble.n	8000836 <light_status_indicator+0x2e>
            //printf("Sum_light_on: %d\n",Sum_Light_On);

            /* Part 2: Determine the light activate flag on/off */
            //printf("Before......................\n");
            //printf("light_status: %d, activate_light: %d, index_number: %d\n", light_status, activate_light, index_number);
            if (Sum_Light_On == 0){activate_light = ACTIVATE_LIGHT_OFF;}
 8000854:	7dbb      	ldrb	r3, [r7, #22]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d102      	bne.n	8000860 <light_status_indicator+0x58>
 800085a:	2300      	movs	r3, #0
 800085c:	75fb      	strb	r3, [r7, #23]
 800085e:	e008      	b.n	8000872 <light_status_indicator+0x6a>
            else if (Sum_Light_On == NUMBER_OF_SAMPLES){activate_light = ACTIVATE_LIGHT_ON;}
 8000860:	7dbb      	ldrb	r3, [r7, #22]
 8000862:	2b05      	cmp	r3, #5
 8000864:	d102      	bne.n	800086c <light_status_indicator+0x64>
 8000866:	2301      	movs	r3, #1
 8000868:	75fb      	strb	r3, [r7, #23]
 800086a:	e002      	b.n	8000872 <light_status_indicator+0x6a>
            else{activate_light = light_status;}
 800086c:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <light_status_indicator+0x11c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	75fb      	strb	r3, [r7, #23]
            //printf("After......................\n");
            //printf("light_status: %d, activate_light: %d, index_number: %d\n", light_status, activate_light, index_number);

            /* Part 3: */
            if (light_status != activate_light){light_status = activate_light;}
 8000872:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <light_status_indicator+0x11c>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	7dfa      	ldrb	r2, [r7, #23]
 8000878:	429a      	cmp	r2, r3
 800087a:	d002      	beq.n	8000882 <light_status_indicator+0x7a>
 800087c:	4a29      	ldr	r2, [pc, #164]	; (8000924 <light_status_indicator+0x11c>)
 800087e:	7dfb      	ldrb	r3, [r7, #23]
 8000880:	7013      	strb	r3, [r2, #0]
            if (index_number >= NUMBER_OF_SAMPLES){index_number = INDEX_INITIAL;}
 8000882:	4b29      	ldr	r3, [pc, #164]	; (8000928 <light_status_indicator+0x120>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b04      	cmp	r3, #4
 8000888:	d902      	bls.n	8000890 <light_status_indicator+0x88>
 800088a:	4b27      	ldr	r3, [pc, #156]	; (8000928 <light_status_indicator+0x120>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
            //printf("Carry over....................\n");
            //printf("light_status: %d, activate_light: %d, index_number: %d\n", light_status, activate_light, index_number);
            return activate_light; 
 8000890:	7dfb      	ldrb	r3, [r7, #23]
 8000892:	e040      	b.n	8000916 <light_status_indicator+0x10e>
        break;

        case LIGHT_MODE_ON:
            //printf("-------------------------------------------------------Now in on mode\n");
            //printf("Before............light status = %d\n",light_status);
            if(light_status == LIGHT_STATUS_OFF) {light_status = LIGHT_STATUS_ON;}
 8000894:	4b23      	ldr	r3, [pc, #140]	; (8000924 <light_status_indicator+0x11c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <light_status_indicator+0x9a>
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <light_status_indicator+0x11c>)
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i<NUMBER_OF_SAMPLES; i++)
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	e010      	b.n	80008ca <light_status_indicator+0xc2>
                {
                    light_on_initial[i] = 0;            //Light_on_initial = {1, 1, 1, 1, 1, 1....1, 1}
 80008a8:	4a20      	ldr	r2, [pc, #128]	; (800092c <light_status_indicator+0x124>)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	4413      	add	r3, r2
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
                    light_on[i] = light_on_initial[i];  
 80008b2:	4a1e      	ldr	r2, [pc, #120]	; (800092c <light_status_indicator+0x124>)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	4413      	add	r3, r2
 80008b8:	7819      	ldrb	r1, [r3, #0]
 80008ba:	4a1d      	ldr	r2, [pc, #116]	; (8000930 <light_status_indicator+0x128>)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4413      	add	r3, r2
 80008c0:	460a      	mov	r2, r1
 80008c2:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i<NUMBER_OF_SAMPLES; i++)
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3301      	adds	r3, #1
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	2b04      	cmp	r3, #4
 80008ce:	ddeb      	ble.n	80008a8 <light_status_indicator+0xa0>
                }
            //printf("After............light status = %d\n",light_status);
            return activate_light; 
 80008d0:	7dfb      	ldrb	r3, [r7, #23]
 80008d2:	e020      	b.n	8000916 <light_status_indicator+0x10e>
        break;

        case LIGHT_MODE_OFF:
            //printf("-------------------------------------------------------Now in off mode\n");
            //printf("Before............light status = %d\n",light_status);
            if(light_status == LIGHT_STATUS_ON) {light_status = LIGHT_STATUS_OFF;}
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <light_status_indicator+0x11c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d102      	bne.n	80008e2 <light_status_indicator+0xda>
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <light_status_indicator+0x11c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i<NUMBER_OF_SAMPLES; i++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	e010      	b.n	800090a <light_status_indicator+0x102>
                {
                    light_on_initial[i] = 1;            //Light_on_initial = {1, 1, 1, 1, 1, 1....1, 1}
 80008e8:	4a10      	ldr	r2, [pc, #64]	; (800092c <light_status_indicator+0x124>)
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	4413      	add	r3, r2
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
                    light_on[i] = light_on_initial[i];  
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <light_status_indicator+0x124>)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4413      	add	r3, r2
 80008f8:	7819      	ldrb	r1, [r3, #0]
 80008fa:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <light_status_indicator+0x128>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4413      	add	r3, r2
 8000900:	460a      	mov	r2, r1
 8000902:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i<NUMBER_OF_SAMPLES; i++)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	3301      	adds	r3, #1
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b04      	cmp	r3, #4
 800090e:	ddeb      	ble.n	80008e8 <light_status_indicator+0xe0>
                }
            //printf("After............light status = %d\n",light_status);
            return activate_light; 
 8000910:	7dfb      	ldrb	r3, [r7, #23]
 8000912:	e000      	b.n	8000916 <light_status_indicator+0x10e>
        break;

        default:
						return 0;
 8000914:	2300      	movs	r3, #0
            //printf("Error detected!");
    }

    
}
 8000916:	4618      	mov	r0, r3
 8000918:	371c      	adds	r7, #28
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	240000b2 	.word	0x240000b2
 8000928:	240000b1 	.word	0x240000b1
 800092c:	240000a4 	.word	0x240000a4
 8000930:	2400009c 	.word	0x2400009c

08000934 <HexToBin>:
#include "hex2bin.h" 

// function to convert Hexadecimal to Binary Number
void HexToBin(char* hexdec, char* buffer)
{
 8000934:	b5b0      	push	{r4, r5, r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
 
    uint8_t i = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	73fb      	strb	r3, [r7, #15]
 
    while (hexdec[i]) {
 8000942:	e155      	b.n	8000bf0 <HexToBin+0x2bc>
 
        switch (hexdec[i]) {
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	3b30      	subs	r3, #48	; 0x30
 800094e:	2b36      	cmp	r3, #54	; 0x36
 8000950:	f200 8142 	bhi.w	8000bd8 <HexToBin+0x2a4>
 8000954:	a201      	add	r2, pc, #4	; (adr r2, 800095c <HexToBin+0x28>)
 8000956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095a:	bf00      	nop
 800095c:	08000a39 	.word	0x08000a39
 8000960:	08000a53 	.word	0x08000a53
 8000964:	08000a6d 	.word	0x08000a6d
 8000968:	08000a87 	.word	0x08000a87
 800096c:	08000aa1 	.word	0x08000aa1
 8000970:	08000abb 	.word	0x08000abb
 8000974:	08000ad5 	.word	0x08000ad5
 8000978:	08000aef 	.word	0x08000aef
 800097c:	08000b09 	.word	0x08000b09
 8000980:	08000b23 	.word	0x08000b23
 8000984:	08000bd9 	.word	0x08000bd9
 8000988:	08000bd9 	.word	0x08000bd9
 800098c:	08000bd9 	.word	0x08000bd9
 8000990:	08000bd9 	.word	0x08000bd9
 8000994:	08000bd9 	.word	0x08000bd9
 8000998:	08000bd9 	.word	0x08000bd9
 800099c:	08000bd9 	.word	0x08000bd9
 80009a0:	08000b3d 	.word	0x08000b3d
 80009a4:	08000b57 	.word	0x08000b57
 80009a8:	08000b71 	.word	0x08000b71
 80009ac:	08000b8b 	.word	0x08000b8b
 80009b0:	08000ba5 	.word	0x08000ba5
 80009b4:	08000bbf 	.word	0x08000bbf
 80009b8:	08000bd9 	.word	0x08000bd9
 80009bc:	08000bd9 	.word	0x08000bd9
 80009c0:	08000bd9 	.word	0x08000bd9
 80009c4:	08000bd9 	.word	0x08000bd9
 80009c8:	08000bd9 	.word	0x08000bd9
 80009cc:	08000bd9 	.word	0x08000bd9
 80009d0:	08000bd9 	.word	0x08000bd9
 80009d4:	08000bd9 	.word	0x08000bd9
 80009d8:	08000bd9 	.word	0x08000bd9
 80009dc:	08000bd9 	.word	0x08000bd9
 80009e0:	08000bd9 	.word	0x08000bd9
 80009e4:	08000bd9 	.word	0x08000bd9
 80009e8:	08000bd9 	.word	0x08000bd9
 80009ec:	08000bd9 	.word	0x08000bd9
 80009f0:	08000bd9 	.word	0x08000bd9
 80009f4:	08000bd9 	.word	0x08000bd9
 80009f8:	08000bd9 	.word	0x08000bd9
 80009fc:	08000bd9 	.word	0x08000bd9
 8000a00:	08000bd9 	.word	0x08000bd9
 8000a04:	08000bd9 	.word	0x08000bd9
 8000a08:	08000bd9 	.word	0x08000bd9
 8000a0c:	08000bd9 	.word	0x08000bd9
 8000a10:	08000bd9 	.word	0x08000bd9
 8000a14:	08000bd9 	.word	0x08000bd9
 8000a18:	08000bd9 	.word	0x08000bd9
 8000a1c:	08000bd9 	.word	0x08000bd9
 8000a20:	08000b3d 	.word	0x08000b3d
 8000a24:	08000b57 	.word	0x08000b57
 8000a28:	08000b71 	.word	0x08000b71
 8000a2c:	08000b8b 	.word	0x08000b8b
 8000a30:	08000ba5 	.word	0x08000ba5
 8000a34:	08000bbf 	.word	0x08000bbf
        case '0':
            strcat(buffer,"0000");
 8000a38:	6838      	ldr	r0, [r7, #0]
 8000a3a:	f7ff fc51 	bl	80002e0 <strlen>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a70      	ldr	r2, [pc, #448]	; (8000c08 <HexToBin+0x2d4>)
 8000a48:	6810      	ldr	r0, [r2, #0]
 8000a4a:	6018      	str	r0, [r3, #0]
 8000a4c:	7912      	ldrb	r2, [r2, #4]
 8000a4e:	711a      	strb	r2, [r3, #4]
            break;
 8000a50:	e0cb      	b.n	8000bea <HexToBin+0x2b6>
        case '1':
            strcat(buffer,"0001");
 8000a52:	6838      	ldr	r0, [r7, #0]
 8000a54:	f7ff fc44 	bl	80002e0 <strlen>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a6a      	ldr	r2, [pc, #424]	; (8000c0c <HexToBin+0x2d8>)
 8000a62:	6810      	ldr	r0, [r2, #0]
 8000a64:	6018      	str	r0, [r3, #0]
 8000a66:	7912      	ldrb	r2, [r2, #4]
 8000a68:	711a      	strb	r2, [r3, #4]
            break;
 8000a6a:	e0be      	b.n	8000bea <HexToBin+0x2b6>
        case '2':
            strcat(buffer,"0010");
 8000a6c:	6838      	ldr	r0, [r7, #0]
 8000a6e:	f7ff fc37 	bl	80002e0 <strlen>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a65      	ldr	r2, [pc, #404]	; (8000c10 <HexToBin+0x2dc>)
 8000a7c:	6810      	ldr	r0, [r2, #0]
 8000a7e:	6018      	str	r0, [r3, #0]
 8000a80:	7912      	ldrb	r2, [r2, #4]
 8000a82:	711a      	strb	r2, [r3, #4]
            break;
 8000a84:	e0b1      	b.n	8000bea <HexToBin+0x2b6>
        case '3':
            strcat(buffer,"0011");
 8000a86:	6838      	ldr	r0, [r7, #0]
 8000a88:	f7ff fc2a 	bl	80002e0 <strlen>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	461a      	mov	r2, r3
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a5f      	ldr	r2, [pc, #380]	; (8000c14 <HexToBin+0x2e0>)
 8000a96:	6810      	ldr	r0, [r2, #0]
 8000a98:	6018      	str	r0, [r3, #0]
 8000a9a:	7912      	ldrb	r2, [r2, #4]
 8000a9c:	711a      	strb	r2, [r3, #4]
            break;
 8000a9e:	e0a4      	b.n	8000bea <HexToBin+0x2b6>
        case '4':
            strcat(buffer,"0100");
 8000aa0:	6838      	ldr	r0, [r7, #0]
 8000aa2:	f7ff fc1d 	bl	80002e0 <strlen>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a5a      	ldr	r2, [pc, #360]	; (8000c18 <HexToBin+0x2e4>)
 8000ab0:	6810      	ldr	r0, [r2, #0]
 8000ab2:	6018      	str	r0, [r3, #0]
 8000ab4:	7912      	ldrb	r2, [r2, #4]
 8000ab6:	711a      	strb	r2, [r3, #4]
            break;
 8000ab8:	e097      	b.n	8000bea <HexToBin+0x2b6>
        case '5':
            strcat(buffer,"0101");
 8000aba:	6838      	ldr	r0, [r7, #0]
 8000abc:	f7ff fc10 	bl	80002e0 <strlen>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a54      	ldr	r2, [pc, #336]	; (8000c1c <HexToBin+0x2e8>)
 8000aca:	6810      	ldr	r0, [r2, #0]
 8000acc:	6018      	str	r0, [r3, #0]
 8000ace:	7912      	ldrb	r2, [r2, #4]
 8000ad0:	711a      	strb	r2, [r3, #4]
            break;
 8000ad2:	e08a      	b.n	8000bea <HexToBin+0x2b6>
        case '6':
            strcat(buffer,"0110");
 8000ad4:	6838      	ldr	r0, [r7, #0]
 8000ad6:	f7ff fc03 	bl	80002e0 <strlen>
 8000ada:	4603      	mov	r3, r0
 8000adc:	461a      	mov	r2, r3
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a4f      	ldr	r2, [pc, #316]	; (8000c20 <HexToBin+0x2ec>)
 8000ae4:	6810      	ldr	r0, [r2, #0]
 8000ae6:	6018      	str	r0, [r3, #0]
 8000ae8:	7912      	ldrb	r2, [r2, #4]
 8000aea:	711a      	strb	r2, [r3, #4]
            break;
 8000aec:	e07d      	b.n	8000bea <HexToBin+0x2b6>
        case '7':
            strcat(buffer,"0111");
 8000aee:	6838      	ldr	r0, [r7, #0]
 8000af0:	f7ff fbf6 	bl	80002e0 <strlen>
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a49      	ldr	r2, [pc, #292]	; (8000c24 <HexToBin+0x2f0>)
 8000afe:	6810      	ldr	r0, [r2, #0]
 8000b00:	6018      	str	r0, [r3, #0]
 8000b02:	7912      	ldrb	r2, [r2, #4]
 8000b04:	711a      	strb	r2, [r3, #4]
            break;
 8000b06:	e070      	b.n	8000bea <HexToBin+0x2b6>
        case '8':
            strcat(buffer,"1000");
 8000b08:	6838      	ldr	r0, [r7, #0]
 8000b0a:	f7ff fbe9 	bl	80002e0 <strlen>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a44      	ldr	r2, [pc, #272]	; (8000c28 <HexToBin+0x2f4>)
 8000b18:	6810      	ldr	r0, [r2, #0]
 8000b1a:	6018      	str	r0, [r3, #0]
 8000b1c:	7912      	ldrb	r2, [r2, #4]
 8000b1e:	711a      	strb	r2, [r3, #4]
            break;
 8000b20:	e063      	b.n	8000bea <HexToBin+0x2b6>
        case '9':
            strcat(buffer,"1001");
 8000b22:	6838      	ldr	r0, [r7, #0]
 8000b24:	f7ff fbdc 	bl	80002e0 <strlen>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a3e      	ldr	r2, [pc, #248]	; (8000c2c <HexToBin+0x2f8>)
 8000b32:	6810      	ldr	r0, [r2, #0]
 8000b34:	6018      	str	r0, [r3, #0]
 8000b36:	7912      	ldrb	r2, [r2, #4]
 8000b38:	711a      	strb	r2, [r3, #4]
            break;
 8000b3a:	e056      	b.n	8000bea <HexToBin+0x2b6>
        case 'A':
        case 'a':
            strcat(buffer,"1010");
 8000b3c:	6838      	ldr	r0, [r7, #0]
 8000b3e:	f7ff fbcf 	bl	80002e0 <strlen>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a39      	ldr	r2, [pc, #228]	; (8000c30 <HexToBin+0x2fc>)
 8000b4c:	6810      	ldr	r0, [r2, #0]
 8000b4e:	6018      	str	r0, [r3, #0]
 8000b50:	7912      	ldrb	r2, [r2, #4]
 8000b52:	711a      	strb	r2, [r3, #4]
            break;
 8000b54:	e049      	b.n	8000bea <HexToBin+0x2b6>
        case 'B':
        case 'b':
            strcat(buffer,"1011");
 8000b56:	6838      	ldr	r0, [r7, #0]
 8000b58:	f7ff fbc2 	bl	80002e0 <strlen>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	461a      	mov	r2, r3
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a33      	ldr	r2, [pc, #204]	; (8000c34 <HexToBin+0x300>)
 8000b66:	6810      	ldr	r0, [r2, #0]
 8000b68:	6018      	str	r0, [r3, #0]
 8000b6a:	7912      	ldrb	r2, [r2, #4]
 8000b6c:	711a      	strb	r2, [r3, #4]
            break;
 8000b6e:	e03c      	b.n	8000bea <HexToBin+0x2b6>
        case 'C':
        case 'c':
            strcat(buffer,"1100");
 8000b70:	6838      	ldr	r0, [r7, #0]
 8000b72:	f7ff fbb5 	bl	80002e0 <strlen>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461a      	mov	r2, r3
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a2e      	ldr	r2, [pc, #184]	; (8000c38 <HexToBin+0x304>)
 8000b80:	6810      	ldr	r0, [r2, #0]
 8000b82:	6018      	str	r0, [r3, #0]
 8000b84:	7912      	ldrb	r2, [r2, #4]
 8000b86:	711a      	strb	r2, [r3, #4]
            break;
 8000b88:	e02f      	b.n	8000bea <HexToBin+0x2b6>
        case 'D':
        case 'd':
            strcat(buffer,"1101");
 8000b8a:	6838      	ldr	r0, [r7, #0]
 8000b8c:	f7ff fba8 	bl	80002e0 <strlen>
 8000b90:	4603      	mov	r3, r0
 8000b92:	461a      	mov	r2, r3
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <HexToBin+0x308>)
 8000b9a:	6810      	ldr	r0, [r2, #0]
 8000b9c:	6018      	str	r0, [r3, #0]
 8000b9e:	7912      	ldrb	r2, [r2, #4]
 8000ba0:	711a      	strb	r2, [r3, #4]
            break;
 8000ba2:	e022      	b.n	8000bea <HexToBin+0x2b6>
        case 'E':
        case 'e':
            strcat(buffer,"1110");
 8000ba4:	6838      	ldr	r0, [r7, #0]
 8000ba6:	f7ff fb9b 	bl	80002e0 <strlen>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <HexToBin+0x30c>)
 8000bb4:	6810      	ldr	r0, [r2, #0]
 8000bb6:	6018      	str	r0, [r3, #0]
 8000bb8:	7912      	ldrb	r2, [r2, #4]
 8000bba:	711a      	strb	r2, [r3, #4]
            break;
 8000bbc:	e015      	b.n	8000bea <HexToBin+0x2b6>
        case 'F':
        case 'f':
            strcat(buffer,"1111");
 8000bbe:	6838      	ldr	r0, [r7, #0]
 8000bc0:	f7ff fb8e 	bl	80002e0 <strlen>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <HexToBin+0x310>)
 8000bce:	6810      	ldr	r0, [r2, #0]
 8000bd0:	6018      	str	r0, [r3, #0]
 8000bd2:	7912      	ldrb	r2, [r2, #4]
 8000bd4:	711a      	strb	r2, [r3, #4]
            break;
 8000bd6:	e008      	b.n	8000bea <HexToBin+0x2b6>
        default:
            strcpy(buffer,"Error detected!");
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	4a1b      	ldr	r2, [pc, #108]	; (8000c48 <HexToBin+0x314>)
 8000bdc:	461c      	mov	r4, r3
 8000bde:	4615      	mov	r5, r2
 8000be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be2:	6020      	str	r0, [r4, #0]
 8000be4:	6061      	str	r1, [r4, #4]
 8000be6:	60a2      	str	r2, [r4, #8]
 8000be8:	60e3      	str	r3, [r4, #12]
        }
        i++;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	3301      	adds	r3, #1
 8000bee:	73fb      	strb	r3, [r7, #15]
    while (hexdec[i]) {
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f47f aea3 	bne.w	8000944 <HexToBin+0x10>
    }
 8000bfe:	bf00      	nop
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bdb0      	pop	{r4, r5, r7, pc}
 8000c08:	08007740 	.word	0x08007740
 8000c0c:	08007748 	.word	0x08007748
 8000c10:	08007750 	.word	0x08007750
 8000c14:	08007758 	.word	0x08007758
 8000c18:	08007760 	.word	0x08007760
 8000c1c:	08007768 	.word	0x08007768
 8000c20:	08007770 	.word	0x08007770
 8000c24:	08007778 	.word	0x08007778
 8000c28:	08007780 	.word	0x08007780
 8000c2c:	08007788 	.word	0x08007788
 8000c30:	08007790 	.word	0x08007790
 8000c34:	08007798 	.word	0x08007798
 8000c38:	080077a0 	.word	0x080077a0
 8000c3c:	080077a8 	.word	0x080077a8
 8000c40:	080077b0 	.word	0x080077b0
 8000c44:	080077b8 	.word	0x080077b8
 8000c48:	080077c0 	.word	0x080077c0

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	ed2d 8b02 	vpush	{d8}
 8000c52:	b098      	sub	sp, #96	; 0x60
 8000c54:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// Must initialize buffer at the start of every round
	uint8_t dataBufferChar[2] = {0x00,0x00};
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	uint8_t lux_msb;
	uint8_t lux_lsb;

// for UART Transmission
	uint8_t *plux_msb = &lux_msb;
 8000c5c:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8000c60:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t *plux_lsb = &lux_lsb;
 8000c62:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8000c66:	647b      	str	r3, [r7, #68]	; 0x44

// 16-bit storages
	uint16_t lux = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint16_t lux_data = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c74:	f000 fa86 	bl	8001184 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c7c:	653b      	str	r3, [r7, #80]	; 0x50
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c7e:	bf00      	nop
 8000c80:	4b93      	ldr	r3, [pc, #588]	; (8000ed0 <main+0x284>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d004      	beq.n	8000c96 <main+0x4a>
 8000c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c8e:	1e5a      	subs	r2, r3, #1
 8000c90:	653a      	str	r2, [r7, #80]	; 0x50
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	dcf4      	bgt.n	8000c80 <main+0x34>
  if ( timeout < 0 )
 8000c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	da01      	bge.n	8000ca0 <main+0x54>
  {
  Error_Handler();
 8000c9c:	f000 fa9e 	bl	80011dc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca0:	f000 fc1a 	bl	80014d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca4:	f000 f924 	bl	8000ef0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ca8:	4b89      	ldr	r3, [pc, #548]	; (8000ed0 <main+0x284>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	4a88      	ldr	r2, [pc, #544]	; (8000ed0 <main+0x284>)
 8000cb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb8:	4b85      	ldr	r3, [pc, #532]	; (8000ed0 <main+0x284>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 fff2 	bl	8001cb0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f001 f808 	bl	8001ce4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cd8:	653b      	str	r3, [r7, #80]	; 0x50
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000cda:	bf00      	nop
 8000cdc:	4b7c      	ldr	r3, [pc, #496]	; (8000ed0 <main+0x284>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d104      	bne.n	8000cf2 <main+0xa6>
 8000ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cea:	1e5a      	subs	r2, r3, #1
 8000cec:	653a      	str	r2, [r7, #80]	; 0x50
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	dcf4      	bgt.n	8000cdc <main+0x90>
if ( timeout < 0 )
 8000cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	da01      	bge.n	8000cfc <main+0xb0>
{
Error_Handler();
 8000cf8:	f000 fa70 	bl	80011dc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfc:	f000 f9ee 	bl	80010dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d00:	f000 f960 	bl	8000fc4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000d04:	f000 f99e 	bl	8001044 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart3, data, 27, 10);
 8000d08:	230a      	movs	r3, #10
 8000d0a:	221b      	movs	r2, #27
 8000d0c:	4971      	ldr	r1, [pc, #452]	; (8000ed4 <main+0x288>)
 8000d0e:	4872      	ldr	r0, [pc, #456]	; (8000ed8 <main+0x28c>)
 8000d10:	f004 fc5c 	bl	80055cc <HAL_UART_Transmit>
	  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
	  //HAL_Delay(100);
	  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
	  //HAL_Delay(100);

	  char binary_buffer[17] = {};
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
 8000d18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	731a      	strb	r2, [r3, #12]
	  		char result[5] = {};
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f887 3020 	strb.w	r3, [r7, #32]
	  		lux_data = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	  		uint16_t lux_array[5] = {};
 8000d36:	f107 0310 	add.w	r3, r7, #16
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	811a      	strh	r2, [r3, #8]
	  		//uint8_t data[] = "Nope, standing up for myself\n";
	  		//HAL_UART_Transmit(&huart1, data, sizeof(data), 500);
	  		//HAL_Delay(500);
	  		HAL_I2C_Master_Transmit(&hi2c1, BH1750_ADDR<<1, dataBuffer, 1, 500);
 8000d42:	2323      	movs	r3, #35	; 0x23
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b299      	uxth	r1, r3
 8000d4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2301      	movs	r3, #1
 8000d52:	4a62      	ldr	r2, [pc, #392]	; (8000edc <main+0x290>)
 8000d54:	4862      	ldr	r0, [pc, #392]	; (8000ee0 <main+0x294>)
 8000d56:	f001 f869 	bl	8001e2c <HAL_I2C_Master_Transmit>
	  		HAL_Delay(180);
 8000d5a:	20b4      	movs	r0, #180	; 0xb4
 8000d5c:	f000 fc4e 	bl	80015fc <HAL_Delay>
	  		HAL_I2C_Master_Receive(&hi2c1, BH1750_ADDR<<1, dataBufferChar, 2, 500);
 8000d60:	2323      	movs	r3, #35	; 0x23
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	b299      	uxth	r1, r3
 8000d68:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000d6c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2302      	movs	r3, #2
 8000d74:	485a      	ldr	r0, [pc, #360]	; (8000ee0 <main+0x294>)
 8000d76:	f001 f94d 	bl	8002014 <HAL_I2C_Master_Receive>
	  		lux_msb = dataBufferChar[0];
 8000d7a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000d7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  		lux_lsb = dataBufferChar[1];
 8000d82:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000d86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	  		lux = (lux_msb << 8 )| lux_lsb;
 8000d8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	b21a      	sxth	r2, r3
 8000d92:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000d96:	b21b      	sxth	r3, r3
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b21b      	sxth	r3, r3
 8000d9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	  		sprintf(result, "%04x", lux);
 8000da0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	494e      	ldr	r1, [pc, #312]	; (8000ee4 <main+0x298>)
 8000daa:	4618      	mov	r0, r3
 8000dac:	f005 fd22 	bl	80067f4 <siprintf>
	  		HexToBin(result, binary_buffer);
 8000db0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fdba 	bl	8000934 <HexToBin>
	  		for(uint8_t x = 0; x<16; x++){
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000dc6:	e02b      	b.n	8000e20 <main+0x1d4>
	  			switch(binary_buffer[15-x]){
 8000dc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000dcc:	f1c3 030f 	rsb	r3, r3, #15
 8000dd0:	3358      	adds	r3, #88	; 0x58
 8000dd2:	443b      	add	r3, r7
 8000dd4:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000dd8:	2b31      	cmp	r3, #49	; 0x31
 8000dda:	d11c      	bne.n	8000e16 <main+0x1ca>
	  				case '1': lux_data = lux_data + pow(2,x);
 8000ddc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000de8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000df4:	eeb0 1b47 	vmov.f64	d1, d7
 8000df8:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000dfc:	f006 f9d4 	bl	80071a8 <pow>
 8000e00:	eeb0 7b40 	vmov.f64	d7, d0
 8000e04:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000e08:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e0c:	ee17 3a90 	vmov	r3, s15
 8000e10:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	  					break;
 8000e14:	bf00      	nop
	  		for(uint8_t x = 0; x<16; x++){
 8000e16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000e20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d9cf      	bls.n	8000dc8 <main+0x17c>
	  				default:
	  						lux_data += 0;
	  			}
	  		}
	  		char data[14];
	  		sprintf(data, "%04d lux \r\n", lux_data);
 8000e28:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	492e      	ldr	r1, [pc, #184]	; (8000ee8 <main+0x29c>)
 8000e30:	4618      	mov	r0, r3
 8000e32:	f005 fcdf 	bl	80067f4 <siprintf>
	  		light_on_Init();
 8000e36:	f7ff fcbf 	bl	80007b8 <light_on_Init>

	  		for (uint8_t x=0;x<5;x++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000e40:	e01d      	b.n	8000e7e <main+0x232>
	  		{
	  			if(lux <= LUX_THRESHOLD)
 8000e42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000e46:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000e4a:	d808      	bhi.n	8000e5e <main+0x212>
	  			{
	  				lux_array[x] = 1;
 8000e4c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	3358      	adds	r3, #88	; 0x58
 8000e54:	443b      	add	r3, r7
 8000e56:	2201      	movs	r2, #1
 8000e58:	f823 2c48 	strh.w	r2, [r3, #-72]
 8000e5c:	e007      	b.n	8000e6e <main+0x222>
	  			}
	  			else{
	  				lux_array[x] = 0;
 8000e5e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	3358      	adds	r3, #88	; 0x58
 8000e66:	443b      	add	r3, r7
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f823 2c48 	strh.w	r2, [r3, #-72]
	  			}
	  			HAL_Delay(250);
 8000e6e:	20fa      	movs	r0, #250	; 0xfa
 8000e70:	f000 fbc4 	bl	80015fc <HAL_Delay>
	  		for (uint8_t x=0;x<5;x++)
 8000e74:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000e78:	3301      	adds	r3, #1
 8000e7a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000e7e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d9dd      	bls.n	8000e42 <main+0x1f6>
	  		}

	  		if(light_status_indicator(light_mode, lux_array)==1)
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff fcbb 	bl	8000808 <light_status_indicator>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d105      	bne.n	8000ea4 <main+0x258>
	  		{
	  				HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,1);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	4813      	ldr	r0, [pc, #76]	; (8000eec <main+0x2a0>)
 8000e9e:	f000 feed 	bl	8001c7c <HAL_GPIO_WritePin>
 8000ea2:	e004      	b.n	8000eae <main+0x262>
	  		}
	  		else
	  		{
	  			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	4810      	ldr	r0, [pc, #64]	; (8000eec <main+0x2a0>)
 8000eaa:	f000 fee7 	bl	8001c7c <HAL_GPIO_WritePin>
	  		}

	  		HAL_UART_Transmit(&huart3, (uint8_t*)(data), strlen(data), 500);
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fa15 	bl	80002e0 <strlen>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	4639      	mov	r1, r7
 8000ebc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <main+0x28c>)
 8000ec2:	f004 fb83 	bl	80055cc <HAL_UART_Transmit>
	  		HAL_Delay(100);
 8000ec6:	2064      	movs	r0, #100	; 0x64
 8000ec8:	f000 fb98 	bl	80015fc <HAL_Delay>
  {
 8000ecc:	e722      	b.n	8000d14 <main+0xc8>
 8000ece:	bf00      	nop
 8000ed0:	58024400 	.word	0x58024400
 8000ed4:	24000008 	.word	0x24000008
 8000ed8:	24000108 	.word	0x24000108
 8000edc:	24000024 	.word	0x24000024
 8000ee0:	240000b4 	.word	0x240000b4
 8000ee4:	080077d0 	.word	0x080077d0
 8000ee8:	080077d8 	.word	0x080077d8
 8000eec:	58021000 	.word	0x58021000

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09c      	sub	sp, #112	; 0x70
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	224c      	movs	r2, #76	; 0x4c
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f005 fc98 	bl	8006834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2220      	movs	r2, #32
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f005 fc92 	bl	8006834 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f10:	2004      	movs	r0, #4
 8000f12:	f001 fc9f 	bl	8002854 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f16:	2300      	movs	r3, #0
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <SystemClock_Config+0xcc>)
 8000f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1e:	4a27      	ldr	r2, [pc, #156]	; (8000fbc <SystemClock_Config+0xcc>)
 8000f20:	f023 0301 	bic.w	r3, r3, #1
 8000f24:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f26:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <SystemClock_Config+0xcc>)
 8000f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <SystemClock_Config+0xd0>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f38:	4a21      	ldr	r2, [pc, #132]	; (8000fc0 <SystemClock_Config+0xd0>)
 8000f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <SystemClock_Config+0xd0>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f4c:	bf00      	nop
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <SystemClock_Config+0xd0>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f5a:	d1f8      	bne.n	8000f4e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f60:	2301      	movs	r3, #1
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f64:	2340      	movs	r3, #64	; 0x40
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 fcc9 	bl	8002908 <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f7c:	f000 f92e 	bl	80011dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	233f      	movs	r3, #63	; 0x3f
 8000f82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f94:	2340      	movs	r3, #64	; 0x40
 8000f96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 f909 	bl	80031bc <HAL_RCC_ClockConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fb0:	f000 f914 	bl	80011dc <Error_Handler>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	3770      	adds	r7, #112	; 0x70
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	58000400 	.word	0x58000400
 8000fc0:	58024800 	.word	0x58024800

08000fc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_I2C1_Init+0x74>)
 8000fca:	4a1c      	ldr	r2, [pc, #112]	; (800103c <MX_I2C1_Init+0x78>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_I2C1_Init+0x74>)
 8000fd0:	4a1b      	ldr	r2, [pc, #108]	; (8001040 <MX_I2C1_Init+0x7c>)
 8000fd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_I2C1_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <MX_I2C1_Init+0x74>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <MX_I2C1_Init+0x74>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_I2C1_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_I2C1_Init+0x74>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_I2C1_Init+0x74>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_I2C1_Init+0x74>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ffe:	480e      	ldr	r0, [pc, #56]	; (8001038 <MX_I2C1_Init+0x74>)
 8001000:	f000 fe84 	bl	8001d0c <HAL_I2C_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800100a:	f000 f8e7 	bl	80011dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800100e:	2100      	movs	r1, #0
 8001010:	4809      	ldr	r0, [pc, #36]	; (8001038 <MX_I2C1_Init+0x74>)
 8001012:	f001 fb87 	bl	8002724 <HAL_I2CEx_ConfigAnalogFilter>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800101c:	f000 f8de 	bl	80011dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001020:	2100      	movs	r1, #0
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_I2C1_Init+0x74>)
 8001024:	f001 fbc9 	bl	80027ba <HAL_I2CEx_ConfigDigitalFilter>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800102e:	f000 f8d5 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	240000b4 	.word	0x240000b4
 800103c:	40005400 	.word	0x40005400
 8001040:	00707cbb 	.word	0x00707cbb

08001044 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <MX_USART3_UART_Init+0x90>)
 800104a:	4a23      	ldr	r2, [pc, #140]	; (80010d8 <MX_USART3_UART_Init+0x94>)
 800104c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_USART3_UART_Init+0x90>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_USART3_UART_Init+0x90>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <MX_USART3_UART_Init+0x90>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_USART3_UART_Init+0x90>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_USART3_UART_Init+0x90>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <MX_USART3_UART_Init+0x90>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <MX_USART3_UART_Init+0x90>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_USART3_UART_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_USART3_UART_Init+0x90>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_USART3_UART_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800108c:	4811      	ldr	r0, [pc, #68]	; (80010d4 <MX_USART3_UART_Init+0x90>)
 800108e:	f004 fa4d 	bl	800552c <HAL_UART_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001098:	f000 f8a0 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800109c:	2100      	movs	r1, #0
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_USART3_UART_Init+0x90>)
 80010a0:	f005 fadd 	bl	800665e <HAL_UARTEx_SetTxFifoThreshold>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010aa:	f000 f897 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ae:	2100      	movs	r1, #0
 80010b0:	4808      	ldr	r0, [pc, #32]	; (80010d4 <MX_USART3_UART_Init+0x90>)
 80010b2:	f005 fb12 	bl	80066da <HAL_UARTEx_SetRxFifoThreshold>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010bc:	f000 f88e 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_USART3_UART_Init+0x90>)
 80010c2:	f005 fa93 	bl	80065ec <HAL_UARTEx_DisableFifoMode>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010cc:	f000 f886 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	24000108 	.word	0x24000108
 80010d8:	40004800 	.word	0x40004800

080010dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <MX_GPIO_Init+0xa0>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f8:	4a20      	ldr	r2, [pc, #128]	; (800117c <MX_GPIO_Init+0xa0>)
 80010fa:	f043 0308 	orr.w	r3, r3, #8
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_GPIO_Init+0xa0>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_GPIO_Init+0xa0>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001116:	4a19      	ldr	r2, [pc, #100]	; (800117c <MX_GPIO_Init+0xa0>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_GPIO_Init+0xa0>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_GPIO_Init+0xa0>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001134:	4a11      	ldr	r2, [pc, #68]	; (800117c <MX_GPIO_Init+0xa0>)
 8001136:	f043 0310 	orr.w	r3, r3, #16
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_GPIO_Init+0xa0>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2102      	movs	r1, #2
 8001150:	480b      	ldr	r0, [pc, #44]	; (8001180 <MX_GPIO_Init+0xa4>)
 8001152:	f000 fd93 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001156:	2302      	movs	r3, #2
 8001158:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4619      	mov	r1, r3
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_GPIO_Init+0xa4>)
 800116e:	f000 fbd5 	bl	800191c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	58024400 	.word	0x58024400
 8001180:	58021000 	.word	0x58021000

08001184 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800118a:	463b      	mov	r3, r7
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001196:	f000 fb45 	bl	8001824 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800119a:	2301      	movs	r3, #1
 800119c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800119e:	2300      	movs	r3, #0
 80011a0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011a6:	231f      	movs	r3, #31
 80011a8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80011aa:	2387      	movs	r3, #135	; 0x87
 80011ac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80011b2:	2300      	movs	r3, #0
 80011b4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80011b6:	2301      	movs	r3, #1
 80011b8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011ba:	2301      	movs	r3, #1
 80011bc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011c6:	463b      	mov	r3, r7
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fb63 	bl	8001894 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011ce:	2004      	movs	r0, #4
 80011d0:	f000 fb40 	bl	8001854 <HAL_MPU_Enable>

}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <Error_Handler+0x8>
	...

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_MspInit+0x30>)
 80011f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011f4:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_MspInit+0x30>)
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_MspInit+0x30>)
 8001200:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	58024400 	.word	0x58024400

0800121c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0ba      	sub	sp, #232	; 0xe8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	22c0      	movs	r2, #192	; 0xc0
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f005 faf9 	bl	8006834 <memset>
  if(hi2c->Instance==I2C1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a27      	ldr	r2, [pc, #156]	; (80012e4 <HAL_I2C_MspInit+0xc8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d146      	bne.n	80012da <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800124c:	f04f 0208 	mov.w	r2, #8
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	4618      	mov	r0, r3
 8001264:	f002 fb36 	bl	80038d4 <HAL_RCCEx_PeriphCLKConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800126e:	f7ff ffb5 	bl	80011dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <HAL_I2C_MspInit+0xcc>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <HAL_I2C_MspInit+0xcc>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_I2C_MspInit+0xcc>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001290:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001294:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001298:	2312      	movs	r3, #18
 800129a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012aa:	2304      	movs	r3, #4
 80012ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012b4:	4619      	mov	r1, r3
 80012b6:	480d      	ldr	r0, [pc, #52]	; (80012ec <HAL_I2C_MspInit+0xd0>)
 80012b8:	f000 fb30 	bl	800191c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_I2C_MspInit+0xcc>)
 80012be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012c2:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <HAL_I2C_MspInit+0xcc>)
 80012c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_I2C_MspInit+0xcc>)
 80012ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	37e8      	adds	r7, #232	; 0xe8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40005400 	.word	0x40005400
 80012e8:	58024400 	.word	0x58024400
 80012ec:	58020400 	.word	0x58020400

080012f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0ba      	sub	sp, #232	; 0xe8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	22c0      	movs	r2, #192	; 0xc0
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f005 fa8f 	bl	8006834 <memset>
  if(huart->Instance==USART3)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <HAL_UART_MspInit+0xc8>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d146      	bne.n	80013ae <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001320:	f04f 0202 	mov.w	r2, #2
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	4618      	mov	r0, r3
 8001338:	f002 facc 	bl	80038d4 <HAL_RCCEx_PeriphCLKConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001342:	f7ff ff4b 	bl	80011dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <HAL_UART_MspInit+0xcc>)
 8001348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800134c:	4a1b      	ldr	r2, [pc, #108]	; (80013bc <HAL_UART_MspInit+0xcc>)
 800134e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001352:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_UART_MspInit+0xcc>)
 8001358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800135c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_UART_MspInit+0xcc>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	4a14      	ldr	r2, [pc, #80]	; (80013bc <HAL_UART_MspInit+0xcc>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_UART_MspInit+0xcc>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001382:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001386:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800139c:	2307      	movs	r3, #7
 800139e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_UART_MspInit+0xd0>)
 80013aa:	f000 fab7 	bl	800191c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	37e8      	adds	r7, #232	; 0xe8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40004800 	.word	0x40004800
 80013bc:	58024400 	.word	0x58024400
 80013c0:	58020c00 	.word	0x58020c00

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c8:	e7fe      	b.n	80013c8 <NMI_Handler+0x4>

080013ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <HardFault_Handler+0x4>

080013d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <MemManage_Handler+0x4>

080013d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001410:	f000 f8d4 	bl	80015bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001420:	4a14      	ldr	r2, [pc, #80]	; (8001474 <_sbrk+0x5c>)
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <_sbrk+0x60>)
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <_sbrk+0x64>)
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <_sbrk+0x68>)
 8001438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <_sbrk+0x64>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	429a      	cmp	r2, r3
 8001446:	d207      	bcs.n	8001458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001448:	f005 f9fc 	bl	8006844 <__errno>
 800144c:	4603      	mov	r3, r0
 800144e:	220c      	movs	r2, #12
 8001450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	e009      	b.n	800146c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <_sbrk+0x64>)
 8001468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	24080000 	.word	0x24080000
 8001478:	00000400 	.word	0x00000400
 800147c:	2400019c 	.word	0x2400019c
 8001480:	240002f0 	.word	0x240002f0

08001484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001488:	f7ff f900 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800148e:	490d      	ldr	r1, [pc, #52]	; (80014c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014a4:	4c0a      	ldr	r4, [pc, #40]	; (80014d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b2:	f005 f9cd 	bl	8006850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b6:	f7ff fbc9 	bl	8000c4c <main>
  bx  lr
 80014ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014c4:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 80014c8:	08009118 	.word	0x08009118
  ldr r2, =_sbss
 80014cc:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80014d0:	240002ec 	.word	0x240002ec

080014d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC3_IRQHandler>
	...

080014d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014de:	2003      	movs	r0, #3
 80014e0:	f000 f96e 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014e4:	f002 f820 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_Init+0x68>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	f003 030f 	and.w	r3, r3, #15
 80014f4:	4913      	ldr	r1, [pc, #76]	; (8001544 <HAL_Init+0x6c>)
 80014f6:	5ccb      	ldrb	r3, [r1, r3]
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001500:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_Init+0x68>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_Init+0x6c>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
 8001518:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <HAL_Init+0x70>)
 800151a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800151c:	4a0b      	ldr	r2, [pc, #44]	; (800154c <HAL_Init+0x74>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001522:	200f      	movs	r0, #15
 8001524:	f000 f814 	bl	8001550 <HAL_InitTick>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e002      	b.n	8001538 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001532:	f7ff fe59 	bl	80011e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	58024400 	.word	0x58024400
 8001544:	080077e4 	.word	0x080077e4
 8001548:	24000004 	.word	0x24000004
 800154c:	24000000 	.word	0x24000000

08001550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_InitTick+0x60>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e021      	b.n	80015a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <HAL_InitTick+0x64>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_InitTick+0x60>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001572:	fbb3 f3f1 	udiv	r3, r3, r1
 8001576:	fbb2 f3f3 	udiv	r3, r2, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f945 	bl	800180a <HAL_SYSTICK_Config>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e00e      	b.n	80015a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d80a      	bhi.n	80015a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001590:	2200      	movs	r2, #0
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f000 f91d 	bl	80017d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800159c:	4a06      	ldr	r2, [pc, #24]	; (80015b8 <HAL_InitTick+0x68>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	2400002c 	.word	0x2400002c
 80015b4:	24000000 	.word	0x24000000
 80015b8:	24000028 	.word	0x24000028

080015bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_IncTick+0x20>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_IncTick+0x24>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <HAL_IncTick+0x24>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	2400002c 	.word	0x2400002c
 80015e0:	240001a0 	.word	0x240001a0

080015e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <HAL_GetTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	240001a0 	.word	0x240001a0

080015fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff ffee 	bl	80015e4 <HAL_GetTick>
 8001608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001614:	d005      	beq.n	8001622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_Delay+0x44>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001622:	bf00      	nop
 8001624:	f7ff ffde 	bl	80015e4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d8f7      	bhi.n	8001624 <HAL_Delay+0x28>
  {
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2400002c 	.word	0x2400002c

08001644 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_GetREVID+0x14>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	0c1b      	lsrs	r3, r3, #16
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	5c001000 	.word	0x5c001000

0800165c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <__NVIC_SetPriorityGrouping+0x40>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	4313      	orrs	r3, r2
 8001688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168a:	4a04      	ldr	r2, [pc, #16]	; (800169c <__NVIC_SetPriorityGrouping+0x40>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00
 80016a0:	05fa0000 	.word	0x05fa0000

080016a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <__NVIC_GetPriorityGrouping+0x18>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	f003 0307 	and.w	r3, r3, #7
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800178c:	d301      	bcc.n	8001792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2301      	movs	r3, #1
 8001790:	e00f      	b.n	80017b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <SysTick_Config+0x40>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179a:	210f      	movs	r1, #15
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f7ff ff8e 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <SysTick_Config+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <SysTick_Config+0x40>)
 80017ac:	2207      	movs	r2, #7
 80017ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff47 	bl	800165c <__NVIC_SetPriorityGrouping>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017e4:	f7ff ff5e 	bl	80016a4 <__NVIC_GetPriorityGrouping>
 80017e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	6978      	ldr	r0, [r7, #20]
 80017f0:	f7ff ff90 	bl	8001714 <NVIC_EncodePriority>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff5f 	bl	80016c0 <__NVIC_SetPriority>
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ffb2 	bl	800177c <SysTick_Config>
 8001818:	4603      	mov	r3, r0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001828:	f3bf 8f5f 	dmb	sy
}
 800182c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <HAL_MPU_Disable+0x28>)
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	4a06      	ldr	r2, [pc, #24]	; (800184c <HAL_MPU_Disable+0x28>)
 8001834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001838:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_MPU_Disable+0x2c>)
 800183c:	2200      	movs	r2, #0
 800183e:	605a      	str	r2, [r3, #4]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00
 8001850:	e000ed90 	.word	0xe000ed90

08001854 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800185c:	4a0b      	ldr	r2, [pc, #44]	; (800188c <HAL_MPU_Enable+0x38>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_MPU_Enable+0x3c>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <HAL_MPU_Enable+0x3c>)
 800186c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001870:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001872:	f3bf 8f4f 	dsb	sy
}
 8001876:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001878:	f3bf 8f6f 	isb	sy
}
 800187c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed90 	.word	0xe000ed90
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	785a      	ldrb	r2, [r3, #1]
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_MPU_ConfigRegion+0x84>)
 80018a2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d029      	beq.n	8001900 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80018ac:	4a1a      	ldr	r2, [pc, #104]	; (8001918 <HAL_MPU_ConfigRegion+0x84>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	7b1b      	ldrb	r3, [r3, #12]
 80018b8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7adb      	ldrb	r3, [r3, #11]
 80018be:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7a9b      	ldrb	r3, [r3, #10]
 80018c6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7b5b      	ldrb	r3, [r3, #13]
 80018ce:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7b9b      	ldrb	r3, [r3, #14]
 80018d6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7bdb      	ldrb	r3, [r3, #15]
 80018de:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7a5b      	ldrb	r3, [r3, #9]
 80018e6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7a1b      	ldrb	r3, [r3, #8]
 80018ee:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018f0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	7812      	ldrb	r2, [r2, #0]
 80018f6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018fa:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018fc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80018fe:	e005      	b.n	800190c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_MPU_ConfigRegion+0x84>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <HAL_MPU_ConfigRegion+0x84>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed90 	.word	0xe000ed90

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	; 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800192a:	4b89      	ldr	r3, [pc, #548]	; (8001b50 <HAL_GPIO_Init+0x234>)
 800192c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800192e:	e194      	b.n	8001c5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2101      	movs	r1, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8186 	beq.w	8001c54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b01      	cmp	r3, #1
 8001952:	d005      	beq.n	8001960 <HAL_GPIO_Init+0x44>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d130      	bne.n	80019c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001996:	2201      	movs	r2, #1
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	f003 0201 	and.w	r2, r3, #1
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d017      	beq.n	80019fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2203      	movs	r2, #3
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d123      	bne.n	8001a52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	08da      	lsrs	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3208      	adds	r2, #8
 8001a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	220f      	movs	r2, #15
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3208      	adds	r2, #8
 8001a4c:	69b9      	ldr	r1, [r7, #24]
 8001a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0203 	and.w	r2, r3, #3
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80e0 	beq.w	8001c54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a94:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <HAL_GPIO_Init+0x238>)
 8001a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a9a:	4a2e      	ldr	r2, [pc, #184]	; (8001b54 <HAL_GPIO_Init+0x238>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <HAL_GPIO_Init+0x238>)
 8001aa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab2:	4a29      	ldr	r2, [pc, #164]	; (8001b58 <HAL_GPIO_Init+0x23c>)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <HAL_GPIO_Init+0x240>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d052      	beq.n	8001b84 <HAL_GPIO_Init+0x268>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <HAL_GPIO_Init+0x244>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d031      	beq.n	8001b4a <HAL_GPIO_Init+0x22e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <HAL_GPIO_Init+0x248>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d02b      	beq.n	8001b46 <HAL_GPIO_Init+0x22a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_GPIO_Init+0x24c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d025      	beq.n	8001b42 <HAL_GPIO_Init+0x226>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <HAL_GPIO_Init+0x250>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01f      	beq.n	8001b3e <HAL_GPIO_Init+0x222>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <HAL_GPIO_Init+0x254>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d019      	beq.n	8001b3a <HAL_GPIO_Init+0x21e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a1a      	ldr	r2, [pc, #104]	; (8001b74 <HAL_GPIO_Init+0x258>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0x21a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a19      	ldr	r2, [pc, #100]	; (8001b78 <HAL_GPIO_Init+0x25c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00d      	beq.n	8001b32 <HAL_GPIO_Init+0x216>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <HAL_GPIO_Init+0x260>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d007      	beq.n	8001b2e <HAL_GPIO_Init+0x212>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_GPIO_Init+0x264>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_GPIO_Init+0x20e>
 8001b26:	2309      	movs	r3, #9
 8001b28:	e02d      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b2a:	230a      	movs	r3, #10
 8001b2c:	e02b      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b2e:	2308      	movs	r3, #8
 8001b30:	e029      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b32:	2307      	movs	r3, #7
 8001b34:	e027      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b36:	2306      	movs	r3, #6
 8001b38:	e025      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	e023      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e021      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b42:	2303      	movs	r3, #3
 8001b44:	e01f      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e01d      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e01b      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b4e:	bf00      	nop
 8001b50:	58000080 	.word	0x58000080
 8001b54:	58024400 	.word	0x58024400
 8001b58:	58000400 	.word	0x58000400
 8001b5c:	58020000 	.word	0x58020000
 8001b60:	58020400 	.word	0x58020400
 8001b64:	58020800 	.word	0x58020800
 8001b68:	58020c00 	.word	0x58020c00
 8001b6c:	58021000 	.word	0x58021000
 8001b70:	58021400 	.word	0x58021400
 8001b74:	58021800 	.word	0x58021800
 8001b78:	58021c00 	.word	0x58021c00
 8001b7c:	58022000 	.word	0x58022000
 8001b80:	58022400 	.word	0x58022400
 8001b84:	2300      	movs	r3, #0
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	f002 0203 	and.w	r2, r2, #3
 8001b8c:	0092      	lsls	r2, r2, #2
 8001b8e:	4093      	lsls	r3, r2
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b96:	4938      	ldr	r1, [pc, #224]	; (8001c78 <HAL_GPIO_Init+0x35c>)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001bf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	3301      	adds	r3, #1
 8001c58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f47f ae63 	bne.w	8001930 <HAL_GPIO_Init+0x14>
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	bf00      	nop
 8001c6e:	3724      	adds	r7, #36	; 0x24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	58000400 	.word	0x58000400

08001c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c8c:	787b      	ldrb	r3, [r7, #1]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001c98:	e003      	b.n	8001ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	041a      	lsls	r2, r3, #16
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	619a      	str	r2, [r3, #24]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001cb8:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <HAL_HSEM_FastTake+0x2c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3320      	adds	r3, #32
 8001cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc2:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <HAL_HSEM_FastTake+0x30>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d101      	bne.n	8001ccc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e000      	b.n	8001cce <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	58026400 	.word	0x58026400
 8001ce0:	80000300 	.word	0x80000300

08001ce4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001cee:	4906      	ldr	r1, [pc, #24]	; (8001d08 <HAL_HSEM_Release+0x24>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	58026400 	.word	0x58026400

08001d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e07f      	b.n	8001e1e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fa72 	bl	800121c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2224      	movs	r2, #36	; 0x24
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0201 	bic.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d107      	bne.n	8001d86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	e006      	b.n	8001d94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d104      	bne.n	8001da6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001da4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_I2C_Init+0x11c>)
 8001db2:	430b      	orrs	r3, r1
 8001db4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69d9      	ldr	r1, [r3, #28]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1a      	ldr	r2, [r3, #32]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	02008000 	.word	0x02008000

08001e2c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	461a      	mov	r2, r3
 8001e38:	460b      	mov	r3, r1
 8001e3a:	817b      	strh	r3, [r7, #10]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	f040 80da 	bne.w	8002002 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_I2C_Master_Transmit+0x30>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e0d3      	b.n	8002004 <HAL_I2C_Master_Transmit+0x1d8>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e64:	f7ff fbbe 	bl	80015e4 <HAL_GetTick>
 8001e68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2319      	movs	r3, #25
 8001e70:	2201      	movs	r2, #1
 8001e72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f9e6 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e0be      	b.n	8002004 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2221      	movs	r2, #33	; 0x21
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2210      	movs	r2, #16
 8001e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	893a      	ldrh	r2, [r7, #8]
 8001ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2bff      	cmp	r3, #255	; 0xff
 8001eb6:	d90e      	bls.n	8001ed6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	22ff      	movs	r2, #255	; 0xff
 8001ebc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	8979      	ldrh	r1, [r7, #10]
 8001ec6:	4b51      	ldr	r3, [pc, #324]	; (800200c <HAL_I2C_Master_Transmit+0x1e0>)
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 fbf6 	bl	80026c0 <I2C_TransferConfig>
 8001ed4:	e06c      	b.n	8001fb0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	8979      	ldrh	r1, [r7, #10]
 8001ee8:	4b48      	ldr	r3, [pc, #288]	; (800200c <HAL_I2C_Master_Transmit+0x1e0>)
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 fbe5 	bl	80026c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ef6:	e05b      	b.n	8001fb0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	6a39      	ldr	r1, [r7, #32]
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 f9f2 	bl	80022e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e07b      	b.n	8002004 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	781a      	ldrb	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d034      	beq.n	8001fb0 <HAL_I2C_Master_Transmit+0x184>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d130      	bne.n	8001fb0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	2200      	movs	r2, #0
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 f975 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e04d      	b.n	8002004 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2bff      	cmp	r3, #255	; 0xff
 8001f70:	d90e      	bls.n	8001f90 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	22ff      	movs	r2, #255	; 0xff
 8001f76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	8979      	ldrh	r1, [r7, #10]
 8001f80:	2300      	movs	r3, #0
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fb99 	bl	80026c0 <I2C_TransferConfig>
 8001f8e:	e00f      	b.n	8001fb0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	8979      	ldrh	r1, [r7, #10]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 fb88 	bl	80026c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d19e      	bne.n	8001ef8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	6a39      	ldr	r1, [r7, #32]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f9d8 	bl	8002374 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e01a      	b.n	8002004 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_I2C_Master_Transmit+0x1e4>)
 8001fe2:	400b      	ands	r3, r1
 8001fe4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e000      	b.n	8002004 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002002:	2302      	movs	r3, #2
  }
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	80002000 	.word	0x80002000
 8002010:	fe00e800 	.word	0xfe00e800

08002014 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af02      	add	r7, sp, #8
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	461a      	mov	r2, r3
 8002020:	460b      	mov	r3, r1
 8002022:	817b      	strh	r3, [r7, #10]
 8002024:	4613      	mov	r3, r2
 8002026:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b20      	cmp	r3, #32
 8002032:	f040 80db 	bne.w	80021ec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_I2C_Master_Receive+0x30>
 8002040:	2302      	movs	r3, #2
 8002042:	e0d4      	b.n	80021ee <HAL_I2C_Master_Receive+0x1da>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800204c:	f7ff faca 	bl	80015e4 <HAL_GetTick>
 8002050:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	2319      	movs	r3, #25
 8002058:	2201      	movs	r2, #1
 800205a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f8f2 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e0bf      	b.n	80021ee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2222      	movs	r2, #34	; 0x22
 8002072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2210      	movs	r2, #16
 800207a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	893a      	ldrh	r2, [r7, #8]
 800208e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209a:	b29b      	uxth	r3, r3
 800209c:	2bff      	cmp	r3, #255	; 0xff
 800209e:	d90e      	bls.n	80020be <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	22ff      	movs	r2, #255	; 0xff
 80020a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	8979      	ldrh	r1, [r7, #10]
 80020ae:	4b52      	ldr	r3, [pc, #328]	; (80021f8 <HAL_I2C_Master_Receive+0x1e4>)
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fb02 	bl	80026c0 <I2C_TransferConfig>
 80020bc:	e06d      	b.n	800219a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	8979      	ldrh	r1, [r7, #10]
 80020d0:	4b49      	ldr	r3, [pc, #292]	; (80021f8 <HAL_I2C_Master_Receive+0x1e4>)
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 faf1 	bl	80026c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80020de:	e05c      	b.n	800219a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	6a39      	ldr	r1, [r7, #32]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 f989 	bl	80023fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e07c      	b.n	80021ee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211c:	b29b      	uxth	r3, r3
 800211e:	3b01      	subs	r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212a:	b29b      	uxth	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d034      	beq.n	800219a <HAL_I2C_Master_Receive+0x186>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	2b00      	cmp	r3, #0
 8002136:	d130      	bne.n	800219a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	2200      	movs	r2, #0
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f880 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e04d      	b.n	80021ee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002156:	b29b      	uxth	r3, r3
 8002158:	2bff      	cmp	r3, #255	; 0xff
 800215a:	d90e      	bls.n	800217a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	22ff      	movs	r2, #255	; 0xff
 8002160:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002166:	b2da      	uxtb	r2, r3
 8002168:	8979      	ldrh	r1, [r7, #10]
 800216a:	2300      	movs	r3, #0
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 faa4 	bl	80026c0 <I2C_TransferConfig>
 8002178:	e00f      	b.n	800219a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	b2da      	uxtb	r2, r3
 800218a:	8979      	ldrh	r1, [r7, #10]
 800218c:	2300      	movs	r3, #0
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 fa93 	bl	80026c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d19d      	bne.n	80020e0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	6a39      	ldr	r1, [r7, #32]
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 f8e3 	bl	8002374 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e01a      	b.n	80021ee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2220      	movs	r2, #32
 80021be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6859      	ldr	r1, [r3, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <HAL_I2C_Master_Receive+0x1e8>)
 80021cc:	400b      	ands	r3, r1
 80021ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	e000      	b.n	80021ee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80021ec:	2302      	movs	r3, #2
  }
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	80002400 	.word	0x80002400
 80021fc:	fe00e800 	.word	0xfe00e800

08002200 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b02      	cmp	r3, #2
 8002214:	d103      	bne.n	800221e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2200      	movs	r2, #0
 800221c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d007      	beq.n	800223c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	619a      	str	r2, [r3, #24]
  }
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002258:	e031      	b.n	80022be <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d02d      	beq.n	80022be <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002262:	f7ff f9bf 	bl	80015e4 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d302      	bcc.n	8002278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d122      	bne.n	80022be <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	4013      	ands	r3, r2
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	429a      	cmp	r2, r3
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	429a      	cmp	r2, r3
 8002294:	d113      	bne.n	80022be <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f043 0220 	orr.w	r2, r3, #32
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2220      	movs	r2, #32
 80022a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00f      	b.n	80022de <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699a      	ldr	r2, [r3, #24]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4013      	ands	r3, r2
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	bf0c      	ite	eq
 80022ce:	2301      	moveq	r3, #1
 80022d0:	2300      	movne	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d0be      	beq.n	800225a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022f2:	e033      	b.n	800235c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 f901 	bl	8002500 <I2C_IsErrorOccurred>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e031      	b.n	800236c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230e:	d025      	beq.n	800235c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002310:	f7ff f968 	bl	80015e4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	429a      	cmp	r2, r3
 800231e:	d302      	bcc.n	8002326 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11a      	bne.n	800235c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b02      	cmp	r3, #2
 8002332:	d013      	beq.n	800235c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	f043 0220 	orr.w	r2, r3, #32
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e007      	b.n	800236c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b02      	cmp	r3, #2
 8002368:	d1c4      	bne.n	80022f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002380:	e02f      	b.n	80023e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f8ba 	bl	8002500 <I2C_IsErrorOccurred>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e02d      	b.n	80023f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002396:	f7ff f925 	bl	80015e4 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d302      	bcc.n	80023ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d11a      	bne.n	80023e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d013      	beq.n	80023e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f043 0220 	orr.w	r2, r3, #32
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e007      	b.n	80023f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d1c8      	bne.n	8002382 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002408:	e06b      	b.n	80024e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f876 	bl	8002500 <I2C_IsErrorOccurred>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e069      	b.n	80024f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b20      	cmp	r3, #32
 800242a:	d138      	bne.n	800249e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b04      	cmp	r3, #4
 8002438:	d105      	bne.n	8002446 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e055      	b.n	80024f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b10      	cmp	r3, #16
 8002452:	d107      	bne.n	8002464 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2210      	movs	r2, #16
 800245a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2204      	movs	r2, #4
 8002460:	645a      	str	r2, [r3, #68]	; 0x44
 8002462:	e002      	b.n	800246a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2220      	movs	r2, #32
 8002470:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800247e:	400b      	ands	r3, r1
 8002480:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e029      	b.n	80024f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249e:	f7ff f8a1 	bl	80015e4 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d302      	bcc.n	80024b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d116      	bne.n	80024e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d00f      	beq.n	80024e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f043 0220 	orr.w	r2, r3, #32
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e007      	b.n	80024f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d18c      	bne.n	800240a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	fe00e800 	.word	0xfe00e800

08002500 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b00      	cmp	r3, #0
 800252a:	d068      	beq.n	80025fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2210      	movs	r2, #16
 8002532:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002534:	e049      	b.n	80025ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d045      	beq.n	80025ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800253e:	f7ff f851 	bl	80015e4 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	429a      	cmp	r2, r3
 800254c:	d302      	bcc.n	8002554 <I2C_IsErrorOccurred+0x54>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d13a      	bne.n	80025ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002566:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002576:	d121      	bne.n	80025bc <I2C_IsErrorOccurred+0xbc>
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800257e:	d01d      	beq.n	80025bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	2b20      	cmp	r3, #32
 8002584:	d01a      	beq.n	80025bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002594:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002596:	f7ff f825 	bl	80015e4 <HAL_GetTick>
 800259a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800259c:	e00e      	b.n	80025bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800259e:	f7ff f821 	bl	80015e4 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b19      	cmp	r3, #25
 80025aa:	d907      	bls.n	80025bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	f043 0320 	orr.w	r3, r3, #32
 80025b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80025ba:	e006      	b.n	80025ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	d1e9      	bne.n	800259e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d003      	beq.n	80025e0 <I2C_IsErrorOccurred+0xe0>
 80025d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0aa      	beq.n	8002536 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d103      	bne.n	80025f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2220      	movs	r2, #32
 80025ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00b      	beq.n	8002628 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002620:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	f043 0308 	orr.w	r3, r3, #8
 8002638:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002642:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00b      	beq.n	800266c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	f043 0302 	orr.w	r3, r3, #2
 800265a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002664:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800266c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01c      	beq.n	80026ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f7ff fdc3 	bl	8002200 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <I2C_IsErrorOccurred+0x1bc>)
 8002686:	400b      	ands	r3, r1
 8002688:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	431a      	orrs	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80026ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3728      	adds	r7, #40	; 0x28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	fe00e800 	.word	0xfe00e800

080026c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	817b      	strh	r3, [r7, #10]
 80026ce:	4613      	mov	r3, r2
 80026d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026d2:	897b      	ldrh	r3, [r7, #10]
 80026d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026d8:	7a7b      	ldrb	r3, [r7, #9]
 80026da:	041b      	lsls	r3, r3, #16
 80026dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	0d5b      	lsrs	r3, r3, #21
 80026fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <I2C_TransferConfig+0x60>)
 8002700:	430b      	orrs	r3, r1
 8002702:	43db      	mvns	r3, r3
 8002704:	ea02 0103 	and.w	r1, r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	430a      	orrs	r2, r1
 8002710:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002712:	bf00      	nop
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	03ff63ff 	.word	0x03ff63ff

08002724 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b20      	cmp	r3, #32
 8002738:	d138      	bne.n	80027ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002744:	2302      	movs	r3, #2
 8002746:	e032      	b.n	80027ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	; 0x24
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002776:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6819      	ldr	r1, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e000      	b.n	80027ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
  }
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	d139      	bne.n	8002844 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027da:	2302      	movs	r3, #2
 80027dc:	e033      	b.n	8002846 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2224      	movs	r2, #36	; 0x24
 80027ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800280c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	e000      	b.n	8002846 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002844:	2302      	movs	r3, #2
  }
}
 8002846:	4618      	mov	r0, r3
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800285c:	4b29      	ldr	r3, [pc, #164]	; (8002904 <HAL_PWREx_ConfigSupply+0xb0>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	2b06      	cmp	r3, #6
 8002866:	d00a      	beq.n	800287e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002868:	4b26      	ldr	r3, [pc, #152]	; (8002904 <HAL_PWREx_ConfigSupply+0xb0>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	429a      	cmp	r2, r3
 8002874:	d001      	beq.n	800287a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e040      	b.n	80028fc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e03e      	b.n	80028fc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800287e:	4b21      	ldr	r3, [pc, #132]	; (8002904 <HAL_PWREx_ConfigSupply+0xb0>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002886:	491f      	ldr	r1, [pc, #124]	; (8002904 <HAL_PWREx_ConfigSupply+0xb0>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4313      	orrs	r3, r2
 800288c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800288e:	f7fe fea9 	bl	80015e4 <HAL_GetTick>
 8002892:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002894:	e009      	b.n	80028aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002896:	f7fe fea5 	bl	80015e4 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028a4:	d901      	bls.n	80028aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e028      	b.n	80028fc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028aa:	4b16      	ldr	r3, [pc, #88]	; (8002904 <HAL_PWREx_ConfigSupply+0xb0>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b6:	d1ee      	bne.n	8002896 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b1e      	cmp	r3, #30
 80028bc:	d008      	beq.n	80028d0 <HAL_PWREx_ConfigSupply+0x7c>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b2e      	cmp	r3, #46	; 0x2e
 80028c2:	d005      	beq.n	80028d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b1d      	cmp	r3, #29
 80028c8:	d002      	beq.n	80028d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b2d      	cmp	r3, #45	; 0x2d
 80028ce:	d114      	bne.n	80028fa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80028d0:	f7fe fe88 	bl	80015e4 <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028d6:	e009      	b.n	80028ec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028d8:	f7fe fe84 	bl	80015e4 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028e6:	d901      	bls.n	80028ec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e007      	b.n	80028fc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_PWREx_ConfigSupply+0xb0>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d1ee      	bne.n	80028d8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	58024800 	.word	0x58024800

08002908 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	; 0x30
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	f000 bc48 	b.w	80031ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8088 	beq.w	8002a3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292a:	4b99      	ldr	r3, [pc, #612]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002934:	4b96      	ldr	r3, [pc, #600]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	2b10      	cmp	r3, #16
 800293e:	d007      	beq.n	8002950 <HAL_RCC_OscConfig+0x48>
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	2b18      	cmp	r3, #24
 8002944:	d111      	bne.n	800296a <HAL_RCC_OscConfig+0x62>
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d10c      	bne.n	800296a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	4b8f      	ldr	r3, [pc, #572]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d06d      	beq.n	8002a38 <HAL_RCC_OscConfig+0x130>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d169      	bne.n	8002a38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	f000 bc21 	b.w	80031ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002972:	d106      	bne.n	8002982 <HAL_RCC_OscConfig+0x7a>
 8002974:	4b86      	ldr	r3, [pc, #536]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a85      	ldr	r2, [pc, #532]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 800297a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	e02e      	b.n	80029e0 <HAL_RCC_OscConfig+0xd8>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x9c>
 800298a:	4b81      	ldr	r3, [pc, #516]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a80      	ldr	r2, [pc, #512]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	4b7e      	ldr	r3, [pc, #504]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a7d      	ldr	r2, [pc, #500]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 800299c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	e01d      	b.n	80029e0 <HAL_RCC_OscConfig+0xd8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCC_OscConfig+0xc0>
 80029ae:	4b78      	ldr	r3, [pc, #480]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a77      	ldr	r2, [pc, #476]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 80029b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	4b75      	ldr	r3, [pc, #468]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a74      	ldr	r2, [pc, #464]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e00b      	b.n	80029e0 <HAL_RCC_OscConfig+0xd8>
 80029c8:	4b71      	ldr	r3, [pc, #452]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a70      	ldr	r2, [pc, #448]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 80029ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	4b6e      	ldr	r3, [pc, #440]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a6d      	ldr	r2, [pc, #436]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 80029da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d013      	beq.n	8002a10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fdfc 	bl	80015e4 <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe fdf8 	bl	80015e4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e3d4      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a02:	4b63      	ldr	r3, [pc, #396]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0xe8>
 8002a0e:	e014      	b.n	8002a3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe fde8 	bl	80015e4 <HAL_GetTick>
 8002a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a18:	f7fe fde4 	bl	80015e4 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e3c0      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a2a:	4b59      	ldr	r3, [pc, #356]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x110>
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80ca 	beq.w	8002bdc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a48:	4b51      	ldr	r3, [pc, #324]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a52:	4b4f      	ldr	r3, [pc, #316]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <HAL_RCC_OscConfig+0x166>
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	2b18      	cmp	r3, #24
 8002a62:	d156      	bne.n	8002b12 <HAL_RCC_OscConfig+0x20a>
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d151      	bne.n	8002b12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a6e:	4b48      	ldr	r3, [pc, #288]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_RCC_OscConfig+0x17e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e392      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a86:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 0219 	bic.w	r2, r3, #25
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	493f      	ldr	r1, [pc, #252]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fda4 	bl	80015e4 <HAL_GetTick>
 8002a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa0:	f7fe fda0 	bl	80015e4 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e37c      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ab2:	4b37      	ldr	r3, [pc, #220]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	f7fe fdc1 	bl	8001644 <HAL_GetREVID>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d817      	bhi.n	8002afc <HAL_RCC_OscConfig+0x1f4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2b40      	cmp	r3, #64	; 0x40
 8002ad2:	d108      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
 8002ad4:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002adc:	4a2c      	ldr	r2, [pc, #176]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae4:	e07a      	b.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae6:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	031b      	lsls	r3, r3, #12
 8002af4:	4926      	ldr	r1, [pc, #152]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002afa:	e06f      	b.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afc:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	061b      	lsls	r3, r3, #24
 8002b0a:	4921      	ldr	r1, [pc, #132]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b10:	e064      	b.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d047      	beq.n	8002baa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 0219 	bic.w	r2, r3, #25
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	491a      	ldr	r1, [pc, #104]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fd5a 	bl	80015e4 <HAL_GetTick>
 8002b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b34:	f7fe fd56 	bl	80015e4 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e332      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b46:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	f7fe fd77 	bl	8001644 <HAL_GetREVID>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d819      	bhi.n	8002b94 <HAL_RCC_OscConfig+0x28c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b40      	cmp	r3, #64	; 0x40
 8002b66:	d108      	bne.n	8002b7a <HAL_RCC_OscConfig+0x272>
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b70:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b76:	6053      	str	r3, [r2, #4]
 8002b78:	e030      	b.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
 8002b7a:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	031b      	lsls	r3, r3, #12
 8002b88:	4901      	ldr	r1, [pc, #4]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	604b      	str	r3, [r1, #4]
 8002b8e:	e025      	b.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
 8002b90:	58024400 	.word	0x58024400
 8002b94:	4b9a      	ldr	r3, [pc, #616]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	4997      	ldr	r1, [pc, #604]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
 8002ba8:	e018      	b.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002baa:	4b95      	ldr	r3, [pc, #596]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a94      	ldr	r2, [pc, #592]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7fe fd15 	bl	80015e4 <HAL_GetTick>
 8002bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7fe fd11 	bl	80015e4 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e2ed      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bd0:	4b8b      	ldr	r3, [pc, #556]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f0      	bne.n	8002bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80a9 	beq.w	8002d3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bea:	4b85      	ldr	r3, [pc, #532]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bf2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bf4:	4b82      	ldr	r3, [pc, #520]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d007      	beq.n	8002c10 <HAL_RCC_OscConfig+0x308>
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b18      	cmp	r3, #24
 8002c04:	d13a      	bne.n	8002c7c <HAL_RCC_OscConfig+0x374>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d135      	bne.n	8002c7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c10:	4b7b      	ldr	r3, [pc, #492]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_RCC_OscConfig+0x320>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2b80      	cmp	r3, #128	; 0x80
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e2c1      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c28:	f7fe fd0c 	bl	8001644 <HAL_GetREVID>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d817      	bhi.n	8002c66 <HAL_RCC_OscConfig+0x35e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d108      	bne.n	8002c50 <HAL_RCC_OscConfig+0x348>
 8002c3e:	4b70      	ldr	r3, [pc, #448]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c46:	4a6e      	ldr	r2, [pc, #440]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c4e:	e075      	b.n	8002d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c50:	4b6b      	ldr	r3, [pc, #428]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	069b      	lsls	r3, r3, #26
 8002c5e:	4968      	ldr	r1, [pc, #416]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c64:	e06a      	b.n	8002d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c66:	4b66      	ldr	r3, [pc, #408]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	061b      	lsls	r3, r3, #24
 8002c74:	4962      	ldr	r1, [pc, #392]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c7a:	e05f      	b.n	8002d3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d042      	beq.n	8002d0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c84:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a5d      	ldr	r2, [pc, #372]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe fca8 	bl	80015e4 <HAL_GetTick>
 8002c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c98:	f7fe fca4 	bl	80015e4 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e280      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002caa:	4b55      	ldr	r3, [pc, #340]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cb6:	f7fe fcc5 	bl	8001644 <HAL_GetREVID>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d817      	bhi.n	8002cf4 <HAL_RCC_OscConfig+0x3ec>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	d108      	bne.n	8002cde <HAL_RCC_OscConfig+0x3d6>
 8002ccc:	4b4c      	ldr	r3, [pc, #304]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002cd4:	4a4a      	ldr	r2, [pc, #296]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cda:	6053      	str	r3, [r2, #4]
 8002cdc:	e02e      	b.n	8002d3c <HAL_RCC_OscConfig+0x434>
 8002cde:	4b48      	ldr	r3, [pc, #288]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	069b      	lsls	r3, r3, #26
 8002cec:	4944      	ldr	r1, [pc, #272]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
 8002cf2:	e023      	b.n	8002d3c <HAL_RCC_OscConfig+0x434>
 8002cf4:	4b42      	ldr	r3, [pc, #264]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	061b      	lsls	r3, r3, #24
 8002d02:	493f      	ldr	r1, [pc, #252]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60cb      	str	r3, [r1, #12]
 8002d08:	e018      	b.n	8002d3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a3c      	ldr	r2, [pc, #240]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7fe fc65 	bl	80015e4 <HAL_GetTick>
 8002d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d1e:	f7fe fc61 	bl	80015e4 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e23d      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d30:	4b33      	ldr	r3, [pc, #204]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f0      	bne.n	8002d1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d036      	beq.n	8002db6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d019      	beq.n	8002d84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d50:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d54:	4a2a      	ldr	r2, [pc, #168]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5c:	f7fe fc42 	bl	80015e4 <HAL_GetTick>
 8002d60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d64:	f7fe fc3e 	bl	80015e4 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e21a      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d76:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x45c>
 8002d82:	e018      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d84:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d88:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7fe fc28 	bl	80015e4 <HAL_GetTick>
 8002d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d98:	f7fe fc24 	bl	80015e4 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e200      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d039      	beq.n	8002e36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01c      	beq.n	8002e04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a0c      	ldr	r2, [pc, #48]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe fc05 	bl	80015e4 <HAL_GetTick>
 8002dda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dde:	f7fe fc01 	bl	80015e4 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e1dd      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x4d6>
 8002dfc:	e01b      	b.n	8002e36 <HAL_RCC_OscConfig+0x52e>
 8002dfe:	bf00      	nop
 8002e00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e04:	4b9b      	ldr	r3, [pc, #620]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a9a      	ldr	r2, [pc, #616]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e10:	f7fe fbe8 	bl	80015e4 <HAL_GetTick>
 8002e14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e18:	f7fe fbe4 	bl	80015e4 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e1c0      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e2a:	4b92      	ldr	r3, [pc, #584]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8081 	beq.w	8002f46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e44:	4b8c      	ldr	r3, [pc, #560]	; (8003078 <HAL_RCC_OscConfig+0x770>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a8b      	ldr	r2, [pc, #556]	; (8003078 <HAL_RCC_OscConfig+0x770>)
 8002e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e50:	f7fe fbc8 	bl	80015e4 <HAL_GetTick>
 8002e54:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e58:	f7fe fbc4 	bl	80015e4 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e1a0      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e6a:	4b83      	ldr	r3, [pc, #524]	; (8003078 <HAL_RCC_OscConfig+0x770>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d106      	bne.n	8002e8c <HAL_RCC_OscConfig+0x584>
 8002e7e:	4b7d      	ldr	r3, [pc, #500]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a7c      	ldr	r2, [pc, #496]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	e02d      	b.n	8002ee8 <HAL_RCC_OscConfig+0x5e0>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10c      	bne.n	8002eae <HAL_RCC_OscConfig+0x5a6>
 8002e94:	4b77      	ldr	r3, [pc, #476]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	4a76      	ldr	r2, [pc, #472]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea0:	4b74      	ldr	r3, [pc, #464]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	4a73      	ldr	r2, [pc, #460]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002eac:	e01c      	b.n	8002ee8 <HAL_RCC_OscConfig+0x5e0>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x5c8>
 8002eb6:	4b6f      	ldr	r3, [pc, #444]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a6e      	ldr	r2, [pc, #440]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ebc:	f043 0304 	orr.w	r3, r3, #4
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec2:	4b6c      	ldr	r3, [pc, #432]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	4a6b      	ldr	r2, [pc, #428]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ece:	e00b      	b.n	8002ee8 <HAL_RCC_OscConfig+0x5e0>
 8002ed0:	4b68      	ldr	r3, [pc, #416]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed4:	4a67      	ldr	r2, [pc, #412]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	6713      	str	r3, [r2, #112]	; 0x70
 8002edc:	4b65      	ldr	r3, [pc, #404]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	4a64      	ldr	r2, [pc, #400]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ee2:	f023 0304 	bic.w	r3, r3, #4
 8002ee6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d015      	beq.n	8002f1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef0:	f7fe fb78 	bl	80015e4 <HAL_GetTick>
 8002ef4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef8:	f7fe fb74 	bl	80015e4 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e14e      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f0e:	4b59      	ldr	r3, [pc, #356]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0ee      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x5f0>
 8002f1a:	e014      	b.n	8002f46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fe fb62 	bl	80015e4 <HAL_GetTick>
 8002f20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f24:	f7fe fb5e 	bl	80015e4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e138      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f3a:	4b4e      	ldr	r3, [pc, #312]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1ee      	bne.n	8002f24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 812d 	beq.w	80031aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f50:	4b48      	ldr	r3, [pc, #288]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f58:	2b18      	cmp	r3, #24
 8002f5a:	f000 80bd 	beq.w	80030d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	f040 809e 	bne.w	80030a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f68:	4b42      	ldr	r3, [pc, #264]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a41      	ldr	r2, [pc, #260]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe fb36 	bl	80015e4 <HAL_GetTick>
 8002f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fe fb32 	bl	80015e4 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e10e      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f8e:	4b39      	ldr	r3, [pc, #228]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f9a:	4b36      	ldr	r3, [pc, #216]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f9e:	4b37      	ldr	r3, [pc, #220]	; (800307c <HAL_RCC_OscConfig+0x774>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	430a      	orrs	r2, r1
 8002fae:	4931      	ldr	r1, [pc, #196]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	628b      	str	r3, [r1, #40]	; 0x28
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	025b      	lsls	r3, r3, #9
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	061b      	lsls	r3, r3, #24
 8002fe0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fe4:	4923      	ldr	r1, [pc, #140]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	4a21      	ldr	r2, [pc, #132]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ff6:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <HAL_RCC_OscConfig+0x778>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003002:	00d2      	lsls	r2, r2, #3
 8003004:	491b      	ldr	r1, [pc, #108]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003006:	4313      	orrs	r3, r2
 8003008:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800300a:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	f023 020c 	bic.w	r2, r3, #12
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	4917      	ldr	r1, [pc, #92]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003018:	4313      	orrs	r3, r2
 800301a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800301c:	4b15      	ldr	r3, [pc, #84]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	f023 0202 	bic.w	r2, r3, #2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	4912      	ldr	r1, [pc, #72]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 800302a:	4313      	orrs	r3, r2
 800302c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	4a10      	ldr	r2, [pc, #64]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	4a0d      	ldr	r2, [pc, #52]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 800304c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003050:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	4a07      	ldr	r2, [pc, #28]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a04      	ldr	r2, [pc, #16]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7fe fabb 	bl	80015e4 <HAL_GetTick>
 800306e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003070:	e011      	b.n	8003096 <HAL_RCC_OscConfig+0x78e>
 8003072:	bf00      	nop
 8003074:	58024400 	.word	0x58024400
 8003078:	58024800 	.word	0x58024800
 800307c:	fffffc0c 	.word	0xfffffc0c
 8003080:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe faae 	bl	80015e4 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e08a      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003096:	4b47      	ldr	r3, [pc, #284]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x77c>
 80030a2:	e082      	b.n	80031aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a4:	4b43      	ldr	r3, [pc, #268]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a42      	ldr	r2, [pc, #264]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 80030aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fe fa98 	bl	80015e4 <HAL_GetTick>
 80030b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fe fa94 	bl	80015e4 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e070      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ca:	4b3a      	ldr	r3, [pc, #232]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x7b0>
 80030d6:	e068      	b.n	80031aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030d8:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030de:	4b35      	ldr	r3, [pc, #212]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d031      	beq.n	8003150 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f003 0203 	and.w	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d12a      	bne.n	8003150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d122      	bne.n	8003150 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003116:	429a      	cmp	r2, r3
 8003118:	d11a      	bne.n	8003150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	0a5b      	lsrs	r3, r3, #9
 800311e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003126:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d111      	bne.n	8003150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	0c1b      	lsrs	r3, r3, #16
 8003130:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d108      	bne.n	8003150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	0e1b      	lsrs	r3, r3, #24
 8003142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e02b      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003154:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	08db      	lsrs	r3, r3, #3
 800315a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800315e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	429a      	cmp	r2, r3
 8003168:	d01f      	beq.n	80031aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	4a11      	ldr	r2, [pc, #68]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003176:	f7fe fa35 	bl	80015e4 <HAL_GetTick>
 800317a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800317c:	bf00      	nop
 800317e:	f7fe fa31 	bl	80015e4 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	4293      	cmp	r3, r2
 8003188:	d0f9      	beq.n	800317e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 800318c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_RCC_OscConfig+0x8b0>)
 8003190:	4013      	ands	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003196:	00d2      	lsls	r2, r2, #3
 8003198:	4906      	ldr	r1, [pc, #24]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 800319a:	4313      	orrs	r3, r2
 800319c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3730      	adds	r7, #48	; 0x30
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	58024400 	.word	0x58024400
 80031b8:	ffff0007 	.word	0xffff0007

080031bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e19c      	b.n	800350a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d0:	4b8a      	ldr	r3, [pc, #552]	; (80033fc <HAL_RCC_ClockConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d910      	bls.n	8003200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b87      	ldr	r3, [pc, #540]	; (80033fc <HAL_RCC_ClockConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 020f 	bic.w	r2, r3, #15
 80031e6:	4985      	ldr	r1, [pc, #532]	; (80033fc <HAL_RCC_ClockConfig+0x240>)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b83      	ldr	r3, [pc, #524]	; (80033fc <HAL_RCC_ClockConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e184      	b.n	800350a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d010      	beq.n	800322e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	4b7b      	ldr	r3, [pc, #492]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003218:	429a      	cmp	r2, r3
 800321a:	d908      	bls.n	800322e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800321c:	4b78      	ldr	r3, [pc, #480]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	4975      	ldr	r1, [pc, #468]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800322a:	4313      	orrs	r3, r2
 800322c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d010      	beq.n	800325c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	4b70      	ldr	r3, [pc, #448]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003246:	429a      	cmp	r2, r3
 8003248:	d908      	bls.n	800325c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800324a:	4b6d      	ldr	r3, [pc, #436]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	496a      	ldr	r1, [pc, #424]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 8003258:	4313      	orrs	r3, r2
 800325a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	d010      	beq.n	800328a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	4b64      	ldr	r3, [pc, #400]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003274:	429a      	cmp	r2, r3
 8003276:	d908      	bls.n	800328a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003278:	4b61      	ldr	r3, [pc, #388]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	495e      	ldr	r1, [pc, #376]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 8003286:	4313      	orrs	r3, r2
 8003288:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d010      	beq.n	80032b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69da      	ldr	r2, [r3, #28]
 800329a:	4b59      	ldr	r3, [pc, #356]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d908      	bls.n	80032b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032a6:	4b56      	ldr	r3, [pc, #344]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	4953      	ldr	r1, [pc, #332]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d010      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	4b4d      	ldr	r3, [pc, #308]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d908      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d4:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f023 020f 	bic.w	r2, r3, #15
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4947      	ldr	r1, [pc, #284]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d055      	beq.n	800339e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80032f2:	4b43      	ldr	r3, [pc, #268]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	4940      	ldr	r1, [pc, #256]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 8003300:	4313      	orrs	r3, r2
 8003302:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d107      	bne.n	800331c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800330c:	4b3c      	ldr	r3, [pc, #240]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d121      	bne.n	800335c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0f6      	b.n	800350a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b03      	cmp	r3, #3
 8003322:	d107      	bne.n	8003334 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d115      	bne.n	800335c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0ea      	b.n	800350a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d107      	bne.n	800334c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800333c:	4b30      	ldr	r3, [pc, #192]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d109      	bne.n	800335c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0de      	b.n	800350a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800334c:	4b2c      	ldr	r3, [pc, #176]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0d6      	b.n	800350a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800335c:	4b28      	ldr	r3, [pc, #160]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f023 0207 	bic.w	r2, r3, #7
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4925      	ldr	r1, [pc, #148]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800336a:	4313      	orrs	r3, r2
 800336c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336e:	f7fe f939 	bl	80015e4 <HAL_GetTick>
 8003372:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003374:	e00a      	b.n	800338c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003376:	f7fe f935 	bl	80015e4 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e0be      	b.n	800350a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338c:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	429a      	cmp	r2, r3
 800339c:	d1eb      	bne.n	8003376 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d010      	beq.n	80033cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	4b14      	ldr	r3, [pc, #80]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d208      	bcs.n	80033cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ba:	4b11      	ldr	r3, [pc, #68]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f023 020f 	bic.w	r2, r3, #15
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	490e      	ldr	r1, [pc, #56]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_ClockConfig+0x240>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d214      	bcs.n	8003404 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <HAL_RCC_ClockConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 020f 	bic.w	r2, r3, #15
 80033e2:	4906      	ldr	r1, [pc, #24]	; (80033fc <HAL_RCC_ClockConfig+0x240>)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <HAL_RCC_ClockConfig+0x240>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e086      	b.n	800350a <HAL_RCC_ClockConfig+0x34e>
 80033fc:	52002000 	.word	0x52002000
 8003400:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d010      	beq.n	8003432 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	4b3f      	ldr	r3, [pc, #252]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800341c:	429a      	cmp	r2, r3
 800341e:	d208      	bcs.n	8003432 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003420:	4b3c      	ldr	r3, [pc, #240]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	4939      	ldr	r1, [pc, #228]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 800342e:	4313      	orrs	r3, r2
 8003430:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d010      	beq.n	8003460 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	4b34      	ldr	r3, [pc, #208]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800344a:	429a      	cmp	r2, r3
 800344c:	d208      	bcs.n	8003460 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800344e:	4b31      	ldr	r3, [pc, #196]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	492e      	ldr	r1, [pc, #184]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 800345c:	4313      	orrs	r3, r2
 800345e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b00      	cmp	r3, #0
 800346a:	d010      	beq.n	800348e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699a      	ldr	r2, [r3, #24]
 8003470:	4b28      	ldr	r3, [pc, #160]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003478:	429a      	cmp	r2, r3
 800347a:	d208      	bcs.n	800348e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800347c:	4b25      	ldr	r3, [pc, #148]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	4922      	ldr	r1, [pc, #136]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 800348a:	4313      	orrs	r3, r2
 800348c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d010      	beq.n	80034bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d208      	bcs.n	80034bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034aa:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	4917      	ldr	r1, [pc, #92]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034bc:	f000 f834 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 80034c0:	4602      	mov	r2, r0
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	0a1b      	lsrs	r3, r3, #8
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	4912      	ldr	r1, [pc, #72]	; (8003518 <HAL_RCC_ClockConfig+0x35c>)
 80034ce:	5ccb      	ldrb	r3, [r1, r3]
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
 80034d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	4a0d      	ldr	r2, [pc, #52]	; (8003518 <HAL_RCC_ClockConfig+0x35c>)
 80034e4:	5cd3      	ldrb	r3, [r2, r3]
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
 80034f0:	4a0a      	ldr	r2, [pc, #40]	; (800351c <HAL_RCC_ClockConfig+0x360>)
 80034f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034f4:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <HAL_RCC_ClockConfig+0x364>)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <HAL_RCC_ClockConfig+0x368>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe f826 	bl	8001550 <HAL_InitTick>
 8003504:	4603      	mov	r3, r0
 8003506:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003508:	7bfb      	ldrb	r3, [r7, #15]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	58024400 	.word	0x58024400
 8003518:	080077e4 	.word	0x080077e4
 800351c:	24000004 	.word	0x24000004
 8003520:	24000000 	.word	0x24000000
 8003524:	24000028 	.word	0x24000028

08003528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	; 0x24
 800352c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800352e:	4bb3      	ldr	r3, [pc, #716]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003536:	2b18      	cmp	r3, #24
 8003538:	f200 8155 	bhi.w	80037e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800353c:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <HAL_RCC_GetSysClockFreq+0x1c>)
 800353e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003542:	bf00      	nop
 8003544:	080035a9 	.word	0x080035a9
 8003548:	080037e7 	.word	0x080037e7
 800354c:	080037e7 	.word	0x080037e7
 8003550:	080037e7 	.word	0x080037e7
 8003554:	080037e7 	.word	0x080037e7
 8003558:	080037e7 	.word	0x080037e7
 800355c:	080037e7 	.word	0x080037e7
 8003560:	080037e7 	.word	0x080037e7
 8003564:	080035cf 	.word	0x080035cf
 8003568:	080037e7 	.word	0x080037e7
 800356c:	080037e7 	.word	0x080037e7
 8003570:	080037e7 	.word	0x080037e7
 8003574:	080037e7 	.word	0x080037e7
 8003578:	080037e7 	.word	0x080037e7
 800357c:	080037e7 	.word	0x080037e7
 8003580:	080037e7 	.word	0x080037e7
 8003584:	080035d5 	.word	0x080035d5
 8003588:	080037e7 	.word	0x080037e7
 800358c:	080037e7 	.word	0x080037e7
 8003590:	080037e7 	.word	0x080037e7
 8003594:	080037e7 	.word	0x080037e7
 8003598:	080037e7 	.word	0x080037e7
 800359c:	080037e7 	.word	0x080037e7
 80035a0:	080037e7 	.word	0x080037e7
 80035a4:	080035db 	.word	0x080035db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035a8:	4b94      	ldr	r3, [pc, #592]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d009      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035b4:	4b91      	ldr	r3, [pc, #580]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	08db      	lsrs	r3, r3, #3
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	4a90      	ldr	r2, [pc, #576]	; (8003800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
 80035c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80035c6:	e111      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80035c8:	4b8d      	ldr	r3, [pc, #564]	; (8003800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035ca:	61bb      	str	r3, [r7, #24]
      break;
 80035cc:	e10e      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80035ce:	4b8d      	ldr	r3, [pc, #564]	; (8003804 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035d0:	61bb      	str	r3, [r7, #24]
      break;
 80035d2:	e10b      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80035d4:	4b8c      	ldr	r3, [pc, #560]	; (8003808 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80035d6:	61bb      	str	r3, [r7, #24]
      break;
 80035d8:	e108      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035da:	4b88      	ldr	r3, [pc, #544]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80035e4:	4b85      	ldr	r3, [pc, #532]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80035f0:	4b82      	ldr	r3, [pc, #520]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80035fa:	4b80      	ldr	r3, [pc, #512]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fe:	08db      	lsrs	r3, r3, #3
 8003600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	fb02 f303 	mul.w	r3, r2, r3
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003612:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80e1 	beq.w	80037e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b02      	cmp	r3, #2
 8003622:	f000 8083 	beq.w	800372c <HAL_RCC_GetSysClockFreq+0x204>
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b02      	cmp	r3, #2
 800362a:	f200 80a1 	bhi.w	8003770 <HAL_RCC_GetSysClockFreq+0x248>
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_RCC_GetSysClockFreq+0x114>
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d056      	beq.n	80036e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800363a:	e099      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800363c:	4b6f      	ldr	r3, [pc, #444]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d02d      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003648:	4b6c      	ldr	r3, [pc, #432]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	08db      	lsrs	r3, r3, #3
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	4a6b      	ldr	r2, [pc, #428]	; (8003800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
 8003658:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	ee07 3a90 	vmov	s15, r3
 800366a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800366e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003672:	4b62      	ldr	r3, [pc, #392]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003682:	ed97 6a02 	vldr	s12, [r7, #8]
 8003686:	eddf 5a61 	vldr	s11, [pc, #388]	; 800380c <HAL_RCC_GetSysClockFreq+0x2e4>
 800368a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800368e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800369a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80036a2:	e087      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	ee07 3a90 	vmov	s15, r3
 80036aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003810 <HAL_RCC_GetSysClockFreq+0x2e8>
 80036b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036b6:	4b51      	ldr	r3, [pc, #324]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800380c <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036e6:	e065      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003814 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036fa:	4b40      	ldr	r3, [pc, #256]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800370a:	ed97 6a02 	vldr	s12, [r7, #8]
 800370e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800380c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800371a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800371e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003726:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800372a:	e043      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003736:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003818 <HAL_RCC_GetSysClockFreq+0x2f0>
 800373a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800373e:	4b2f      	ldr	r3, [pc, #188]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800374e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003752:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800380c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800375a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800375e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800376e:	e021      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003814 <HAL_RCC_GetSysClockFreq+0x2ec>
 800377e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003782:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003792:	ed97 6a02 	vldr	s12, [r7, #8]
 8003796:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800380c <HAL_RCC_GetSysClockFreq+0x2e4>
 800379a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800379e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	0a5b      	lsrs	r3, r3, #9
 80037ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037be:	3301      	adds	r3, #1
 80037c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	ee07 3a90 	vmov	s15, r3
 80037c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80037d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037d8:	ee17 3a90 	vmov	r3, s15
 80037dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80037de:	e005      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61bb      	str	r3, [r7, #24]
      break;
 80037e4:	e002      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80037e6:	4b07      	ldr	r3, [pc, #28]	; (8003804 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037e8:	61bb      	str	r3, [r7, #24]
      break;
 80037ea:	bf00      	nop
  }

  return sysclockfreq;
 80037ec:	69bb      	ldr	r3, [r7, #24]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3724      	adds	r7, #36	; 0x24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	58024400 	.word	0x58024400
 8003800:	03d09000 	.word	0x03d09000
 8003804:	003d0900 	.word	0x003d0900
 8003808:	017d7840 	.word	0x017d7840
 800380c:	46000000 	.word	0x46000000
 8003810:	4c742400 	.word	0x4c742400
 8003814:	4a742400 	.word	0x4a742400
 8003818:	4bbebc20 	.word	0x4bbebc20

0800381c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003822:	f7ff fe81 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 8003826:	4602      	mov	r2, r0
 8003828:	4b10      	ldr	r3, [pc, #64]	; (800386c <HAL_RCC_GetHCLKFreq+0x50>)
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	0a1b      	lsrs	r3, r3, #8
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	490f      	ldr	r1, [pc, #60]	; (8003870 <HAL_RCC_GetHCLKFreq+0x54>)
 8003834:	5ccb      	ldrb	r3, [r1, r3]
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	fa22 f303 	lsr.w	r3, r2, r3
 800383e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003840:	4b0a      	ldr	r3, [pc, #40]	; (800386c <HAL_RCC_GetHCLKFreq+0x50>)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	4a09      	ldr	r2, [pc, #36]	; (8003870 <HAL_RCC_GetHCLKFreq+0x54>)
 800384a:	5cd3      	ldrb	r3, [r2, r3]
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	fa22 f303 	lsr.w	r3, r2, r3
 8003856:	4a07      	ldr	r2, [pc, #28]	; (8003874 <HAL_RCC_GetHCLKFreq+0x58>)
 8003858:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800385a:	4a07      	ldr	r2, [pc, #28]	; (8003878 <HAL_RCC_GetHCLKFreq+0x5c>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <HAL_RCC_GetHCLKFreq+0x58>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	58024400 	.word	0x58024400
 8003870:	080077e4 	.word	0x080077e4
 8003874:	24000004 	.word	0x24000004
 8003878:	24000000 	.word	0x24000000

0800387c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003880:	f7ff ffcc 	bl	800381c <HAL_RCC_GetHCLKFreq>
 8003884:	4602      	mov	r2, r0
 8003886:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	4904      	ldr	r1, [pc, #16]	; (80038a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003892:	5ccb      	ldrb	r3, [r1, r3]
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	58024400 	.word	0x58024400
 80038a4:	080077e4 	.word	0x080077e4

080038a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80038ac:	f7ff ffb6 	bl	800381c <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4904      	ldr	r1, [pc, #16]	; (80038d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	58024400 	.word	0x58024400
 80038d0:	080077e4 	.word	0x080077e4

080038d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d8:	b0ca      	sub	sp, #296	; 0x128
 80038da:	af00      	add	r7, sp, #0
 80038dc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038e0:	2300      	movs	r3, #0
 80038e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038e6:	2300      	movs	r3, #0
 80038e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80038f8:	2500      	movs	r5, #0
 80038fa:	ea54 0305 	orrs.w	r3, r4, r5
 80038fe:	d049      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003906:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800390a:	d02f      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800390c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003910:	d828      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003916:	d01a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800391c:	d822      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003926:	d007      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003928:	e01c      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392a:	4bb8      	ldr	r3, [pc, #736]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	4ab7      	ldr	r2, [pc, #732]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003934:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003936:	e01a      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800393c:	3308      	adds	r3, #8
 800393e:	2102      	movs	r1, #2
 8003940:	4618      	mov	r0, r3
 8003942:	f001 fc8f 	bl	8005264 <RCCEx_PLL2_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800394c:	e00f      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003952:	3328      	adds	r3, #40	; 0x28
 8003954:	2102      	movs	r1, #2
 8003956:	4618      	mov	r0, r3
 8003958:	f001 fd36 	bl	80053c8 <RCCEx_PLL3_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003962:	e004      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800396a:	e000      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800396c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800396e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003976:	4ba5      	ldr	r3, [pc, #660]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003984:	4aa1      	ldr	r2, [pc, #644]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003986:	430b      	orrs	r3, r1
 8003988:	6513      	str	r3, [r2, #80]	; 0x50
 800398a:	e003      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003990:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80039a0:	f04f 0900 	mov.w	r9, #0
 80039a4:	ea58 0309 	orrs.w	r3, r8, r9
 80039a8:	d047      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80039aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d82a      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80039b4:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039d1 	.word	0x080039d1
 80039c0:	080039df 	.word	0x080039df
 80039c4:	080039f5 	.word	0x080039f5
 80039c8:	08003a13 	.word	0x08003a13
 80039cc:	08003a13 	.word	0x08003a13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d0:	4b8e      	ldr	r3, [pc, #568]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	4a8d      	ldr	r2, [pc, #564]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039dc:	e01a      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e2:	3308      	adds	r3, #8
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 fc3c 	bl	8005264 <RCCEx_PLL2_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039f2:	e00f      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f8:	3328      	adds	r3, #40	; 0x28
 80039fa:	2100      	movs	r1, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 fce3 	bl	80053c8 <RCCEx_PLL3_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a08:	e004      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a10:	e000      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a1c:	4b7b      	ldr	r3, [pc, #492]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a20:	f023 0107 	bic.w	r1, r3, #7
 8003a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	4a78      	ldr	r2, [pc, #480]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	6513      	str	r3, [r2, #80]	; 0x50
 8003a30:	e003      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003a46:	f04f 0b00 	mov.w	fp, #0
 8003a4a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003a4e:	d04c      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a5a:	d030      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a60:	d829      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a62:	2bc0      	cmp	r3, #192	; 0xc0
 8003a64:	d02d      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003a66:	2bc0      	cmp	r3, #192	; 0xc0
 8003a68:	d825      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a6a:	2b80      	cmp	r3, #128	; 0x80
 8003a6c:	d018      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003a6e:	2b80      	cmp	r3, #128	; 0x80
 8003a70:	d821      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d007      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003a7a:	e01c      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7c:	4b63      	ldr	r3, [pc, #396]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	4a62      	ldr	r2, [pc, #392]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a88:	e01c      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a8e:	3308      	adds	r3, #8
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 fbe6 	bl	8005264 <RCCEx_PLL2_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a9e:	e011      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa4:	3328      	adds	r3, #40	; 0x28
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f001 fc8d 	bl	80053c8 <RCCEx_PLL3_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ab4:	e006      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003abc:	e002      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003abe:	bf00      	nop
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003acc:	4b4f      	ldr	r3, [pc, #316]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ada:	4a4c      	ldr	r2, [pc, #304]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6513      	str	r3, [r2, #80]	; 0x50
 8003ae0:	e003      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ae6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003af6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003afa:	2300      	movs	r3, #0
 8003afc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003b00:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003b04:	460b      	mov	r3, r1
 8003b06:	4313      	orrs	r3, r2
 8003b08:	d053      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b16:	d035      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003b18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b1c:	d82e      	bhi.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b22:	d031      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003b24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b28:	d828      	bhi.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b2e:	d01a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b34:	d822      	bhi.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003b3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b3e:	d007      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003b40:	e01c      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b42:	4b32      	ldr	r3, [pc, #200]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	4a31      	ldr	r2, [pc, #196]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b4e:	e01c      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b54:	3308      	adds	r3, #8
 8003b56:	2100      	movs	r1, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f001 fb83 	bl	8005264 <RCCEx_PLL2_Config>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b64:	e011      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6a:	3328      	adds	r3, #40	; 0x28
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 fc2a 	bl	80053c8 <RCCEx_PLL3_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b7a:	e006      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b82:	e002      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003b84:	bf00      	nop
 8003b86:	e000      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10b      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b92:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b96:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ba2:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ba8:	e003      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003baa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003bbe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003bc8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	d056      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bde:	d038      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003be0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003be4:	d831      	bhi.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003be6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bea:	d034      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003bec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bf0:	d82b      	bhi.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003bf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bf6:	d01d      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003bf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bfc:	d825      	bhi.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d006      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c06:	d00a      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c08:	e01f      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c0a:	bf00      	nop
 8003c0c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c10:	4ba2      	ldr	r3, [pc, #648]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	4aa1      	ldr	r2, [pc, #644]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c1c:	e01c      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c22:	3308      	adds	r3, #8
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f001 fb1c 	bl	8005264 <RCCEx_PLL2_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c32:	e011      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c38:	3328      	adds	r3, #40	; 0x28
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 fbc3 	bl	80053c8 <RCCEx_PLL3_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c48:	e006      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c50:	e002      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003c52:	bf00      	nop
 8003c54:	e000      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10b      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c60:	4b8e      	ldr	r3, [pc, #568]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c70:	4a8a      	ldr	r2, [pc, #552]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c72:	430b      	orrs	r3, r1
 8003c74:	6593      	str	r3, [r2, #88]	; 0x58
 8003c76:	e003      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c90:	2300      	movs	r3, #0
 8003c92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c96:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	d03a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca6:	2b30      	cmp	r3, #48	; 0x30
 8003ca8:	d01f      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003caa:	2b30      	cmp	r3, #48	; 0x30
 8003cac:	d819      	bhi.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d00c      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	d815      	bhi.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d019      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003cba:	2b10      	cmp	r3, #16
 8003cbc:	d111      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cbe:	4b77      	ldr	r3, [pc, #476]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	4a76      	ldr	r2, [pc, #472]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003cca:	e011      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	2102      	movs	r1, #2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f001 fac5 	bl	8005264 <RCCEx_PLL2_Config>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ce0:	e006      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ce8:	e002      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003cf8:	4b68      	ldr	r3, [pc, #416]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d06:	4a65      	ldr	r2, [pc, #404]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d0c:	e003      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003d22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003d26:	2300      	movs	r3, #0
 8003d28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d2c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4313      	orrs	r3, r2
 8003d34:	d051      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d40:	d035      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003d42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d46:	d82e      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d4c:	d031      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003d4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d52:	d828      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d58:	d01a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5e:	d822      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d68:	d007      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003d6a:	e01c      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d6c:	4b4b      	ldr	r3, [pc, #300]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	4a4a      	ldr	r2, [pc, #296]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d78:	e01c      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7e:	3308      	adds	r3, #8
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f001 fa6e 	bl	8005264 <RCCEx_PLL2_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d8e:	e011      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d94:	3328      	adds	r3, #40	; 0x28
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f001 fb15 	bl	80053c8 <RCCEx_PLL3_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003da4:	e006      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dac:	e002      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003dae:	bf00      	nop
 8003db0:	e000      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10a      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003dbc:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dca:	4a34      	ldr	r2, [pc, #208]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	6513      	str	r3, [r2, #80]	; 0x50
 8003dd0:	e003      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003de6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dea:	2300      	movs	r3, #0
 8003dec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003df0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003df4:	460b      	mov	r3, r1
 8003df6:	4313      	orrs	r3, r2
 8003df8:	d056      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e04:	d033      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003e06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e0a:	d82c      	bhi.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e10:	d02f      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003e12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e16:	d826      	bhi.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e1c:	d02b      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003e1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e22:	d820      	bhi.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e28:	d012      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003e2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e2e:	d81a      	bhi.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d022      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e38:	d115      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e3e:	3308      	adds	r3, #8
 8003e40:	2101      	movs	r1, #1
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 fa0e 	bl	8005264 <RCCEx_PLL2_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e4e:	e015      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e54:	3328      	adds	r3, #40	; 0x28
 8003e56:	2101      	movs	r1, #1
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f001 fab5 	bl	80053c8 <RCCEx_PLL3_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e64:	e00a      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e6c:	e006      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e6e:	bf00      	nop
 8003e70:	e004      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10d      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e88:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e92:	4a02      	ldr	r2, [pc, #8]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6513      	str	r3, [r2, #80]	; 0x50
 8003e98:	e006      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003e9a:	bf00      	nop
 8003e9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ea4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ebe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	d055      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ecc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ed4:	d033      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eda:	d82c      	bhi.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee0:	d02f      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee6:	d826      	bhi.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ee8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003eec:	d02b      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003eee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ef2:	d820      	bhi.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ef8:	d012      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003efe:	d81a      	bhi.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d022      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003f04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f08:	d115      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0e:	3308      	adds	r3, #8
 8003f10:	2101      	movs	r1, #1
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 f9a6 	bl	8005264 <RCCEx_PLL2_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f1e:	e015      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f24:	3328      	adds	r3, #40	; 0x28
 8003f26:	2101      	movs	r1, #1
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f001 fa4d 	bl	80053c8 <RCCEx_PLL3_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f34:	e00a      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f3c:	e006      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f3e:	bf00      	nop
 8003f40:	e004      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f42:	bf00      	nop
 8003f44:	e002      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f46:	bf00      	nop
 8003f48:	e000      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10b      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f54:	4ba3      	ldr	r3, [pc, #652]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f64:	4a9f      	ldr	r2, [pc, #636]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f66:	430b      	orrs	r3, r1
 8003f68:	6593      	str	r3, [r2, #88]	; 0x58
 8003f6a:	e003      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003f80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f84:	2300      	movs	r3, #0
 8003f86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003f8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4313      	orrs	r3, r2
 8003f92:	d037      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f9e:	d00e      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fa4:	d816      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d018      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fae:	d111      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb0:	4b8c      	ldr	r3, [pc, #560]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	4a8b      	ldr	r2, [pc, #556]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003fbc:	e00f      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f001 f94c 	bl	8005264 <RCCEx_PLL2_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003fd2:	e004      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fda:	e000      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10a      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fe6:	4b7f      	ldr	r3, [pc, #508]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	4a7b      	ldr	r2, [pc, #492]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	6513      	str	r3, [r2, #80]	; 0x50
 8003ffa:	e003      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004000:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004014:	2300      	movs	r3, #0
 8004016:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800401a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800401e:	460b      	mov	r3, r1
 8004020:	4313      	orrs	r3, r2
 8004022:	d039      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800402a:	2b03      	cmp	r3, #3
 800402c:	d81c      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800402e:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004034:	08004071 	.word	0x08004071
 8004038:	08004045 	.word	0x08004045
 800403c:	08004053 	.word	0x08004053
 8004040:	08004071 	.word	0x08004071
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004044:	4b67      	ldr	r3, [pc, #412]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	4a66      	ldr	r2, [pc, #408]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800404a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004050:	e00f      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004056:	3308      	adds	r3, #8
 8004058:	2102      	movs	r1, #2
 800405a:	4618      	mov	r0, r3
 800405c:	f001 f902 	bl	8005264 <RCCEx_PLL2_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004066:	e004      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800406e:	e000      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004072:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800407a:	4b5a      	ldr	r3, [pc, #360]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800407c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407e:	f023 0103 	bic.w	r1, r3, #3
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004088:	4a56      	ldr	r2, [pc, #344]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800408a:	430b      	orrs	r3, r1
 800408c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800408e:	e003      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004090:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004094:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80040a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040a8:	2300      	movs	r3, #0
 80040aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80040b2:	460b      	mov	r3, r1
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f000 809f 	beq.w	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ba:	4b4b      	ldr	r3, [pc, #300]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a4a      	ldr	r2, [pc, #296]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80040c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040c6:	f7fd fa8d 	bl	80015e4 <HAL_GetTick>
 80040ca:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040ce:	e00b      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d0:	f7fd fa88 	bl	80015e4 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b64      	cmp	r3, #100	; 0x64
 80040de:	d903      	bls.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040e6:	e005      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040e8:	4b3f      	ldr	r3, [pc, #252]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0ed      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80040f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d179      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80040fc:	4b39      	ldr	r3, [pc, #228]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004104:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004108:	4053      	eors	r3, r2
 800410a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410e:	2b00      	cmp	r3, #0
 8004110:	d015      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004112:	4b34      	ldr	r3, [pc, #208]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800411e:	4b31      	ldr	r3, [pc, #196]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004122:	4a30      	ldr	r2, [pc, #192]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004128:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800412a:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412e:	4a2d      	ldr	r2, [pc, #180]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004134:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004136:	4a2b      	ldr	r2, [pc, #172]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004138:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800413c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800413e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004142:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800414a:	d118      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fd fa4a 	bl	80015e4 <HAL_GetTick>
 8004150:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004154:	e00d      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004156:	f7fd fa45 	bl	80015e4 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004160:	1ad2      	subs	r2, r2, r3
 8004162:	f241 3388 	movw	r3, #5000	; 0x1388
 8004166:	429a      	cmp	r2, r3
 8004168:	d903      	bls.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004170:	e005      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004172:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0eb      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800417e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004182:	2b00      	cmp	r3, #0
 8004184:	d129      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800418a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800418e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004196:	d10e      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004198:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80041a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041a8:	091a      	lsrs	r2, r3, #4
 80041aa:	4b10      	ldr	r3, [pc, #64]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	4a0d      	ldr	r2, [pc, #52]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b0:	430b      	orrs	r3, r1
 80041b2:	6113      	str	r3, [r2, #16]
 80041b4:	e005      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	4a0a      	ldr	r2, [pc, #40]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80041c0:	6113      	str	r3, [r2, #16]
 80041c2:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80041c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d2:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6713      	str	r3, [r2, #112]	; 0x70
 80041d8:	e00e      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80041e2:	e009      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80041e4:	58024400 	.word	0x58024400
 80041e8:	58024800 	.word	0x58024800
 80041ec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80041f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	f002 0301 	and.w	r3, r2, #1
 8004204:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004208:	2300      	movs	r3, #0
 800420a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800420e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004212:	460b      	mov	r3, r1
 8004214:	4313      	orrs	r3, r2
 8004216:	f000 8089 	beq.w	800432c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004220:	2b28      	cmp	r3, #40	; 0x28
 8004222:	d86b      	bhi.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004224:	a201      	add	r2, pc, #4	; (adr r2, 800422c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422a:	bf00      	nop
 800422c:	08004305 	.word	0x08004305
 8004230:	080042fd 	.word	0x080042fd
 8004234:	080042fd 	.word	0x080042fd
 8004238:	080042fd 	.word	0x080042fd
 800423c:	080042fd 	.word	0x080042fd
 8004240:	080042fd 	.word	0x080042fd
 8004244:	080042fd 	.word	0x080042fd
 8004248:	080042fd 	.word	0x080042fd
 800424c:	080042d1 	.word	0x080042d1
 8004250:	080042fd 	.word	0x080042fd
 8004254:	080042fd 	.word	0x080042fd
 8004258:	080042fd 	.word	0x080042fd
 800425c:	080042fd 	.word	0x080042fd
 8004260:	080042fd 	.word	0x080042fd
 8004264:	080042fd 	.word	0x080042fd
 8004268:	080042fd 	.word	0x080042fd
 800426c:	080042e7 	.word	0x080042e7
 8004270:	080042fd 	.word	0x080042fd
 8004274:	080042fd 	.word	0x080042fd
 8004278:	080042fd 	.word	0x080042fd
 800427c:	080042fd 	.word	0x080042fd
 8004280:	080042fd 	.word	0x080042fd
 8004284:	080042fd 	.word	0x080042fd
 8004288:	080042fd 	.word	0x080042fd
 800428c:	08004305 	.word	0x08004305
 8004290:	080042fd 	.word	0x080042fd
 8004294:	080042fd 	.word	0x080042fd
 8004298:	080042fd 	.word	0x080042fd
 800429c:	080042fd 	.word	0x080042fd
 80042a0:	080042fd 	.word	0x080042fd
 80042a4:	080042fd 	.word	0x080042fd
 80042a8:	080042fd 	.word	0x080042fd
 80042ac:	08004305 	.word	0x08004305
 80042b0:	080042fd 	.word	0x080042fd
 80042b4:	080042fd 	.word	0x080042fd
 80042b8:	080042fd 	.word	0x080042fd
 80042bc:	080042fd 	.word	0x080042fd
 80042c0:	080042fd 	.word	0x080042fd
 80042c4:	080042fd 	.word	0x080042fd
 80042c8:	080042fd 	.word	0x080042fd
 80042cc:	08004305 	.word	0x08004305
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d4:	3308      	adds	r3, #8
 80042d6:	2101      	movs	r1, #1
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 ffc3 	bl	8005264 <RCCEx_PLL2_Config>
 80042de:	4603      	mov	r3, r0
 80042e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80042e4:	e00f      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ea:	3328      	adds	r3, #40	; 0x28
 80042ec:	2101      	movs	r1, #1
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 f86a 	bl	80053c8 <RCCEx_PLL3_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80042fa:	e004      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004302:	e000      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800430e:	4bbf      	ldr	r3, [pc, #764]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800431c:	4abb      	ldr	r2, [pc, #748]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800431e:	430b      	orrs	r3, r1
 8004320:	6553      	str	r3, [r2, #84]	; 0x54
 8004322:	e003      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004328:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800432c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	f002 0302 	and.w	r3, r2, #2
 8004338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800433c:	2300      	movs	r3, #0
 800433e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004342:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004346:	460b      	mov	r3, r1
 8004348:	4313      	orrs	r3, r2
 800434a:	d041      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800434c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004352:	2b05      	cmp	r3, #5
 8004354:	d824      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004356:	a201      	add	r2, pc, #4	; (adr r2, 800435c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435c:	080043a9 	.word	0x080043a9
 8004360:	08004375 	.word	0x08004375
 8004364:	0800438b 	.word	0x0800438b
 8004368:	080043a9 	.word	0x080043a9
 800436c:	080043a9 	.word	0x080043a9
 8004370:	080043a9 	.word	0x080043a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004378:	3308      	adds	r3, #8
 800437a:	2101      	movs	r1, #1
 800437c:	4618      	mov	r0, r3
 800437e:	f000 ff71 	bl	8005264 <RCCEx_PLL2_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004388:	e00f      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800438a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438e:	3328      	adds	r3, #40	; 0x28
 8004390:	2101      	movs	r1, #1
 8004392:	4618      	mov	r0, r3
 8004394:	f001 f818 	bl	80053c8 <RCCEx_PLL3_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800439e:	e004      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043a6:	e000      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80043a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80043b2:	4b96      	ldr	r3, [pc, #600]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b6:	f023 0107 	bic.w	r1, r3, #7
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c0:	4a92      	ldr	r2, [pc, #584]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043c2:	430b      	orrs	r3, r1
 80043c4:	6553      	str	r3, [r2, #84]	; 0x54
 80043c6:	e003      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	f002 0304 	and.w	r3, r2, #4
 80043dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043e0:	2300      	movs	r3, #0
 80043e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4313      	orrs	r3, r2
 80043ee:	d044      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f8:	2b05      	cmp	r3, #5
 80043fa:	d825      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80043fc:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80043fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004402:	bf00      	nop
 8004404:	08004451 	.word	0x08004451
 8004408:	0800441d 	.word	0x0800441d
 800440c:	08004433 	.word	0x08004433
 8004410:	08004451 	.word	0x08004451
 8004414:	08004451 	.word	0x08004451
 8004418:	08004451 	.word	0x08004451
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800441c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004420:	3308      	adds	r3, #8
 8004422:	2101      	movs	r1, #1
 8004424:	4618      	mov	r0, r3
 8004426:	f000 ff1d 	bl	8005264 <RCCEx_PLL2_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004430:	e00f      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004436:	3328      	adds	r3, #40	; 0x28
 8004438:	2101      	movs	r1, #1
 800443a:	4618      	mov	r0, r3
 800443c:	f000 ffc4 	bl	80053c8 <RCCEx_PLL3_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004446:	e004      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800444e:	e000      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10b      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800445a:	4b6c      	ldr	r3, [pc, #432]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	f023 0107 	bic.w	r1, r3, #7
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800446a:	4a68      	ldr	r2, [pc, #416]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800446c:	430b      	orrs	r3, r1
 800446e:	6593      	str	r3, [r2, #88]	; 0x58
 8004470:	e003      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004476:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	f002 0320 	and.w	r3, r2, #32
 8004486:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800448a:	2300      	movs	r3, #0
 800448c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004490:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004494:	460b      	mov	r3, r1
 8004496:	4313      	orrs	r3, r2
 8004498:	d055      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800449a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044a6:	d033      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80044a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044ac:	d82c      	bhi.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b2:	d02f      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80044b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b8:	d826      	bhi.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80044ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044be:	d02b      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80044c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044c4:	d820      	bhi.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80044c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ca:	d012      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80044cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044d0:	d81a      	bhi.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d022      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80044d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044da:	d115      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e0:	3308      	adds	r3, #8
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 febd 	bl	8005264 <RCCEx_PLL2_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80044f0:	e015      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f6:	3328      	adds	r3, #40	; 0x28
 80044f8:	2102      	movs	r1, #2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 ff64 	bl	80053c8 <RCCEx_PLL3_Config>
 8004500:	4603      	mov	r3, r0
 8004502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004506:	e00a      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800450e:	e006      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004510:	bf00      	nop
 8004512:	e004      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004514:	bf00      	nop
 8004516:	e002      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004518:	bf00      	nop
 800451a:	e000      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800451c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800451e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10b      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004526:	4b39      	ldr	r3, [pc, #228]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	4a35      	ldr	r2, [pc, #212]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004538:	430b      	orrs	r3, r1
 800453a:	6553      	str	r3, [r2, #84]	; 0x54
 800453c:	e003      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004542:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004556:	2300      	movs	r3, #0
 8004558:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800455c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004560:	460b      	mov	r3, r1
 8004562:	4313      	orrs	r3, r2
 8004564:	d058      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800456e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004572:	d033      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004574:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004578:	d82c      	bhi.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800457a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457e:	d02f      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004584:	d826      	bhi.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004586:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800458a:	d02b      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800458c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004590:	d820      	bhi.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004596:	d012      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459c:	d81a      	bhi.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d022      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80045a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a6:	d115      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ac:	3308      	adds	r3, #8
 80045ae:	2100      	movs	r1, #0
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fe57 	bl	8005264 <RCCEx_PLL2_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045bc:	e015      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c2:	3328      	adds	r3, #40	; 0x28
 80045c4:	2102      	movs	r1, #2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fefe 	bl	80053c8 <RCCEx_PLL3_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045d2:	e00a      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045da:	e006      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80045dc:	bf00      	nop
 80045de:	e004      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80045e0:	bf00      	nop
 80045e2:	e002      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80045e4:	bf00      	nop
 80045e6:	e000      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80045e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10e      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004602:	4a02      	ldr	r2, [pc, #8]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004604:	430b      	orrs	r3, r1
 8004606:	6593      	str	r3, [r2, #88]	; 0x58
 8004608:	e006      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800460a:	bf00      	nop
 800460c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004610:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004614:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004628:	2300      	movs	r3, #0
 800462a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800462e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004632:	460b      	mov	r3, r1
 8004634:	4313      	orrs	r3, r2
 8004636:	d055      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800463c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004640:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004644:	d033      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004646:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800464a:	d82c      	bhi.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800464c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004650:	d02f      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004656:	d826      	bhi.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004658:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800465c:	d02b      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800465e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004662:	d820      	bhi.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004668:	d012      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800466a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800466e:	d81a      	bhi.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d022      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004678:	d115      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800467e:	3308      	adds	r3, #8
 8004680:	2100      	movs	r1, #0
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fdee 	bl	8005264 <RCCEx_PLL2_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800468e:	e015      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004694:	3328      	adds	r3, #40	; 0x28
 8004696:	2102      	movs	r1, #2
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fe95 	bl	80053c8 <RCCEx_PLL3_Config>
 800469e:	4603      	mov	r3, r0
 80046a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80046a4:	e00a      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046ac:	e006      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80046ae:	bf00      	nop
 80046b0:	e004      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80046b2:	bf00      	nop
 80046b4:	e002      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80046b6:	bf00      	nop
 80046b8:	e000      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80046ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10b      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80046c4:	4ba1      	ldr	r3, [pc, #644]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80046cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046d4:	4a9d      	ldr	r2, [pc, #628]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046d6:	430b      	orrs	r3, r1
 80046d8:	6593      	str	r3, [r2, #88]	; 0x58
 80046da:	e003      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80046e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f002 0308 	and.w	r3, r2, #8
 80046f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046f4:	2300      	movs	r3, #0
 80046f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80046fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80046fe:	460b      	mov	r3, r1
 8004700:	4313      	orrs	r3, r2
 8004702:	d01e      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800470c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004710:	d10c      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004716:	3328      	adds	r3, #40	; 0x28
 8004718:	2102      	movs	r1, #2
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fe54 	bl	80053c8 <RCCEx_PLL3_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800472c:	4b87      	ldr	r3, [pc, #540]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004730:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473c:	4a83      	ldr	r2, [pc, #524]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800473e:	430b      	orrs	r3, r1
 8004740:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	f002 0310 	and.w	r3, r2, #16
 800474e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004752:	2300      	movs	r3, #0
 8004754:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004758:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800475c:	460b      	mov	r3, r1
 800475e:	4313      	orrs	r3, r2
 8004760:	d01e      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800476a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800476e:	d10c      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004774:	3328      	adds	r3, #40	; 0x28
 8004776:	2102      	movs	r1, #2
 8004778:	4618      	mov	r0, r3
 800477a:	f000 fe25 	bl	80053c8 <RCCEx_PLL3_Config>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800478a:	4b70      	ldr	r3, [pc, #448]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800478c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800479a:	4a6c      	ldr	r2, [pc, #432]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800479c:	430b      	orrs	r3, r1
 800479e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80047ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047b0:	2300      	movs	r3, #0
 80047b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80047ba:	460b      	mov	r3, r1
 80047bc:	4313      	orrs	r3, r2
 80047be:	d03e      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80047c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047cc:	d022      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80047ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047d2:	d81b      	bhi.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80047d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047dc:	d00b      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80047de:	e015      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e4:	3308      	adds	r3, #8
 80047e6:	2100      	movs	r1, #0
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fd3b 	bl	8005264 <RCCEx_PLL2_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80047f4:	e00f      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fa:	3328      	adds	r3, #40	; 0x28
 80047fc:	2102      	movs	r1, #2
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fde2 	bl	80053c8 <RCCEx_PLL3_Config>
 8004804:	4603      	mov	r3, r0
 8004806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800480a:	e004      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004812:	e000      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004814:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10b      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800481e:	4b4b      	ldr	r3, [pc, #300]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004822:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800482a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800482e:	4a47      	ldr	r2, [pc, #284]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004830:	430b      	orrs	r3, r1
 8004832:	6593      	str	r3, [r2, #88]	; 0x58
 8004834:	e003      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800483a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800483e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800484a:	67bb      	str	r3, [r7, #120]	; 0x78
 800484c:	2300      	movs	r3, #0
 800484e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004850:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004854:	460b      	mov	r3, r1
 8004856:	4313      	orrs	r3, r2
 8004858:	d03b      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004866:	d01f      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004868:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800486c:	d818      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800486e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004872:	d003      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004874:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004878:	d007      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800487a:	e011      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800487c:	4b33      	ldr	r3, [pc, #204]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	4a32      	ldr	r2, [pc, #200]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004886:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004888:	e00f      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800488e:	3328      	adds	r3, #40	; 0x28
 8004890:	2101      	movs	r1, #1
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fd98 	bl	80053c8 <RCCEx_PLL3_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800489e:	e004      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048a6:	e000      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80048a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10b      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048b2:	4b26      	ldr	r3, [pc, #152]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80048ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c2:	4a22      	ldr	r2, [pc, #136]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048c4:	430b      	orrs	r3, r1
 80048c6:	6553      	str	r3, [r2, #84]	; 0x54
 80048c8:	e003      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80048de:	673b      	str	r3, [r7, #112]	; 0x70
 80048e0:	2300      	movs	r3, #0
 80048e2:	677b      	str	r3, [r7, #116]	; 0x74
 80048e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80048e8:	460b      	mov	r3, r1
 80048ea:	4313      	orrs	r3, r2
 80048ec:	d034      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fc:	d007      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80048fe:	e011      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004900:	4b12      	ldr	r3, [pc, #72]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	4a11      	ldr	r2, [pc, #68]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800490a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800490c:	e00e      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004912:	3308      	adds	r3, #8
 8004914:	2102      	movs	r1, #2
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fca4 	bl	8005264 <RCCEx_PLL2_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004922:	e003      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800492a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800492c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10d      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004934:	4b05      	ldr	r3, [pc, #20]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004938:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800493c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004942:	4a02      	ldr	r2, [pc, #8]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004944:	430b      	orrs	r3, r1
 8004946:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004948:	e006      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800494a:	bf00      	nop
 800494c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004950:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004954:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004964:	66bb      	str	r3, [r7, #104]	; 0x68
 8004966:	2300      	movs	r3, #0
 8004968:	66fb      	str	r3, [r7, #108]	; 0x6c
 800496a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800496e:	460b      	mov	r3, r1
 8004970:	4313      	orrs	r3, r2
 8004972:	d00c      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004978:	3328      	adds	r3, #40	; 0x28
 800497a:	2102      	movs	r1, #2
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fd23 	bl	80053c8 <RCCEx_PLL3_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800498e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004996:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800499a:	663b      	str	r3, [r7, #96]	; 0x60
 800499c:	2300      	movs	r3, #0
 800499e:	667b      	str	r3, [r7, #100]	; 0x64
 80049a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80049a4:	460b      	mov	r3, r1
 80049a6:	4313      	orrs	r3, r2
 80049a8:	d038      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80049aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b6:	d018      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80049b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049bc:	d811      	bhi.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80049be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c2:	d014      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80049c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c8:	d80b      	bhi.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d011      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80049ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d2:	d106      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d4:	4bc3      	ldr	r3, [pc, #780]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	4ac2      	ldr	r2, [pc, #776]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80049e0:	e008      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049e8:	e004      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80049ea:	bf00      	nop
 80049ec:	e002      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80049ee:	bf00      	nop
 80049f0:	e000      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80049f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10b      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049fc:	4bb9      	ldr	r3, [pc, #740]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a0c:	4ab5      	ldr	r2, [pc, #724]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	6553      	str	r3, [r2, #84]	; 0x54
 8004a12:	e003      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a24:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004a28:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a2e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004a32:	460b      	mov	r3, r1
 8004a34:	4313      	orrs	r3, r2
 8004a36:	d009      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a38:	4baa      	ldr	r3, [pc, #680]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a46:	4aa7      	ldr	r2, [pc, #668]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004a58:	653b      	str	r3, [r7, #80]	; 0x50
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	657b      	str	r3, [r7, #84]	; 0x54
 8004a5e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004a62:	460b      	mov	r3, r1
 8004a64:	4313      	orrs	r3, r2
 8004a66:	d00a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a68:	4b9e      	ldr	r3, [pc, #632]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a78:	4a9a      	ldr	r2, [pc, #616]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a90:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004a94:	460b      	mov	r3, r1
 8004a96:	4313      	orrs	r3, r2
 8004a98:	d009      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a9a:	4b92      	ldr	r3, [pc, #584]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa8:	4a8e      	ldr	r2, [pc, #568]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004aba:	643b      	str	r3, [r7, #64]	; 0x40
 8004abc:	2300      	movs	r3, #0
 8004abe:	647b      	str	r3, [r7, #68]	; 0x44
 8004ac0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	d00e      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004aca:	4b86      	ldr	r3, [pc, #536]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	4a85      	ldr	r2, [pc, #532]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ad0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ad4:	6113      	str	r3, [r2, #16]
 8004ad6:	4b83      	ldr	r3, [pc, #524]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ad8:	6919      	ldr	r1, [r3, #16]
 8004ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ade:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ae2:	4a80      	ldr	r2, [pc, #512]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004af4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004af6:	2300      	movs	r3, #0
 8004af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004afa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004afe:	460b      	mov	r3, r1
 8004b00:	4313      	orrs	r3, r2
 8004b02:	d009      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b04:	4b77      	ldr	r3, [pc, #476]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b08:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b12:	4a74      	ldr	r2, [pc, #464]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b14:	430b      	orrs	r3, r1
 8004b16:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b20:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004b24:	633b      	str	r3, [r7, #48]	; 0x30
 8004b26:	2300      	movs	r3, #0
 8004b28:	637b      	str	r3, [r7, #52]	; 0x34
 8004b2a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4313      	orrs	r3, r2
 8004b32:	d00a      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b34:	4b6b      	ldr	r3, [pc, #428]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b38:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b44:	4a67      	ldr	r2, [pc, #412]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b46:	430b      	orrs	r3, r1
 8004b48:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b52:	2100      	movs	r1, #0
 8004b54:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004b60:	460b      	mov	r3, r1
 8004b62:	4313      	orrs	r3, r2
 8004b64:	d011      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b6a:	3308      	adds	r3, #8
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fb78 	bl	8005264 <RCCEx_PLL2_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	2100      	movs	r1, #0
 8004b94:	6239      	str	r1, [r7, #32]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	d011      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004baa:	3308      	adds	r3, #8
 8004bac:	2101      	movs	r1, #1
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fb58 	bl	8005264 <RCCEx_PLL2_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004bba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	61b9      	str	r1, [r7, #24]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	61fb      	str	r3, [r7, #28]
 8004bdc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004be0:	460b      	mov	r3, r1
 8004be2:	4313      	orrs	r3, r2
 8004be4:	d011      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bea:	3308      	adds	r3, #8
 8004bec:	2102      	movs	r1, #2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fb38 	bl	8005264 <RCCEx_PLL2_Config>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c12:	2100      	movs	r1, #0
 8004c14:	6139      	str	r1, [r7, #16]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c20:	460b      	mov	r3, r1
 8004c22:	4313      	orrs	r3, r2
 8004c24:	d011      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c2a:	3328      	adds	r3, #40	; 0x28
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fbca 	bl	80053c8 <RCCEx_PLL3_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	2100      	movs	r1, #0
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c60:	460b      	mov	r3, r1
 8004c62:	4313      	orrs	r3, r2
 8004c64:	d011      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c6a:	3328      	adds	r3, #40	; 0x28
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fbaa 	bl	80053c8 <RCCEx_PLL3_Config>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	2100      	movs	r1, #0
 8004c94:	6039      	str	r1, [r7, #0]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	607b      	str	r3, [r7, #4]
 8004c9c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	d011      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004caa:	3328      	adds	r3, #40	; 0x28
 8004cac:	2102      	movs	r1, #2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fb8a 	bl	80053c8 <RCCEx_PLL3_Config>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004cba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004cca:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	e000      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ce4:	58024400 	.word	0x58024400

08004ce8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004cec:	f7fe fd96 	bl	800381c <HAL_RCC_GetHCLKFreq>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	091b      	lsrs	r3, r3, #4
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	4904      	ldr	r1, [pc, #16]	; (8004d10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004cfe:	5ccb      	ldrb	r3, [r1, r3]
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	58024400 	.word	0x58024400
 8004d10:	080077e4 	.word	0x080077e4

08004d14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b089      	sub	sp, #36	; 0x24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d1c:	4ba1      	ldr	r3, [pc, #644]	; (8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004d26:	4b9f      	ldr	r3, [pc, #636]	; (8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	0b1b      	lsrs	r3, r3, #12
 8004d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d32:	4b9c      	ldr	r3, [pc, #624]	; (8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	091b      	lsrs	r3, r3, #4
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004d3e:	4b99      	ldr	r3, [pc, #612]	; (8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d42:	08db      	lsrs	r3, r3, #3
 8004d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8111 	beq.w	8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	f000 8083 	beq.w	8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	f200 80a1 	bhi.w	8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d056      	beq.n	8004e2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004d7e:	e099      	b.n	8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d80:	4b88      	ldr	r3, [pc, #544]	; (8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d02d      	beq.n	8004de8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d8c:	4b85      	ldr	r3, [pc, #532]	; (8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	08db      	lsrs	r3, r3, #3
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	4a84      	ldr	r2, [pc, #528]	; (8004fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	ee07 3a90 	vmov	s15, r3
 8004da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db6:	4b7b      	ldr	r3, [pc, #492]	; (8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004de6:	e087      	b.n	8004ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dfa:	4b6a      	ldr	r3, [pc, #424]	; (8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e2a:	e065      	b.n	8004ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e3e:	4b59      	ldr	r3, [pc, #356]	; (8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e6e:	e043      	b.n	8004ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e82:	4b48      	ldr	r3, [pc, #288]	; (8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eb2:	e021      	b.n	8004ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ebe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec6:	4b37      	ldr	r3, [pc, #220]	; (8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eda:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ef6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ef8:	4b2a      	ldr	r3, [pc, #168]	; (8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	0a5b      	lsrs	r3, r3, #9
 8004efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f1e:	ee17 2a90 	vmov	r2, s15
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004f26:	4b1f      	ldr	r3, [pc, #124]	; (8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2a:	0c1b      	lsrs	r3, r3, #16
 8004f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f30:	ee07 3a90 	vmov	s15, r3
 8004f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f4c:	ee17 2a90 	vmov	r2, s15
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004f54:	4b13      	ldr	r3, [pc, #76]	; (8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	0e1b      	lsrs	r3, r3, #24
 8004f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f7a:	ee17 2a90 	vmov	r2, s15
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f82:	e008      	b.n	8004f96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	609a      	str	r2, [r3, #8]
}
 8004f96:	bf00      	nop
 8004f98:	3724      	adds	r7, #36	; 0x24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	58024400 	.word	0x58024400
 8004fa8:	03d09000 	.word	0x03d09000
 8004fac:	46000000 	.word	0x46000000
 8004fb0:	4c742400 	.word	0x4c742400
 8004fb4:	4a742400 	.word	0x4a742400
 8004fb8:	4bbebc20 	.word	0x4bbebc20

08004fbc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b089      	sub	sp, #36	; 0x24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fc4:	4ba1      	ldr	r3, [pc, #644]	; (800524c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004fce:	4b9f      	ldr	r3, [pc, #636]	; (800524c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	0d1b      	lsrs	r3, r3, #20
 8004fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fd8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004fda:	4b9c      	ldr	r3, [pc, #624]	; (800524c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	0a1b      	lsrs	r3, r3, #8
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004fe6:	4b99      	ldr	r3, [pc, #612]	; (800524c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	08db      	lsrs	r3, r3, #3
 8004fec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8111 	beq.w	800522c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	2b02      	cmp	r3, #2
 800500e:	f000 8083 	beq.w	8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b02      	cmp	r3, #2
 8005016:	f200 80a1 	bhi.w	800515c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d056      	beq.n	80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005026:	e099      	b.n	800515c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005028:	4b88      	ldr	r3, [pc, #544]	; (800524c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d02d      	beq.n	8005090 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005034:	4b85      	ldr	r3, [pc, #532]	; (800524c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	08db      	lsrs	r3, r3, #3
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	4a84      	ldr	r2, [pc, #528]	; (8005250 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005040:	fa22 f303 	lsr.w	r3, r2, r3
 8005044:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	ee07 3a90 	vmov	s15, r3
 800504c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800505e:	4b7b      	ldr	r3, [pc, #492]	; (800524c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800506e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005072:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800507a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800507e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800508e:	e087      	b.n	80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005258 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800509e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a2:	4b6a      	ldr	r3, [pc, #424]	; (800524c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050d2:	e065      	b.n	80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800525c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80050e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050e6:	4b59      	ldr	r3, [pc, #356]	; (800524c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ee:	ee07 3a90 	vmov	s15, r3
 80050f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800510a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800510e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005116:	e043      	b.n	80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005122:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512a:	4b48      	ldr	r3, [pc, #288]	; (800524c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005132:	ee07 3a90 	vmov	s15, r3
 8005136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513a:	ed97 6a03 	vldr	s12, [r7, #12]
 800513e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800514e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800515a:	e021      	b.n	80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005166:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800525c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800516a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800516e:	4b37      	ldr	r3, [pc, #220]	; (800524c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800517e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005182:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800518a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800518e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800519e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80051a0:	4b2a      	ldr	r3, [pc, #168]	; (800524c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	0a5b      	lsrs	r3, r3, #9
 80051a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80051be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051c6:	ee17 2a90 	vmov	r2, s15
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80051ce:	4b1f      	ldr	r3, [pc, #124]	; (800524c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	0c1b      	lsrs	r3, r3, #16
 80051d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051f4:	ee17 2a90 	vmov	r2, s15
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80051fc:	4b13      	ldr	r3, [pc, #76]	; (800524c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	0e1b      	lsrs	r3, r3, #24
 8005202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005216:	edd7 6a07 	vldr	s13, [r7, #28]
 800521a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800521e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005222:	ee17 2a90 	vmov	r2, s15
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800522a:	e008      	b.n	800523e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	609a      	str	r2, [r3, #8]
}
 800523e:	bf00      	nop
 8005240:	3724      	adds	r7, #36	; 0x24
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	58024400 	.word	0x58024400
 8005250:	03d09000 	.word	0x03d09000
 8005254:	46000000 	.word	0x46000000
 8005258:	4c742400 	.word	0x4c742400
 800525c:	4a742400 	.word	0x4a742400
 8005260:	4bbebc20 	.word	0x4bbebc20

08005264 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005272:	4b53      	ldr	r3, [pc, #332]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b03      	cmp	r3, #3
 800527c:	d101      	bne.n	8005282 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e099      	b.n	80053b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005282:	4b4f      	ldr	r3, [pc, #316]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a4e      	ldr	r2, [pc, #312]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 8005288:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800528c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800528e:	f7fc f9a9 	bl	80015e4 <HAL_GetTick>
 8005292:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005294:	e008      	b.n	80052a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005296:	f7fc f9a5 	bl	80015e4 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e086      	b.n	80053b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052a8:	4b45      	ldr	r3, [pc, #276]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1f0      	bne.n	8005296 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80052b4:	4b42      	ldr	r3, [pc, #264]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	031b      	lsls	r3, r3, #12
 80052c2:	493f      	ldr	r1, [pc, #252]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	628b      	str	r3, [r1, #40]	; 0x28
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	025b      	lsls	r3, r3, #9
 80052da:	b29b      	uxth	r3, r3
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	041b      	lsls	r3, r3, #16
 80052e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	061b      	lsls	r3, r3, #24
 80052f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052f8:	4931      	ldr	r1, [pc, #196]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80052fe:	4b30      	ldr	r3, [pc, #192]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 8005300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005302:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	492d      	ldr	r1, [pc, #180]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 800530c:	4313      	orrs	r3, r2
 800530e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005310:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	f023 0220 	bic.w	r2, r3, #32
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	4928      	ldr	r1, [pc, #160]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 800531e:	4313      	orrs	r3, r2
 8005320:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005322:	4b27      	ldr	r3, [pc, #156]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 8005324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005326:	4a26      	ldr	r2, [pc, #152]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 8005328:	f023 0310 	bic.w	r3, r3, #16
 800532c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800532e:	4b24      	ldr	r3, [pc, #144]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 8005330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005332:	4b24      	ldr	r3, [pc, #144]	; (80053c4 <RCCEx_PLL2_Config+0x160>)
 8005334:	4013      	ands	r3, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	69d2      	ldr	r2, [r2, #28]
 800533a:	00d2      	lsls	r2, r2, #3
 800533c:	4920      	ldr	r1, [pc, #128]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 800533e:	4313      	orrs	r3, r2
 8005340:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005342:	4b1f      	ldr	r3, [pc, #124]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	4a1e      	ldr	r2, [pc, #120]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 8005348:	f043 0310 	orr.w	r3, r3, #16
 800534c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d106      	bne.n	8005362 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005354:	4b1a      	ldr	r3, [pc, #104]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 800535a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800535e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005360:	e00f      	b.n	8005382 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d106      	bne.n	8005376 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005368:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	4a14      	ldr	r2, [pc, #80]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 800536e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005372:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005374:	e005      	b.n	8005382 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005376:	4b12      	ldr	r3, [pc, #72]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 8005378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537a:	4a11      	ldr	r2, [pc, #68]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 800537c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005380:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005382:	4b0f      	ldr	r3, [pc, #60]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a0e      	ldr	r2, [pc, #56]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 8005388:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800538c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800538e:	f7fc f929 	bl	80015e4 <HAL_GetTick>
 8005392:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005394:	e008      	b.n	80053a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005396:	f7fc f925 	bl	80015e4 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e006      	b.n	80053b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053a8:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <RCCEx_PLL2_Config+0x15c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0f0      	beq.n	8005396 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	58024400 	.word	0x58024400
 80053c4:	ffff0007 	.word	0xffff0007

080053c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053d6:	4b53      	ldr	r3, [pc, #332]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 80053d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d101      	bne.n	80053e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e099      	b.n	800551a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80053e6:	4b4f      	ldr	r3, [pc, #316]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a4e      	ldr	r2, [pc, #312]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 80053ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f2:	f7fc f8f7 	bl	80015e4 <HAL_GetTick>
 80053f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053f8:	e008      	b.n	800540c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053fa:	f7fc f8f3 	bl	80015e4 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e086      	b.n	800551a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800540c:	4b45      	ldr	r3, [pc, #276]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1f0      	bne.n	80053fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005418:	4b42      	ldr	r3, [pc, #264]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 800541a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	051b      	lsls	r3, r3, #20
 8005426:	493f      	ldr	r1, [pc, #252]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 8005428:	4313      	orrs	r3, r2
 800542a:	628b      	str	r3, [r1, #40]	; 0x28
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	3b01      	subs	r3, #1
 8005432:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	3b01      	subs	r3, #1
 800543c:	025b      	lsls	r3, r3, #9
 800543e:	b29b      	uxth	r3, r3
 8005440:	431a      	orrs	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	3b01      	subs	r3, #1
 8005448:	041b      	lsls	r3, r3, #16
 800544a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	3b01      	subs	r3, #1
 8005456:	061b      	lsls	r3, r3, #24
 8005458:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800545c:	4931      	ldr	r1, [pc, #196]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 800545e:	4313      	orrs	r3, r2
 8005460:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005462:	4b30      	ldr	r3, [pc, #192]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 8005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005466:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	492d      	ldr	r1, [pc, #180]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 8005470:	4313      	orrs	r3, r2
 8005472:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005474:	4b2b      	ldr	r3, [pc, #172]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	4928      	ldr	r1, [pc, #160]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 8005482:	4313      	orrs	r3, r2
 8005484:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005486:	4b27      	ldr	r3, [pc, #156]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548a:	4a26      	ldr	r2, [pc, #152]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 800548c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005490:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005492:	4b24      	ldr	r3, [pc, #144]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 8005494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005496:	4b24      	ldr	r3, [pc, #144]	; (8005528 <RCCEx_PLL3_Config+0x160>)
 8005498:	4013      	ands	r3, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	69d2      	ldr	r2, [r2, #28]
 800549e:	00d2      	lsls	r2, r2, #3
 80054a0:	4920      	ldr	r1, [pc, #128]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80054a6:	4b1f      	ldr	r3, [pc, #124]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 80054a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054aa:	4a1e      	ldr	r2, [pc, #120]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 80054ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80054b8:	4b1a      	ldr	r3, [pc, #104]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	4a19      	ldr	r2, [pc, #100]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 80054be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054c4:	e00f      	b.n	80054e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d106      	bne.n	80054da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80054cc:	4b15      	ldr	r3, [pc, #84]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	4a14      	ldr	r2, [pc, #80]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 80054d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054d8:	e005      	b.n	80054e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80054da:	4b12      	ldr	r3, [pc, #72]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 80054dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054de:	4a11      	ldr	r2, [pc, #68]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 80054e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80054e6:	4b0f      	ldr	r3, [pc, #60]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a0e      	ldr	r2, [pc, #56]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 80054ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f2:	f7fc f877 	bl	80015e4 <HAL_GetTick>
 80054f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054f8:	e008      	b.n	800550c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80054fa:	f7fc f873 	bl	80015e4 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e006      	b.n	800551a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <RCCEx_PLL3_Config+0x15c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0f0      	beq.n	80054fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	58024400 	.word	0x58024400
 8005528:	ffff0007 	.word	0xffff0007

0800552c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e042      	b.n	80055c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7fb fecd 	bl	80012f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2224      	movs	r2, #36	; 0x24
 800555a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0201 	bic.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f8ba 	bl	80056e8 <UART_SetConfig>
 8005574:	4603      	mov	r3, r0
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e022      	b.n	80055c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fe16 	bl	80061b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800559a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fe9d 	bl	80062fc <UART_CheckIdleState>
 80055c2:	4603      	mov	r3, r0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	; 0x28
 80055d0:	af02      	add	r7, sp, #8
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	4613      	mov	r3, r2
 80055da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d17b      	bne.n	80056de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <HAL_UART_Transmit+0x26>
 80055ec:	88fb      	ldrh	r3, [r7, #6]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e074      	b.n	80056e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2221      	movs	r2, #33	; 0x21
 8005602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005606:	f7fb ffed 	bl	80015e4 <HAL_GetTick>
 800560a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	88fa      	ldrh	r2, [r7, #6]
 8005610:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	88fa      	ldrh	r2, [r7, #6]
 8005618:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005624:	d108      	bne.n	8005638 <HAL_UART_Transmit+0x6c>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d104      	bne.n	8005638 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800562e:	2300      	movs	r3, #0
 8005630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	61bb      	str	r3, [r7, #24]
 8005636:	e003      	b.n	8005640 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800563c:	2300      	movs	r3, #0
 800563e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005640:	e030      	b.n	80056a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2200      	movs	r2, #0
 800564a:	2180      	movs	r1, #128	; 0x80
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 feff 	bl	8006450 <UART_WaitOnFlagUntilTimeout>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d005      	beq.n	8005664 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e03d      	b.n	80056e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10b      	bne.n	8005682 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005678:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	3302      	adds	r3, #2
 800567e:	61bb      	str	r3, [r7, #24]
 8005680:	e007      	b.n	8005692 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	781a      	ldrb	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	3301      	adds	r3, #1
 8005690:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1c8      	bne.n	8005642 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2200      	movs	r2, #0
 80056b8:	2140      	movs	r1, #64	; 0x40
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 fec8 	bl	8006450 <UART_WaitOnFlagUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e006      	b.n	80056e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	e000      	b.n	80056e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80056de:	2302      	movs	r3, #2
  }
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3720      	adds	r7, #32
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056ec:	b092      	sub	sp, #72	; 0x48
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	431a      	orrs	r2, r3
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	431a      	orrs	r2, r3
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	4313      	orrs	r3, r2
 800570e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	4bbe      	ldr	r3, [pc, #760]	; (8005a10 <UART_SetConfig+0x328>)
 8005718:	4013      	ands	r3, r2
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	6812      	ldr	r2, [r2, #0]
 800571e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005720:	430b      	orrs	r3, r1
 8005722:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4ab3      	ldr	r2, [pc, #716]	; (8005a14 <UART_SetConfig+0x32c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d004      	beq.n	8005754 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005750:	4313      	orrs	r3, r2
 8005752:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	4baf      	ldr	r3, [pc, #700]	; (8005a18 <UART_SetConfig+0x330>)
 800575c:	4013      	ands	r3, r2
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005764:	430b      	orrs	r3, r1
 8005766:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	f023 010f 	bic.w	r1, r3, #15
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4aa6      	ldr	r2, [pc, #664]	; (8005a1c <UART_SetConfig+0x334>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d177      	bne.n	8005878 <UART_SetConfig+0x190>
 8005788:	4ba5      	ldr	r3, [pc, #660]	; (8005a20 <UART_SetConfig+0x338>)
 800578a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005790:	2b28      	cmp	r3, #40	; 0x28
 8005792:	d86d      	bhi.n	8005870 <UART_SetConfig+0x188>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <UART_SetConfig+0xb4>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	08005841 	.word	0x08005841
 80057a0:	08005871 	.word	0x08005871
 80057a4:	08005871 	.word	0x08005871
 80057a8:	08005871 	.word	0x08005871
 80057ac:	08005871 	.word	0x08005871
 80057b0:	08005871 	.word	0x08005871
 80057b4:	08005871 	.word	0x08005871
 80057b8:	08005871 	.word	0x08005871
 80057bc:	08005849 	.word	0x08005849
 80057c0:	08005871 	.word	0x08005871
 80057c4:	08005871 	.word	0x08005871
 80057c8:	08005871 	.word	0x08005871
 80057cc:	08005871 	.word	0x08005871
 80057d0:	08005871 	.word	0x08005871
 80057d4:	08005871 	.word	0x08005871
 80057d8:	08005871 	.word	0x08005871
 80057dc:	08005851 	.word	0x08005851
 80057e0:	08005871 	.word	0x08005871
 80057e4:	08005871 	.word	0x08005871
 80057e8:	08005871 	.word	0x08005871
 80057ec:	08005871 	.word	0x08005871
 80057f0:	08005871 	.word	0x08005871
 80057f4:	08005871 	.word	0x08005871
 80057f8:	08005871 	.word	0x08005871
 80057fc:	08005859 	.word	0x08005859
 8005800:	08005871 	.word	0x08005871
 8005804:	08005871 	.word	0x08005871
 8005808:	08005871 	.word	0x08005871
 800580c:	08005871 	.word	0x08005871
 8005810:	08005871 	.word	0x08005871
 8005814:	08005871 	.word	0x08005871
 8005818:	08005871 	.word	0x08005871
 800581c:	08005861 	.word	0x08005861
 8005820:	08005871 	.word	0x08005871
 8005824:	08005871 	.word	0x08005871
 8005828:	08005871 	.word	0x08005871
 800582c:	08005871 	.word	0x08005871
 8005830:	08005871 	.word	0x08005871
 8005834:	08005871 	.word	0x08005871
 8005838:	08005871 	.word	0x08005871
 800583c:	08005869 	.word	0x08005869
 8005840:	2301      	movs	r3, #1
 8005842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005846:	e222      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005848:	2304      	movs	r3, #4
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584e:	e21e      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005850:	2308      	movs	r3, #8
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005856:	e21a      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005858:	2310      	movs	r3, #16
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585e:	e216      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005860:	2320      	movs	r3, #32
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005866:	e212      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005868:	2340      	movs	r3, #64	; 0x40
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586e:	e20e      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005870:	2380      	movs	r3, #128	; 0x80
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005876:	e20a      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a69      	ldr	r2, [pc, #420]	; (8005a24 <UART_SetConfig+0x33c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d130      	bne.n	80058e4 <UART_SetConfig+0x1fc>
 8005882:	4b67      	ldr	r3, [pc, #412]	; (8005a20 <UART_SetConfig+0x338>)
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	2b05      	cmp	r3, #5
 800588c:	d826      	bhi.n	80058dc <UART_SetConfig+0x1f4>
 800588e:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <UART_SetConfig+0x1ac>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	080058ad 	.word	0x080058ad
 8005898:	080058b5 	.word	0x080058b5
 800589c:	080058bd 	.word	0x080058bd
 80058a0:	080058c5 	.word	0x080058c5
 80058a4:	080058cd 	.word	0x080058cd
 80058a8:	080058d5 	.word	0x080058d5
 80058ac:	2300      	movs	r3, #0
 80058ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058b2:	e1ec      	b.n	8005c8e <UART_SetConfig+0x5a6>
 80058b4:	2304      	movs	r3, #4
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ba:	e1e8      	b.n	8005c8e <UART_SetConfig+0x5a6>
 80058bc:	2308      	movs	r3, #8
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c2:	e1e4      	b.n	8005c8e <UART_SetConfig+0x5a6>
 80058c4:	2310      	movs	r3, #16
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ca:	e1e0      	b.n	8005c8e <UART_SetConfig+0x5a6>
 80058cc:	2320      	movs	r3, #32
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d2:	e1dc      	b.n	8005c8e <UART_SetConfig+0x5a6>
 80058d4:	2340      	movs	r3, #64	; 0x40
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058da:	e1d8      	b.n	8005c8e <UART_SetConfig+0x5a6>
 80058dc:	2380      	movs	r3, #128	; 0x80
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e2:	e1d4      	b.n	8005c8e <UART_SetConfig+0x5a6>
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a4f      	ldr	r2, [pc, #316]	; (8005a28 <UART_SetConfig+0x340>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d130      	bne.n	8005950 <UART_SetConfig+0x268>
 80058ee:	4b4c      	ldr	r3, [pc, #304]	; (8005a20 <UART_SetConfig+0x338>)
 80058f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	2b05      	cmp	r3, #5
 80058f8:	d826      	bhi.n	8005948 <UART_SetConfig+0x260>
 80058fa:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <UART_SetConfig+0x218>)
 80058fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005900:	08005919 	.word	0x08005919
 8005904:	08005921 	.word	0x08005921
 8005908:	08005929 	.word	0x08005929
 800590c:	08005931 	.word	0x08005931
 8005910:	08005939 	.word	0x08005939
 8005914:	08005941 	.word	0x08005941
 8005918:	2300      	movs	r3, #0
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800591e:	e1b6      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005920:	2304      	movs	r3, #4
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005926:	e1b2      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005928:	2308      	movs	r3, #8
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592e:	e1ae      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005930:	2310      	movs	r3, #16
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005936:	e1aa      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005938:	2320      	movs	r3, #32
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593e:	e1a6      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005940:	2340      	movs	r3, #64	; 0x40
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005946:	e1a2      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005948:	2380      	movs	r3, #128	; 0x80
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594e:	e19e      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a35      	ldr	r2, [pc, #212]	; (8005a2c <UART_SetConfig+0x344>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d130      	bne.n	80059bc <UART_SetConfig+0x2d4>
 800595a:	4b31      	ldr	r3, [pc, #196]	; (8005a20 <UART_SetConfig+0x338>)
 800595c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	2b05      	cmp	r3, #5
 8005964:	d826      	bhi.n	80059b4 <UART_SetConfig+0x2cc>
 8005966:	a201      	add	r2, pc, #4	; (adr r2, 800596c <UART_SetConfig+0x284>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	08005985 	.word	0x08005985
 8005970:	0800598d 	.word	0x0800598d
 8005974:	08005995 	.word	0x08005995
 8005978:	0800599d 	.word	0x0800599d
 800597c:	080059a5 	.word	0x080059a5
 8005980:	080059ad 	.word	0x080059ad
 8005984:	2300      	movs	r3, #0
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800598a:	e180      	b.n	8005c8e <UART_SetConfig+0x5a6>
 800598c:	2304      	movs	r3, #4
 800598e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005992:	e17c      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005994:	2308      	movs	r3, #8
 8005996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599a:	e178      	b.n	8005c8e <UART_SetConfig+0x5a6>
 800599c:	2310      	movs	r3, #16
 800599e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a2:	e174      	b.n	8005c8e <UART_SetConfig+0x5a6>
 80059a4:	2320      	movs	r3, #32
 80059a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059aa:	e170      	b.n	8005c8e <UART_SetConfig+0x5a6>
 80059ac:	2340      	movs	r3, #64	; 0x40
 80059ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059b2:	e16c      	b.n	8005c8e <UART_SetConfig+0x5a6>
 80059b4:	2380      	movs	r3, #128	; 0x80
 80059b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ba:	e168      	b.n	8005c8e <UART_SetConfig+0x5a6>
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <UART_SetConfig+0x348>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d142      	bne.n	8005a4c <UART_SetConfig+0x364>
 80059c6:	4b16      	ldr	r3, [pc, #88]	; (8005a20 <UART_SetConfig+0x338>)
 80059c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	2b05      	cmp	r3, #5
 80059d0:	d838      	bhi.n	8005a44 <UART_SetConfig+0x35c>
 80059d2:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <UART_SetConfig+0x2f0>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	080059f1 	.word	0x080059f1
 80059dc:	080059f9 	.word	0x080059f9
 80059e0:	08005a01 	.word	0x08005a01
 80059e4:	08005a09 	.word	0x08005a09
 80059e8:	08005a35 	.word	0x08005a35
 80059ec:	08005a3d 	.word	0x08005a3d
 80059f0:	2300      	movs	r3, #0
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059f6:	e14a      	b.n	8005c8e <UART_SetConfig+0x5a6>
 80059f8:	2304      	movs	r3, #4
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059fe:	e146      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005a00:	2308      	movs	r3, #8
 8005a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a06:	e142      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005a08:	2310      	movs	r3, #16
 8005a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a0e:	e13e      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005a10:	cfff69f3 	.word	0xcfff69f3
 8005a14:	58000c00 	.word	0x58000c00
 8005a18:	11fff4ff 	.word	0x11fff4ff
 8005a1c:	40011000 	.word	0x40011000
 8005a20:	58024400 	.word	0x58024400
 8005a24:	40004400 	.word	0x40004400
 8005a28:	40004800 	.word	0x40004800
 8005a2c:	40004c00 	.word	0x40004c00
 8005a30:	40005000 	.word	0x40005000
 8005a34:	2320      	movs	r3, #32
 8005a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a3a:	e128      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005a3c:	2340      	movs	r3, #64	; 0x40
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a42:	e124      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005a44:	2380      	movs	r3, #128	; 0x80
 8005a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a4a:	e120      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4acb      	ldr	r2, [pc, #812]	; (8005d80 <UART_SetConfig+0x698>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d176      	bne.n	8005b44 <UART_SetConfig+0x45c>
 8005a56:	4bcb      	ldr	r3, [pc, #812]	; (8005d84 <UART_SetConfig+0x69c>)
 8005a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a5e:	2b28      	cmp	r3, #40	; 0x28
 8005a60:	d86c      	bhi.n	8005b3c <UART_SetConfig+0x454>
 8005a62:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <UART_SetConfig+0x380>)
 8005a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a68:	08005b0d 	.word	0x08005b0d
 8005a6c:	08005b3d 	.word	0x08005b3d
 8005a70:	08005b3d 	.word	0x08005b3d
 8005a74:	08005b3d 	.word	0x08005b3d
 8005a78:	08005b3d 	.word	0x08005b3d
 8005a7c:	08005b3d 	.word	0x08005b3d
 8005a80:	08005b3d 	.word	0x08005b3d
 8005a84:	08005b3d 	.word	0x08005b3d
 8005a88:	08005b15 	.word	0x08005b15
 8005a8c:	08005b3d 	.word	0x08005b3d
 8005a90:	08005b3d 	.word	0x08005b3d
 8005a94:	08005b3d 	.word	0x08005b3d
 8005a98:	08005b3d 	.word	0x08005b3d
 8005a9c:	08005b3d 	.word	0x08005b3d
 8005aa0:	08005b3d 	.word	0x08005b3d
 8005aa4:	08005b3d 	.word	0x08005b3d
 8005aa8:	08005b1d 	.word	0x08005b1d
 8005aac:	08005b3d 	.word	0x08005b3d
 8005ab0:	08005b3d 	.word	0x08005b3d
 8005ab4:	08005b3d 	.word	0x08005b3d
 8005ab8:	08005b3d 	.word	0x08005b3d
 8005abc:	08005b3d 	.word	0x08005b3d
 8005ac0:	08005b3d 	.word	0x08005b3d
 8005ac4:	08005b3d 	.word	0x08005b3d
 8005ac8:	08005b25 	.word	0x08005b25
 8005acc:	08005b3d 	.word	0x08005b3d
 8005ad0:	08005b3d 	.word	0x08005b3d
 8005ad4:	08005b3d 	.word	0x08005b3d
 8005ad8:	08005b3d 	.word	0x08005b3d
 8005adc:	08005b3d 	.word	0x08005b3d
 8005ae0:	08005b3d 	.word	0x08005b3d
 8005ae4:	08005b3d 	.word	0x08005b3d
 8005ae8:	08005b2d 	.word	0x08005b2d
 8005aec:	08005b3d 	.word	0x08005b3d
 8005af0:	08005b3d 	.word	0x08005b3d
 8005af4:	08005b3d 	.word	0x08005b3d
 8005af8:	08005b3d 	.word	0x08005b3d
 8005afc:	08005b3d 	.word	0x08005b3d
 8005b00:	08005b3d 	.word	0x08005b3d
 8005b04:	08005b3d 	.word	0x08005b3d
 8005b08:	08005b35 	.word	0x08005b35
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b12:	e0bc      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005b14:	2304      	movs	r3, #4
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1a:	e0b8      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005b1c:	2308      	movs	r3, #8
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b22:	e0b4      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005b24:	2310      	movs	r3, #16
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2a:	e0b0      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005b2c:	2320      	movs	r3, #32
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b32:	e0ac      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005b34:	2340      	movs	r3, #64	; 0x40
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b3a:	e0a8      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005b3c:	2380      	movs	r3, #128	; 0x80
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b42:	e0a4      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a8f      	ldr	r2, [pc, #572]	; (8005d88 <UART_SetConfig+0x6a0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d130      	bne.n	8005bb0 <UART_SetConfig+0x4c8>
 8005b4e:	4b8d      	ldr	r3, [pc, #564]	; (8005d84 <UART_SetConfig+0x69c>)
 8005b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	2b05      	cmp	r3, #5
 8005b58:	d826      	bhi.n	8005ba8 <UART_SetConfig+0x4c0>
 8005b5a:	a201      	add	r2, pc, #4	; (adr r2, 8005b60 <UART_SetConfig+0x478>)
 8005b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b60:	08005b79 	.word	0x08005b79
 8005b64:	08005b81 	.word	0x08005b81
 8005b68:	08005b89 	.word	0x08005b89
 8005b6c:	08005b91 	.word	0x08005b91
 8005b70:	08005b99 	.word	0x08005b99
 8005b74:	08005ba1 	.word	0x08005ba1
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b7e:	e086      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005b80:	2304      	movs	r3, #4
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b86:	e082      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8e:	e07e      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005b90:	2310      	movs	r3, #16
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b96:	e07a      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005b98:	2320      	movs	r3, #32
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9e:	e076      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005ba0:	2340      	movs	r3, #64	; 0x40
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba6:	e072      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005ba8:	2380      	movs	r3, #128	; 0x80
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bae:	e06e      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a75      	ldr	r2, [pc, #468]	; (8005d8c <UART_SetConfig+0x6a4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d130      	bne.n	8005c1c <UART_SetConfig+0x534>
 8005bba:	4b72      	ldr	r3, [pc, #456]	; (8005d84 <UART_SetConfig+0x69c>)
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	d826      	bhi.n	8005c14 <UART_SetConfig+0x52c>
 8005bc6:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <UART_SetConfig+0x4e4>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005be5 	.word	0x08005be5
 8005bd0:	08005bed 	.word	0x08005bed
 8005bd4:	08005bf5 	.word	0x08005bf5
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005c05 	.word	0x08005c05
 8005be0:	08005c0d 	.word	0x08005c0d
 8005be4:	2300      	movs	r3, #0
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bea:	e050      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005bec:	2304      	movs	r3, #4
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf2:	e04c      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfa:	e048      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c02:	e044      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005c04:	2320      	movs	r3, #32
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0a:	e040      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005c0c:	2340      	movs	r3, #64	; 0x40
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c12:	e03c      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1a:	e038      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a5b      	ldr	r2, [pc, #364]	; (8005d90 <UART_SetConfig+0x6a8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d130      	bne.n	8005c88 <UART_SetConfig+0x5a0>
 8005c26:	4b57      	ldr	r3, [pc, #348]	; (8005d84 <UART_SetConfig+0x69c>)
 8005c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	2b05      	cmp	r3, #5
 8005c30:	d826      	bhi.n	8005c80 <UART_SetConfig+0x598>
 8005c32:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <UART_SetConfig+0x550>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005c51 	.word	0x08005c51
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	08005c61 	.word	0x08005c61
 8005c44:	08005c69 	.word	0x08005c69
 8005c48:	08005c71 	.word	0x08005c71
 8005c4c:	08005c79 	.word	0x08005c79
 8005c50:	2302      	movs	r3, #2
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c56:	e01a      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5e:	e016      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005c60:	2308      	movs	r3, #8
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c66:	e012      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005c68:	2310      	movs	r3, #16
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6e:	e00e      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005c70:	2320      	movs	r3, #32
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c76:	e00a      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005c78:	2340      	movs	r3, #64	; 0x40
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7e:	e006      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005c80:	2380      	movs	r3, #128	; 0x80
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c86:	e002      	b.n	8005c8e <UART_SetConfig+0x5a6>
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a3f      	ldr	r2, [pc, #252]	; (8005d90 <UART_SetConfig+0x6a8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	f040 80f8 	bne.w	8005e8a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	dc46      	bgt.n	8005d30 <UART_SetConfig+0x648>
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	f2c0 8082 	blt.w	8005dac <UART_SetConfig+0x6c4>
 8005ca8:	3b02      	subs	r3, #2
 8005caa:	2b1e      	cmp	r3, #30
 8005cac:	d87e      	bhi.n	8005dac <UART_SetConfig+0x6c4>
 8005cae:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <UART_SetConfig+0x5cc>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005d37 	.word	0x08005d37
 8005cb8:	08005dad 	.word	0x08005dad
 8005cbc:	08005d3f 	.word	0x08005d3f
 8005cc0:	08005dad 	.word	0x08005dad
 8005cc4:	08005dad 	.word	0x08005dad
 8005cc8:	08005dad 	.word	0x08005dad
 8005ccc:	08005d4f 	.word	0x08005d4f
 8005cd0:	08005dad 	.word	0x08005dad
 8005cd4:	08005dad 	.word	0x08005dad
 8005cd8:	08005dad 	.word	0x08005dad
 8005cdc:	08005dad 	.word	0x08005dad
 8005ce0:	08005dad 	.word	0x08005dad
 8005ce4:	08005dad 	.word	0x08005dad
 8005ce8:	08005dad 	.word	0x08005dad
 8005cec:	08005d5f 	.word	0x08005d5f
 8005cf0:	08005dad 	.word	0x08005dad
 8005cf4:	08005dad 	.word	0x08005dad
 8005cf8:	08005dad 	.word	0x08005dad
 8005cfc:	08005dad 	.word	0x08005dad
 8005d00:	08005dad 	.word	0x08005dad
 8005d04:	08005dad 	.word	0x08005dad
 8005d08:	08005dad 	.word	0x08005dad
 8005d0c:	08005dad 	.word	0x08005dad
 8005d10:	08005dad 	.word	0x08005dad
 8005d14:	08005dad 	.word	0x08005dad
 8005d18:	08005dad 	.word	0x08005dad
 8005d1c:	08005dad 	.word	0x08005dad
 8005d20:	08005dad 	.word	0x08005dad
 8005d24:	08005dad 	.word	0x08005dad
 8005d28:	08005dad 	.word	0x08005dad
 8005d2c:	08005d9f 	.word	0x08005d9f
 8005d30:	2b40      	cmp	r3, #64	; 0x40
 8005d32:	d037      	beq.n	8005da4 <UART_SetConfig+0x6bc>
 8005d34:	e03a      	b.n	8005dac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005d36:	f7fe ffd7 	bl	8004ce8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005d3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d3c:	e03c      	b.n	8005db8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fe ffe6 	bl	8004d14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d4c:	e034      	b.n	8005db8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d4e:	f107 0318 	add.w	r3, r7, #24
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff f932 	bl	8004fbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d5c:	e02c      	b.n	8005db8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d5e:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <UART_SetConfig+0x69c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d016      	beq.n	8005d98 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d6a:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <UART_SetConfig+0x69c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	08db      	lsrs	r3, r3, #3
 8005d70:	f003 0303 	and.w	r3, r3, #3
 8005d74:	4a07      	ldr	r2, [pc, #28]	; (8005d94 <UART_SetConfig+0x6ac>)
 8005d76:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d7c:	e01c      	b.n	8005db8 <UART_SetConfig+0x6d0>
 8005d7e:	bf00      	nop
 8005d80:	40011400 	.word	0x40011400
 8005d84:	58024400 	.word	0x58024400
 8005d88:	40007800 	.word	0x40007800
 8005d8c:	40007c00 	.word	0x40007c00
 8005d90:	58000c00 	.word	0x58000c00
 8005d94:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005d98:	4b9d      	ldr	r3, [pc, #628]	; (8006010 <UART_SetConfig+0x928>)
 8005d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d9c:	e00c      	b.n	8005db8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d9e:	4b9d      	ldr	r3, [pc, #628]	; (8006014 <UART_SetConfig+0x92c>)
 8005da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005da2:	e009      	b.n	8005db8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005da4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005daa:	e005      	b.n	8005db8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005db6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 81de 	beq.w	800617c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	4a94      	ldr	r2, [pc, #592]	; (8006018 <UART_SetConfig+0x930>)
 8005dc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dce:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dd2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	4413      	add	r3, r2
 8005dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d305      	bcc.n	8005df0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d903      	bls.n	8005df8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005df6:	e1c1      	b.n	800617c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	60bb      	str	r3, [r7, #8]
 8005dfe:	60fa      	str	r2, [r7, #12]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	4a84      	ldr	r2, [pc, #528]	; (8006018 <UART_SetConfig+0x930>)
 8005e06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e1a:	f7fa fab9 	bl	8000390 <__aeabi_uldivmod>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	4610      	mov	r0, r2
 8005e24:	4619      	mov	r1, r3
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	020b      	lsls	r3, r1, #8
 8005e30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e34:	0202      	lsls	r2, r0, #8
 8005e36:	6979      	ldr	r1, [r7, #20]
 8005e38:	6849      	ldr	r1, [r1, #4]
 8005e3a:	0849      	lsrs	r1, r1, #1
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	4605      	mov	r5, r0
 8005e42:	eb12 0804 	adds.w	r8, r2, r4
 8005e46:	eb43 0905 	adc.w	r9, r3, r5
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	469a      	mov	sl, r3
 8005e52:	4693      	mov	fp, r2
 8005e54:	4652      	mov	r2, sl
 8005e56:	465b      	mov	r3, fp
 8005e58:	4640      	mov	r0, r8
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	f7fa fa98 	bl	8000390 <__aeabi_uldivmod>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4613      	mov	r3, r2
 8005e66:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e6e:	d308      	bcc.n	8005e82 <UART_SetConfig+0x79a>
 8005e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e76:	d204      	bcs.n	8005e82 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e7e:	60da      	str	r2, [r3, #12]
 8005e80:	e17c      	b.n	800617c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005e88:	e178      	b.n	800617c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e92:	f040 80c5 	bne.w	8006020 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005e96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	dc48      	bgt.n	8005f30 <UART_SetConfig+0x848>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	db7b      	blt.n	8005f9a <UART_SetConfig+0x8b2>
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d879      	bhi.n	8005f9a <UART_SetConfig+0x8b2>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <UART_SetConfig+0x7c4>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005f37 	.word	0x08005f37
 8005eb0:	08005f3f 	.word	0x08005f3f
 8005eb4:	08005f9b 	.word	0x08005f9b
 8005eb8:	08005f9b 	.word	0x08005f9b
 8005ebc:	08005f47 	.word	0x08005f47
 8005ec0:	08005f9b 	.word	0x08005f9b
 8005ec4:	08005f9b 	.word	0x08005f9b
 8005ec8:	08005f9b 	.word	0x08005f9b
 8005ecc:	08005f57 	.word	0x08005f57
 8005ed0:	08005f9b 	.word	0x08005f9b
 8005ed4:	08005f9b 	.word	0x08005f9b
 8005ed8:	08005f9b 	.word	0x08005f9b
 8005edc:	08005f9b 	.word	0x08005f9b
 8005ee0:	08005f9b 	.word	0x08005f9b
 8005ee4:	08005f9b 	.word	0x08005f9b
 8005ee8:	08005f9b 	.word	0x08005f9b
 8005eec:	08005f67 	.word	0x08005f67
 8005ef0:	08005f9b 	.word	0x08005f9b
 8005ef4:	08005f9b 	.word	0x08005f9b
 8005ef8:	08005f9b 	.word	0x08005f9b
 8005efc:	08005f9b 	.word	0x08005f9b
 8005f00:	08005f9b 	.word	0x08005f9b
 8005f04:	08005f9b 	.word	0x08005f9b
 8005f08:	08005f9b 	.word	0x08005f9b
 8005f0c:	08005f9b 	.word	0x08005f9b
 8005f10:	08005f9b 	.word	0x08005f9b
 8005f14:	08005f9b 	.word	0x08005f9b
 8005f18:	08005f9b 	.word	0x08005f9b
 8005f1c:	08005f9b 	.word	0x08005f9b
 8005f20:	08005f9b 	.word	0x08005f9b
 8005f24:	08005f9b 	.word	0x08005f9b
 8005f28:	08005f9b 	.word	0x08005f9b
 8005f2c:	08005f8d 	.word	0x08005f8d
 8005f30:	2b40      	cmp	r3, #64	; 0x40
 8005f32:	d02e      	beq.n	8005f92 <UART_SetConfig+0x8aa>
 8005f34:	e031      	b.n	8005f9a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f36:	f7fd fca1 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 8005f3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f3c:	e033      	b.n	8005fa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f3e:	f7fd fcb3 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 8005f42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f44:	e02f      	b.n	8005fa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fe fee2 	bl	8004d14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f54:	e027      	b.n	8005fa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f56:	f107 0318 	add.w	r3, r7, #24
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff f82e 	bl	8004fbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f64:	e01f      	b.n	8005fa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f66:	4b2d      	ldr	r3, [pc, #180]	; (800601c <UART_SetConfig+0x934>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f72:	4b2a      	ldr	r3, [pc, #168]	; (800601c <UART_SetConfig+0x934>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	08db      	lsrs	r3, r3, #3
 8005f78:	f003 0303 	and.w	r3, r3, #3
 8005f7c:	4a24      	ldr	r2, [pc, #144]	; (8006010 <UART_SetConfig+0x928>)
 8005f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f84:	e00f      	b.n	8005fa6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005f86:	4b22      	ldr	r3, [pc, #136]	; (8006010 <UART_SetConfig+0x928>)
 8005f88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f8a:	e00c      	b.n	8005fa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f8c:	4b21      	ldr	r3, [pc, #132]	; (8006014 <UART_SetConfig+0x92c>)
 8005f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f90:	e009      	b.n	8005fa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f98:	e005      	b.n	8005fa6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005fa4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 80e7 	beq.w	800617c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	4a19      	ldr	r2, [pc, #100]	; (8006018 <UART_SetConfig+0x930>)
 8005fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fc0:	005a      	lsls	r2, r3, #1
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	085b      	lsrs	r3, r3, #1
 8005fc8:	441a      	add	r2, r3
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	2b0f      	cmp	r3, #15
 8005fd8:	d916      	bls.n	8006008 <UART_SetConfig+0x920>
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe0:	d212      	bcs.n	8006008 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f023 030f 	bic.w	r3, r3, #15
 8005fea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006004:	60da      	str	r2, [r3, #12]
 8006006:	e0b9      	b.n	800617c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800600e:	e0b5      	b.n	800617c <UART_SetConfig+0xa94>
 8006010:	03d09000 	.word	0x03d09000
 8006014:	003d0900 	.word	0x003d0900
 8006018:	080077f4 	.word	0x080077f4
 800601c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006020:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006024:	2b20      	cmp	r3, #32
 8006026:	dc49      	bgt.n	80060bc <UART_SetConfig+0x9d4>
 8006028:	2b00      	cmp	r3, #0
 800602a:	db7c      	blt.n	8006126 <UART_SetConfig+0xa3e>
 800602c:	2b20      	cmp	r3, #32
 800602e:	d87a      	bhi.n	8006126 <UART_SetConfig+0xa3e>
 8006030:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <UART_SetConfig+0x950>)
 8006032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006036:	bf00      	nop
 8006038:	080060c3 	.word	0x080060c3
 800603c:	080060cb 	.word	0x080060cb
 8006040:	08006127 	.word	0x08006127
 8006044:	08006127 	.word	0x08006127
 8006048:	080060d3 	.word	0x080060d3
 800604c:	08006127 	.word	0x08006127
 8006050:	08006127 	.word	0x08006127
 8006054:	08006127 	.word	0x08006127
 8006058:	080060e3 	.word	0x080060e3
 800605c:	08006127 	.word	0x08006127
 8006060:	08006127 	.word	0x08006127
 8006064:	08006127 	.word	0x08006127
 8006068:	08006127 	.word	0x08006127
 800606c:	08006127 	.word	0x08006127
 8006070:	08006127 	.word	0x08006127
 8006074:	08006127 	.word	0x08006127
 8006078:	080060f3 	.word	0x080060f3
 800607c:	08006127 	.word	0x08006127
 8006080:	08006127 	.word	0x08006127
 8006084:	08006127 	.word	0x08006127
 8006088:	08006127 	.word	0x08006127
 800608c:	08006127 	.word	0x08006127
 8006090:	08006127 	.word	0x08006127
 8006094:	08006127 	.word	0x08006127
 8006098:	08006127 	.word	0x08006127
 800609c:	08006127 	.word	0x08006127
 80060a0:	08006127 	.word	0x08006127
 80060a4:	08006127 	.word	0x08006127
 80060a8:	08006127 	.word	0x08006127
 80060ac:	08006127 	.word	0x08006127
 80060b0:	08006127 	.word	0x08006127
 80060b4:	08006127 	.word	0x08006127
 80060b8:	08006119 	.word	0x08006119
 80060bc:	2b40      	cmp	r3, #64	; 0x40
 80060be:	d02e      	beq.n	800611e <UART_SetConfig+0xa36>
 80060c0:	e031      	b.n	8006126 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c2:	f7fd fbdb 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 80060c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80060c8:	e033      	b.n	8006132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060ca:	f7fd fbed 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 80060ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80060d0:	e02f      	b.n	8006132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fe fe1c 	bl	8004d14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060e0:	e027      	b.n	8006132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060e2:	f107 0318 	add.w	r3, r7, #24
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fe ff68 	bl	8004fbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060f0:	e01f      	b.n	8006132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060f2:	4b2d      	ldr	r3, [pc, #180]	; (80061a8 <UART_SetConfig+0xac0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0320 	and.w	r3, r3, #32
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d009      	beq.n	8006112 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060fe:	4b2a      	ldr	r3, [pc, #168]	; (80061a8 <UART_SetConfig+0xac0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	08db      	lsrs	r3, r3, #3
 8006104:	f003 0303 	and.w	r3, r3, #3
 8006108:	4a28      	ldr	r2, [pc, #160]	; (80061ac <UART_SetConfig+0xac4>)
 800610a:	fa22 f303 	lsr.w	r3, r2, r3
 800610e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006110:	e00f      	b.n	8006132 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006112:	4b26      	ldr	r3, [pc, #152]	; (80061ac <UART_SetConfig+0xac4>)
 8006114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006116:	e00c      	b.n	8006132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006118:	4b25      	ldr	r3, [pc, #148]	; (80061b0 <UART_SetConfig+0xac8>)
 800611a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800611c:	e009      	b.n	8006132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800611e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006124:	e005      	b.n	8006132 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006130:	bf00      	nop
    }

    if (pclk != 0U)
 8006132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006134:	2b00      	cmp	r3, #0
 8006136:	d021      	beq.n	800617c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	4a1d      	ldr	r2, [pc, #116]	; (80061b4 <UART_SetConfig+0xacc>)
 800613e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006142:	461a      	mov	r2, r3
 8006144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006146:	fbb3 f2f2 	udiv	r2, r3, r2
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	441a      	add	r2, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	fbb2 f3f3 	udiv	r3, r2, r3
 800615a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	2b0f      	cmp	r3, #15
 8006160:	d909      	bls.n	8006176 <UART_SetConfig+0xa8e>
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006168:	d205      	bcs.n	8006176 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616c:	b29a      	uxth	r2, r3
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60da      	str	r2, [r3, #12]
 8006174:	e002      	b.n	800617c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2201      	movs	r2, #1
 8006180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	2201      	movs	r2, #1
 8006188:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2200      	movs	r2, #0
 8006190:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2200      	movs	r2, #0
 8006196:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006198:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800619c:	4618      	mov	r0, r3
 800619e:	3748      	adds	r7, #72	; 0x48
 80061a0:	46bd      	mov	sp, r7
 80061a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061a6:	bf00      	nop
 80061a8:	58024400 	.word	0x58024400
 80061ac:	03d09000 	.word	0x03d09000
 80061b0:	003d0900 	.word	0x003d0900
 80061b4:	080077f4 	.word	0x080077f4

080061b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00a      	beq.n	80061e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00a      	beq.n	8006204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00a      	beq.n	8006226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622a:	f003 0308 	and.w	r3, r3, #8
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00a      	beq.n	8006248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00a      	beq.n	800626a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01a      	beq.n	80062ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062b6:	d10a      	bne.n	80062ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	605a      	str	r2, [r3, #4]
  }
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b098      	sub	sp, #96	; 0x60
 8006300:	af02      	add	r7, sp, #8
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800630c:	f7fb f96a 	bl	80015e4 <HAL_GetTick>
 8006310:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b08      	cmp	r3, #8
 800631e:	d12f      	bne.n	8006380 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006328:	2200      	movs	r2, #0
 800632a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f88e 	bl	8006450 <UART_WaitOnFlagUntilTimeout>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d022      	beq.n	8006380 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800634e:	653b      	str	r3, [r7, #80]	; 0x50
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006358:	647b      	str	r3, [r7, #68]	; 0x44
 800635a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800635e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e6      	bne.n	800633a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e063      	b.n	8006448 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0304 	and.w	r3, r3, #4
 800638a:	2b04      	cmp	r3, #4
 800638c:	d149      	bne.n	8006422 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800638e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006396:	2200      	movs	r2, #0
 8006398:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f857 	bl	8006450 <UART_WaitOnFlagUntilTimeout>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d03c      	beq.n	8006422 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	623b      	str	r3, [r7, #32]
   return(result);
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c6:	633b      	str	r3, [r7, #48]	; 0x30
 80063c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e6      	bne.n	80063a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3308      	adds	r3, #8
 80063e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3308      	adds	r3, #8
 80063f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063fa:	61fa      	str	r2, [r7, #28]
 80063fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	69b9      	ldr	r1, [r7, #24]
 8006400:	69fa      	ldr	r2, [r7, #28]
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	617b      	str	r3, [r7, #20]
   return(result);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e5      	bne.n	80063da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e012      	b.n	8006448 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3758      	adds	r7, #88	; 0x58
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006460:	e049      	b.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006468:	d045      	beq.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800646a:	f7fb f8bb 	bl	80015e4 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	429a      	cmp	r2, r3
 8006478:	d302      	bcc.n	8006480 <UART_WaitOnFlagUntilTimeout+0x30>
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e048      	b.n	8006516 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	d031      	beq.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	f003 0308 	and.w	r3, r3, #8
 800649c:	2b08      	cmp	r3, #8
 800649e:	d110      	bne.n	80064c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2208      	movs	r2, #8
 80064a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 f839 	bl	8006520 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2208      	movs	r2, #8
 80064b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e029      	b.n	8006516 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d0:	d111      	bne.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f81f 	bl	8006520 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e00f      	b.n	8006516 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69da      	ldr	r2, [r3, #28]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4013      	ands	r3, r2
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	429a      	cmp	r2, r3
 8006504:	bf0c      	ite	eq
 8006506:	2301      	moveq	r3, #1
 8006508:	2300      	movne	r3, #0
 800650a:	b2db      	uxtb	r3, r3
 800650c:	461a      	mov	r2, r3
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	429a      	cmp	r2, r3
 8006512:	d0a6      	beq.n	8006462 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006520:	b480      	push	{r7}
 8006522:	b095      	sub	sp, #84	; 0x54
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800653c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006546:	643b      	str	r3, [r7, #64]	; 0x40
 8006548:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800654c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e6      	bne.n	8006528 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3308      	adds	r3, #8
 8006560:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	61fb      	str	r3, [r7, #28]
   return(result);
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	4b1e      	ldr	r3, [pc, #120]	; (80065e8 <UART_EndRxTransfer+0xc8>)
 800656e:	4013      	ands	r3, r2
 8006570:	64bb      	str	r3, [r7, #72]	; 0x48
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3308      	adds	r3, #8
 8006578:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800657a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800657c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e5      	bne.n	800655a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006592:	2b01      	cmp	r3, #1
 8006594:	d118      	bne.n	80065c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	e853 3f00 	ldrex	r3, [r3]
 80065a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f023 0310 	bic.w	r3, r3, #16
 80065aa:	647b      	str	r3, [r7, #68]	; 0x44
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	461a      	mov	r2, r3
 80065b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b8:	6979      	ldr	r1, [r7, #20]
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	e841 2300 	strex	r3, r2, [r1]
 80065c0:	613b      	str	r3, [r7, #16]
   return(result);
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e6      	bne.n	8006596 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	675a      	str	r2, [r3, #116]	; 0x74
}
 80065dc:	bf00      	nop
 80065de:	3754      	adds	r7, #84	; 0x54
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	effffffe 	.word	0xeffffffe

080065ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <HAL_UARTEx_DisableFifoMode+0x16>
 80065fe:	2302      	movs	r3, #2
 8006600:	e027      	b.n	8006652 <HAL_UARTEx_DisableFifoMode+0x66>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2224      	movs	r2, #36	; 0x24
 800660e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0201 	bic.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006630:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b084      	sub	sp, #16
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800666e:	2b01      	cmp	r3, #1
 8006670:	d101      	bne.n	8006676 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006672:	2302      	movs	r3, #2
 8006674:	e02d      	b.n	80066d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2224      	movs	r2, #36	; 0x24
 8006682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0201 	bic.w	r2, r2, #1
 800669c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f850 	bl	8006758 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e02d      	b.n	800674e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2224      	movs	r2, #36	; 0x24
 80066fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0201 	bic.w	r2, r2, #1
 8006718:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f812 	bl	8006758 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006764:	2b00      	cmp	r3, #0
 8006766:	d108      	bne.n	800677a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006778:	e031      	b.n	80067de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800677a:	2310      	movs	r3, #16
 800677c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800677e:	2310      	movs	r3, #16
 8006780:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	0e5b      	lsrs	r3, r3, #25
 800678a:	b2db      	uxtb	r3, r3
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	0f5b      	lsrs	r3, r3, #29
 800679a:	b2db      	uxtb	r3, r3
 800679c:	f003 0307 	and.w	r3, r3, #7
 80067a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067a2:	7bbb      	ldrb	r3, [r7, #14]
 80067a4:	7b3a      	ldrb	r2, [r7, #12]
 80067a6:	4911      	ldr	r1, [pc, #68]	; (80067ec <UARTEx_SetNbDataToProcess+0x94>)
 80067a8:	5c8a      	ldrb	r2, [r1, r2]
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80067ae:	7b3a      	ldrb	r2, [r7, #12]
 80067b0:	490f      	ldr	r1, [pc, #60]	; (80067f0 <UARTEx_SetNbDataToProcess+0x98>)
 80067b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
 80067c2:	7b7a      	ldrb	r2, [r7, #13]
 80067c4:	4909      	ldr	r1, [pc, #36]	; (80067ec <UARTEx_SetNbDataToProcess+0x94>)
 80067c6:	5c8a      	ldrb	r2, [r1, r2]
 80067c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80067cc:	7b7a      	ldrb	r2, [r7, #13]
 80067ce:	4908      	ldr	r1, [pc, #32]	; (80067f0 <UARTEx_SetNbDataToProcess+0x98>)
 80067d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80067de:	bf00      	nop
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	0800780c 	.word	0x0800780c
 80067f0:	08007814 	.word	0x08007814

080067f4 <siprintf>:
 80067f4:	b40e      	push	{r1, r2, r3}
 80067f6:	b500      	push	{lr}
 80067f8:	b09c      	sub	sp, #112	; 0x70
 80067fa:	ab1d      	add	r3, sp, #116	; 0x74
 80067fc:	9002      	str	r0, [sp, #8]
 80067fe:	9006      	str	r0, [sp, #24]
 8006800:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006804:	4809      	ldr	r0, [pc, #36]	; (800682c <siprintf+0x38>)
 8006806:	9107      	str	r1, [sp, #28]
 8006808:	9104      	str	r1, [sp, #16]
 800680a:	4909      	ldr	r1, [pc, #36]	; (8006830 <siprintf+0x3c>)
 800680c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006810:	9105      	str	r1, [sp, #20]
 8006812:	6800      	ldr	r0, [r0, #0]
 8006814:	9301      	str	r3, [sp, #4]
 8006816:	a902      	add	r1, sp, #8
 8006818:	f000 f992 	bl	8006b40 <_svfiprintf_r>
 800681c:	9b02      	ldr	r3, [sp, #8]
 800681e:	2200      	movs	r2, #0
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	b01c      	add	sp, #112	; 0x70
 8006824:	f85d eb04 	ldr.w	lr, [sp], #4
 8006828:	b003      	add	sp, #12
 800682a:	4770      	bx	lr
 800682c:	2400007c 	.word	0x2400007c
 8006830:	ffff0208 	.word	0xffff0208

08006834 <memset>:
 8006834:	4402      	add	r2, r0
 8006836:	4603      	mov	r3, r0
 8006838:	4293      	cmp	r3, r2
 800683a:	d100      	bne.n	800683e <memset+0xa>
 800683c:	4770      	bx	lr
 800683e:	f803 1b01 	strb.w	r1, [r3], #1
 8006842:	e7f9      	b.n	8006838 <memset+0x4>

08006844 <__errno>:
 8006844:	4b01      	ldr	r3, [pc, #4]	; (800684c <__errno+0x8>)
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	2400007c 	.word	0x2400007c

08006850 <__libc_init_array>:
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	4d0d      	ldr	r5, [pc, #52]	; (8006888 <__libc_init_array+0x38>)
 8006854:	4c0d      	ldr	r4, [pc, #52]	; (800688c <__libc_init_array+0x3c>)
 8006856:	1b64      	subs	r4, r4, r5
 8006858:	10a4      	asrs	r4, r4, #2
 800685a:	2600      	movs	r6, #0
 800685c:	42a6      	cmp	r6, r4
 800685e:	d109      	bne.n	8006874 <__libc_init_array+0x24>
 8006860:	4d0b      	ldr	r5, [pc, #44]	; (8006890 <__libc_init_array+0x40>)
 8006862:	4c0c      	ldr	r4, [pc, #48]	; (8006894 <__libc_init_array+0x44>)
 8006864:	f000 ff60 	bl	8007728 <_init>
 8006868:	1b64      	subs	r4, r4, r5
 800686a:	10a4      	asrs	r4, r4, #2
 800686c:	2600      	movs	r6, #0
 800686e:	42a6      	cmp	r6, r4
 8006870:	d105      	bne.n	800687e <__libc_init_array+0x2e>
 8006872:	bd70      	pop	{r4, r5, r6, pc}
 8006874:	f855 3b04 	ldr.w	r3, [r5], #4
 8006878:	4798      	blx	r3
 800687a:	3601      	adds	r6, #1
 800687c:	e7ee      	b.n	800685c <__libc_init_array+0xc>
 800687e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006882:	4798      	blx	r3
 8006884:	3601      	adds	r6, #1
 8006886:	e7f2      	b.n	800686e <__libc_init_array+0x1e>
 8006888:	08009110 	.word	0x08009110
 800688c:	08009110 	.word	0x08009110
 8006890:	08009110 	.word	0x08009110
 8006894:	08009114 	.word	0x08009114

08006898 <__retarget_lock_acquire_recursive>:
 8006898:	4770      	bx	lr

0800689a <__retarget_lock_release_recursive>:
 800689a:	4770      	bx	lr

0800689c <_free_r>:
 800689c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800689e:	2900      	cmp	r1, #0
 80068a0:	d044      	beq.n	800692c <_free_r+0x90>
 80068a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068a6:	9001      	str	r0, [sp, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f1a1 0404 	sub.w	r4, r1, #4
 80068ae:	bfb8      	it	lt
 80068b0:	18e4      	addlt	r4, r4, r3
 80068b2:	f000 f8df 	bl	8006a74 <__malloc_lock>
 80068b6:	4a1e      	ldr	r2, [pc, #120]	; (8006930 <_free_r+0x94>)
 80068b8:	9801      	ldr	r0, [sp, #4]
 80068ba:	6813      	ldr	r3, [r2, #0]
 80068bc:	b933      	cbnz	r3, 80068cc <_free_r+0x30>
 80068be:	6063      	str	r3, [r4, #4]
 80068c0:	6014      	str	r4, [r2, #0]
 80068c2:	b003      	add	sp, #12
 80068c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068c8:	f000 b8da 	b.w	8006a80 <__malloc_unlock>
 80068cc:	42a3      	cmp	r3, r4
 80068ce:	d908      	bls.n	80068e2 <_free_r+0x46>
 80068d0:	6825      	ldr	r5, [r4, #0]
 80068d2:	1961      	adds	r1, r4, r5
 80068d4:	428b      	cmp	r3, r1
 80068d6:	bf01      	itttt	eq
 80068d8:	6819      	ldreq	r1, [r3, #0]
 80068da:	685b      	ldreq	r3, [r3, #4]
 80068dc:	1949      	addeq	r1, r1, r5
 80068de:	6021      	streq	r1, [r4, #0]
 80068e0:	e7ed      	b.n	80068be <_free_r+0x22>
 80068e2:	461a      	mov	r2, r3
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	b10b      	cbz	r3, 80068ec <_free_r+0x50>
 80068e8:	42a3      	cmp	r3, r4
 80068ea:	d9fa      	bls.n	80068e2 <_free_r+0x46>
 80068ec:	6811      	ldr	r1, [r2, #0]
 80068ee:	1855      	adds	r5, r2, r1
 80068f0:	42a5      	cmp	r5, r4
 80068f2:	d10b      	bne.n	800690c <_free_r+0x70>
 80068f4:	6824      	ldr	r4, [r4, #0]
 80068f6:	4421      	add	r1, r4
 80068f8:	1854      	adds	r4, r2, r1
 80068fa:	42a3      	cmp	r3, r4
 80068fc:	6011      	str	r1, [r2, #0]
 80068fe:	d1e0      	bne.n	80068c2 <_free_r+0x26>
 8006900:	681c      	ldr	r4, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	6053      	str	r3, [r2, #4]
 8006906:	440c      	add	r4, r1
 8006908:	6014      	str	r4, [r2, #0]
 800690a:	e7da      	b.n	80068c2 <_free_r+0x26>
 800690c:	d902      	bls.n	8006914 <_free_r+0x78>
 800690e:	230c      	movs	r3, #12
 8006910:	6003      	str	r3, [r0, #0]
 8006912:	e7d6      	b.n	80068c2 <_free_r+0x26>
 8006914:	6825      	ldr	r5, [r4, #0]
 8006916:	1961      	adds	r1, r4, r5
 8006918:	428b      	cmp	r3, r1
 800691a:	bf04      	itt	eq
 800691c:	6819      	ldreq	r1, [r3, #0]
 800691e:	685b      	ldreq	r3, [r3, #4]
 8006920:	6063      	str	r3, [r4, #4]
 8006922:	bf04      	itt	eq
 8006924:	1949      	addeq	r1, r1, r5
 8006926:	6021      	streq	r1, [r4, #0]
 8006928:	6054      	str	r4, [r2, #4]
 800692a:	e7ca      	b.n	80068c2 <_free_r+0x26>
 800692c:	b003      	add	sp, #12
 800692e:	bd30      	pop	{r4, r5, pc}
 8006930:	240002e4 	.word	0x240002e4

08006934 <sbrk_aligned>:
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	4e0e      	ldr	r6, [pc, #56]	; (8006970 <sbrk_aligned+0x3c>)
 8006938:	460c      	mov	r4, r1
 800693a:	6831      	ldr	r1, [r6, #0]
 800693c:	4605      	mov	r5, r0
 800693e:	b911      	cbnz	r1, 8006946 <sbrk_aligned+0x12>
 8006940:	f000 fba6 	bl	8007090 <_sbrk_r>
 8006944:	6030      	str	r0, [r6, #0]
 8006946:	4621      	mov	r1, r4
 8006948:	4628      	mov	r0, r5
 800694a:	f000 fba1 	bl	8007090 <_sbrk_r>
 800694e:	1c43      	adds	r3, r0, #1
 8006950:	d00a      	beq.n	8006968 <sbrk_aligned+0x34>
 8006952:	1cc4      	adds	r4, r0, #3
 8006954:	f024 0403 	bic.w	r4, r4, #3
 8006958:	42a0      	cmp	r0, r4
 800695a:	d007      	beq.n	800696c <sbrk_aligned+0x38>
 800695c:	1a21      	subs	r1, r4, r0
 800695e:	4628      	mov	r0, r5
 8006960:	f000 fb96 	bl	8007090 <_sbrk_r>
 8006964:	3001      	adds	r0, #1
 8006966:	d101      	bne.n	800696c <sbrk_aligned+0x38>
 8006968:	f04f 34ff 	mov.w	r4, #4294967295
 800696c:	4620      	mov	r0, r4
 800696e:	bd70      	pop	{r4, r5, r6, pc}
 8006970:	240002e8 	.word	0x240002e8

08006974 <_malloc_r>:
 8006974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006978:	1ccd      	adds	r5, r1, #3
 800697a:	f025 0503 	bic.w	r5, r5, #3
 800697e:	3508      	adds	r5, #8
 8006980:	2d0c      	cmp	r5, #12
 8006982:	bf38      	it	cc
 8006984:	250c      	movcc	r5, #12
 8006986:	2d00      	cmp	r5, #0
 8006988:	4607      	mov	r7, r0
 800698a:	db01      	blt.n	8006990 <_malloc_r+0x1c>
 800698c:	42a9      	cmp	r1, r5
 800698e:	d905      	bls.n	800699c <_malloc_r+0x28>
 8006990:	230c      	movs	r3, #12
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	2600      	movs	r6, #0
 8006996:	4630      	mov	r0, r6
 8006998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800699c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a70 <_malloc_r+0xfc>
 80069a0:	f000 f868 	bl	8006a74 <__malloc_lock>
 80069a4:	f8d8 3000 	ldr.w	r3, [r8]
 80069a8:	461c      	mov	r4, r3
 80069aa:	bb5c      	cbnz	r4, 8006a04 <_malloc_r+0x90>
 80069ac:	4629      	mov	r1, r5
 80069ae:	4638      	mov	r0, r7
 80069b0:	f7ff ffc0 	bl	8006934 <sbrk_aligned>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	4604      	mov	r4, r0
 80069b8:	d155      	bne.n	8006a66 <_malloc_r+0xf2>
 80069ba:	f8d8 4000 	ldr.w	r4, [r8]
 80069be:	4626      	mov	r6, r4
 80069c0:	2e00      	cmp	r6, #0
 80069c2:	d145      	bne.n	8006a50 <_malloc_r+0xdc>
 80069c4:	2c00      	cmp	r4, #0
 80069c6:	d048      	beq.n	8006a5a <_malloc_r+0xe6>
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	4631      	mov	r1, r6
 80069cc:	4638      	mov	r0, r7
 80069ce:	eb04 0903 	add.w	r9, r4, r3
 80069d2:	f000 fb5d 	bl	8007090 <_sbrk_r>
 80069d6:	4581      	cmp	r9, r0
 80069d8:	d13f      	bne.n	8006a5a <_malloc_r+0xe6>
 80069da:	6821      	ldr	r1, [r4, #0]
 80069dc:	1a6d      	subs	r5, r5, r1
 80069de:	4629      	mov	r1, r5
 80069e0:	4638      	mov	r0, r7
 80069e2:	f7ff ffa7 	bl	8006934 <sbrk_aligned>
 80069e6:	3001      	adds	r0, #1
 80069e8:	d037      	beq.n	8006a5a <_malloc_r+0xe6>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	442b      	add	r3, r5
 80069ee:	6023      	str	r3, [r4, #0]
 80069f0:	f8d8 3000 	ldr.w	r3, [r8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d038      	beq.n	8006a6a <_malloc_r+0xf6>
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	42a2      	cmp	r2, r4
 80069fc:	d12b      	bne.n	8006a56 <_malloc_r+0xe2>
 80069fe:	2200      	movs	r2, #0
 8006a00:	605a      	str	r2, [r3, #4]
 8006a02:	e00f      	b.n	8006a24 <_malloc_r+0xb0>
 8006a04:	6822      	ldr	r2, [r4, #0]
 8006a06:	1b52      	subs	r2, r2, r5
 8006a08:	d41f      	bmi.n	8006a4a <_malloc_r+0xd6>
 8006a0a:	2a0b      	cmp	r2, #11
 8006a0c:	d917      	bls.n	8006a3e <_malloc_r+0xca>
 8006a0e:	1961      	adds	r1, r4, r5
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	6025      	str	r5, [r4, #0]
 8006a14:	bf18      	it	ne
 8006a16:	6059      	strne	r1, [r3, #4]
 8006a18:	6863      	ldr	r3, [r4, #4]
 8006a1a:	bf08      	it	eq
 8006a1c:	f8c8 1000 	streq.w	r1, [r8]
 8006a20:	5162      	str	r2, [r4, r5]
 8006a22:	604b      	str	r3, [r1, #4]
 8006a24:	4638      	mov	r0, r7
 8006a26:	f104 060b 	add.w	r6, r4, #11
 8006a2a:	f000 f829 	bl	8006a80 <__malloc_unlock>
 8006a2e:	f026 0607 	bic.w	r6, r6, #7
 8006a32:	1d23      	adds	r3, r4, #4
 8006a34:	1af2      	subs	r2, r6, r3
 8006a36:	d0ae      	beq.n	8006996 <_malloc_r+0x22>
 8006a38:	1b9b      	subs	r3, r3, r6
 8006a3a:	50a3      	str	r3, [r4, r2]
 8006a3c:	e7ab      	b.n	8006996 <_malloc_r+0x22>
 8006a3e:	42a3      	cmp	r3, r4
 8006a40:	6862      	ldr	r2, [r4, #4]
 8006a42:	d1dd      	bne.n	8006a00 <_malloc_r+0x8c>
 8006a44:	f8c8 2000 	str.w	r2, [r8]
 8006a48:	e7ec      	b.n	8006a24 <_malloc_r+0xb0>
 8006a4a:	4623      	mov	r3, r4
 8006a4c:	6864      	ldr	r4, [r4, #4]
 8006a4e:	e7ac      	b.n	80069aa <_malloc_r+0x36>
 8006a50:	4634      	mov	r4, r6
 8006a52:	6876      	ldr	r6, [r6, #4]
 8006a54:	e7b4      	b.n	80069c0 <_malloc_r+0x4c>
 8006a56:	4613      	mov	r3, r2
 8006a58:	e7cc      	b.n	80069f4 <_malloc_r+0x80>
 8006a5a:	230c      	movs	r3, #12
 8006a5c:	603b      	str	r3, [r7, #0]
 8006a5e:	4638      	mov	r0, r7
 8006a60:	f000 f80e 	bl	8006a80 <__malloc_unlock>
 8006a64:	e797      	b.n	8006996 <_malloc_r+0x22>
 8006a66:	6025      	str	r5, [r4, #0]
 8006a68:	e7dc      	b.n	8006a24 <_malloc_r+0xb0>
 8006a6a:	605b      	str	r3, [r3, #4]
 8006a6c:	deff      	udf	#255	; 0xff
 8006a6e:	bf00      	nop
 8006a70:	240002e4 	.word	0x240002e4

08006a74 <__malloc_lock>:
 8006a74:	4801      	ldr	r0, [pc, #4]	; (8006a7c <__malloc_lock+0x8>)
 8006a76:	f7ff bf0f 	b.w	8006898 <__retarget_lock_acquire_recursive>
 8006a7a:	bf00      	nop
 8006a7c:	240002e0 	.word	0x240002e0

08006a80 <__malloc_unlock>:
 8006a80:	4801      	ldr	r0, [pc, #4]	; (8006a88 <__malloc_unlock+0x8>)
 8006a82:	f7ff bf0a 	b.w	800689a <__retarget_lock_release_recursive>
 8006a86:	bf00      	nop
 8006a88:	240002e0 	.word	0x240002e0

08006a8c <__ssputs_r>:
 8006a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a90:	688e      	ldr	r6, [r1, #8]
 8006a92:	461f      	mov	r7, r3
 8006a94:	42be      	cmp	r6, r7
 8006a96:	680b      	ldr	r3, [r1, #0]
 8006a98:	4682      	mov	sl, r0
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	4690      	mov	r8, r2
 8006a9e:	d82c      	bhi.n	8006afa <__ssputs_r+0x6e>
 8006aa0:	898a      	ldrh	r2, [r1, #12]
 8006aa2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006aa6:	d026      	beq.n	8006af6 <__ssputs_r+0x6a>
 8006aa8:	6965      	ldr	r5, [r4, #20]
 8006aaa:	6909      	ldr	r1, [r1, #16]
 8006aac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ab0:	eba3 0901 	sub.w	r9, r3, r1
 8006ab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ab8:	1c7b      	adds	r3, r7, #1
 8006aba:	444b      	add	r3, r9
 8006abc:	106d      	asrs	r5, r5, #1
 8006abe:	429d      	cmp	r5, r3
 8006ac0:	bf38      	it	cc
 8006ac2:	461d      	movcc	r5, r3
 8006ac4:	0553      	lsls	r3, r2, #21
 8006ac6:	d527      	bpl.n	8006b18 <__ssputs_r+0x8c>
 8006ac8:	4629      	mov	r1, r5
 8006aca:	f7ff ff53 	bl	8006974 <_malloc_r>
 8006ace:	4606      	mov	r6, r0
 8006ad0:	b360      	cbz	r0, 8006b2c <__ssputs_r+0xa0>
 8006ad2:	6921      	ldr	r1, [r4, #16]
 8006ad4:	464a      	mov	r2, r9
 8006ad6:	f000 faeb 	bl	80070b0 <memcpy>
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae4:	81a3      	strh	r3, [r4, #12]
 8006ae6:	6126      	str	r6, [r4, #16]
 8006ae8:	6165      	str	r5, [r4, #20]
 8006aea:	444e      	add	r6, r9
 8006aec:	eba5 0509 	sub.w	r5, r5, r9
 8006af0:	6026      	str	r6, [r4, #0]
 8006af2:	60a5      	str	r5, [r4, #8]
 8006af4:	463e      	mov	r6, r7
 8006af6:	42be      	cmp	r6, r7
 8006af8:	d900      	bls.n	8006afc <__ssputs_r+0x70>
 8006afa:	463e      	mov	r6, r7
 8006afc:	6820      	ldr	r0, [r4, #0]
 8006afe:	4632      	mov	r2, r6
 8006b00:	4641      	mov	r1, r8
 8006b02:	f000 faab 	bl	800705c <memmove>
 8006b06:	68a3      	ldr	r3, [r4, #8]
 8006b08:	1b9b      	subs	r3, r3, r6
 8006b0a:	60a3      	str	r3, [r4, #8]
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	4433      	add	r3, r6
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	2000      	movs	r0, #0
 8006b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b18:	462a      	mov	r2, r5
 8006b1a:	f000 fad7 	bl	80070cc <_realloc_r>
 8006b1e:	4606      	mov	r6, r0
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d1e0      	bne.n	8006ae6 <__ssputs_r+0x5a>
 8006b24:	6921      	ldr	r1, [r4, #16]
 8006b26:	4650      	mov	r0, sl
 8006b28:	f7ff feb8 	bl	800689c <_free_r>
 8006b2c:	230c      	movs	r3, #12
 8006b2e:	f8ca 3000 	str.w	r3, [sl]
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b38:	81a3      	strh	r3, [r4, #12]
 8006b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3e:	e7e9      	b.n	8006b14 <__ssputs_r+0x88>

08006b40 <_svfiprintf_r>:
 8006b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b44:	4698      	mov	r8, r3
 8006b46:	898b      	ldrh	r3, [r1, #12]
 8006b48:	061b      	lsls	r3, r3, #24
 8006b4a:	b09d      	sub	sp, #116	; 0x74
 8006b4c:	4607      	mov	r7, r0
 8006b4e:	460d      	mov	r5, r1
 8006b50:	4614      	mov	r4, r2
 8006b52:	d50e      	bpl.n	8006b72 <_svfiprintf_r+0x32>
 8006b54:	690b      	ldr	r3, [r1, #16]
 8006b56:	b963      	cbnz	r3, 8006b72 <_svfiprintf_r+0x32>
 8006b58:	2140      	movs	r1, #64	; 0x40
 8006b5a:	f7ff ff0b 	bl	8006974 <_malloc_r>
 8006b5e:	6028      	str	r0, [r5, #0]
 8006b60:	6128      	str	r0, [r5, #16]
 8006b62:	b920      	cbnz	r0, 8006b6e <_svfiprintf_r+0x2e>
 8006b64:	230c      	movs	r3, #12
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6c:	e0d0      	b.n	8006d10 <_svfiprintf_r+0x1d0>
 8006b6e:	2340      	movs	r3, #64	; 0x40
 8006b70:	616b      	str	r3, [r5, #20]
 8006b72:	2300      	movs	r3, #0
 8006b74:	9309      	str	r3, [sp, #36]	; 0x24
 8006b76:	2320      	movs	r3, #32
 8006b78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b80:	2330      	movs	r3, #48	; 0x30
 8006b82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006d28 <_svfiprintf_r+0x1e8>
 8006b86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b8a:	f04f 0901 	mov.w	r9, #1
 8006b8e:	4623      	mov	r3, r4
 8006b90:	469a      	mov	sl, r3
 8006b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b96:	b10a      	cbz	r2, 8006b9c <_svfiprintf_r+0x5c>
 8006b98:	2a25      	cmp	r2, #37	; 0x25
 8006b9a:	d1f9      	bne.n	8006b90 <_svfiprintf_r+0x50>
 8006b9c:	ebba 0b04 	subs.w	fp, sl, r4
 8006ba0:	d00b      	beq.n	8006bba <_svfiprintf_r+0x7a>
 8006ba2:	465b      	mov	r3, fp
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	4638      	mov	r0, r7
 8006baa:	f7ff ff6f 	bl	8006a8c <__ssputs_r>
 8006bae:	3001      	adds	r0, #1
 8006bb0:	f000 80a9 	beq.w	8006d06 <_svfiprintf_r+0x1c6>
 8006bb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bb6:	445a      	add	r2, fp
 8006bb8:	9209      	str	r2, [sp, #36]	; 0x24
 8006bba:	f89a 3000 	ldrb.w	r3, [sl]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 80a1 	beq.w	8006d06 <_svfiprintf_r+0x1c6>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bce:	f10a 0a01 	add.w	sl, sl, #1
 8006bd2:	9304      	str	r3, [sp, #16]
 8006bd4:	9307      	str	r3, [sp, #28]
 8006bd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bda:	931a      	str	r3, [sp, #104]	; 0x68
 8006bdc:	4654      	mov	r4, sl
 8006bde:	2205      	movs	r2, #5
 8006be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006be4:	4850      	ldr	r0, [pc, #320]	; (8006d28 <_svfiprintf_r+0x1e8>)
 8006be6:	f7f9 fb83 	bl	80002f0 <memchr>
 8006bea:	9a04      	ldr	r2, [sp, #16]
 8006bec:	b9d8      	cbnz	r0, 8006c26 <_svfiprintf_r+0xe6>
 8006bee:	06d0      	lsls	r0, r2, #27
 8006bf0:	bf44      	itt	mi
 8006bf2:	2320      	movmi	r3, #32
 8006bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bf8:	0711      	lsls	r1, r2, #28
 8006bfa:	bf44      	itt	mi
 8006bfc:	232b      	movmi	r3, #43	; 0x2b
 8006bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c02:	f89a 3000 	ldrb.w	r3, [sl]
 8006c06:	2b2a      	cmp	r3, #42	; 0x2a
 8006c08:	d015      	beq.n	8006c36 <_svfiprintf_r+0xf6>
 8006c0a:	9a07      	ldr	r2, [sp, #28]
 8006c0c:	4654      	mov	r4, sl
 8006c0e:	2000      	movs	r0, #0
 8006c10:	f04f 0c0a 	mov.w	ip, #10
 8006c14:	4621      	mov	r1, r4
 8006c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c1a:	3b30      	subs	r3, #48	; 0x30
 8006c1c:	2b09      	cmp	r3, #9
 8006c1e:	d94d      	bls.n	8006cbc <_svfiprintf_r+0x17c>
 8006c20:	b1b0      	cbz	r0, 8006c50 <_svfiprintf_r+0x110>
 8006c22:	9207      	str	r2, [sp, #28]
 8006c24:	e014      	b.n	8006c50 <_svfiprintf_r+0x110>
 8006c26:	eba0 0308 	sub.w	r3, r0, r8
 8006c2a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	9304      	str	r3, [sp, #16]
 8006c32:	46a2      	mov	sl, r4
 8006c34:	e7d2      	b.n	8006bdc <_svfiprintf_r+0x9c>
 8006c36:	9b03      	ldr	r3, [sp, #12]
 8006c38:	1d19      	adds	r1, r3, #4
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	9103      	str	r1, [sp, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	bfbb      	ittet	lt
 8006c42:	425b      	neglt	r3, r3
 8006c44:	f042 0202 	orrlt.w	r2, r2, #2
 8006c48:	9307      	strge	r3, [sp, #28]
 8006c4a:	9307      	strlt	r3, [sp, #28]
 8006c4c:	bfb8      	it	lt
 8006c4e:	9204      	strlt	r2, [sp, #16]
 8006c50:	7823      	ldrb	r3, [r4, #0]
 8006c52:	2b2e      	cmp	r3, #46	; 0x2e
 8006c54:	d10c      	bne.n	8006c70 <_svfiprintf_r+0x130>
 8006c56:	7863      	ldrb	r3, [r4, #1]
 8006c58:	2b2a      	cmp	r3, #42	; 0x2a
 8006c5a:	d134      	bne.n	8006cc6 <_svfiprintf_r+0x186>
 8006c5c:	9b03      	ldr	r3, [sp, #12]
 8006c5e:	1d1a      	adds	r2, r3, #4
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	9203      	str	r2, [sp, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bfb8      	it	lt
 8006c68:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c6c:	3402      	adds	r4, #2
 8006c6e:	9305      	str	r3, [sp, #20]
 8006c70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006d38 <_svfiprintf_r+0x1f8>
 8006c74:	7821      	ldrb	r1, [r4, #0]
 8006c76:	2203      	movs	r2, #3
 8006c78:	4650      	mov	r0, sl
 8006c7a:	f7f9 fb39 	bl	80002f0 <memchr>
 8006c7e:	b138      	cbz	r0, 8006c90 <_svfiprintf_r+0x150>
 8006c80:	9b04      	ldr	r3, [sp, #16]
 8006c82:	eba0 000a 	sub.w	r0, r0, sl
 8006c86:	2240      	movs	r2, #64	; 0x40
 8006c88:	4082      	lsls	r2, r0
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	3401      	adds	r4, #1
 8006c8e:	9304      	str	r3, [sp, #16]
 8006c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c94:	4825      	ldr	r0, [pc, #148]	; (8006d2c <_svfiprintf_r+0x1ec>)
 8006c96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c9a:	2206      	movs	r2, #6
 8006c9c:	f7f9 fb28 	bl	80002f0 <memchr>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d038      	beq.n	8006d16 <_svfiprintf_r+0x1d6>
 8006ca4:	4b22      	ldr	r3, [pc, #136]	; (8006d30 <_svfiprintf_r+0x1f0>)
 8006ca6:	bb1b      	cbnz	r3, 8006cf0 <_svfiprintf_r+0x1b0>
 8006ca8:	9b03      	ldr	r3, [sp, #12]
 8006caa:	3307      	adds	r3, #7
 8006cac:	f023 0307 	bic.w	r3, r3, #7
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	9303      	str	r3, [sp, #12]
 8006cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb6:	4433      	add	r3, r6
 8006cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cba:	e768      	b.n	8006b8e <_svfiprintf_r+0x4e>
 8006cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cc0:	460c      	mov	r4, r1
 8006cc2:	2001      	movs	r0, #1
 8006cc4:	e7a6      	b.n	8006c14 <_svfiprintf_r+0xd4>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	3401      	adds	r4, #1
 8006cca:	9305      	str	r3, [sp, #20]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	f04f 0c0a 	mov.w	ip, #10
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cd8:	3a30      	subs	r2, #48	; 0x30
 8006cda:	2a09      	cmp	r2, #9
 8006cdc:	d903      	bls.n	8006ce6 <_svfiprintf_r+0x1a6>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0c6      	beq.n	8006c70 <_svfiprintf_r+0x130>
 8006ce2:	9105      	str	r1, [sp, #20]
 8006ce4:	e7c4      	b.n	8006c70 <_svfiprintf_r+0x130>
 8006ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cea:	4604      	mov	r4, r0
 8006cec:	2301      	movs	r3, #1
 8006cee:	e7f0      	b.n	8006cd2 <_svfiprintf_r+0x192>
 8006cf0:	ab03      	add	r3, sp, #12
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	462a      	mov	r2, r5
 8006cf6:	4b0f      	ldr	r3, [pc, #60]	; (8006d34 <_svfiprintf_r+0x1f4>)
 8006cf8:	a904      	add	r1, sp, #16
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	f3af 8000 	nop.w
 8006d00:	1c42      	adds	r2, r0, #1
 8006d02:	4606      	mov	r6, r0
 8006d04:	d1d6      	bne.n	8006cb4 <_svfiprintf_r+0x174>
 8006d06:	89ab      	ldrh	r3, [r5, #12]
 8006d08:	065b      	lsls	r3, r3, #25
 8006d0a:	f53f af2d 	bmi.w	8006b68 <_svfiprintf_r+0x28>
 8006d0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d10:	b01d      	add	sp, #116	; 0x74
 8006d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d16:	ab03      	add	r3, sp, #12
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	462a      	mov	r2, r5
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <_svfiprintf_r+0x1f4>)
 8006d1e:	a904      	add	r1, sp, #16
 8006d20:	4638      	mov	r0, r7
 8006d22:	f000 f879 	bl	8006e18 <_printf_i>
 8006d26:	e7eb      	b.n	8006d00 <_svfiprintf_r+0x1c0>
 8006d28:	0800781c 	.word	0x0800781c
 8006d2c:	08007826 	.word	0x08007826
 8006d30:	00000000 	.word	0x00000000
 8006d34:	08006a8d 	.word	0x08006a8d
 8006d38:	08007822 	.word	0x08007822

08006d3c <_printf_common>:
 8006d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d40:	4616      	mov	r6, r2
 8006d42:	4699      	mov	r9, r3
 8006d44:	688a      	ldr	r2, [r1, #8]
 8006d46:	690b      	ldr	r3, [r1, #16]
 8006d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	bfb8      	it	lt
 8006d50:	4613      	movlt	r3, r2
 8006d52:	6033      	str	r3, [r6, #0]
 8006d54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d58:	4607      	mov	r7, r0
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	b10a      	cbz	r2, 8006d62 <_printf_common+0x26>
 8006d5e:	3301      	adds	r3, #1
 8006d60:	6033      	str	r3, [r6, #0]
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	0699      	lsls	r1, r3, #26
 8006d66:	bf42      	ittt	mi
 8006d68:	6833      	ldrmi	r3, [r6, #0]
 8006d6a:	3302      	addmi	r3, #2
 8006d6c:	6033      	strmi	r3, [r6, #0]
 8006d6e:	6825      	ldr	r5, [r4, #0]
 8006d70:	f015 0506 	ands.w	r5, r5, #6
 8006d74:	d106      	bne.n	8006d84 <_printf_common+0x48>
 8006d76:	f104 0a19 	add.w	sl, r4, #25
 8006d7a:	68e3      	ldr	r3, [r4, #12]
 8006d7c:	6832      	ldr	r2, [r6, #0]
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	42ab      	cmp	r3, r5
 8006d82:	dc26      	bgt.n	8006dd2 <_printf_common+0x96>
 8006d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d88:	1e13      	subs	r3, r2, #0
 8006d8a:	6822      	ldr	r2, [r4, #0]
 8006d8c:	bf18      	it	ne
 8006d8e:	2301      	movne	r3, #1
 8006d90:	0692      	lsls	r2, r2, #26
 8006d92:	d42b      	bmi.n	8006dec <_printf_common+0xb0>
 8006d94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d98:	4649      	mov	r1, r9
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	47c0      	blx	r8
 8006d9e:	3001      	adds	r0, #1
 8006da0:	d01e      	beq.n	8006de0 <_printf_common+0xa4>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	6922      	ldr	r2, [r4, #16]
 8006da6:	f003 0306 	and.w	r3, r3, #6
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	bf02      	ittt	eq
 8006dae:	68e5      	ldreq	r5, [r4, #12]
 8006db0:	6833      	ldreq	r3, [r6, #0]
 8006db2:	1aed      	subeq	r5, r5, r3
 8006db4:	68a3      	ldr	r3, [r4, #8]
 8006db6:	bf0c      	ite	eq
 8006db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dbc:	2500      	movne	r5, #0
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	bfc4      	itt	gt
 8006dc2:	1a9b      	subgt	r3, r3, r2
 8006dc4:	18ed      	addgt	r5, r5, r3
 8006dc6:	2600      	movs	r6, #0
 8006dc8:	341a      	adds	r4, #26
 8006dca:	42b5      	cmp	r5, r6
 8006dcc:	d11a      	bne.n	8006e04 <_printf_common+0xc8>
 8006dce:	2000      	movs	r0, #0
 8006dd0:	e008      	b.n	8006de4 <_printf_common+0xa8>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	4652      	mov	r2, sl
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	4638      	mov	r0, r7
 8006dda:	47c0      	blx	r8
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d103      	bne.n	8006de8 <_printf_common+0xac>
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295
 8006de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de8:	3501      	adds	r5, #1
 8006dea:	e7c6      	b.n	8006d7a <_printf_common+0x3e>
 8006dec:	18e1      	adds	r1, r4, r3
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	2030      	movs	r0, #48	; 0x30
 8006df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006df6:	4422      	add	r2, r4
 8006df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e00:	3302      	adds	r3, #2
 8006e02:	e7c7      	b.n	8006d94 <_printf_common+0x58>
 8006e04:	2301      	movs	r3, #1
 8006e06:	4622      	mov	r2, r4
 8006e08:	4649      	mov	r1, r9
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	47c0      	blx	r8
 8006e0e:	3001      	adds	r0, #1
 8006e10:	d0e6      	beq.n	8006de0 <_printf_common+0xa4>
 8006e12:	3601      	adds	r6, #1
 8006e14:	e7d9      	b.n	8006dca <_printf_common+0x8e>
	...

08006e18 <_printf_i>:
 8006e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e1c:	7e0f      	ldrb	r7, [r1, #24]
 8006e1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e20:	2f78      	cmp	r7, #120	; 0x78
 8006e22:	4691      	mov	r9, r2
 8006e24:	4680      	mov	r8, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	469a      	mov	sl, r3
 8006e2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e2e:	d807      	bhi.n	8006e40 <_printf_i+0x28>
 8006e30:	2f62      	cmp	r7, #98	; 0x62
 8006e32:	d80a      	bhi.n	8006e4a <_printf_i+0x32>
 8006e34:	2f00      	cmp	r7, #0
 8006e36:	f000 80d4 	beq.w	8006fe2 <_printf_i+0x1ca>
 8006e3a:	2f58      	cmp	r7, #88	; 0x58
 8006e3c:	f000 80c0 	beq.w	8006fc0 <_printf_i+0x1a8>
 8006e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e48:	e03a      	b.n	8006ec0 <_printf_i+0xa8>
 8006e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e4e:	2b15      	cmp	r3, #21
 8006e50:	d8f6      	bhi.n	8006e40 <_printf_i+0x28>
 8006e52:	a101      	add	r1, pc, #4	; (adr r1, 8006e58 <_printf_i+0x40>)
 8006e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e58:	08006eb1 	.word	0x08006eb1
 8006e5c:	08006ec5 	.word	0x08006ec5
 8006e60:	08006e41 	.word	0x08006e41
 8006e64:	08006e41 	.word	0x08006e41
 8006e68:	08006e41 	.word	0x08006e41
 8006e6c:	08006e41 	.word	0x08006e41
 8006e70:	08006ec5 	.word	0x08006ec5
 8006e74:	08006e41 	.word	0x08006e41
 8006e78:	08006e41 	.word	0x08006e41
 8006e7c:	08006e41 	.word	0x08006e41
 8006e80:	08006e41 	.word	0x08006e41
 8006e84:	08006fc9 	.word	0x08006fc9
 8006e88:	08006ef1 	.word	0x08006ef1
 8006e8c:	08006f83 	.word	0x08006f83
 8006e90:	08006e41 	.word	0x08006e41
 8006e94:	08006e41 	.word	0x08006e41
 8006e98:	08006feb 	.word	0x08006feb
 8006e9c:	08006e41 	.word	0x08006e41
 8006ea0:	08006ef1 	.word	0x08006ef1
 8006ea4:	08006e41 	.word	0x08006e41
 8006ea8:	08006e41 	.word	0x08006e41
 8006eac:	08006f8b 	.word	0x08006f8b
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	1d1a      	adds	r2, r3, #4
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	602a      	str	r2, [r5, #0]
 8006eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e09f      	b.n	8007004 <_printf_i+0x1ec>
 8006ec4:	6820      	ldr	r0, [r4, #0]
 8006ec6:	682b      	ldr	r3, [r5, #0]
 8006ec8:	0607      	lsls	r7, r0, #24
 8006eca:	f103 0104 	add.w	r1, r3, #4
 8006ece:	6029      	str	r1, [r5, #0]
 8006ed0:	d501      	bpl.n	8006ed6 <_printf_i+0xbe>
 8006ed2:	681e      	ldr	r6, [r3, #0]
 8006ed4:	e003      	b.n	8006ede <_printf_i+0xc6>
 8006ed6:	0646      	lsls	r6, r0, #25
 8006ed8:	d5fb      	bpl.n	8006ed2 <_printf_i+0xba>
 8006eda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ede:	2e00      	cmp	r6, #0
 8006ee0:	da03      	bge.n	8006eea <_printf_i+0xd2>
 8006ee2:	232d      	movs	r3, #45	; 0x2d
 8006ee4:	4276      	negs	r6, r6
 8006ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eea:	485a      	ldr	r0, [pc, #360]	; (8007054 <_printf_i+0x23c>)
 8006eec:	230a      	movs	r3, #10
 8006eee:	e012      	b.n	8006f16 <_printf_i+0xfe>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	6820      	ldr	r0, [r4, #0]
 8006ef4:	1d19      	adds	r1, r3, #4
 8006ef6:	6029      	str	r1, [r5, #0]
 8006ef8:	0605      	lsls	r5, r0, #24
 8006efa:	d501      	bpl.n	8006f00 <_printf_i+0xe8>
 8006efc:	681e      	ldr	r6, [r3, #0]
 8006efe:	e002      	b.n	8006f06 <_printf_i+0xee>
 8006f00:	0641      	lsls	r1, r0, #25
 8006f02:	d5fb      	bpl.n	8006efc <_printf_i+0xe4>
 8006f04:	881e      	ldrh	r6, [r3, #0]
 8006f06:	4853      	ldr	r0, [pc, #332]	; (8007054 <_printf_i+0x23c>)
 8006f08:	2f6f      	cmp	r7, #111	; 0x6f
 8006f0a:	bf0c      	ite	eq
 8006f0c:	2308      	moveq	r3, #8
 8006f0e:	230a      	movne	r3, #10
 8006f10:	2100      	movs	r1, #0
 8006f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f16:	6865      	ldr	r5, [r4, #4]
 8006f18:	60a5      	str	r5, [r4, #8]
 8006f1a:	2d00      	cmp	r5, #0
 8006f1c:	bfa2      	ittt	ge
 8006f1e:	6821      	ldrge	r1, [r4, #0]
 8006f20:	f021 0104 	bicge.w	r1, r1, #4
 8006f24:	6021      	strge	r1, [r4, #0]
 8006f26:	b90e      	cbnz	r6, 8006f2c <_printf_i+0x114>
 8006f28:	2d00      	cmp	r5, #0
 8006f2a:	d04b      	beq.n	8006fc4 <_printf_i+0x1ac>
 8006f2c:	4615      	mov	r5, r2
 8006f2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f32:	fb03 6711 	mls	r7, r3, r1, r6
 8006f36:	5dc7      	ldrb	r7, [r0, r7]
 8006f38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f3c:	4637      	mov	r7, r6
 8006f3e:	42bb      	cmp	r3, r7
 8006f40:	460e      	mov	r6, r1
 8006f42:	d9f4      	bls.n	8006f2e <_printf_i+0x116>
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d10b      	bne.n	8006f60 <_printf_i+0x148>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	07de      	lsls	r6, r3, #31
 8006f4c:	d508      	bpl.n	8006f60 <_printf_i+0x148>
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	6861      	ldr	r1, [r4, #4]
 8006f52:	4299      	cmp	r1, r3
 8006f54:	bfde      	ittt	le
 8006f56:	2330      	movle	r3, #48	; 0x30
 8006f58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f60:	1b52      	subs	r2, r2, r5
 8006f62:	6122      	str	r2, [r4, #16]
 8006f64:	f8cd a000 	str.w	sl, [sp]
 8006f68:	464b      	mov	r3, r9
 8006f6a:	aa03      	add	r2, sp, #12
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4640      	mov	r0, r8
 8006f70:	f7ff fee4 	bl	8006d3c <_printf_common>
 8006f74:	3001      	adds	r0, #1
 8006f76:	d14a      	bne.n	800700e <_printf_i+0x1f6>
 8006f78:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7c:	b004      	add	sp, #16
 8006f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	f043 0320 	orr.w	r3, r3, #32
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	4833      	ldr	r0, [pc, #204]	; (8007058 <_printf_i+0x240>)
 8006f8c:	2778      	movs	r7, #120	; 0x78
 8006f8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	6829      	ldr	r1, [r5, #0]
 8006f96:	061f      	lsls	r7, r3, #24
 8006f98:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f9c:	d402      	bmi.n	8006fa4 <_printf_i+0x18c>
 8006f9e:	065f      	lsls	r7, r3, #25
 8006fa0:	bf48      	it	mi
 8006fa2:	b2b6      	uxthmi	r6, r6
 8006fa4:	07df      	lsls	r7, r3, #31
 8006fa6:	bf48      	it	mi
 8006fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8006fac:	6029      	str	r1, [r5, #0]
 8006fae:	bf48      	it	mi
 8006fb0:	6023      	strmi	r3, [r4, #0]
 8006fb2:	b91e      	cbnz	r6, 8006fbc <_printf_i+0x1a4>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	f023 0320 	bic.w	r3, r3, #32
 8006fba:	6023      	str	r3, [r4, #0]
 8006fbc:	2310      	movs	r3, #16
 8006fbe:	e7a7      	b.n	8006f10 <_printf_i+0xf8>
 8006fc0:	4824      	ldr	r0, [pc, #144]	; (8007054 <_printf_i+0x23c>)
 8006fc2:	e7e4      	b.n	8006f8e <_printf_i+0x176>
 8006fc4:	4615      	mov	r5, r2
 8006fc6:	e7bd      	b.n	8006f44 <_printf_i+0x12c>
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	6826      	ldr	r6, [r4, #0]
 8006fcc:	6961      	ldr	r1, [r4, #20]
 8006fce:	1d18      	adds	r0, r3, #4
 8006fd0:	6028      	str	r0, [r5, #0]
 8006fd2:	0635      	lsls	r5, r6, #24
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	d501      	bpl.n	8006fdc <_printf_i+0x1c4>
 8006fd8:	6019      	str	r1, [r3, #0]
 8006fda:	e002      	b.n	8006fe2 <_printf_i+0x1ca>
 8006fdc:	0670      	lsls	r0, r6, #25
 8006fde:	d5fb      	bpl.n	8006fd8 <_printf_i+0x1c0>
 8006fe0:	8019      	strh	r1, [r3, #0]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	6123      	str	r3, [r4, #16]
 8006fe6:	4615      	mov	r5, r2
 8006fe8:	e7bc      	b.n	8006f64 <_printf_i+0x14c>
 8006fea:	682b      	ldr	r3, [r5, #0]
 8006fec:	1d1a      	adds	r2, r3, #4
 8006fee:	602a      	str	r2, [r5, #0]
 8006ff0:	681d      	ldr	r5, [r3, #0]
 8006ff2:	6862      	ldr	r2, [r4, #4]
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f7f9 f97a 	bl	80002f0 <memchr>
 8006ffc:	b108      	cbz	r0, 8007002 <_printf_i+0x1ea>
 8006ffe:	1b40      	subs	r0, r0, r5
 8007000:	6060      	str	r0, [r4, #4]
 8007002:	6863      	ldr	r3, [r4, #4]
 8007004:	6123      	str	r3, [r4, #16]
 8007006:	2300      	movs	r3, #0
 8007008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800700c:	e7aa      	b.n	8006f64 <_printf_i+0x14c>
 800700e:	6923      	ldr	r3, [r4, #16]
 8007010:	462a      	mov	r2, r5
 8007012:	4649      	mov	r1, r9
 8007014:	4640      	mov	r0, r8
 8007016:	47d0      	blx	sl
 8007018:	3001      	adds	r0, #1
 800701a:	d0ad      	beq.n	8006f78 <_printf_i+0x160>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	079b      	lsls	r3, r3, #30
 8007020:	d413      	bmi.n	800704a <_printf_i+0x232>
 8007022:	68e0      	ldr	r0, [r4, #12]
 8007024:	9b03      	ldr	r3, [sp, #12]
 8007026:	4298      	cmp	r0, r3
 8007028:	bfb8      	it	lt
 800702a:	4618      	movlt	r0, r3
 800702c:	e7a6      	b.n	8006f7c <_printf_i+0x164>
 800702e:	2301      	movs	r3, #1
 8007030:	4632      	mov	r2, r6
 8007032:	4649      	mov	r1, r9
 8007034:	4640      	mov	r0, r8
 8007036:	47d0      	blx	sl
 8007038:	3001      	adds	r0, #1
 800703a:	d09d      	beq.n	8006f78 <_printf_i+0x160>
 800703c:	3501      	adds	r5, #1
 800703e:	68e3      	ldr	r3, [r4, #12]
 8007040:	9903      	ldr	r1, [sp, #12]
 8007042:	1a5b      	subs	r3, r3, r1
 8007044:	42ab      	cmp	r3, r5
 8007046:	dcf2      	bgt.n	800702e <_printf_i+0x216>
 8007048:	e7eb      	b.n	8007022 <_printf_i+0x20a>
 800704a:	2500      	movs	r5, #0
 800704c:	f104 0619 	add.w	r6, r4, #25
 8007050:	e7f5      	b.n	800703e <_printf_i+0x226>
 8007052:	bf00      	nop
 8007054:	0800782d 	.word	0x0800782d
 8007058:	0800783e 	.word	0x0800783e

0800705c <memmove>:
 800705c:	4288      	cmp	r0, r1
 800705e:	b510      	push	{r4, lr}
 8007060:	eb01 0402 	add.w	r4, r1, r2
 8007064:	d902      	bls.n	800706c <memmove+0x10>
 8007066:	4284      	cmp	r4, r0
 8007068:	4623      	mov	r3, r4
 800706a:	d807      	bhi.n	800707c <memmove+0x20>
 800706c:	1e43      	subs	r3, r0, #1
 800706e:	42a1      	cmp	r1, r4
 8007070:	d008      	beq.n	8007084 <memmove+0x28>
 8007072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800707a:	e7f8      	b.n	800706e <memmove+0x12>
 800707c:	4402      	add	r2, r0
 800707e:	4601      	mov	r1, r0
 8007080:	428a      	cmp	r2, r1
 8007082:	d100      	bne.n	8007086 <memmove+0x2a>
 8007084:	bd10      	pop	{r4, pc}
 8007086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800708a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800708e:	e7f7      	b.n	8007080 <memmove+0x24>

08007090 <_sbrk_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	4d06      	ldr	r5, [pc, #24]	; (80070ac <_sbrk_r+0x1c>)
 8007094:	2300      	movs	r3, #0
 8007096:	4604      	mov	r4, r0
 8007098:	4608      	mov	r0, r1
 800709a:	602b      	str	r3, [r5, #0]
 800709c:	f7fa f9bc 	bl	8001418 <_sbrk>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d102      	bne.n	80070aa <_sbrk_r+0x1a>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	b103      	cbz	r3, 80070aa <_sbrk_r+0x1a>
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	240002dc 	.word	0x240002dc

080070b0 <memcpy>:
 80070b0:	440a      	add	r2, r1
 80070b2:	4291      	cmp	r1, r2
 80070b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80070b8:	d100      	bne.n	80070bc <memcpy+0xc>
 80070ba:	4770      	bx	lr
 80070bc:	b510      	push	{r4, lr}
 80070be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070c6:	4291      	cmp	r1, r2
 80070c8:	d1f9      	bne.n	80070be <memcpy+0xe>
 80070ca:	bd10      	pop	{r4, pc}

080070cc <_realloc_r>:
 80070cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d0:	4680      	mov	r8, r0
 80070d2:	4614      	mov	r4, r2
 80070d4:	460e      	mov	r6, r1
 80070d6:	b921      	cbnz	r1, 80070e2 <_realloc_r+0x16>
 80070d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070dc:	4611      	mov	r1, r2
 80070de:	f7ff bc49 	b.w	8006974 <_malloc_r>
 80070e2:	b92a      	cbnz	r2, 80070f0 <_realloc_r+0x24>
 80070e4:	f7ff fbda 	bl	800689c <_free_r>
 80070e8:	4625      	mov	r5, r4
 80070ea:	4628      	mov	r0, r5
 80070ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070f0:	f000 f81b 	bl	800712a <_malloc_usable_size_r>
 80070f4:	4284      	cmp	r4, r0
 80070f6:	4607      	mov	r7, r0
 80070f8:	d802      	bhi.n	8007100 <_realloc_r+0x34>
 80070fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070fe:	d812      	bhi.n	8007126 <_realloc_r+0x5a>
 8007100:	4621      	mov	r1, r4
 8007102:	4640      	mov	r0, r8
 8007104:	f7ff fc36 	bl	8006974 <_malloc_r>
 8007108:	4605      	mov	r5, r0
 800710a:	2800      	cmp	r0, #0
 800710c:	d0ed      	beq.n	80070ea <_realloc_r+0x1e>
 800710e:	42bc      	cmp	r4, r7
 8007110:	4622      	mov	r2, r4
 8007112:	4631      	mov	r1, r6
 8007114:	bf28      	it	cs
 8007116:	463a      	movcs	r2, r7
 8007118:	f7ff ffca 	bl	80070b0 <memcpy>
 800711c:	4631      	mov	r1, r6
 800711e:	4640      	mov	r0, r8
 8007120:	f7ff fbbc 	bl	800689c <_free_r>
 8007124:	e7e1      	b.n	80070ea <_realloc_r+0x1e>
 8007126:	4635      	mov	r5, r6
 8007128:	e7df      	b.n	80070ea <_realloc_r+0x1e>

0800712a <_malloc_usable_size_r>:
 800712a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800712e:	1f18      	subs	r0, r3, #4
 8007130:	2b00      	cmp	r3, #0
 8007132:	bfbc      	itt	lt
 8007134:	580b      	ldrlt	r3, [r1, r0]
 8007136:	18c0      	addlt	r0, r0, r3
 8007138:	4770      	bx	lr

0800713a <checkint>:
 800713a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800713e:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8007142:	429a      	cmp	r2, r3
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	dd2a      	ble.n	800719e <checkint+0x64>
 8007148:	f240 4333 	movw	r3, #1075	; 0x433
 800714c:	429a      	cmp	r2, r3
 800714e:	dc24      	bgt.n	800719a <checkint+0x60>
 8007150:	1a9b      	subs	r3, r3, r2
 8007152:	f1a3 0620 	sub.w	r6, r3, #32
 8007156:	f04f 32ff 	mov.w	r2, #4294967295
 800715a:	fa02 f403 	lsl.w	r4, r2, r3
 800715e:	fa02 f606 	lsl.w	r6, r2, r6
 8007162:	f1c3 0520 	rsb	r5, r3, #32
 8007166:	fa22 f505 	lsr.w	r5, r2, r5
 800716a:	4334      	orrs	r4, r6
 800716c:	432c      	orrs	r4, r5
 800716e:	409a      	lsls	r2, r3
 8007170:	ea20 0202 	bic.w	r2, r0, r2
 8007174:	ea21 0404 	bic.w	r4, r1, r4
 8007178:	4322      	orrs	r2, r4
 800717a:	f1a3 0420 	sub.w	r4, r3, #32
 800717e:	f1c3 0220 	rsb	r2, r3, #32
 8007182:	d10c      	bne.n	800719e <checkint+0x64>
 8007184:	40d8      	lsrs	r0, r3
 8007186:	fa01 f302 	lsl.w	r3, r1, r2
 800718a:	4318      	orrs	r0, r3
 800718c:	40e1      	lsrs	r1, r4
 800718e:	4308      	orrs	r0, r1
 8007190:	f000 0001 	and.w	r0, r0, #1
 8007194:	f1d0 0002 	rsbs	r0, r0, #2
 8007198:	bd70      	pop	{r4, r5, r6, pc}
 800719a:	2002      	movs	r0, #2
 800719c:	e7fc      	b.n	8007198 <checkint+0x5e>
 800719e:	2000      	movs	r0, #0
 80071a0:	e7fa      	b.n	8007198 <checkint+0x5e>
 80071a2:	0000      	movs	r0, r0
 80071a4:	0000      	movs	r0, r0
	...

080071a8 <pow>:
 80071a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	ee10 4a90 	vmov	r4, s1
 80071b0:	ed2d 8b0a 	vpush	{d8-d12}
 80071b4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 80071b8:	ee11 aa90 	vmov	sl, s3
 80071bc:	f108 32ff 	add.w	r2, r8, #4294967295
 80071c0:	f240 73fd 	movw	r3, #2045	; 0x7fd
 80071c4:	429a      	cmp	r2, r3
 80071c6:	ee10 5a10 	vmov	r5, s0
 80071ca:	ee11 0a10 	vmov	r0, s2
 80071ce:	b087      	sub	sp, #28
 80071d0:	46c4      	mov	ip, r8
 80071d2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 80071d6:	d806      	bhi.n	80071e6 <pow+0x3e>
 80071d8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 80071dc:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80071e0:	2b7f      	cmp	r3, #127	; 0x7f
 80071e2:	f240 8156 	bls.w	8007492 <pow+0x2ea>
 80071e6:	1802      	adds	r2, r0, r0
 80071e8:	eb4a 010a 	adc.w	r1, sl, sl
 80071ec:	f06f 0b01 	mvn.w	fp, #1
 80071f0:	1e57      	subs	r7, r2, #1
 80071f2:	f141 33ff 	adc.w	r3, r1, #4294967295
 80071f6:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 80071fa:	45bb      	cmp	fp, r7
 80071fc:	eb7e 0303 	sbcs.w	r3, lr, r3
 8007200:	d242      	bcs.n	8007288 <pow+0xe0>
 8007202:	ea52 0301 	orrs.w	r3, r2, r1
 8007206:	f04f 0300 	mov.w	r3, #0
 800720a:	d10c      	bne.n	8007226 <pow+0x7e>
 800720c:	196d      	adds	r5, r5, r5
 800720e:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8007212:	4164      	adcs	r4, r4
 8007214:	42ab      	cmp	r3, r5
 8007216:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800721a:	41a3      	sbcs	r3, r4
 800721c:	f0c0 808f 	bcc.w	800733e <pow+0x196>
 8007220:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007224:	e02b      	b.n	800727e <pow+0xd6>
 8007226:	4ed4      	ldr	r6, [pc, #848]	; (8007578 <pow+0x3d0>)
 8007228:	42b4      	cmp	r4, r6
 800722a:	bf08      	it	eq
 800722c:	429d      	cmpeq	r5, r3
 800722e:	d109      	bne.n	8007244 <pow+0x9c>
 8007230:	1800      	adds	r0, r0, r0
 8007232:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 8007236:	eb4a 0a0a 	adc.w	sl, sl, sl
 800723a:	4283      	cmp	r3, r0
 800723c:	4bcf      	ldr	r3, [pc, #828]	; (800757c <pow+0x3d4>)
 800723e:	eb73 030a 	sbcs.w	r3, r3, sl
 8007242:	e7eb      	b.n	800721c <pow+0x74>
 8007244:	196d      	adds	r5, r5, r5
 8007246:	48ce      	ldr	r0, [pc, #824]	; (8007580 <pow+0x3d8>)
 8007248:	4164      	adcs	r4, r4
 800724a:	42ab      	cmp	r3, r5
 800724c:	eb70 0604 	sbcs.w	r6, r0, r4
 8007250:	d375      	bcc.n	800733e <pow+0x196>
 8007252:	4281      	cmp	r1, r0
 8007254:	bf08      	it	eq
 8007256:	429a      	cmpeq	r2, r3
 8007258:	d171      	bne.n	800733e <pow+0x196>
 800725a:	4aca      	ldr	r2, [pc, #808]	; (8007584 <pow+0x3dc>)
 800725c:	4294      	cmp	r4, r2
 800725e:	bf08      	it	eq
 8007260:	429d      	cmpeq	r5, r3
 8007262:	d0dd      	beq.n	8007220 <pow+0x78>
 8007264:	4294      	cmp	r4, r2
 8007266:	ea6f 0a0a 	mvn.w	sl, sl
 800726a:	bf34      	ite	cc
 800726c:	2400      	movcc	r4, #0
 800726e:	2401      	movcs	r4, #1
 8007270:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8007274:	4554      	cmp	r4, sl
 8007276:	f040 81dc 	bne.w	8007632 <pow+0x48a>
 800727a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800727e:	b007      	add	sp, #28
 8007280:	ecbd 8b0a 	vpop	{d8-d12}
 8007284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007288:	196f      	adds	r7, r5, r5
 800728a:	eb44 0904 	adc.w	r9, r4, r4
 800728e:	1e7a      	subs	r2, r7, #1
 8007290:	f169 0300 	sbc.w	r3, r9, #0
 8007294:	4593      	cmp	fp, r2
 8007296:	eb7e 0303 	sbcs.w	r3, lr, r3
 800729a:	d225      	bcs.n	80072e8 <pow+0x140>
 800729c:	ee20 0b00 	vmul.f64	d0, d0, d0
 80072a0:	2c00      	cmp	r4, #0
 80072a2:	da13      	bge.n	80072cc <pow+0x124>
 80072a4:	4651      	mov	r1, sl
 80072a6:	f7ff ff48 	bl	800713a <checkint>
 80072aa:	2801      	cmp	r0, #1
 80072ac:	d10e      	bne.n	80072cc <pow+0x124>
 80072ae:	eeb1 0b40 	vneg.f64	d0, d0
 80072b2:	ea57 0909 	orrs.w	r9, r7, r9
 80072b6:	d10b      	bne.n	80072d0 <pow+0x128>
 80072b8:	f1ba 0f00 	cmp.w	sl, #0
 80072bc:	dadf      	bge.n	800727e <pow+0xd6>
 80072be:	b007      	add	sp, #28
 80072c0:	ecbd 8b0a 	vpop	{d8-d12}
 80072c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c8:	f000 b9ea 	b.w	80076a0 <__math_divzero>
 80072cc:	2000      	movs	r0, #0
 80072ce:	e7f0      	b.n	80072b2 <pow+0x10a>
 80072d0:	f1ba 0f00 	cmp.w	sl, #0
 80072d4:	dad3      	bge.n	800727e <pow+0xd6>
 80072d6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80072da:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80072de:	ed8d 7b00 	vstr	d7, [sp]
 80072e2:	ed9d 0b00 	vldr	d0, [sp]
 80072e6:	e7ca      	b.n	800727e <pow+0xd6>
 80072e8:	2c00      	cmp	r4, #0
 80072ea:	da2b      	bge.n	8007344 <pow+0x19c>
 80072ec:	4651      	mov	r1, sl
 80072ee:	f7ff ff24 	bl	800713a <checkint>
 80072f2:	b930      	cbnz	r0, 8007302 <pow+0x15a>
 80072f4:	b007      	add	sp, #28
 80072f6:	ecbd 8b0a 	vpop	{d8-d12}
 80072fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fe:	f000 b9e7 	b.w	80076d0 <__math_invalid>
 8007302:	1e41      	subs	r1, r0, #1
 8007304:	4248      	negs	r0, r1
 8007306:	4148      	adcs	r0, r1
 8007308:	0480      	lsls	r0, r0, #18
 800730a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800730e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8007312:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8007316:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800731a:	2b7f      	cmp	r3, #127	; 0x7f
 800731c:	d92d      	bls.n	800737a <pow+0x1d2>
 800731e:	4b96      	ldr	r3, [pc, #600]	; (8007578 <pow+0x3d0>)
 8007320:	2000      	movs	r0, #0
 8007322:	429c      	cmp	r4, r3
 8007324:	bf08      	it	eq
 8007326:	4285      	cmpeq	r5, r0
 8007328:	f43f af7a 	beq.w	8007220 <pow+0x78>
 800732c:	f240 31bd 	movw	r1, #957	; 0x3bd
 8007330:	428a      	cmp	r2, r1
 8007332:	d80c      	bhi.n	800734e <pow+0x1a6>
 8007334:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007338:	42a8      	cmp	r0, r5
 800733a:	41a3      	sbcs	r3, r4
 800733c:	d204      	bcs.n	8007348 <pow+0x1a0>
 800733e:	ee31 0b00 	vadd.f64	d0, d1, d0
 8007342:	e79c      	b.n	800727e <pow+0xd6>
 8007344:	2000      	movs	r0, #0
 8007346:	e7e4      	b.n	8007312 <pow+0x16a>
 8007348:	ee30 0b41 	vsub.f64	d0, d0, d1
 800734c:	e797      	b.n	800727e <pow+0xd6>
 800734e:	2d01      	cmp	r5, #1
 8007350:	eb74 0303 	sbcs.w	r3, r4, r3
 8007354:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007358:	bf34      	ite	cc
 800735a:	2301      	movcc	r3, #1
 800735c:	2300      	movcs	r3, #0
 800735e:	4296      	cmp	r6, r2
 8007360:	bf8c      	ite	hi
 8007362:	2600      	movhi	r6, #0
 8007364:	2601      	movls	r6, #1
 8007366:	42b3      	cmp	r3, r6
 8007368:	f000 809b 	beq.w	80074a2 <pow+0x2fa>
 800736c:	b007      	add	sp, #28
 800736e:	ecbd 8b0a 	vpop	{d8-d12}
 8007372:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007376:	f000 b98b 	b.w	8007690 <__math_oflow>
 800737a:	f1bc 0f00 	cmp.w	ip, #0
 800737e:	d10b      	bne.n	8007398 <pow+0x1f0>
 8007380:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8007568 <pow+0x3c0>
 8007384:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007388:	ec53 2b17 	vmov	r2, r3, d7
 800738c:	ee17 5a10 	vmov	r5, s14
 8007390:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8007394:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8007398:	4b7b      	ldr	r3, [pc, #492]	; (8007588 <pow+0x3e0>)
 800739a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800739e:	4423      	add	r3, r4
 80073a0:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80073a4:	1519      	asrs	r1, r3, #20
 80073a6:	0d1b      	lsrs	r3, r3, #20
 80073a8:	051b      	lsls	r3, r3, #20
 80073aa:	1ae7      	subs	r7, r4, r3
 80073ac:	4b77      	ldr	r3, [pc, #476]	; (800758c <pow+0x3e4>)
 80073ae:	ee03 1a10 	vmov	s6, r1
 80073b2:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80073b6:	1e2e      	subs	r6, r5, #0
 80073b8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 80073bc:	ec47 6b15 	vmov	d5, r6, r7
 80073c0:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 80073c4:	eea5 6b07 	vfma.f64	d6, d5, d7
 80073c8:	ed93 7b00 	vldr	d7, [r3]
 80073cc:	ed93 5b02 	vldr	d5, [r3, #8]
 80073d0:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80073d4:	eea3 2b07 	vfma.f64	d2, d3, d7
 80073d8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 80073dc:	ee36 4b02 	vadd.f64	d4, d6, d2
 80073e0:	ee32 2b44 	vsub.f64	d2, d2, d4
 80073e4:	eea3 7b05 	vfma.f64	d7, d3, d5
 80073e8:	ed93 5b04 	vldr	d5, [r3, #16]
 80073ec:	ee32 2b06 	vadd.f64	d2, d2, d6
 80073f0:	ee37 7b02 	vadd.f64	d7, d7, d2
 80073f4:	ee26 5b05 	vmul.f64	d5, d6, d5
 80073f8:	ee26 0b05 	vmul.f64	d0, d6, d5
 80073fc:	ee34 8b00 	vadd.f64	d8, d4, d0
 8007400:	eeb0 9b40 	vmov.f64	d9, d0
 8007404:	ee34 4b48 	vsub.f64	d4, d4, d8
 8007408:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800740c:	ee34 ab00 	vadd.f64	d10, d4, d0
 8007410:	ed93 5b06 	vldr	d5, [r3, #24]
 8007414:	ee26 bb00 	vmul.f64	d11, d6, d0
 8007418:	ee37 7b09 	vadd.f64	d7, d7, d9
 800741c:	ed93 4b08 	vldr	d4, [r3, #32]
 8007420:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8007424:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8007428:	eea6 5b04 	vfma.f64	d5, d6, d4
 800742c:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8007430:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8007434:	eea6 4b03 	vfma.f64	d4, d6, d3
 8007438:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800743c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8007440:	eea0 4b03 	vfma.f64	d4, d0, d3
 8007444:	eea0 5b04 	vfma.f64	d5, d0, d4
 8007448:	eeab 7b05 	vfma.f64	d7, d11, d5
 800744c:	ee38 4b07 	vadd.f64	d4, d8, d7
 8007450:	ee21 6b04 	vmul.f64	d6, d1, d4
 8007454:	ee16 3a90 	vmov	r3, s13
 8007458:	eeb0 5b46 	vmov.f64	d5, d6
 800745c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8007460:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8007464:	18b2      	adds	r2, r6, r2
 8007466:	2a3e      	cmp	r2, #62	; 0x3e
 8007468:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800746c:	ee38 8b44 	vsub.f64	d8, d8, d4
 8007470:	ee38 8b07 	vadd.f64	d8, d8, d7
 8007474:	eea1 5b08 	vfma.f64	d5, d1, d8
 8007478:	d91b      	bls.n	80074b2 <pow+0x30a>
 800747a:	2a00      	cmp	r2, #0
 800747c:	da0b      	bge.n	8007496 <pow+0x2ee>
 800747e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007482:	ee36 0b00 	vadd.f64	d0, d6, d0
 8007486:	2800      	cmp	r0, #0
 8007488:	f43f aef9 	beq.w	800727e <pow+0xd6>
 800748c:	eeb1 0b40 	vneg.f64	d0, d0
 8007490:	e6f5      	b.n	800727e <pow+0xd6>
 8007492:	2000      	movs	r0, #0
 8007494:	e780      	b.n	8007398 <pow+0x1f0>
 8007496:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800749a:	d909      	bls.n	80074b0 <pow+0x308>
 800749c:	2b00      	cmp	r3, #0
 800749e:	f6bf af65 	bge.w	800736c <pow+0x1c4>
 80074a2:	b007      	add	sp, #28
 80074a4:	ecbd 8b0a 	vpop	{d8-d12}
 80074a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	f000 b8e8 	b.w	8007680 <__math_uflow>
 80074b0:	2600      	movs	r6, #0
 80074b2:	4937      	ldr	r1, [pc, #220]	; (8007590 <pow+0x3e8>)
 80074b4:	ed91 4b02 	vldr	d4, [r1, #8]
 80074b8:	ed91 3b00 	vldr	d3, [r1]
 80074bc:	eeb0 7b44 	vmov.f64	d7, d4
 80074c0:	eea6 7b03 	vfma.f64	d7, d6, d3
 80074c4:	ee17 5a10 	vmov	r5, s14
 80074c8:	ee37 7b44 	vsub.f64	d7, d7, d4
 80074cc:	ed91 4b04 	vldr	d4, [r1, #16]
 80074d0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80074d4:	eea7 6b04 	vfma.f64	d6, d7, d4
 80074d8:	ed91 4b06 	vldr	d4, [r1, #24]
 80074dc:	18dc      	adds	r4, r3, r3
 80074de:	f104 030f 	add.w	r3, r4, #15
 80074e2:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80074e6:	eea7 6b04 	vfma.f64	d6, d7, d4
 80074ea:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 80074ee:	ee35 5b06 	vadd.f64	d5, d5, d6
 80074f2:	ee25 6b05 	vmul.f64	d6, d5, d5
 80074f6:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 80074fa:	ed91 4b08 	vldr	d4, [r1, #32]
 80074fe:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007502:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8007506:	eea5 4b03 	vfma.f64	d4, d5, d3
 800750a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 800750e:	eea6 7b04 	vfma.f64	d7, d6, d4
 8007512:	ee26 6b06 	vmul.f64	d6, d6, d6
 8007516:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 800751a:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800751e:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8007522:	eea5 4b03 	vfma.f64	d4, d5, d3
 8007526:	1940      	adds	r0, r0, r5
 8007528:	2700      	movs	r7, #0
 800752a:	eb17 020c 	adds.w	r2, r7, ip
 800752e:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8007532:	eea6 7b04 	vfma.f64	d7, d6, d4
 8007536:	2e00      	cmp	r6, #0
 8007538:	d176      	bne.n	8007628 <pow+0x480>
 800753a:	42bd      	cmp	r5, r7
 800753c:	db2a      	blt.n	8007594 <pow+0x3ec>
 800753e:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8007542:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8007546:	4610      	mov	r0, r2
 8007548:	ec41 0b10 	vmov	d0, r0, r1
 800754c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8007550:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8007570 <pow+0x3c8>
 8007554:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007558:	b007      	add	sp, #28
 800755a:	ecbd 8b0a 	vpop	{d8-d12}
 800755e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007562:	f000 b8cd 	b.w	8007700 <__math_check_oflow>
 8007566:	bf00      	nop
 8007568:	00000000 	.word	0x00000000
 800756c:	43300000 	.word	0x43300000
 8007570:	00000000 	.word	0x00000000
 8007574:	7f000000 	.word	0x7f000000
 8007578:	3ff00000 	.word	0x3ff00000
 800757c:	fff00000 	.word	0xfff00000
 8007580:	ffe00000 	.word	0xffe00000
 8007584:	7fe00000 	.word	0x7fe00000
 8007588:	c0196aab 	.word	0xc0196aab
 800758c:	08007850 	.word	0x08007850
 8007590:	08008898 	.word	0x08008898
 8007594:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007598:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800759c:	4610      	mov	r0, r2
 800759e:	ec41 0b15 	vmov	d5, r0, r1
 80075a2:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 80075a6:	ee27 6b05 	vmul.f64	d6, d7, d5
 80075aa:	ee35 7b06 	vadd.f64	d7, d5, d6
 80075ae:	eeb0 4bc7 	vabs.f64	d4, d7
 80075b2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 80075b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ba:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8007638 <pow+0x490>
 80075be:	d52a      	bpl.n	8007616 <pow+0x46e>
 80075c0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80075c4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80075c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075cc:	ee35 5b06 	vadd.f64	d5, d5, d6
 80075d0:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 80075d4:	bf58      	it	pl
 80075d6:	eeb0 4b43 	vmovpl.f64	d4, d3
 80075da:	ee37 3b04 	vadd.f64	d3, d7, d4
 80075de:	ee34 6b43 	vsub.f64	d6, d4, d3
 80075e2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80075e6:	ee36 6b05 	vadd.f64	d6, d6, d5
 80075ea:	ee36 6b03 	vadd.f64	d6, d6, d3
 80075ee:	ee36 7b44 	vsub.f64	d7, d6, d4
 80075f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80075f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075fa:	d104      	bne.n	8007606 <pow+0x45e>
 80075fc:	4632      	mov	r2, r6
 80075fe:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007602:	ec43 2b17 	vmov	d7, r2, r3
 8007606:	ed8d 0b02 	vstr	d0, [sp, #8]
 800760a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800760e:	ee26 6b00 	vmul.f64	d6, d6, d0
 8007612:	ed8d 6b04 	vstr	d6, [sp, #16]
 8007616:	ee27 0b00 	vmul.f64	d0, d7, d0
 800761a:	b007      	add	sp, #28
 800761c:	ecbd 8b0a 	vpop	{d8-d12}
 8007620:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007624:	f000 b863 	b.w	80076ee <__math_check_uflow>
 8007628:	ec43 2b10 	vmov	d0, r2, r3
 800762c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8007630:	e625      	b.n	800727e <pow+0xd6>
 8007632:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8007640 <pow+0x498>
 8007636:	e622      	b.n	800727e <pow+0xd6>
 8007638:	00000000 	.word	0x00000000
 800763c:	00100000 	.word	0x00100000
	...

08007648 <with_errno>:
 8007648:	b513      	push	{r0, r1, r4, lr}
 800764a:	4604      	mov	r4, r0
 800764c:	ed8d 0b00 	vstr	d0, [sp]
 8007650:	f7ff f8f8 	bl	8006844 <__errno>
 8007654:	ed9d 0b00 	vldr	d0, [sp]
 8007658:	6004      	str	r4, [r0, #0]
 800765a:	b002      	add	sp, #8
 800765c:	bd10      	pop	{r4, pc}

0800765e <xflow>:
 800765e:	b082      	sub	sp, #8
 8007660:	b158      	cbz	r0, 800767a <xflow+0x1c>
 8007662:	eeb1 7b40 	vneg.f64	d7, d0
 8007666:	ed8d 7b00 	vstr	d7, [sp]
 800766a:	ed9d 7b00 	vldr	d7, [sp]
 800766e:	2022      	movs	r0, #34	; 0x22
 8007670:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007674:	b002      	add	sp, #8
 8007676:	f7ff bfe7 	b.w	8007648 <with_errno>
 800767a:	eeb0 7b40 	vmov.f64	d7, d0
 800767e:	e7f2      	b.n	8007666 <xflow+0x8>

08007680 <__math_uflow>:
 8007680:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007688 <__math_uflow+0x8>
 8007684:	f7ff bfeb 	b.w	800765e <xflow>
 8007688:	00000000 	.word	0x00000000
 800768c:	10000000 	.word	0x10000000

08007690 <__math_oflow>:
 8007690:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007698 <__math_oflow+0x8>
 8007694:	f7ff bfe3 	b.w	800765e <xflow>
 8007698:	00000000 	.word	0x00000000
 800769c:	70000000 	.word	0x70000000

080076a0 <__math_divzero>:
 80076a0:	b082      	sub	sp, #8
 80076a2:	2800      	cmp	r0, #0
 80076a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80076a8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80076ac:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80076b0:	ed8d 7b00 	vstr	d7, [sp]
 80076b4:	ed9d 0b00 	vldr	d0, [sp]
 80076b8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80076c8 <__math_divzero+0x28>
 80076bc:	2022      	movs	r0, #34	; 0x22
 80076be:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80076c2:	b002      	add	sp, #8
 80076c4:	f7ff bfc0 	b.w	8007648 <with_errno>
	...

080076d0 <__math_invalid>:
 80076d0:	eeb0 7b40 	vmov.f64	d7, d0
 80076d4:	eeb4 7b47 	vcmp.f64	d7, d7
 80076d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076dc:	ee30 6b40 	vsub.f64	d6, d0, d0
 80076e0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80076e4:	d602      	bvs.n	80076ec <__math_invalid+0x1c>
 80076e6:	2021      	movs	r0, #33	; 0x21
 80076e8:	f7ff bfae 	b.w	8007648 <with_errno>
 80076ec:	4770      	bx	lr

080076ee <__math_check_uflow>:
 80076ee:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80076f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f6:	d102      	bne.n	80076fe <__math_check_uflow+0x10>
 80076f8:	2022      	movs	r0, #34	; 0x22
 80076fa:	f7ff bfa5 	b.w	8007648 <with_errno>
 80076fe:	4770      	bx	lr

08007700 <__math_check_oflow>:
 8007700:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8007720 <__math_check_oflow+0x20>
 8007704:	eeb0 7bc0 	vabs.f64	d7, d0
 8007708:	eeb4 7b46 	vcmp.f64	d7, d6
 800770c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007710:	dd02      	ble.n	8007718 <__math_check_oflow+0x18>
 8007712:	2022      	movs	r0, #34	; 0x22
 8007714:	f7ff bf98 	b.w	8007648 <with_errno>
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	f3af 8000 	nop.w
 8007720:	ffffffff 	.word	0xffffffff
 8007724:	7fefffff 	.word	0x7fefffff

08007728 <_init>:
 8007728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772a:	bf00      	nop
 800772c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772e:	bc08      	pop	{r3}
 8007730:	469e      	mov	lr, r3
 8007732:	4770      	bx	lr

08007734 <_fini>:
 8007734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007736:	bf00      	nop
 8007738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773a:	bc08      	pop	{r3}
 800773c:	469e      	mov	lr, r3
 800773e:	4770      	bx	lr
