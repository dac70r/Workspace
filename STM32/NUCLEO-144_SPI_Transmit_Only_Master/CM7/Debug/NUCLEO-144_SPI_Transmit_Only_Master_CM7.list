
NUCLEO-144_SPI_Transmit_Only_Master_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cbc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003f54  08003f54  00013f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f64  08003f64  00020488  2**0
                  CONTENTS
  4 .ARM          00000000  08003f64  08003f64  00020488  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f64  08003f64  00020488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f64  08003f64  00013f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f68  08003f68  00013f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000488  24000000  08003f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  24000488  080043f4  00020488  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000530  080043f4  00020530  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020488  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b32e  00000000  00000000  000204f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001af1  00000000  00000000  0002b827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  0002d318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000734  00000000  00000000  0002dcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038a4f  00000000  00000000  0002e3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c1dc  00000000  00000000  00066e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00176b30  00000000  00000000  0007301f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026a8  00000000  00000000  001e9b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001ec1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000488 	.word	0x24000488
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003f3c 	.word	0x08003f3c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400048c 	.word	0x2400048c
 80002d4:	08003f3c 	.word	0x08003f3c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800040a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800040e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000410:	bf00      	nop
 8000412:	4b29      	ldr	r3, [pc, #164]	; (80004b8 <main+0xb4>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d004      	beq.n	8000428 <main+0x24>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	1e5a      	subs	r2, r3, #1
 8000422:	607a      	str	r2, [r7, #4]
 8000424:	2b00      	cmp	r3, #0
 8000426:	dcf4      	bgt.n	8000412 <main+0xe>
  if ( timeout < 0 )
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	da01      	bge.n	8000432 <main+0x2e>
  {
  Error_Handler();
 800042e:	f000 f955 	bl	80006dc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000432:	f000 fa43 	bl	80008bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000436:	f000 f847 	bl	80004c8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800043a:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <main+0xb4>)
 800043c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000440:	4a1d      	ldr	r2, [pc, #116]	; (80004b8 <main+0xb4>)
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800044a:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <main+0xb4>)
 800044c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000454:	603b      	str	r3, [r7, #0]
 8000456:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000458:	2000      	movs	r0, #0
 800045a:	f000 fdb9 	bl	8000fd0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800045e:	2100      	movs	r1, #0
 8000460:	2000      	movs	r0, #0
 8000462:	f000 fdcf 	bl	8001004 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800046a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800046c:	bf00      	nop
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <main+0xb4>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d104      	bne.n	8000484 <main+0x80>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	1e5a      	subs	r2, r3, #1
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	2b00      	cmp	r3, #0
 8000482:	dcf4      	bgt.n	800046e <main+0x6a>
if ( timeout < 0 )
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b00      	cmp	r3, #0
 8000488:	da01      	bge.n	800048e <main+0x8a>
{
Error_Handler();
 800048a:	f000 f927 	bl	80006dc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048e:	f000 f8ef 	bl	8000670 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000492:	f000 f895 	bl	80005c0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Transmit(&hspi3, TX_Data, sizeof(TX_Data), 5000);
 8000496:	f241 3388 	movw	r3, #5000	; 0x1388
 800049a:	f240 4275 	movw	r2, #1141	; 0x475
 800049e:	4907      	ldr	r1, [pc, #28]	; (80004bc <main+0xb8>)
 80004a0:	4807      	ldr	r0, [pc, #28]	; (80004c0 <main+0xbc>)
 80004a2:	f003 fa39 	bl	8003918 <HAL_SPI_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80004a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004aa:	4806      	ldr	r0, [pc, #24]	; (80004c4 <main+0xc0>)
 80004ac:	f000 fd75 	bl	8000f9a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80004b0:	2064      	movs	r0, #100	; 0x64
 80004b2:	f000 fa95 	bl	80009e0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80004b6:	e7f6      	b.n	80004a6 <main+0xa2>
 80004b8:	58024400 	.word	0x58024400
 80004bc:	24000008 	.word	0x24000008
 80004c0:	240004a4 	.word	0x240004a4
 80004c4:	58020400 	.word	0x58020400

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b09c      	sub	sp, #112	; 0x70
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d2:	224c      	movs	r2, #76	; 0x4c
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 fd03 	bl	8003ee2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2220      	movs	r2, #32
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f003 fcfd 	bl	8003ee2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004e8:	2004      	movs	r0, #4
 80004ea:	f000 fd9f 	bl	800102c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004ee:	2300      	movs	r3, #0
 80004f0:	603b      	str	r3, [r7, #0]
 80004f2:	4b31      	ldr	r3, [pc, #196]	; (80005b8 <SystemClock_Config+0xf0>)
 80004f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f6:	4a30      	ldr	r2, [pc, #192]	; (80005b8 <SystemClock_Config+0xf0>)
 80004f8:	f023 0301 	bic.w	r3, r3, #1
 80004fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004fe:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <SystemClock_Config+0xf0>)
 8000500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	4b2c      	ldr	r3, [pc, #176]	; (80005bc <SystemClock_Config+0xf4>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000510:	4a2a      	ldr	r2, [pc, #168]	; (80005bc <SystemClock_Config+0xf4>)
 8000512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b28      	ldr	r3, [pc, #160]	; (80005bc <SystemClock_Config+0xf4>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000520:	603b      	str	r3, [r7, #0]
 8000522:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000524:	bf00      	nop
 8000526:	4b25      	ldr	r3, [pc, #148]	; (80005bc <SystemClock_Config+0xf4>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800052e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000532:	d1f8      	bne.n	8000526 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000534:	2302      	movs	r3, #2
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000538:	2301      	movs	r3, #1
 800053a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053c:	2340      	movs	r3, #64	; 0x40
 800053e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000540:	2302      	movs	r3, #2
 8000542:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000544:	2300      	movs	r3, #0
 8000546:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000548:	2320      	movs	r3, #32
 800054a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 800054c:	2381      	movs	r3, #129	; 0x81
 800054e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000550:	2302      	movs	r3, #2
 8000552:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000554:	2304      	movs	r3, #4
 8000556:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000558:	2302      	movs	r3, #2
 800055a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800055c:	2304      	movs	r3, #4
 800055e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000560:	2300      	movs	r3, #0
 8000562:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fdb7 	bl	80010e0 <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000578:	f000 f8b0 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	233f      	movs	r3, #63	; 0x3f
 800057e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2101      	movs	r1, #1
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 f9f7 	bl	8001994 <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80005ac:	f000 f896 	bl	80006dc <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3770      	adds	r7, #112	; 0x70
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	58000400 	.word	0x58000400
 80005bc:	58024800 	.word	0x58024800

080005c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80005c4:	4b28      	ldr	r3, [pc, #160]	; (8000668 <MX_SPI3_Init+0xa8>)
 80005c6:	4a29      	ldr	r2, [pc, #164]	; (800066c <MX_SPI3_Init+0xac>)
 80005c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80005ca:	4b27      	ldr	r3, [pc, #156]	; (8000668 <MX_SPI3_Init+0xa8>)
 80005cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80005d2:	4b25      	ldr	r3, [pc, #148]	; (8000668 <MX_SPI3_Init+0xa8>)
 80005d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005d8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80005da:	4b23      	ldr	r3, [pc, #140]	; (8000668 <MX_SPI3_Init+0xa8>)
 80005dc:	2207      	movs	r2, #7
 80005de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_SPI3_Init+0xa8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e6:	4b20      	ldr	r3, [pc, #128]	; (8000668 <MX_SPI3_Init+0xa8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80005ec:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <MX_SPI3_Init+0xa8>)
 80005ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80005f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_SPI3_Init+0xa8>)
 80005f6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80005fa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005fc:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_SPI3_Init+0xa8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_SPI3_Init+0xa8>)
 8000604:	2200      	movs	r2, #0
 8000606:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_SPI3_Init+0xa8>)
 800060a:	2200      	movs	r2, #0
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MX_SPI3_Init+0xa8>)
 8000610:	2200      	movs	r2, #0
 8000612:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_SPI3_Init+0xa8>)
 8000616:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800061a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_SPI3_Init+0xa8>)
 800061e:	2200      	movs	r2, #0
 8000620:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_SPI3_Init+0xa8>)
 8000624:	2200      	movs	r2, #0
 8000626:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_SPI3_Init+0xa8>)
 800062a:	2200      	movs	r2, #0
 800062c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_SPI3_Init+0xa8>)
 8000630:	2200      	movs	r2, #0
 8000632:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_SPI3_Init+0xa8>)
 8000636:	2200      	movs	r2, #0
 8000638:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_SPI3_Init+0xa8>)
 800063c:	2200      	movs	r2, #0
 800063e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_SPI3_Init+0xa8>)
 8000642:	2200      	movs	r2, #0
 8000644:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_SPI3_Init+0xa8>)
 8000648:	2200      	movs	r2, #0
 800064a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_SPI3_Init+0xa8>)
 800064e:	2200      	movs	r2, #0
 8000650:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_SPI3_Init+0xa8>)
 8000654:	f003 f83c 	bl	80036d0 <HAL_SPI_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800065e:	f000 f83d 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	240004a4 	.word	0x240004a4
 800066c:	40003c00 	.word	0x40003c00

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_GPIO_Init+0x64>)
 8000686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068a:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <MX_GPIO_Init+0x64>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_GPIO_Init+0x64>)
 8000696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <MX_GPIO_Init+0x68>)
 80006aa:	f000 fc5d 	bl	8000f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80006ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	4619      	mov	r1, r3
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_GPIO_Init+0x68>)
 80006c6:	f000 fa9f 	bl	8000c08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ca:	bf00      	nop
 80006cc:	3718      	adds	r7, #24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58024400 	.word	0x58024400
 80006d8:	58020400 	.word	0x58020400

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <Error_Handler+0x8>
	...

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <HAL_MspInit+0x30>)
 80006f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006f4:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_MspInit+0x30>)
 80006f6:	f043 0302 	orr.w	r3, r3, #2
 80006fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_MspInit+0x30>)
 8000700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000704:	f003 0302 	and.w	r3, r3, #2
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	58024400 	.word	0x58024400

0800071c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b0ba      	sub	sp, #232	; 0xe8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	22c0      	movs	r2, #192	; 0xc0
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f003 fbd0 	bl	8003ee2 <memset>
  if(hspi->Instance==SPI3)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a30      	ldr	r2, [pc, #192]	; (8000808 <HAL_SPI_MspInit+0xec>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d159      	bne.n	8000800 <HAL_SPI_MspInit+0xe4>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800074c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000750:	f04f 0300 	mov.w	r3, #0
 8000754:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000758:	2300      	movs	r3, #0
 800075a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fc47 	bl	8001ff4 <HAL_RCCEx_PeriphCLKConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800076c:	f7ff ffb6 	bl	80006dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <HAL_SPI_MspInit+0xf0>)
 8000772:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000776:	4a25      	ldr	r2, [pc, #148]	; (800080c <HAL_SPI_MspInit+0xf0>)
 8000778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800077c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <HAL_SPI_MspInit+0xf0>)
 8000782:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b1f      	ldr	r3, [pc, #124]	; (800080c <HAL_SPI_MspInit+0xf0>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000794:	4a1d      	ldr	r2, [pc, #116]	; (800080c <HAL_SPI_MspInit+0xf0>)
 8000796:	f043 0302 	orr.w	r3, r3, #2
 800079a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <HAL_SPI_MspInit+0xf0>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a4:	f003 0302 	and.w	r3, r3, #2
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007ac:	2308      	movs	r3, #8
 80007ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007c4:	2306      	movs	r3, #6
 80007c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80007ce:	4619      	mov	r1, r3
 80007d0:	480f      	ldr	r0, [pc, #60]	; (8000810 <HAL_SPI_MspInit+0xf4>)
 80007d2:	f000 fa19 	bl	8000c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007d6:	2320      	movs	r3, #32
 80007d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80007ee:	2307      	movs	r3, #7
 80007f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80007f8:	4619      	mov	r1, r3
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <HAL_SPI_MspInit+0xf4>)
 80007fc:	f000 fa04 	bl	8000c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000800:	bf00      	nop
 8000802:	37e8      	adds	r7, #232	; 0xe8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40003c00 	.word	0x40003c00
 800080c:	58024400 	.word	0x58024400
 8000810:	58020400 	.word	0x58020400

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000818:	e7fe      	b.n	8000818 <NMI_Handler+0x4>

0800081a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <HardFault_Handler+0x4>

08000820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <MemManage_Handler+0x4>

08000826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <BusFault_Handler+0x4>

0800082c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <UsageFault_Handler+0x4>

08000832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000860:	f000 f89e 	bl	80009a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800086c:	f7ff fd34 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000870:	480c      	ldr	r0, [pc, #48]	; (80008a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000872:	490d      	ldr	r1, [pc, #52]	; (80008a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000888:	4c0a      	ldr	r4, [pc, #40]	; (80008b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000896:	f003 fb2d 	bl	8003ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800089a:	f7ff fdb3 	bl	8000404 <main>
  bx  lr
 800089e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80008a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008a8:	24000488 	.word	0x24000488
  ldr r2, =_sidata
 80008ac:	08003f6c 	.word	0x08003f6c
  ldr r2, =_sbss
 80008b0:	24000488 	.word	0x24000488
  ldr r4, =_ebss
 80008b4:	24000530 	.word	0x24000530

080008b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC3_IRQHandler>
	...

080008bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c2:	2003      	movs	r0, #3
 80008c4:	f000 f96e 	bl	8000ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008c8:	f001 fa1a 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 80008cc:	4602      	mov	r2, r0
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_Init+0x68>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	0a1b      	lsrs	r3, r3, #8
 80008d4:	f003 030f 	and.w	r3, r3, #15
 80008d8:	4913      	ldr	r1, [pc, #76]	; (8000928 <HAL_Init+0x6c>)
 80008da:	5ccb      	ldrb	r3, [r1, r3]
 80008dc:	f003 031f 	and.w	r3, r3, #31
 80008e0:	fa22 f303 	lsr.w	r3, r2, r3
 80008e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <HAL_Init+0x68>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	f003 030f 	and.w	r3, r3, #15
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_Init+0x6c>)
 80008f0:	5cd3      	ldrb	r3, [r2, r3]
 80008f2:	f003 031f 	and.w	r3, r3, #31
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	fa22 f303 	lsr.w	r3, r2, r3
 80008fc:	4a0b      	ldr	r2, [pc, #44]	; (800092c <HAL_Init+0x70>)
 80008fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000900:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <HAL_Init+0x74>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000906:	200f      	movs	r0, #15
 8000908:	f000 f814 	bl	8000934 <HAL_InitTick>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e002      	b.n	800091c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000916:	f7ff fee7 	bl	80006e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	58024400 	.word	0x58024400
 8000928:	08003f54 	.word	0x08003f54
 800092c:	24000004 	.word	0x24000004
 8000930:	24000000 	.word	0x24000000

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_InitTick+0x60>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d101      	bne.n	8000948 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	e021      	b.n	800098c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <HAL_InitTick+0x64>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_InitTick+0x60>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	fbb3 f3f1 	udiv	r3, r3, r1
 800095a:	fbb2 f3f3 	udiv	r3, r2, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f945 	bl	8000bee <HAL_SYSTICK_Config>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e00e      	b.n	800098c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b0f      	cmp	r3, #15
 8000972:	d80a      	bhi.n	800098a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000974:	2200      	movs	r2, #0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f000 f91d 	bl	8000bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <HAL_InitTick+0x68>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	e000      	b.n	800098c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	24000484 	.word	0x24000484
 8000998:	24000000 	.word	0x24000000
 800099c:	24000480 	.word	0x24000480

080009a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x20>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x24>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_IncTick+0x24>)
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	24000484 	.word	0x24000484
 80009c4:	2400052c 	.word	0x2400052c

080009c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <HAL_GetTick+0x14>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	2400052c 	.word	0x2400052c

080009e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e8:	f7ff ffee 	bl	80009c8 <HAL_GetTick>
 80009ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f8:	d005      	beq.n	8000a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_Delay+0x44>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a06:	bf00      	nop
 8000a08:	f7ff ffde 	bl	80009c8 <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d8f7      	bhi.n	8000a08 <HAL_Delay+0x28>
  {
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	24000484 	.word	0x24000484

08000a28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_GetREVID+0x14>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	0c1b      	lsrs	r3, r3, #16
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	5c001000 	.word	0x5c001000

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <__NVIC_SetPriorityGrouping+0x40>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <__NVIC_SetPriorityGrouping+0x40>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00
 8000a84:	05fa0000 	.word	0x05fa0000

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db0a      	blt.n	8000ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	; (8000af0 <__NVIC_SetPriority+0x4c>)
 8000abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000acc:	e00a      	b.n	8000ae4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4908      	ldr	r1, [pc, #32]	; (8000af4 <__NVIC_SetPriority+0x50>)
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	3b04      	subs	r3, #4
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	761a      	strb	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	f1c3 0307 	rsb	r3, r3, #7
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	bf28      	it	cs
 8000b16:	2304      	movcs	r3, #4
 8000b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d902      	bls.n	8000b28 <NVIC_EncodePriority+0x30>
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3b03      	subs	r3, #3
 8000b26:	e000      	b.n	8000b2a <NVIC_EncodePriority+0x32>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43da      	mvns	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43d9      	mvns	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	4313      	orrs	r3, r2
         );
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3724      	adds	r7, #36	; 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b70:	d301      	bcc.n	8000b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00f      	b.n	8000b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <SysTick_Config+0x40>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7e:	210f      	movs	r1, #15
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f7ff ff8e 	bl	8000aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SysTick_Config+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x40>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff47 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc8:	f7ff ff5e 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000bcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	68b9      	ldr	r1, [r7, #8]
 8000bd2:	6978      	ldr	r0, [r7, #20]
 8000bd4:	f7ff ff90 	bl	8000af8 <NVIC_EncodePriority>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bde:	4611      	mov	r1, r2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff5f 	bl	8000aa4 <__NVIC_SetPriority>
}
 8000be6:	bf00      	nop
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ffb2 	bl	8000b60 <SysTick_Config>
 8000bfc:	4603      	mov	r3, r0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c16:	4b89      	ldr	r3, [pc, #548]	; (8000e3c <HAL_GPIO_Init+0x234>)
 8000c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c1a:	e194      	b.n	8000f46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	2101      	movs	r1, #1
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	fa01 f303 	lsl.w	r3, r1, r3
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 8186 	beq.w	8000f40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d005      	beq.n	8000c4c <HAL_GPIO_Init+0x44>
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d130      	bne.n	8000cae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2203      	movs	r2, #3
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c82:	2201      	movs	r2, #1
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	091b      	lsrs	r3, r3, #4
 8000c98:	f003 0201 	and.w	r2, r3, #1
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d017      	beq.n	8000cea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d123      	bne.n	8000d3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	08da      	lsrs	r2, r3, #3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3208      	adds	r2, #8
 8000cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	220f      	movs	r2, #15
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4013      	ands	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	691a      	ldr	r2, [r3, #16]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	08da      	lsrs	r2, r3, #3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3208      	adds	r2, #8
 8000d38:	69b9      	ldr	r1, [r7, #24]
 8000d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0203 	and.w	r2, r3, #3
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 80e0 	beq.w	8000f40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d80:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <HAL_GPIO_Init+0x238>)
 8000d82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d86:	4a2e      	ldr	r2, [pc, #184]	; (8000e40 <HAL_GPIO_Init+0x238>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d90:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <HAL_GPIO_Init+0x238>)
 8000d92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d9e:	4a29      	ldr	r2, [pc, #164]	; (8000e44 <HAL_GPIO_Init+0x23c>)
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	089b      	lsrs	r3, r3, #2
 8000da4:	3302      	adds	r3, #2
 8000da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	220f      	movs	r2, #15
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a20      	ldr	r2, [pc, #128]	; (8000e48 <HAL_GPIO_Init+0x240>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d052      	beq.n	8000e70 <HAL_GPIO_Init+0x268>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <HAL_GPIO_Init+0x244>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d031      	beq.n	8000e36 <HAL_GPIO_Init+0x22e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a1e      	ldr	r2, [pc, #120]	; (8000e50 <HAL_GPIO_Init+0x248>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d02b      	beq.n	8000e32 <HAL_GPIO_Init+0x22a>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <HAL_GPIO_Init+0x24c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d025      	beq.n	8000e2e <HAL_GPIO_Init+0x226>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <HAL_GPIO_Init+0x250>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d01f      	beq.n	8000e2a <HAL_GPIO_Init+0x222>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <HAL_GPIO_Init+0x254>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d019      	beq.n	8000e26 <HAL_GPIO_Init+0x21e>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a1a      	ldr	r2, [pc, #104]	; (8000e60 <HAL_GPIO_Init+0x258>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d013      	beq.n	8000e22 <HAL_GPIO_Init+0x21a>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_GPIO_Init+0x25c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d00d      	beq.n	8000e1e <HAL_GPIO_Init+0x216>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <HAL_GPIO_Init+0x260>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d007      	beq.n	8000e1a <HAL_GPIO_Init+0x212>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <HAL_GPIO_Init+0x264>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d101      	bne.n	8000e16 <HAL_GPIO_Init+0x20e>
 8000e12:	2309      	movs	r3, #9
 8000e14:	e02d      	b.n	8000e72 <HAL_GPIO_Init+0x26a>
 8000e16:	230a      	movs	r3, #10
 8000e18:	e02b      	b.n	8000e72 <HAL_GPIO_Init+0x26a>
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	e029      	b.n	8000e72 <HAL_GPIO_Init+0x26a>
 8000e1e:	2307      	movs	r3, #7
 8000e20:	e027      	b.n	8000e72 <HAL_GPIO_Init+0x26a>
 8000e22:	2306      	movs	r3, #6
 8000e24:	e025      	b.n	8000e72 <HAL_GPIO_Init+0x26a>
 8000e26:	2305      	movs	r3, #5
 8000e28:	e023      	b.n	8000e72 <HAL_GPIO_Init+0x26a>
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	e021      	b.n	8000e72 <HAL_GPIO_Init+0x26a>
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e01f      	b.n	8000e72 <HAL_GPIO_Init+0x26a>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e01d      	b.n	8000e72 <HAL_GPIO_Init+0x26a>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e01b      	b.n	8000e72 <HAL_GPIO_Init+0x26a>
 8000e3a:	bf00      	nop
 8000e3c:	58000080 	.word	0x58000080
 8000e40:	58024400 	.word	0x58024400
 8000e44:	58000400 	.word	0x58000400
 8000e48:	58020000 	.word	0x58020000
 8000e4c:	58020400 	.word	0x58020400
 8000e50:	58020800 	.word	0x58020800
 8000e54:	58020c00 	.word	0x58020c00
 8000e58:	58021000 	.word	0x58021000
 8000e5c:	58021400 	.word	0x58021400
 8000e60:	58021800 	.word	0x58021800
 8000e64:	58021c00 	.word	0x58021c00
 8000e68:	58022000 	.word	0x58022000
 8000e6c:	58022400 	.word	0x58022400
 8000e70:	2300      	movs	r3, #0
 8000e72:	69fa      	ldr	r2, [r7, #28]
 8000e74:	f002 0203 	and.w	r2, r2, #3
 8000e78:	0092      	lsls	r2, r2, #2
 8000e7a:	4093      	lsls	r3, r2
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e82:	4938      	ldr	r1, [pc, #224]	; (8000f64 <HAL_GPIO_Init+0x35c>)
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	3302      	adds	r3, #2
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	3301      	adds	r3, #1
 8000f44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f47f ae63 	bne.w	8000c1c <HAL_GPIO_Init+0x14>
  }
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	3724      	adds	r7, #36	; 0x24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	58000400 	.word	0x58000400

08000f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
 8000f74:	4613      	mov	r3, r2
 8000f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f78:	787b      	ldrb	r3, [r7, #1]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f84:	e003      	b.n	8000f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	041a      	lsls	r2, r3, #16
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	619a      	str	r2, [r3, #24]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fac:	887a      	ldrh	r2, [r7, #2]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	041a      	lsls	r2, r3, #16
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	400b      	ands	r3, r1
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_HSEM_FastTake+0x2c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3320      	adds	r3, #32
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	4a07      	ldr	r2, [pc, #28]	; (8001000 <HAL_HSEM_FastTake+0x30>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d101      	bne.n	8000fec <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e000      	b.n	8000fee <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	58026400 	.word	0x58026400
 8001000:	80000300 	.word	0x80000300

08001004 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800100e:	4906      	ldr	r1, [pc, #24]	; (8001028 <HAL_HSEM_Release+0x24>)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	58026400 	.word	0x58026400

0800102c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001034:	4b29      	ldr	r3, [pc, #164]	; (80010dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	2b06      	cmp	r3, #6
 800103e:	d00a      	beq.n	8001056 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	429a      	cmp	r2, r3
 800104c:	d001      	beq.n	8001052 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e040      	b.n	80010d4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e03e      	b.n	80010d4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800105e:	491f      	ldr	r1, [pc, #124]	; (80010dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4313      	orrs	r3, r2
 8001064:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001066:	f7ff fcaf 	bl	80009c8 <HAL_GetTick>
 800106a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800106c:	e009      	b.n	8001082 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800106e:	f7ff fcab 	bl	80009c8 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800107c:	d901      	bls.n	8001082 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e028      	b.n	80010d4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800108a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800108e:	d1ee      	bne.n	800106e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b1e      	cmp	r3, #30
 8001094:	d008      	beq.n	80010a8 <HAL_PWREx_ConfigSupply+0x7c>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b2e      	cmp	r3, #46	; 0x2e
 800109a:	d005      	beq.n	80010a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b1d      	cmp	r3, #29
 80010a0:	d002      	beq.n	80010a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b2d      	cmp	r3, #45	; 0x2d
 80010a6:	d114      	bne.n	80010d2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80010a8:	f7ff fc8e 	bl	80009c8 <HAL_GetTick>
 80010ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80010ae:	e009      	b.n	80010c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010b0:	f7ff fc8a 	bl	80009c8 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010be:	d901      	bls.n	80010c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e007      	b.n	80010d4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_PWREx_ConfigSupply+0xb0>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d0:	d1ee      	bne.n	80010b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	58024800 	.word	0x58024800

080010e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08c      	sub	sp, #48	; 0x30
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d102      	bne.n	80010f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	f000 bc48 	b.w	8001984 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 8088 	beq.w	8001212 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001102:	4b99      	ldr	r3, [pc, #612]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800110c:	4b96      	ldr	r3, [pc, #600]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001114:	2b10      	cmp	r3, #16
 8001116:	d007      	beq.n	8001128 <HAL_RCC_OscConfig+0x48>
 8001118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111a:	2b18      	cmp	r3, #24
 800111c:	d111      	bne.n	8001142 <HAL_RCC_OscConfig+0x62>
 800111e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d10c      	bne.n	8001142 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001128:	4b8f      	ldr	r3, [pc, #572]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d06d      	beq.n	8001210 <HAL_RCC_OscConfig+0x130>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d169      	bne.n	8001210 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	f000 bc21 	b.w	8001984 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114a:	d106      	bne.n	800115a <HAL_RCC_OscConfig+0x7a>
 800114c:	4b86      	ldr	r3, [pc, #536]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a85      	ldr	r2, [pc, #532]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	e02e      	b.n	80011b8 <HAL_RCC_OscConfig+0xd8>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10c      	bne.n	800117c <HAL_RCC_OscConfig+0x9c>
 8001162:	4b81      	ldr	r3, [pc, #516]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a80      	ldr	r2, [pc, #512]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	4b7e      	ldr	r3, [pc, #504]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a7d      	ldr	r2, [pc, #500]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001174:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e01d      	b.n	80011b8 <HAL_RCC_OscConfig+0xd8>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001184:	d10c      	bne.n	80011a0 <HAL_RCC_OscConfig+0xc0>
 8001186:	4b78      	ldr	r3, [pc, #480]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a77      	ldr	r2, [pc, #476]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800118c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b75      	ldr	r3, [pc, #468]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a74      	ldr	r2, [pc, #464]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e00b      	b.n	80011b8 <HAL_RCC_OscConfig+0xd8>
 80011a0:	4b71      	ldr	r3, [pc, #452]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a70      	ldr	r2, [pc, #448]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80011a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b6e      	ldr	r3, [pc, #440]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a6d      	ldr	r2, [pc, #436]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80011b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d013      	beq.n	80011e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fc02 	bl	80009c8 <HAL_GetTick>
 80011c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fbfe 	bl	80009c8 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	; 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e3d4      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011da:	4b63      	ldr	r3, [pc, #396]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0xe8>
 80011e6:	e014      	b.n	8001212 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fbee 	bl	80009c8 <HAL_GetTick>
 80011ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fbea 	bl	80009c8 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	; 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e3c0      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001202:	4b59      	ldr	r3, [pc, #356]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x110>
 800120e:	e000      	b.n	8001212 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 80ca 	beq.w	80013b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001220:	4b51      	ldr	r3, [pc, #324]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001228:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800122a:	4b4f      	ldr	r3, [pc, #316]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d007      	beq.n	8001246 <HAL_RCC_OscConfig+0x166>
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	2b18      	cmp	r3, #24
 800123a:	d156      	bne.n	80012ea <HAL_RCC_OscConfig+0x20a>
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d151      	bne.n	80012ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001246:	4b48      	ldr	r3, [pc, #288]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <HAL_RCC_OscConfig+0x17e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e392      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800125e:	4b42      	ldr	r3, [pc, #264]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f023 0219 	bic.w	r2, r3, #25
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	493f      	ldr	r1, [pc, #252]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800126c:	4313      	orrs	r3, r2
 800126e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001270:	f7ff fbaa 	bl	80009c8 <HAL_GetTick>
 8001274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001278:	f7ff fba6 	bl	80009c8 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e37c      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800128a:	4b37      	ldr	r3, [pc, #220]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001296:	f7ff fbc7 	bl	8000a28 <HAL_GetREVID>
 800129a:	4603      	mov	r3, r0
 800129c:	f241 0203 	movw	r2, #4099	; 0x1003
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d817      	bhi.n	80012d4 <HAL_RCC_OscConfig+0x1f4>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	2b40      	cmp	r3, #64	; 0x40
 80012aa:	d108      	bne.n	80012be <HAL_RCC_OscConfig+0x1de>
 80012ac:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80012b4:	4a2c      	ldr	r2, [pc, #176]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80012b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012bc:	e07a      	b.n	80013b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012be:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	031b      	lsls	r3, r3, #12
 80012cc:	4926      	ldr	r1, [pc, #152]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012d2:	e06f      	b.n	80013b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	061b      	lsls	r3, r3, #24
 80012e2:	4921      	ldr	r1, [pc, #132]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012e8:	e064      	b.n	80013b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d047      	beq.n	8001382 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 0219 	bic.w	r2, r3, #25
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	491a      	ldr	r1, [pc, #104]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001300:	4313      	orrs	r3, r2
 8001302:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001304:	f7ff fb60 	bl	80009c8 <HAL_GetTick>
 8001308:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130c:	f7ff fb5c 	bl	80009c8 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e332      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	f7ff fb7d 	bl	8000a28 <HAL_GetREVID>
 800132e:	4603      	mov	r3, r0
 8001330:	f241 0203 	movw	r2, #4099	; 0x1003
 8001334:	4293      	cmp	r3, r2
 8001336:	d819      	bhi.n	800136c <HAL_RCC_OscConfig+0x28c>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	2b40      	cmp	r3, #64	; 0x40
 800133e:	d108      	bne.n	8001352 <HAL_RCC_OscConfig+0x272>
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001348:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800134a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134e:	6053      	str	r3, [r2, #4]
 8001350:	e030      	b.n	80013b4 <HAL_RCC_OscConfig+0x2d4>
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	031b      	lsls	r3, r3, #12
 8001360:	4901      	ldr	r1, [pc, #4]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
 8001366:	e025      	b.n	80013b4 <HAL_RCC_OscConfig+0x2d4>
 8001368:	58024400 	.word	0x58024400
 800136c:	4b9a      	ldr	r3, [pc, #616]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	061b      	lsls	r3, r3, #24
 800137a:	4997      	ldr	r1, [pc, #604]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
 8001380:	e018      	b.n	80013b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001382:	4b95      	ldr	r3, [pc, #596]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a94      	ldr	r2, [pc, #592]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138e:	f7ff fb1b 	bl	80009c8 <HAL_GetTick>
 8001392:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001396:	f7ff fb17 	bl	80009c8 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e2ed      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013a8:	4b8b      	ldr	r3, [pc, #556]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f0      	bne.n	8001396 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0310 	and.w	r3, r3, #16
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80a9 	beq.w	8001514 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c2:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013cc:	4b82      	ldr	r3, [pc, #520]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d007      	beq.n	80013e8 <HAL_RCC_OscConfig+0x308>
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b18      	cmp	r3, #24
 80013dc:	d13a      	bne.n	8001454 <HAL_RCC_OscConfig+0x374>
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d135      	bne.n	8001454 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013e8:	4b7b      	ldr	r3, [pc, #492]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_OscConfig+0x320>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	2b80      	cmp	r3, #128	; 0x80
 80013fa:	d001      	beq.n	8001400 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e2c1      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001400:	f7ff fb12 	bl	8000a28 <HAL_GetREVID>
 8001404:	4603      	mov	r3, r0
 8001406:	f241 0203 	movw	r2, #4099	; 0x1003
 800140a:	4293      	cmp	r3, r2
 800140c:	d817      	bhi.n	800143e <HAL_RCC_OscConfig+0x35e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	2b20      	cmp	r3, #32
 8001414:	d108      	bne.n	8001428 <HAL_RCC_OscConfig+0x348>
 8001416:	4b70      	ldr	r3, [pc, #448]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800141e:	4a6e      	ldr	r2, [pc, #440]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 8001420:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001424:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001426:	e075      	b.n	8001514 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001428:	4b6b      	ldr	r3, [pc, #428]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	069b      	lsls	r3, r3, #26
 8001436:	4968      	ldr	r1, [pc, #416]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800143c:	e06a      	b.n	8001514 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800143e:	4b66      	ldr	r3, [pc, #408]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	061b      	lsls	r3, r3, #24
 800144c:	4962      	ldr	r1, [pc, #392]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 800144e:	4313      	orrs	r3, r2
 8001450:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001452:	e05f      	b.n	8001514 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d042      	beq.n	80014e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800145c:	4b5e      	ldr	r3, [pc, #376]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a5d      	ldr	r2, [pc, #372]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 8001462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001468:	f7ff faae 	bl	80009c8 <HAL_GetTick>
 800146c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001470:	f7ff faaa 	bl	80009c8 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e280      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001482:	4b55      	ldr	r3, [pc, #340]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800148e:	f7ff facb 	bl	8000a28 <HAL_GetREVID>
 8001492:	4603      	mov	r3, r0
 8001494:	f241 0203 	movw	r2, #4099	; 0x1003
 8001498:	4293      	cmp	r3, r2
 800149a:	d817      	bhi.n	80014cc <HAL_RCC_OscConfig+0x3ec>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	2b20      	cmp	r3, #32
 80014a2:	d108      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3d6>
 80014a4:	4b4c      	ldr	r3, [pc, #304]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80014ac:	4a4a      	ldr	r2, [pc, #296]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 80014ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014b2:	6053      	str	r3, [r2, #4]
 80014b4:	e02e      	b.n	8001514 <HAL_RCC_OscConfig+0x434>
 80014b6:	4b48      	ldr	r3, [pc, #288]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	069b      	lsls	r3, r3, #26
 80014c4:	4944      	ldr	r1, [pc, #272]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]
 80014ca:	e023      	b.n	8001514 <HAL_RCC_OscConfig+0x434>
 80014cc:	4b42      	ldr	r3, [pc, #264]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	061b      	lsls	r3, r3, #24
 80014da:	493f      	ldr	r1, [pc, #252]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	60cb      	str	r3, [r1, #12]
 80014e0:	e018      	b.n	8001514 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80014e2:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a3c      	ldr	r2, [pc, #240]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 80014e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7ff fa6b 	bl	80009c8 <HAL_GetTick>
 80014f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014f6:	f7ff fa67 	bl	80009c8 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e23d      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001508:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f0      	bne.n	80014f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b00      	cmp	r3, #0
 800151e:	d036      	beq.n	800158e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d019      	beq.n	800155c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 800152a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800152c:	4a2a      	ldr	r2, [pc, #168]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fa48 	bl	80009c8 <HAL_GetTick>
 8001538:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fa44 	bl	80009c8 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e21a      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 8001550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x45c>
 800155a:	e018      	b.n	800158e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 800155e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001560:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7ff fa2e 	bl	80009c8 <HAL_GetTick>
 800156c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001570:	f7ff fa2a 	bl	80009c8 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e200      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 8001584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0320 	and.w	r3, r3, #32
 8001596:	2b00      	cmp	r3, #0
 8001598:	d039      	beq.n	800160e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d01c      	beq.n	80015dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 80015a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015ae:	f7ff fa0b 	bl	80009c8 <HAL_GetTick>
 80015b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015b6:	f7ff fa07 	bl	80009c8 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e1dd      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <HAL_RCC_OscConfig+0x4f8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x4d6>
 80015d4:	e01b      	b.n	800160e <HAL_RCC_OscConfig+0x52e>
 80015d6:	bf00      	nop
 80015d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015dc:	4b9b      	ldr	r3, [pc, #620]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a9a      	ldr	r2, [pc, #616]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 80015e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015e8:	f7ff f9ee 	bl	80009c8 <HAL_GetTick>
 80015ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015f0:	f7ff f9ea 	bl	80009c8 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1c0      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001602:	4b92      	ldr	r3, [pc, #584]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8081 	beq.w	800171e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800161c:	4b8c      	ldr	r3, [pc, #560]	; (8001850 <HAL_RCC_OscConfig+0x770>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a8b      	ldr	r2, [pc, #556]	; (8001850 <HAL_RCC_OscConfig+0x770>)
 8001622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001626:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001628:	f7ff f9ce 	bl	80009c8 <HAL_GetTick>
 800162c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001630:	f7ff f9ca 	bl	80009c8 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e1a0      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001642:	4b83      	ldr	r3, [pc, #524]	; (8001850 <HAL_RCC_OscConfig+0x770>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d106      	bne.n	8001664 <HAL_RCC_OscConfig+0x584>
 8001656:	4b7d      	ldr	r3, [pc, #500]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165a:	4a7c      	ldr	r2, [pc, #496]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6713      	str	r3, [r2, #112]	; 0x70
 8001662:	e02d      	b.n	80016c0 <HAL_RCC_OscConfig+0x5e0>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10c      	bne.n	8001686 <HAL_RCC_OscConfig+0x5a6>
 800166c:	4b77      	ldr	r3, [pc, #476]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 800166e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001670:	4a76      	ldr	r2, [pc, #472]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	6713      	str	r3, [r2, #112]	; 0x70
 8001678:	4b74      	ldr	r3, [pc, #464]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	4a73      	ldr	r2, [pc, #460]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 800167e:	f023 0304 	bic.w	r3, r3, #4
 8001682:	6713      	str	r3, [r2, #112]	; 0x70
 8001684:	e01c      	b.n	80016c0 <HAL_RCC_OscConfig+0x5e0>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b05      	cmp	r3, #5
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5c8>
 800168e:	4b6f      	ldr	r3, [pc, #444]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	4a6e      	ldr	r2, [pc, #440]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6713      	str	r3, [r2, #112]	; 0x70
 800169a:	4b6c      	ldr	r3, [pc, #432]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a6b      	ldr	r2, [pc, #428]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0x5e0>
 80016a8:	4b68      	ldr	r3, [pc, #416]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ac:	4a67      	ldr	r2, [pc, #412]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	; 0x70
 80016b4:	4b65      	ldr	r3, [pc, #404]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	4a64      	ldr	r2, [pc, #400]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 80016ba:	f023 0304 	bic.w	r3, r3, #4
 80016be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d015      	beq.n	80016f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff f97e 	bl	80009c8 <HAL_GetTick>
 80016cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff f97a 	bl	80009c8 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e14e      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016e6:	4b59      	ldr	r3, [pc, #356]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0ee      	beq.n	80016d0 <HAL_RCC_OscConfig+0x5f0>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f4:	f7ff f968 	bl	80009c8 <HAL_GetTick>
 80016f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f7ff f964 	bl	80009c8 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e138      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001712:	4b4e      	ldr	r3, [pc, #312]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ee      	bne.n	80016fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 812d 	beq.w	8001982 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001728:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001730:	2b18      	cmp	r3, #24
 8001732:	f000 80bd 	beq.w	80018b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	2b02      	cmp	r3, #2
 800173c:	f040 809e 	bne.w	800187c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001740:	4b42      	ldr	r3, [pc, #264]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a41      	ldr	r2, [pc, #260]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800174a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff f93c 	bl	80009c8 <HAL_GetTick>
 8001750:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001754:	f7ff f938 	bl	80009c8 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e10e      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001766:	4b39      	ldr	r3, [pc, #228]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001772:	4b36      	ldr	r3, [pc, #216]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001776:	4b37      	ldr	r3, [pc, #220]	; (8001854 <HAL_RCC_OscConfig+0x774>)
 8001778:	4013      	ands	r3, r2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	430a      	orrs	r2, r1
 8001786:	4931      	ldr	r1, [pc, #196]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001788:	4313      	orrs	r3, r2
 800178a:	628b      	str	r3, [r1, #40]	; 0x28
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	3b01      	subs	r3, #1
 8001792:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179a:	3b01      	subs	r3, #1
 800179c:	025b      	lsls	r3, r3, #9
 800179e:	b29b      	uxth	r3, r3
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a6:	3b01      	subs	r3, #1
 80017a8:	041b      	lsls	r3, r3, #16
 80017aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b4:	3b01      	subs	r3, #1
 80017b6:	061b      	lsls	r3, r3, #24
 80017b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80017bc:	4923      	ldr	r1, [pc, #140]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80017c2:	4b22      	ldr	r3, [pc, #136]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	4a21      	ldr	r2, [pc, #132]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 80017d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_RCC_OscConfig+0x778>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017da:	00d2      	lsls	r2, r2, #3
 80017dc:	491b      	ldr	r1, [pc, #108]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	f023 020c 	bic.w	r2, r3, #12
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	4917      	ldr	r1, [pc, #92]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	f023 0202 	bic.w	r2, r3, #2
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	4912      	ldr	r1, [pc, #72]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001802:	4313      	orrs	r3, r2
 8001804:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	4a10      	ldr	r2, [pc, #64]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 800180c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001810:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	4a0d      	ldr	r2, [pc, #52]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001828:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 800182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182e:	4a07      	ldr	r2, [pc, #28]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a04      	ldr	r2, [pc, #16]	; (800184c <HAL_RCC_OscConfig+0x76c>)
 800183c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001842:	f7ff f8c1 	bl	80009c8 <HAL_GetTick>
 8001846:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001848:	e011      	b.n	800186e <HAL_RCC_OscConfig+0x78e>
 800184a:	bf00      	nop
 800184c:	58024400 	.word	0x58024400
 8001850:	58024800 	.word	0x58024800
 8001854:	fffffc0c 	.word	0xfffffc0c
 8001858:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff f8b4 	bl	80009c8 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e08a      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800186e:	4b47      	ldr	r3, [pc, #284]	; (800198c <HAL_RCC_OscConfig+0x8ac>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0x77c>
 800187a:	e082      	b.n	8001982 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187c:	4b43      	ldr	r3, [pc, #268]	; (800198c <HAL_RCC_OscConfig+0x8ac>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a42      	ldr	r2, [pc, #264]	; (800198c <HAL_RCC_OscConfig+0x8ac>)
 8001882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff f89e 	bl	80009c8 <HAL_GetTick>
 800188c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff f89a 	bl	80009c8 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e070      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018a2:	4b3a      	ldr	r3, [pc, #232]	; (800198c <HAL_RCC_OscConfig+0x8ac>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x7b0>
 80018ae:	e068      	b.n	8001982 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <HAL_RCC_OscConfig+0x8ac>)
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80018b6:	4b35      	ldr	r3, [pc, #212]	; (800198c <HAL_RCC_OscConfig+0x8ac>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d031      	beq.n	8001928 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f003 0203 	and.w	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d12a      	bne.n	8001928 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d122      	bne.n	8001928 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d11a      	bne.n	8001928 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	0a5b      	lsrs	r3, r3, #9
 80018f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d111      	bne.n	8001928 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	0c1b      	lsrs	r3, r3, #16
 8001908:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001910:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d108      	bne.n	8001928 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	0e1b      	lsrs	r3, r3, #24
 800191a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001922:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e02b      	b.n	8001984 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <HAL_RCC_OscConfig+0x8ac>)
 800192e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001930:	08db      	lsrs	r3, r3, #3
 8001932:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001936:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	429a      	cmp	r2, r3
 8001940:	d01f      	beq.n	8001982 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_RCC_OscConfig+0x8ac>)
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	4a11      	ldr	r2, [pc, #68]	; (800198c <HAL_RCC_OscConfig+0x8ac>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800194e:	f7ff f83b 	bl	80009c8 <HAL_GetTick>
 8001952:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001954:	bf00      	nop
 8001956:	f7ff f837 	bl	80009c8 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	4293      	cmp	r3, r2
 8001960:	d0f9      	beq.n	8001956 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_RCC_OscConfig+0x8ac>)
 8001964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_RCC_OscConfig+0x8b0>)
 8001968:	4013      	ands	r3, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800196e:	00d2      	lsls	r2, r2, #3
 8001970:	4906      	ldr	r1, [pc, #24]	; (800198c <HAL_RCC_OscConfig+0x8ac>)
 8001972:	4313      	orrs	r3, r2
 8001974:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_RCC_OscConfig+0x8ac>)
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_RCC_OscConfig+0x8ac>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3730      	adds	r7, #48	; 0x30
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	58024400 	.word	0x58024400
 8001990:	ffff0007 	.word	0xffff0007

08001994 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e19c      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4b8a      	ldr	r3, [pc, #552]	; (8001bd4 <HAL_RCC_ClockConfig+0x240>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d910      	bls.n	80019d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b87      	ldr	r3, [pc, #540]	; (8001bd4 <HAL_RCC_ClockConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 020f 	bic.w	r2, r3, #15
 80019be:	4985      	ldr	r1, [pc, #532]	; (8001bd4 <HAL_RCC_ClockConfig+0x240>)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	4b83      	ldr	r3, [pc, #524]	; (8001bd4 <HAL_RCC_ClockConfig+0x240>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e184      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d010      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	4b7b      	ldr	r3, [pc, #492]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d908      	bls.n	8001a06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019f4:	4b78      	ldr	r3, [pc, #480]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	4975      	ldr	r1, [pc, #468]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d010      	beq.n	8001a34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	4b70      	ldr	r3, [pc, #448]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d908      	bls.n	8001a34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a22:	4b6d      	ldr	r3, [pc, #436]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	496a      	ldr	r1, [pc, #424]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d010      	beq.n	8001a62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699a      	ldr	r2, [r3, #24]
 8001a44:	4b64      	ldr	r3, [pc, #400]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d908      	bls.n	8001a62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a50:	4b61      	ldr	r3, [pc, #388]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	495e      	ldr	r1, [pc, #376]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0320 	and.w	r3, r3, #32
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d010      	beq.n	8001a90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69da      	ldr	r2, [r3, #28]
 8001a72:	4b59      	ldr	r3, [pc, #356]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d908      	bls.n	8001a90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a7e:	4b56      	ldr	r3, [pc, #344]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4953      	ldr	r1, [pc, #332]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d010      	beq.n	8001abe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	4b4d      	ldr	r3, [pc, #308]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d908      	bls.n	8001abe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aac:	4b4a      	ldr	r3, [pc, #296]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f023 020f 	bic.w	r2, r3, #15
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	4947      	ldr	r1, [pc, #284]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d055      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001aca:	4b43      	ldr	r3, [pc, #268]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	4940      	ldr	r1, [pc, #256]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d107      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ae4:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d121      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0f6      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d107      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001afc:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d115      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0ea      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d107      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b14:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d109      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0de      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b24:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0d6      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b34:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	f023 0207 	bic.w	r2, r3, #7
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4925      	ldr	r1, [pc, #148]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b46:	f7fe ff3f 	bl	80009c8 <HAL_GetTick>
 8001b4a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4c:	e00a      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4e:	f7fe ff3b 	bl	80009c8 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e0be      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d1eb      	bne.n	8001b4e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d010      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d208      	bcs.n	8001ba4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f023 020f 	bic.w	r2, r3, #15
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <HAL_RCC_ClockConfig+0x244>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_RCC_ClockConfig+0x240>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d214      	bcs.n	8001bdc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_RCC_ClockConfig+0x240>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 020f 	bic.w	r2, r3, #15
 8001bba:	4906      	ldr	r1, [pc, #24]	; (8001bd4 <HAL_RCC_ClockConfig+0x240>)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <HAL_RCC_ClockConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e086      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x34e>
 8001bd4:	52002000 	.word	0x52002000
 8001bd8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d010      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <HAL_RCC_ClockConfig+0x358>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d208      	bcs.n	8001c0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bf8:	4b3c      	ldr	r3, [pc, #240]	; (8001cec <HAL_RCC_ClockConfig+0x358>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	4939      	ldr	r1, [pc, #228]	; (8001cec <HAL_RCC_ClockConfig+0x358>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d010      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	4b34      	ldr	r3, [pc, #208]	; (8001cec <HAL_RCC_ClockConfig+0x358>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d208      	bcs.n	8001c38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c26:	4b31      	ldr	r3, [pc, #196]	; (8001cec <HAL_RCC_ClockConfig+0x358>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	492e      	ldr	r1, [pc, #184]	; (8001cec <HAL_RCC_ClockConfig+0x358>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d010      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699a      	ldr	r2, [r3, #24]
 8001c48:	4b28      	ldr	r3, [pc, #160]	; (8001cec <HAL_RCC_ClockConfig+0x358>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d208      	bcs.n	8001c66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c54:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_RCC_ClockConfig+0x358>)
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4922      	ldr	r1, [pc, #136]	; (8001cec <HAL_RCC_ClockConfig+0x358>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d010      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69da      	ldr	r2, [r3, #28]
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCC_ClockConfig+0x358>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d208      	bcs.n	8001c94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <HAL_RCC_ClockConfig+0x358>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4917      	ldr	r1, [pc, #92]	; (8001cec <HAL_RCC_ClockConfig+0x358>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c94:	f000 f834 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_RCC_ClockConfig+0x358>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	0a1b      	lsrs	r3, r3, #8
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	4912      	ldr	r1, [pc, #72]	; (8001cf0 <HAL_RCC_ClockConfig+0x35c>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_RCC_ClockConfig+0x358>)
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <HAL_RCC_ClockConfig+0x35c>)
 8001cbc:	5cd3      	ldrb	r3, [r2, r3]
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc8:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <HAL_RCC_ClockConfig+0x360>)
 8001cca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_RCC_ClockConfig+0x364>)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_RCC_ClockConfig+0x368>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fe2c 	bl	8000934 <HAL_InitTick>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	58024400 	.word	0x58024400
 8001cf0:	08003f54 	.word	0x08003f54
 8001cf4:	24000004 	.word	0x24000004
 8001cf8:	24000000 	.word	0x24000000
 8001cfc:	24000480 	.word	0x24000480

08001d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	; 0x24
 8001d04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d06:	4bb3      	ldr	r3, [pc, #716]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d0e:	2b18      	cmp	r3, #24
 8001d10:	f200 8155 	bhi.w	8001fbe <HAL_RCC_GetSysClockFreq+0x2be>
 8001d14:	a201      	add	r2, pc, #4	; (adr r2, 8001d1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1a:	bf00      	nop
 8001d1c:	08001d81 	.word	0x08001d81
 8001d20:	08001fbf 	.word	0x08001fbf
 8001d24:	08001fbf 	.word	0x08001fbf
 8001d28:	08001fbf 	.word	0x08001fbf
 8001d2c:	08001fbf 	.word	0x08001fbf
 8001d30:	08001fbf 	.word	0x08001fbf
 8001d34:	08001fbf 	.word	0x08001fbf
 8001d38:	08001fbf 	.word	0x08001fbf
 8001d3c:	08001da7 	.word	0x08001da7
 8001d40:	08001fbf 	.word	0x08001fbf
 8001d44:	08001fbf 	.word	0x08001fbf
 8001d48:	08001fbf 	.word	0x08001fbf
 8001d4c:	08001fbf 	.word	0x08001fbf
 8001d50:	08001fbf 	.word	0x08001fbf
 8001d54:	08001fbf 	.word	0x08001fbf
 8001d58:	08001fbf 	.word	0x08001fbf
 8001d5c:	08001dad 	.word	0x08001dad
 8001d60:	08001fbf 	.word	0x08001fbf
 8001d64:	08001fbf 	.word	0x08001fbf
 8001d68:	08001fbf 	.word	0x08001fbf
 8001d6c:	08001fbf 	.word	0x08001fbf
 8001d70:	08001fbf 	.word	0x08001fbf
 8001d74:	08001fbf 	.word	0x08001fbf
 8001d78:	08001fbf 	.word	0x08001fbf
 8001d7c:	08001db3 	.word	0x08001db3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d80:	4b94      	ldr	r3, [pc, #592]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d009      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d8c:	4b91      	ldr	r3, [pc, #580]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	08db      	lsrs	r3, r3, #3
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	4a90      	ldr	r2, [pc, #576]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001d9e:	e111      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001da0:	4b8d      	ldr	r3, [pc, #564]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001da2:	61bb      	str	r3, [r7, #24]
      break;
 8001da4:	e10e      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001da6:	4b8d      	ldr	r3, [pc, #564]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001da8:	61bb      	str	r3, [r7, #24]
      break;
 8001daa:	e10b      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001dac:	4b8c      	ldr	r3, [pc, #560]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001dae:	61bb      	str	r3, [r7, #24]
      break;
 8001db0:	e108      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001db2:	4b88      	ldr	r3, [pc, #544]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001dbc:	4b85      	ldr	r3, [pc, #532]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dc6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001dc8:	4b82      	ldr	r3, [pc, #520]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001dd2:	4b80      	ldr	r3, [pc, #512]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd6:	08db      	lsrs	r3, r3, #3
 8001dd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	ee07 3a90 	vmov	s15, r3
 8001de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80e1 	beq.w	8001fb8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	f000 8083 	beq.w	8001f04 <HAL_RCC_GetSysClockFreq+0x204>
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	f200 80a1 	bhi.w	8001f48 <HAL_RCC_GetSysClockFreq+0x248>
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x114>
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d056      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e12:	e099      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e14:	4b6f      	ldr	r3, [pc, #444]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0320 	and.w	r3, r3, #32
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d02d      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e20:	4b6c      	ldr	r3, [pc, #432]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	4a6b      	ldr	r2, [pc, #428]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	ee07 3a90 	vmov	s15, r3
 8001e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e4a:	4b62      	ldr	r3, [pc, #392]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001fe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001e7a:	e087      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	ee07 3a90 	vmov	s15, r3
 8001e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e86:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e8e:	4b51      	ldr	r3, [pc, #324]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e96:	ee07 3a90 	vmov	s15, r3
 8001e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ea2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001fe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ebe:	e065      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eca:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001fec <HAL_RCC_GetSysClockFreq+0x2ec>
 8001ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ed2:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ee6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001fe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f02:	e043      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001ff0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f16:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001fe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f46:	e021      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f52:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001fec <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f6e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001fe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	0a5b      	lsrs	r3, r3, #9
 8001f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f96:	3301      	adds	r3, #1
 8001f98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	ee07 3a90 	vmov	s15, r3
 8001fa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb0:	ee17 3a90 	vmov	r3, s15
 8001fb4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001fb6:	e005      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
      break;
 8001fbc:	e002      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001fc0:	61bb      	str	r3, [r7, #24]
      break;
 8001fc2:	bf00      	nop
  }

  return sysclockfreq;
 8001fc4:	69bb      	ldr	r3, [r7, #24]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	; 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	58024400 	.word	0x58024400
 8001fd8:	03d09000 	.word	0x03d09000
 8001fdc:	003d0900 	.word	0x003d0900
 8001fe0:	017d7840 	.word	0x017d7840
 8001fe4:	46000000 	.word	0x46000000
 8001fe8:	4c742400 	.word	0x4c742400
 8001fec:	4a742400 	.word	0x4a742400
 8001ff0:	4bbebc20 	.word	0x4bbebc20

08001ff4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ff8:	b0ca      	sub	sp, #296	; 0x128
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002000:	2300      	movs	r3, #0
 8002002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002006:	2300      	movs	r3, #0
 8002008:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800200c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002018:	2500      	movs	r5, #0
 800201a:	ea54 0305 	orrs.w	r3, r4, r5
 800201e:	d049      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002026:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800202a:	d02f      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800202c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002030:	d828      	bhi.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002032:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002036:	d01a      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002038:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800203c:	d822      	bhi.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002046:	d007      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002048:	e01c      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800204a:	4bb8      	ldr	r3, [pc, #736]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	4ab7      	ldr	r2, [pc, #732]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002054:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002056:	e01a      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800205c:	3308      	adds	r3, #8
 800205e:	2102      	movs	r1, #2
 8002060:	4618      	mov	r0, r3
 8002062:	f001 f9d1 	bl	8003408 <RCCEx_PLL2_Config>
 8002066:	4603      	mov	r3, r0
 8002068:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800206c:	e00f      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800206e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002072:	3328      	adds	r3, #40	; 0x28
 8002074:	2102      	movs	r1, #2
 8002076:	4618      	mov	r0, r3
 8002078:	f001 fa78 	bl	800356c <RCCEx_PLL3_Config>
 800207c:	4603      	mov	r3, r0
 800207e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002082:	e004      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800208a:	e000      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800208c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800208e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10a      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002096:	4ba5      	ldr	r3, [pc, #660]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800209a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800209e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020a4:	4aa1      	ldr	r2, [pc, #644]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020a6:	430b      	orrs	r3, r1
 80020a8:	6513      	str	r3, [r2, #80]	; 0x50
 80020aa:	e003      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80020b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80020c0:	f04f 0900 	mov.w	r9, #0
 80020c4:	ea58 0309 	orrs.w	r3, r8, r9
 80020c8:	d047      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80020ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d82a      	bhi.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80020d4:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80020d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020da:	bf00      	nop
 80020dc:	080020f1 	.word	0x080020f1
 80020e0:	080020ff 	.word	0x080020ff
 80020e4:	08002115 	.word	0x08002115
 80020e8:	08002133 	.word	0x08002133
 80020ec:	08002133 	.word	0x08002133
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020f0:	4b8e      	ldr	r3, [pc, #568]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	4a8d      	ldr	r2, [pc, #564]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80020fc:	e01a      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80020fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002102:	3308      	adds	r3, #8
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f001 f97e 	bl	8003408 <RCCEx_PLL2_Config>
 800210c:	4603      	mov	r3, r0
 800210e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002112:	e00f      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002118:	3328      	adds	r3, #40	; 0x28
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f001 fa25 	bl	800356c <RCCEx_PLL3_Config>
 8002122:	4603      	mov	r3, r0
 8002124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002128:	e004      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002130:	e000      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002134:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10a      	bne.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800213c:	4b7b      	ldr	r3, [pc, #492]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800213e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002140:	f023 0107 	bic.w	r1, r3, #7
 8002144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214a:	4a78      	ldr	r2, [pc, #480]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800214c:	430b      	orrs	r3, r1
 800214e:	6513      	str	r3, [r2, #80]	; 0x50
 8002150:	e003      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002156:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800215a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002162:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002166:	f04f 0b00 	mov.w	fp, #0
 800216a:	ea5a 030b 	orrs.w	r3, sl, fp
 800216e:	d04c      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800217a:	d030      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800217c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002180:	d829      	bhi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002182:	2bc0      	cmp	r3, #192	; 0xc0
 8002184:	d02d      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002186:	2bc0      	cmp	r3, #192	; 0xc0
 8002188:	d825      	bhi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800218a:	2b80      	cmp	r3, #128	; 0x80
 800218c:	d018      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800218e:	2b80      	cmp	r3, #128	; 0x80
 8002190:	d821      	bhi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d007      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800219a:	e01c      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800219c:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	4a62      	ldr	r2, [pc, #392]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80021a8:	e01c      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80021aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021ae:	3308      	adds	r3, #8
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f001 f928 	bl	8003408 <RCCEx_PLL2_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80021be:	e011      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80021c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021c4:	3328      	adds	r3, #40	; 0x28
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f001 f9cf 	bl	800356c <RCCEx_PLL3_Config>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80021d4:	e006      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80021dc:	e002      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80021de:	bf00      	nop
 80021e0:	e000      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80021e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80021ec:	4b4f      	ldr	r3, [pc, #316]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80021f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	4a4c      	ldr	r2, [pc, #304]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021fc:	430b      	orrs	r3, r1
 80021fe:	6513      	str	r3, [r2, #80]	; 0x50
 8002200:	e003      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002206:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800220a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002212:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002216:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002220:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002224:	460b      	mov	r3, r1
 8002226:	4313      	orrs	r3, r2
 8002228:	d053      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800222a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800222e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002232:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002236:	d035      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002238:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800223c:	d82e      	bhi.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800223e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002242:	d031      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002244:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002248:	d828      	bhi.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800224a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800224e:	d01a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002250:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002254:	d822      	bhi.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800225a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800225e:	d007      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002260:	e01c      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002262:	4b32      	ldr	r3, [pc, #200]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	4a31      	ldr	r2, [pc, #196]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800226e:	e01c      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002274:	3308      	adds	r3, #8
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f001 f8c5 	bl	8003408 <RCCEx_PLL2_Config>
 800227e:	4603      	mov	r3, r0
 8002280:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002284:	e011      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800228a:	3328      	adds	r3, #40	; 0x28
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f001 f96c 	bl	800356c <RCCEx_PLL3_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800229a:	e006      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80022a2:	e002      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80022a4:	bf00      	nop
 80022a6:	e000      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80022a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10b      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80022b2:	4b1e      	ldr	r3, [pc, #120]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80022ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80022c2:	4a1a      	ldr	r2, [pc, #104]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022c4:	430b      	orrs	r3, r1
 80022c6:	6593      	str	r3, [r2, #88]	; 0x58
 80022c8:	e003      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80022ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80022d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022da:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80022de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80022e8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80022ec:	460b      	mov	r3, r1
 80022ee:	4313      	orrs	r3, r2
 80022f0:	d056      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80022f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80022fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022fe:	d038      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002300:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002304:	d831      	bhi.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002306:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800230a:	d034      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800230c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002310:	d82b      	bhi.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002312:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002316:	d01d      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002318:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800231c:	d825      	bhi.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800231e:	2b00      	cmp	r3, #0
 8002320:	d006      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002322:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002326:	d00a      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002328:	e01f      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800232a:	bf00      	nop
 800232c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002330:	4ba2      	ldr	r3, [pc, #648]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	4aa1      	ldr	r2, [pc, #644]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800233a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800233c:	e01c      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800233e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002342:	3308      	adds	r3, #8
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f001 f85e 	bl	8003408 <RCCEx_PLL2_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002352:	e011      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002358:	3328      	adds	r3, #40	; 0x28
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f001 f905 	bl	800356c <RCCEx_PLL3_Config>
 8002362:	4603      	mov	r3, r0
 8002364:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002368:	e006      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002370:	e002      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002372:	bf00      	nop
 8002374:	e000      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002380:	4b8e      	ldr	r3, [pc, #568]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800238c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002390:	4a8a      	ldr	r2, [pc, #552]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002392:	430b      	orrs	r3, r1
 8002394:	6593      	str	r3, [r2, #88]	; 0x58
 8002396:	e003      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002398:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800239c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80023a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80023ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80023b0:	2300      	movs	r3, #0
 80023b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80023b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80023ba:	460b      	mov	r3, r1
 80023bc:	4313      	orrs	r3, r2
 80023be:	d03a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80023c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	2b30      	cmp	r3, #48	; 0x30
 80023c8:	d01f      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80023ca:	2b30      	cmp	r3, #48	; 0x30
 80023cc:	d819      	bhi.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d00c      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d815      	bhi.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d019      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80023da:	2b10      	cmp	r3, #16
 80023dc:	d111      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023de:	4b77      	ldr	r3, [pc, #476]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	4a76      	ldr	r2, [pc, #472]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80023ea:	e011      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80023ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023f0:	3308      	adds	r3, #8
 80023f2:	2102      	movs	r1, #2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f001 f807 	bl	8003408 <RCCEx_PLL2_Config>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002400:	e006      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002408:	e002      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800240a:	bf00      	nop
 800240c:	e000      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800240e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002410:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002418:	4b68      	ldr	r3, [pc, #416]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800241a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002426:	4a65      	ldr	r2, [pc, #404]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002428:	430b      	orrs	r3, r1
 800242a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800242c:	e003      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800242e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002432:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002442:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002446:	2300      	movs	r3, #0
 8002448:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800244c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002450:	460b      	mov	r3, r1
 8002452:	4313      	orrs	r3, r2
 8002454:	d051      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800245a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002460:	d035      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002462:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002466:	d82e      	bhi.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002468:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800246c:	d031      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800246e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002472:	d828      	bhi.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002478:	d01a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800247a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800247e:	d822      	bhi.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002488:	d007      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800248a:	e01c      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800248c:	4b4b      	ldr	r3, [pc, #300]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	4a4a      	ldr	r2, [pc, #296]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002496:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002498:	e01c      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800249a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800249e:	3308      	adds	r3, #8
 80024a0:	2100      	movs	r1, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 ffb0 	bl	8003408 <RCCEx_PLL2_Config>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80024ae:	e011      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024b4:	3328      	adds	r3, #40	; 0x28
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f001 f857 	bl	800356c <RCCEx_PLL3_Config>
 80024be:	4603      	mov	r3, r0
 80024c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80024c4:	e006      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80024cc:	e002      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80024ce:	bf00      	nop
 80024d0:	e000      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80024d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10a      	bne.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80024dc:	4b37      	ldr	r3, [pc, #220]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80024e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ea:	4a34      	ldr	r2, [pc, #208]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024ec:	430b      	orrs	r3, r1
 80024ee:	6513      	str	r3, [r2, #80]	; 0x50
 80024f0:	e003      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80024f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80024fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002506:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002510:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002514:	460b      	mov	r3, r1
 8002516:	4313      	orrs	r3, r2
 8002518:	d056      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800251a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800251e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002524:	d033      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002526:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800252a:	d82c      	bhi.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800252c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002530:	d02f      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002532:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002536:	d826      	bhi.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002538:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800253c:	d02b      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800253e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002542:	d820      	bhi.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002548:	d012      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800254a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800254e:	d81a      	bhi.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002550:	2b00      	cmp	r3, #0
 8002552:	d022      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002558:	d115      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800255a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800255e:	3308      	adds	r3, #8
 8002560:	2101      	movs	r1, #1
 8002562:	4618      	mov	r0, r3
 8002564:	f000 ff50 	bl	8003408 <RCCEx_PLL2_Config>
 8002568:	4603      	mov	r3, r0
 800256a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800256e:	e015      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002574:	3328      	adds	r3, #40	; 0x28
 8002576:	2101      	movs	r1, #1
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fff7 	bl	800356c <RCCEx_PLL3_Config>
 800257e:	4603      	mov	r3, r0
 8002580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002584:	e00a      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800258c:	e006      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800258e:	bf00      	nop
 8002590:	e004      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002592:	bf00      	nop
 8002594:	e002      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002596:	bf00      	nop
 8002598:	e000      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800259a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800259c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10d      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80025ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025b2:	4a02      	ldr	r2, [pc, #8]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025b4:	430b      	orrs	r3, r1
 80025b6:	6513      	str	r3, [r2, #80]	; 0x50
 80025b8:	e006      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80025ba:	bf00      	nop
 80025bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80025c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80025c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80025d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80025d8:	2300      	movs	r3, #0
 80025da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025de:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4313      	orrs	r3, r2
 80025e6:	d055      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80025e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80025f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025f4:	d033      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80025f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025fa:	d82c      	bhi.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80025fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002600:	d02f      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002606:	d826      	bhi.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002608:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800260c:	d02b      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800260e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002612:	d820      	bhi.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002618:	d012      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800261a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800261e:	d81a      	bhi.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002620:	2b00      	cmp	r3, #0
 8002622:	d022      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002628:	d115      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800262a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800262e:	3308      	adds	r3, #8
 8002630:	2101      	movs	r1, #1
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fee8 	bl	8003408 <RCCEx_PLL2_Config>
 8002638:	4603      	mov	r3, r0
 800263a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800263e:	e015      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002644:	3328      	adds	r3, #40	; 0x28
 8002646:	2101      	movs	r1, #1
 8002648:	4618      	mov	r0, r3
 800264a:	f000 ff8f 	bl	800356c <RCCEx_PLL3_Config>
 800264e:	4603      	mov	r3, r0
 8002650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002654:	e00a      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800265c:	e006      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800265e:	bf00      	nop
 8002660:	e004      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002662:	bf00      	nop
 8002664:	e002      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002666:	bf00      	nop
 8002668:	e000      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800266a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800266c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10b      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002674:	4ba3      	ldr	r3, [pc, #652]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800267c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002680:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002684:	4a9f      	ldr	r2, [pc, #636]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002686:	430b      	orrs	r3, r1
 8002688:	6593      	str	r3, [r2, #88]	; 0x58
 800268a:	e003      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800268c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002690:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80026a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026a4:	2300      	movs	r3, #0
 80026a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80026aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80026ae:	460b      	mov	r3, r1
 80026b0:	4313      	orrs	r3, r2
 80026b2:	d037      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80026b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026be:	d00e      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80026c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c4:	d816      	bhi.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d018      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80026ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ce:	d111      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026d0:	4b8c      	ldr	r3, [pc, #560]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	4a8b      	ldr	r2, [pc, #556]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80026dc:	e00f      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80026de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026e2:	3308      	adds	r3, #8
 80026e4:	2101      	movs	r1, #1
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fe8e 	bl	8003408 <RCCEx_PLL2_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80026f2:	e004      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80026fa:	e000      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80026fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10a      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002706:	4b7f      	ldr	r3, [pc, #508]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800270e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	4a7b      	ldr	r2, [pc, #492]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002716:	430b      	orrs	r3, r1
 8002718:	6513      	str	r3, [r2, #80]	; 0x50
 800271a:	e003      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002720:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800273a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800273e:	460b      	mov	r3, r1
 8002740:	4313      	orrs	r3, r2
 8002742:	d039      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274a:	2b03      	cmp	r3, #3
 800274c:	d81c      	bhi.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800274e:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002754:	08002791 	.word	0x08002791
 8002758:	08002765 	.word	0x08002765
 800275c:	08002773 	.word	0x08002773
 8002760:	08002791 	.word	0x08002791
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002764:	4b67      	ldr	r3, [pc, #412]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	4a66      	ldr	r2, [pc, #408]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800276a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800276e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002770:	e00f      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002776:	3308      	adds	r3, #8
 8002778:	2102      	movs	r1, #2
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fe44 	bl	8003408 <RCCEx_PLL2_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002786:	e004      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800278e:	e000      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10a      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800279a:	4b5a      	ldr	r3, [pc, #360]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	f023 0103 	bic.w	r1, r3, #3
 80027a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a8:	4a56      	ldr	r2, [pc, #344]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027aa:	430b      	orrs	r3, r1
 80027ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ae:	e003      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80027c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80027d2:	460b      	mov	r3, r1
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f000 809f 	beq.w	8002918 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027da:	4b4b      	ldr	r3, [pc, #300]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a4a      	ldr	r2, [pc, #296]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80027e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027e6:	f7fe f8ef 	bl	80009c8 <HAL_GetTick>
 80027ea:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ee:	e00b      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f0:	f7fe f8ea 	bl	80009c8 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b64      	cmp	r3, #100	; 0x64
 80027fe:	d903      	bls.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002806:	e005      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002808:	4b3f      	ldr	r3, [pc, #252]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ed      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002814:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002818:	2b00      	cmp	r3, #0
 800281a:	d179      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800281c:	4b39      	ldr	r3, [pc, #228]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800281e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002824:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002828:	4053      	eors	r3, r2
 800282a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282e:	2b00      	cmp	r3, #0
 8002830:	d015      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002832:	4b34      	ldr	r3, [pc, #208]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800283a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800283e:	4b31      	ldr	r3, [pc, #196]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	4a30      	ldr	r2, [pc, #192]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800284a:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	4a2d      	ldr	r2, [pc, #180]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002854:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002856:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002858:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800285c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800285e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002862:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800286a:	d118      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe f8ac 	bl	80009c8 <HAL_GetTick>
 8002870:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002874:	e00d      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002876:	f7fe f8a7 	bl	80009c8 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002880:	1ad2      	subs	r2, r2, r3
 8002882:	f241 3388 	movw	r3, #5000	; 0x1388
 8002886:	429a      	cmp	r2, r3
 8002888:	d903      	bls.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002890:	e005      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002892:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0eb      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800289e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d129      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80028ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028b6:	d10e      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80028c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80028c8:	091a      	lsrs	r2, r3, #4
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028d0:	430b      	orrs	r3, r1
 80028d2:	6113      	str	r3, [r2, #16]
 80028d4:	e005      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80028d6:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80028e0:	6113      	str	r3, [r2, #16]
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028e4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80028e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80028ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f2:	4a04      	ldr	r2, [pc, #16]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028f4:	430b      	orrs	r3, r1
 80028f6:	6713      	str	r3, [r2, #112]	; 0x70
 80028f8:	e00e      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8002902:	e009      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002904:	58024400 	.word	0x58024400
 8002908:	58024800 	.word	0x58024800
 800290c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002910:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002914:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	f002 0301 	and.w	r3, r2, #1
 8002924:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002928:	2300      	movs	r3, #0
 800292a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800292e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002932:	460b      	mov	r3, r1
 8002934:	4313      	orrs	r3, r2
 8002936:	f000 8089 	beq.w	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800293a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800293e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002940:	2b28      	cmp	r3, #40	; 0x28
 8002942:	d86b      	bhi.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002944:	a201      	add	r2, pc, #4	; (adr r2, 800294c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294a:	bf00      	nop
 800294c:	08002a25 	.word	0x08002a25
 8002950:	08002a1d 	.word	0x08002a1d
 8002954:	08002a1d 	.word	0x08002a1d
 8002958:	08002a1d 	.word	0x08002a1d
 800295c:	08002a1d 	.word	0x08002a1d
 8002960:	08002a1d 	.word	0x08002a1d
 8002964:	08002a1d 	.word	0x08002a1d
 8002968:	08002a1d 	.word	0x08002a1d
 800296c:	080029f1 	.word	0x080029f1
 8002970:	08002a1d 	.word	0x08002a1d
 8002974:	08002a1d 	.word	0x08002a1d
 8002978:	08002a1d 	.word	0x08002a1d
 800297c:	08002a1d 	.word	0x08002a1d
 8002980:	08002a1d 	.word	0x08002a1d
 8002984:	08002a1d 	.word	0x08002a1d
 8002988:	08002a1d 	.word	0x08002a1d
 800298c:	08002a07 	.word	0x08002a07
 8002990:	08002a1d 	.word	0x08002a1d
 8002994:	08002a1d 	.word	0x08002a1d
 8002998:	08002a1d 	.word	0x08002a1d
 800299c:	08002a1d 	.word	0x08002a1d
 80029a0:	08002a1d 	.word	0x08002a1d
 80029a4:	08002a1d 	.word	0x08002a1d
 80029a8:	08002a1d 	.word	0x08002a1d
 80029ac:	08002a25 	.word	0x08002a25
 80029b0:	08002a1d 	.word	0x08002a1d
 80029b4:	08002a1d 	.word	0x08002a1d
 80029b8:	08002a1d 	.word	0x08002a1d
 80029bc:	08002a1d 	.word	0x08002a1d
 80029c0:	08002a1d 	.word	0x08002a1d
 80029c4:	08002a1d 	.word	0x08002a1d
 80029c8:	08002a1d 	.word	0x08002a1d
 80029cc:	08002a25 	.word	0x08002a25
 80029d0:	08002a1d 	.word	0x08002a1d
 80029d4:	08002a1d 	.word	0x08002a1d
 80029d8:	08002a1d 	.word	0x08002a1d
 80029dc:	08002a1d 	.word	0x08002a1d
 80029e0:	08002a1d 	.word	0x08002a1d
 80029e4:	08002a1d 	.word	0x08002a1d
 80029e8:	08002a1d 	.word	0x08002a1d
 80029ec:	08002a25 	.word	0x08002a25
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029f4:	3308      	adds	r3, #8
 80029f6:	2101      	movs	r1, #1
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fd05 	bl	8003408 <RCCEx_PLL2_Config>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002a04:	e00f      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a0a:	3328      	adds	r3, #40	; 0x28
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fdac 	bl	800356c <RCCEx_PLL3_Config>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002a1a:	e004      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a22:	e000      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002a2e:	4bbf      	ldr	r3, [pc, #764]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a3c:	4abb      	ldr	r2, [pc, #748]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002a3e:	430b      	orrs	r3, r1
 8002a40:	6553      	str	r3, [r2, #84]	; 0x54
 8002a42:	e003      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f002 0302 	and.w	r3, r2, #2
 8002a58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002a62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002a66:	460b      	mov	r3, r1
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	d041      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d824      	bhi.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002a76:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7c:	08002ac9 	.word	0x08002ac9
 8002a80:	08002a95 	.word	0x08002a95
 8002a84:	08002aab 	.word	0x08002aab
 8002a88:	08002ac9 	.word	0x08002ac9
 8002a8c:	08002ac9 	.word	0x08002ac9
 8002a90:	08002ac9 	.word	0x08002ac9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a98:	3308      	adds	r3, #8
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fcb3 	bl	8003408 <RCCEx_PLL2_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002aa8:	e00f      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aae:	3328      	adds	r3, #40	; 0x28
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fd5a 	bl	800356c <RCCEx_PLL3_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002abe:	e004      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ac6:	e000      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10a      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002ad2:	4b96      	ldr	r3, [pc, #600]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad6:	f023 0107 	bic.w	r1, r3, #7
 8002ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ade:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae0:	4a92      	ldr	r2, [pc, #584]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	6553      	str	r3, [r2, #84]	; 0x54
 8002ae6:	e003      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002aec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af8:	f002 0304 	and.w	r3, r2, #4
 8002afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b06:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	d044      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d825      	bhi.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002b1c:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b22:	bf00      	nop
 8002b24:	08002b71 	.word	0x08002b71
 8002b28:	08002b3d 	.word	0x08002b3d
 8002b2c:	08002b53 	.word	0x08002b53
 8002b30:	08002b71 	.word	0x08002b71
 8002b34:	08002b71 	.word	0x08002b71
 8002b38:	08002b71 	.word	0x08002b71
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b40:	3308      	adds	r3, #8
 8002b42:	2101      	movs	r1, #1
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fc5f 	bl	8003408 <RCCEx_PLL2_Config>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002b50:	e00f      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b56:	3328      	adds	r3, #40	; 0x28
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fd06 	bl	800356c <RCCEx_PLL3_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002b66:	e004      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b6e:	e000      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b7a:	4b6c      	ldr	r3, [pc, #432]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7e:	f023 0107 	bic.w	r1, r3, #7
 8002b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8a:	4a68      	ldr	r2, [pc, #416]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b90:	e003      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f002 0320 	and.w	r3, r2, #32
 8002ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002baa:	2300      	movs	r3, #0
 8002bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	d055      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc6:	d033      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bcc:	d82c      	bhi.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd2:	d02f      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd8:	d826      	bhi.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002bda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bde:	d02b      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002be0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002be4:	d820      	bhi.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bea:	d012      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bf0:	d81a      	bhi.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d022      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002bf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bfa:	d115      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c00:	3308      	adds	r3, #8
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fbff 	bl	8003408 <RCCEx_PLL2_Config>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002c10:	e015      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c16:	3328      	adds	r3, #40	; 0x28
 8002c18:	2102      	movs	r1, #2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fca6 	bl	800356c <RCCEx_PLL3_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002c26:	e00a      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c2e:	e006      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002c30:	bf00      	nop
 8002c32:	e004      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002c34:	bf00      	nop
 8002c36:	e002      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002c38:	bf00      	nop
 8002c3a:	e000      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10b      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c46:	4b39      	ldr	r3, [pc, #228]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c56:	4a35      	ldr	r2, [pc, #212]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6553      	str	r3, [r2, #84]	; 0x54
 8002c5c:	e003      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002c7c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4313      	orrs	r3, r2
 8002c84:	d058      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c8e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c92:	d033      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002c94:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c98:	d82c      	bhi.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9e:	d02f      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca4:	d826      	bhi.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002ca6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002caa:	d02b      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002cac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cb0:	d820      	bhi.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cb6:	d012      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cbc:	d81a      	bhi.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d022      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc6:	d115      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ccc:	3308      	adds	r3, #8
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 fb99 	bl	8003408 <RCCEx_PLL2_Config>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002cdc:	e015      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ce2:	3328      	adds	r3, #40	; 0x28
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fc40 	bl	800356c <RCCEx_PLL3_Config>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002cf2:	e00a      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002cfa:	e006      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002cfc:	bf00      	nop
 8002cfe:	e004      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002d00:	bf00      	nop
 8002d02:	e002      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002d04:	bf00      	nop
 8002d06:	e000      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10e      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d16:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8002d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d22:	4a02      	ldr	r2, [pc, #8]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6593      	str	r3, [r2, #88]	; 0x58
 8002d28:	e006      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8002d2a:	bf00      	nop
 8002d2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d4e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002d52:	460b      	mov	r3, r1
 8002d54:	4313      	orrs	r3, r2
 8002d56:	d055      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d60:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d64:	d033      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8002d66:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d6a:	d82c      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d70:	d02f      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d76:	d826      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002d78:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d7c:	d02b      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8002d7e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d82:	d820      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d88:	d012      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8002d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d8e:	d81a      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d022      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8002d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d98:	d115      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d9e:	3308      	adds	r3, #8
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fb30 	bl	8003408 <RCCEx_PLL2_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002dae:	e015      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db4:	3328      	adds	r3, #40	; 0x28
 8002db6:	2102      	movs	r1, #2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 fbd7 	bl	800356c <RCCEx_PLL3_Config>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002dcc:	e006      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002dce:	bf00      	nop
 8002dd0:	e004      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002dd2:	bf00      	nop
 8002dd4:	e002      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002de4:	4ba1      	ldr	r3, [pc, #644]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8002dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002df0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002df4:	4a9d      	ldr	r2, [pc, #628]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002df6:	430b      	orrs	r3, r1
 8002df8:	6593      	str	r3, [r2, #88]	; 0x58
 8002dfa:	e003      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	f002 0308 	and.w	r3, r2, #8
 8002e10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e14:	2300      	movs	r3, #0
 8002e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e1a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4313      	orrs	r3, r2
 8002e22:	d01e      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e36:	3328      	adds	r3, #40	; 0x28
 8002e38:	2102      	movs	r1, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fb96 	bl	800356c <RCCEx_PLL3_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002e4c:	4b87      	ldr	r3, [pc, #540]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e50:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5c:	4a83      	ldr	r2, [pc, #524]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6a:	f002 0310 	and.w	r3, r2, #16
 8002e6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e72:	2300      	movs	r3, #0
 8002e74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002e78:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	d01e      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e8e:	d10c      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e94:	3328      	adds	r3, #40	; 0x28
 8002e96:	2102      	movs	r1, #2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fb67 	bl	800356c <RCCEx_PLL3_Config>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002eaa:	4b70      	ldr	r3, [pc, #448]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eba:	4a6c      	ldr	r2, [pc, #432]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8002ecc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ed6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002eda:	460b      	mov	r3, r1
 8002edc:	4313      	orrs	r3, r2
 8002ede:	d03e      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ee4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eec:	d022      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8002eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ef2:	d81b      	bhi.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8002ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efc:	d00b      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8002efe:	e015      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f04:	3308      	adds	r3, #8
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fa7d 	bl	8003408 <RCCEx_PLL2_Config>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002f14:	e00f      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f1a:	3328      	adds	r3, #40	; 0x28
 8002f1c:	2102      	movs	r1, #2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fb24 	bl	800356c <RCCEx_PLL3_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002f2a:	e004      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f32:	e000      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8002f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10b      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f3e:	4b4b      	ldr	r3, [pc, #300]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f42:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f4e:	4a47      	ldr	r2, [pc, #284]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f50:	430b      	orrs	r3, r1
 8002f52:	6593      	str	r3, [r2, #88]	; 0x58
 8002f54:	e003      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002f6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f70:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002f74:	460b      	mov	r3, r1
 8002f76:	4313      	orrs	r3, r2
 8002f78:	d03b      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8002f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f86:	d01f      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8002f88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f8c:	d818      	bhi.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8002f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f92:	d003      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8002f94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f98:	d007      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8002f9a:	e011      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f9c:	4b33      	ldr	r3, [pc, #204]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	4a32      	ldr	r2, [pc, #200]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8002fa8:	e00f      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fae:	3328      	adds	r3, #40	; 0x28
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fada 	bl	800356c <RCCEx_PLL3_Config>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8002fbe:	e004      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002fc6:	e000      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8002fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10b      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fd2:	4b26      	ldr	r3, [pc, #152]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	4a22      	ldr	r2, [pc, #136]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6553      	str	r3, [r2, #84]	; 0x54
 8002fe8:	e003      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002ffe:	673b      	str	r3, [r7, #112]	; 0x70
 8003000:	2300      	movs	r3, #0
 8003002:	677b      	str	r3, [r7, #116]	; 0x74
 8003004:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003008:	460b      	mov	r3, r1
 800300a:	4313      	orrs	r3, r2
 800300c:	d034      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800300e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301c:	d007      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800301e:	e011      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003020:	4b12      	ldr	r3, [pc, #72]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	4a11      	ldr	r2, [pc, #68]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800302c:	e00e      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800302e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003032:	3308      	adds	r3, #8
 8003034:	2102      	movs	r1, #2
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f9e6 	bl	8003408 <RCCEx_PLL2_Config>
 800303c:	4603      	mov	r3, r0
 800303e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003042:	e003      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800304a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800304c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10d      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003058:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800305c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003062:	4a02      	ldr	r2, [pc, #8]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003064:	430b      	orrs	r3, r1
 8003066:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003068:	e006      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800306a:	bf00      	nop
 800306c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003070:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003074:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800307c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003080:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003084:	66bb      	str	r3, [r7, #104]	; 0x68
 8003086:	2300      	movs	r3, #0
 8003088:	66fb      	str	r3, [r7, #108]	; 0x6c
 800308a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800308e:	460b      	mov	r3, r1
 8003090:	4313      	orrs	r3, r2
 8003092:	d00c      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003098:	3328      	adds	r3, #40	; 0x28
 800309a:	2102      	movs	r1, #2
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fa65 	bl	800356c <RCCEx_PLL3_Config>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80030ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80030ba:	663b      	str	r3, [r7, #96]	; 0x60
 80030bc:	2300      	movs	r3, #0
 80030be:	667b      	str	r3, [r7, #100]	; 0x64
 80030c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80030c4:	460b      	mov	r3, r1
 80030c6:	4313      	orrs	r3, r2
 80030c8:	d038      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80030ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030d6:	d018      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80030d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030dc:	d811      	bhi.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80030de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e2:	d014      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80030e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e8:	d80b      	bhi.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d011      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80030ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f2:	d106      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030f4:	4bc3      	ldr	r3, [pc, #780]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	4ac2      	ldr	r2, [pc, #776]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003100:	e008      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003108:	e004      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800310a:	bf00      	nop
 800310c:	e002      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800310e:	bf00      	nop
 8003110:	e000      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003114:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10b      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800311c:	4bb9      	ldr	r3, [pc, #740]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800311e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003120:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800312c:	4ab5      	ldr	r2, [pc, #724]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800312e:	430b      	orrs	r3, r1
 8003130:	6553      	str	r3, [r2, #84]	; 0x54
 8003132:	e003      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003134:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003138:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800313c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003148:	65bb      	str	r3, [r7, #88]	; 0x58
 800314a:	2300      	movs	r3, #0
 800314c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800314e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003152:	460b      	mov	r3, r1
 8003154:	4313      	orrs	r3, r2
 8003156:	d009      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003158:	4baa      	ldr	r3, [pc, #680]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800315a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800315c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003166:	4aa7      	ldr	r2, [pc, #668]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003168:	430b      	orrs	r3, r1
 800316a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800316c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003178:	653b      	str	r3, [r7, #80]	; 0x50
 800317a:	2300      	movs	r3, #0
 800317c:	657b      	str	r3, [r7, #84]	; 0x54
 800317e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003182:	460b      	mov	r3, r1
 8003184:	4313      	orrs	r3, r2
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003188:	4b9e      	ldr	r3, [pc, #632]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003194:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003198:	4a9a      	ldr	r2, [pc, #616]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800319a:	430b      	orrs	r3, r1
 800319c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800319e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80031aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80031ac:	2300      	movs	r3, #0
 80031ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031b0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80031b4:	460b      	mov	r3, r1
 80031b6:	4313      	orrs	r3, r2
 80031b8:	d009      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031ba:	4b92      	ldr	r3, [pc, #584]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031be:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80031c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031c8:	4a8e      	ldr	r2, [pc, #568]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031ca:	430b      	orrs	r3, r1
 80031cc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80031ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80031da:	643b      	str	r3, [r7, #64]	; 0x40
 80031dc:	2300      	movs	r3, #0
 80031de:	647b      	str	r3, [r7, #68]	; 0x44
 80031e0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80031e4:	460b      	mov	r3, r1
 80031e6:	4313      	orrs	r3, r2
 80031e8:	d00e      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031ea:	4b86      	ldr	r3, [pc, #536]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	4a85      	ldr	r2, [pc, #532]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80031f4:	6113      	str	r3, [r2, #16]
 80031f6:	4b83      	ldr	r3, [pc, #524]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031f8:	6919      	ldr	r1, [r3, #16]
 80031fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003202:	4a80      	ldr	r2, [pc, #512]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003204:	430b      	orrs	r3, r1
 8003206:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003214:	63bb      	str	r3, [r7, #56]	; 0x38
 8003216:	2300      	movs	r3, #0
 8003218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800321a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800321e:	460b      	mov	r3, r1
 8003220:	4313      	orrs	r3, r2
 8003222:	d009      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003224:	4b77      	ldr	r3, [pc, #476]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003228:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800322c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	4a74      	ldr	r2, [pc, #464]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003234:	430b      	orrs	r3, r1
 8003236:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003240:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003244:	633b      	str	r3, [r7, #48]	; 0x30
 8003246:	2300      	movs	r3, #0
 8003248:	637b      	str	r3, [r7, #52]	; 0x34
 800324a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800324e:	460b      	mov	r3, r1
 8003250:	4313      	orrs	r3, r2
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003254:	4b6b      	ldr	r3, [pc, #428]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800325c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003264:	4a67      	ldr	r2, [pc, #412]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003266:	430b      	orrs	r3, r1
 8003268:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800326a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003272:	2100      	movs	r1, #0
 8003274:	62b9      	str	r1, [r7, #40]	; 0x28
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800327c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003280:	460b      	mov	r3, r1
 8003282:	4313      	orrs	r3, r2
 8003284:	d011      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800328a:	3308      	adds	r3, #8
 800328c:	2100      	movs	r1, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f8ba 	bl	8003408 <RCCEx_PLL2_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800329a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80032aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b2:	2100      	movs	r1, #0
 80032b4:	6239      	str	r1, [r7, #32]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
 80032bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80032c0:	460b      	mov	r3, r1
 80032c2:	4313      	orrs	r3, r2
 80032c4:	d011      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ca:	3308      	adds	r3, #8
 80032cc:	2101      	movs	r1, #1
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f89a 	bl	8003408 <RCCEx_PLL2_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80032da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80032ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f2:	2100      	movs	r1, #0
 80032f4:	61b9      	str	r1, [r7, #24]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003300:	460b      	mov	r3, r1
 8003302:	4313      	orrs	r3, r2
 8003304:	d011      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800330a:	3308      	adds	r3, #8
 800330c:	2102      	movs	r1, #2
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f87a 	bl	8003408 <RCCEx_PLL2_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800331a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003322:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003326:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800332a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	2100      	movs	r1, #0
 8003334:	6139      	str	r1, [r7, #16]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003340:	460b      	mov	r3, r1
 8003342:	4313      	orrs	r3, r2
 8003344:	d011      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800334a:	3328      	adds	r3, #40	; 0x28
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f90c 	bl	800356c <RCCEx_PLL3_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800335a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003366:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800336a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003372:	2100      	movs	r1, #0
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003380:	460b      	mov	r3, r1
 8003382:	4313      	orrs	r3, r2
 8003384:	d011      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800338a:	3328      	adds	r3, #40	; 0x28
 800338c:	2101      	movs	r1, #1
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f8ec 	bl	800356c <RCCEx_PLL3_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800339a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80033aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	2100      	movs	r1, #0
 80033b4:	6039      	str	r1, [r7, #0]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80033c0:	460b      	mov	r3, r1
 80033c2:	4313      	orrs	r3, r2
 80033c4:	d011      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ca:	3328      	adds	r3, #40	; 0x28
 80033cc:	2102      	movs	r1, #2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f8cc 	bl	800356c <RCCEx_PLL3_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80033da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80033ea:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e000      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80033fe:	46bd      	mov	sp, r7
 8003400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003404:	58024400 	.word	0x58024400

08003408 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003416:	4b53      	ldr	r3, [pc, #332]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	2b03      	cmp	r3, #3
 8003420:	d101      	bne.n	8003426 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e099      	b.n	800355a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003426:	4b4f      	ldr	r3, [pc, #316]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a4e      	ldr	r2, [pc, #312]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 800342c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003432:	f7fd fac9 	bl	80009c8 <HAL_GetTick>
 8003436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003438:	e008      	b.n	800344c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800343a:	f7fd fac5 	bl	80009c8 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e086      	b.n	800355a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800344c:	4b45      	ldr	r3, [pc, #276]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f0      	bne.n	800343a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003458:	4b42      	ldr	r3, [pc, #264]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	031b      	lsls	r3, r3, #12
 8003466:	493f      	ldr	r1, [pc, #252]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 8003468:	4313      	orrs	r3, r2
 800346a:	628b      	str	r3, [r1, #40]	; 0x28
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	3b01      	subs	r3, #1
 8003472:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	3b01      	subs	r3, #1
 800347c:	025b      	lsls	r3, r3, #9
 800347e:	b29b      	uxth	r3, r3
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	3b01      	subs	r3, #1
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	3b01      	subs	r3, #1
 8003496:	061b      	lsls	r3, r3, #24
 8003498:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800349c:	4931      	ldr	r1, [pc, #196]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80034a2:	4b30      	ldr	r3, [pc, #192]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	492d      	ldr	r1, [pc, #180]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80034b4:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	f023 0220 	bic.w	r2, r3, #32
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	4928      	ldr	r1, [pc, #160]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80034c6:	4b27      	ldr	r3, [pc, #156]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	4a26      	ldr	r2, [pc, #152]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 80034cc:	f023 0310 	bic.w	r3, r3, #16
 80034d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80034d2:	4b24      	ldr	r3, [pc, #144]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 80034d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <RCCEx_PLL2_Config+0x160>)
 80034d8:	4013      	ands	r3, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	69d2      	ldr	r2, [r2, #28]
 80034de:	00d2      	lsls	r2, r2, #3
 80034e0:	4920      	ldr	r1, [pc, #128]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80034e6:	4b1f      	ldr	r3, [pc, #124]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	4a1e      	ldr	r2, [pc, #120]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 80034ec:	f043 0310 	orr.w	r3, r3, #16
 80034f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d106      	bne.n	8003506 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80034f8:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	4a19      	ldr	r2, [pc, #100]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 80034fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003502:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003504:	e00f      	b.n	8003526 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d106      	bne.n	800351a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800350c:	4b15      	ldr	r3, [pc, #84]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	4a14      	ldr	r2, [pc, #80]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 8003512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003516:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003518:	e005      	b.n	8003526 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	4a11      	ldr	r2, [pc, #68]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 8003520:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003524:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003526:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a0e      	ldr	r2, [pc, #56]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 800352c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003532:	f7fd fa49 	bl	80009c8 <HAL_GetTick>
 8003536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003538:	e008      	b.n	800354c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800353a:	f7fd fa45 	bl	80009c8 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e006      	b.n	800355a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <RCCEx_PLL2_Config+0x15c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003558:	7bfb      	ldrb	r3, [r7, #15]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	58024400 	.word	0x58024400
 8003568:	ffff0007 	.word	0xffff0007

0800356c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800357a:	4b53      	ldr	r3, [pc, #332]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b03      	cmp	r3, #3
 8003584:	d101      	bne.n	800358a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e099      	b.n	80036be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800358a:	4b4f      	ldr	r3, [pc, #316]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a4e      	ldr	r2, [pc, #312]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 8003590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003596:	f7fd fa17 	bl	80009c8 <HAL_GetTick>
 800359a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800359c:	e008      	b.n	80035b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800359e:	f7fd fa13 	bl	80009c8 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e086      	b.n	80036be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80035b0:	4b45      	ldr	r3, [pc, #276]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f0      	bne.n	800359e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80035bc:	4b42      	ldr	r3, [pc, #264]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	051b      	lsls	r3, r3, #20
 80035ca:	493f      	ldr	r1, [pc, #252]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	628b      	str	r3, [r1, #40]	; 0x28
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	3b01      	subs	r3, #1
 80035e0:	025b      	lsls	r3, r3, #9
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	041b      	lsls	r3, r3, #16
 80035ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	061b      	lsls	r3, r3, #24
 80035fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003600:	4931      	ldr	r1, [pc, #196]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 8003602:	4313      	orrs	r3, r2
 8003604:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003606:	4b30      	ldr	r3, [pc, #192]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	492d      	ldr	r1, [pc, #180]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 8003614:	4313      	orrs	r3, r2
 8003616:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003618:	4b2b      	ldr	r3, [pc, #172]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	4928      	ldr	r1, [pc, #160]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 8003626:	4313      	orrs	r3, r2
 8003628:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800362a:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	4a26      	ldr	r2, [pc, #152]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 8003630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003634:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003636:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 8003638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800363a:	4b24      	ldr	r3, [pc, #144]	; (80036cc <RCCEx_PLL3_Config+0x160>)
 800363c:	4013      	ands	r3, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	69d2      	ldr	r2, [r2, #28]
 8003642:	00d2      	lsls	r2, r2, #3
 8003644:	4920      	ldr	r1, [pc, #128]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 8003646:	4313      	orrs	r3, r2
 8003648:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800364a:	4b1f      	ldr	r3, [pc, #124]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 8003650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003654:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d106      	bne.n	800366a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	4a19      	ldr	r2, [pc, #100]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 8003662:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003666:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003668:	e00f      	b.n	800368a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d106      	bne.n	800367e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003670:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	4a14      	ldr	r2, [pc, #80]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 8003676:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800367a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800367c:	e005      	b.n	800368a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800367e:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	4a11      	ldr	r2, [pc, #68]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 8003684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003688:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800368a:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a0e      	ldr	r2, [pc, #56]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 8003690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003696:	f7fd f997 	bl	80009c8 <HAL_GetTick>
 800369a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800369c:	e008      	b.n	80036b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800369e:	f7fd f993 	bl	80009c8 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e006      	b.n	80036be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <RCCEx_PLL3_Config+0x15c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	58024400 	.word	0x58024400
 80036cc:	ffff0007 	.word	0xffff0007

080036d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e10f      	b.n	8003902 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a87      	ldr	r2, [pc, #540]	; (800390c <HAL_SPI_Init+0x23c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00f      	beq.n	8003712 <HAL_SPI_Init+0x42>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a86      	ldr	r2, [pc, #536]	; (8003910 <HAL_SPI_Init+0x240>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00a      	beq.n	8003712 <HAL_SPI_Init+0x42>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a84      	ldr	r2, [pc, #528]	; (8003914 <HAL_SPI_Init+0x244>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d005      	beq.n	8003712 <HAL_SPI_Init+0x42>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b0f      	cmp	r3, #15
 800370c:	d901      	bls.n	8003712 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e0f7      	b.n	8003902 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fbca 	bl	8003eac <SPI_GetPacketSize>
 8003718:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a7b      	ldr	r2, [pc, #492]	; (800390c <HAL_SPI_Init+0x23c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00c      	beq.n	800373e <HAL_SPI_Init+0x6e>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a79      	ldr	r2, [pc, #484]	; (8003910 <HAL_SPI_Init+0x240>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <HAL_SPI_Init+0x6e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a78      	ldr	r2, [pc, #480]	; (8003914 <HAL_SPI_Init+0x244>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d002      	beq.n	800373e <HAL_SPI_Init+0x6e>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b08      	cmp	r3, #8
 800373c:	d811      	bhi.n	8003762 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003742:	4a72      	ldr	r2, [pc, #456]	; (800390c <HAL_SPI_Init+0x23c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d009      	beq.n	800375c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a70      	ldr	r2, [pc, #448]	; (8003910 <HAL_SPI_Init+0x240>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_SPI_Init+0x8c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a6f      	ldr	r2, [pc, #444]	; (8003914 <HAL_SPI_Init+0x244>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d104      	bne.n	8003766 <HAL_SPI_Init+0x96>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b10      	cmp	r3, #16
 8003760:	d901      	bls.n	8003766 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e0cd      	b.n	8003902 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fc ffce 	bl	800071c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0201 	bic.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80037a2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037ac:	d119      	bne.n	80037e2 <HAL_SPI_Init+0x112>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b6:	d103      	bne.n	80037c0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10c      	bne.n	80037e2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80037cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037d0:	d107      	bne.n	80037e2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00f      	beq.n	800380e <HAL_SPI_Init+0x13e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d90b      	bls.n	800380e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e007      	b.n	800381e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800381c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	431a      	orrs	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	ea42 0103 	orr.w	r1, r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387e:	ea42 0103 	orr.w	r1, r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d113      	bne.n	80038be <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038bc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40013000 	.word	0x40013000
 8003910:	40003800 	.word	0x40003800
 8003914:	40003c00 	.word	0x40003c00

08003918 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	; 0x28
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3320      	adds	r3, #32
 800392e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_SPI_Transmit+0x2a>
 800393e:	2302      	movs	r3, #2
 8003940:	e1e1      	b.n	8003d06 <HAL_SPI_Transmit+0x3ee>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800394a:	f7fd f83d 	bl	80009c8 <HAL_GetTick>
 800394e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	d007      	beq.n	800396c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800395c:	2302      	movs	r3, #2
 800395e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003968:	7efb      	ldrb	r3, [r7, #27]
 800396a:	e1cc      	b.n	8003d06 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_SPI_Transmit+0x60>
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d107      	bne.n	8003988 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003984:	7efb      	ldrb	r3, [r7, #27]
 8003986:	e1be      	b.n	8003d06 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2203      	movs	r2, #3
 800398c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	88fa      	ldrh	r2, [r7, #6]
 80039a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	88fa      	ldrh	r2, [r7, #6]
 80039aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80039d8:	d108      	bne.n	80039ec <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	e009      	b.n	8003a00 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80039fe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	4b96      	ldr	r3, [pc, #600]	; (8003c60 <HAL_SPI_Transmit+0x348>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	88f9      	ldrh	r1, [r7, #6]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	430b      	orrs	r3, r1
 8003a12:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a2c:	d107      	bne.n	8003a3e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b0f      	cmp	r3, #15
 8003a44:	d947      	bls.n	8003ad6 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8003a46:	e03f      	b.n	8003ac8 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d114      	bne.n	8003a80 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a66:	1d1a      	adds	r2, r3, #4
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003a7e:	e023      	b.n	8003ac8 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a80:	f7fc ffa2 	bl	80009c8 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d803      	bhi.n	8003a98 <HAL_SPI_Transmit+0x180>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a96:	d102      	bne.n	8003a9e <HAL_SPI_Transmit+0x186>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d114      	bne.n	8003ac8 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f936 	bl	8003d10 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e11e      	b.n	8003d06 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1b9      	bne.n	8003a48 <HAL_SPI_Transmit+0x130>
 8003ad4:	e0f1      	b.n	8003cba <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b07      	cmp	r3, #7
 8003adc:	f240 80e6 	bls.w	8003cac <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8003ae0:	e05d      	b.n	8003b9e <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d132      	bne.n	8003b56 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d918      	bls.n	8003b2e <HAL_SPI_Transmit+0x216>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d014      	beq.n	8003b2e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b14:	1d1a      	adds	r2, r3, #4
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b02      	subs	r3, #2
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003b2c:	e037      	b.n	8003b9e <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b32:	881a      	ldrh	r2, [r3, #0]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003b54:	e023      	b.n	8003b9e <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b56:	f7fc ff37 	bl	80009c8 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d803      	bhi.n	8003b6e <HAL_SPI_Transmit+0x256>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d102      	bne.n	8003b74 <HAL_SPI_Transmit+0x25c>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d114      	bne.n	8003b9e <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f8cb 	bl	8003d10 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e0b3      	b.n	8003d06 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d19b      	bne.n	8003ae2 <HAL_SPI_Transmit+0x1ca>
 8003baa:	e086      	b.n	8003cba <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d154      	bne.n	8003c64 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d918      	bls.n	8003bf8 <HAL_SPI_Transmit+0x2e0>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	2b40      	cmp	r3, #64	; 0x40
 8003bcc:	d914      	bls.n	8003bf8 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	1d1a      	adds	r2, r3, #4
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b04      	subs	r3, #4
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003bf6:	e059      	b.n	8003cac <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d917      	bls.n	8003c34 <HAL_SPI_Transmit+0x31c>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d013      	beq.n	8003c34 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c10:	881a      	ldrh	r2, [r3, #0]
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1a:	1c9a      	adds	r2, r3, #2
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b02      	subs	r3, #2
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003c32:	e03b      	b.n	8003cac <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3320      	adds	r3, #32
 8003c3e:	7812      	ldrb	r2, [r2, #0]
 8003c40:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003c5e:	e025      	b.n	8003cac <HAL_SPI_Transmit+0x394>
 8003c60:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c64:	f7fc feb0 	bl	80009c8 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d803      	bhi.n	8003c7c <HAL_SPI_Transmit+0x364>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7a:	d102      	bne.n	8003c82 <HAL_SPI_Transmit+0x36a>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d114      	bne.n	8003cac <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f844 	bl	8003d10 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e02c      	b.n	8003d06 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f47f af79 	bne.w	8003bac <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2108      	movs	r1, #8
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f8c3 	bl	8003e50 <SPI_WaitOnFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d007      	beq.n	8003ce0 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd6:	f043 0220 	orr.w	r2, r3, #32
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f815 	bl	8003d10 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8003d04:	7efb      	ldrb	r3, [r7, #27]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop

08003d10 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0208 	orr.w	r2, r2, #8
 8003d2e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0210 	orr.w	r2, r2, #16
 8003d3e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0201 	bic.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6919      	ldr	r1, [r3, #16]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b3c      	ldr	r3, [pc, #240]	; (8003e4c <SPI_CloseTransfer+0x13c>)
 8003d5c:	400b      	ands	r3, r1
 8003d5e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003d6e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d014      	beq.n	8003da6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00f      	beq.n	8003da6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699a      	ldr	r2, [r3, #24]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0220 	orr.w	r2, r2, #32
 8003da4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d014      	beq.n	8003ddc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00f      	beq.n	8003ddc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc2:	f043 0204 	orr.w	r2, r3, #4
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dda:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00f      	beq.n	8003e06 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dec:	f043 0201 	orr.w	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e04:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00f      	beq.n	8003e30 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e16:	f043 0208 	orr.w	r2, r3, #8
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e2e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	fffffc90 	.word	0xfffffc90

08003e50 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8003e60:	e010      	b.n	8003e84 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e62:	f7fc fdb1 	bl	80009c8 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d803      	bhi.n	8003e7a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d102      	bne.n	8003e80 <SPI_WaitOnFlagUntilTimeout+0x30>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e00f      	b.n	8003ea4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d0df      	beq.n	8003e62 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	3301      	adds	r3, #1
 8003ebc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	3307      	adds	r3, #7
 8003eca:	08db      	lsrs	r3, r3, #3
 8003ecc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	fb02 f303 	mul.w	r3, r2, r3
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <memset>:
 8003ee2:	4402      	add	r2, r0
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d100      	bne.n	8003eec <memset+0xa>
 8003eea:	4770      	bx	lr
 8003eec:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef0:	e7f9      	b.n	8003ee6 <memset+0x4>
	...

08003ef4 <__libc_init_array>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	4d0d      	ldr	r5, [pc, #52]	; (8003f2c <__libc_init_array+0x38>)
 8003ef8:	4c0d      	ldr	r4, [pc, #52]	; (8003f30 <__libc_init_array+0x3c>)
 8003efa:	1b64      	subs	r4, r4, r5
 8003efc:	10a4      	asrs	r4, r4, #2
 8003efe:	2600      	movs	r6, #0
 8003f00:	42a6      	cmp	r6, r4
 8003f02:	d109      	bne.n	8003f18 <__libc_init_array+0x24>
 8003f04:	4d0b      	ldr	r5, [pc, #44]	; (8003f34 <__libc_init_array+0x40>)
 8003f06:	4c0c      	ldr	r4, [pc, #48]	; (8003f38 <__libc_init_array+0x44>)
 8003f08:	f000 f818 	bl	8003f3c <_init>
 8003f0c:	1b64      	subs	r4, r4, r5
 8003f0e:	10a4      	asrs	r4, r4, #2
 8003f10:	2600      	movs	r6, #0
 8003f12:	42a6      	cmp	r6, r4
 8003f14:	d105      	bne.n	8003f22 <__libc_init_array+0x2e>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1c:	4798      	blx	r3
 8003f1e:	3601      	adds	r6, #1
 8003f20:	e7ee      	b.n	8003f00 <__libc_init_array+0xc>
 8003f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f26:	4798      	blx	r3
 8003f28:	3601      	adds	r6, #1
 8003f2a:	e7f2      	b.n	8003f12 <__libc_init_array+0x1e>
 8003f2c:	08003f64 	.word	0x08003f64
 8003f30:	08003f64 	.word	0x08003f64
 8003f34:	08003f64 	.word	0x08003f64
 8003f38:	08003f68 	.word	0x08003f68

08003f3c <_init>:
 8003f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3e:	bf00      	nop
 8003f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f42:	bc08      	pop	{r3}
 8003f44:	469e      	mov	lr, r3
 8003f46:	4770      	bx	lr

08003f48 <_fini>:
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4a:	bf00      	nop
 8003f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4e:	bc08      	pop	{r3}
 8003f50:	469e      	mov	lr, r3
 8003f52:	4770      	bx	lr
