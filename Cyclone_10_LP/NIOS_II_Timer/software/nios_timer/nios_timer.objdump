
nios_timer.elf:     file format elf32-littlenios2
nios_timer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001180

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x0000057c memsz 0x0000057c flags r-x
    LOAD off    0x0000159c vaddr 0x0000159c paddr 0x000015a4 align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x000015ac vaddr 0x000015ac paddr 0x000015ac align 2**12
         filesz 0x00000000 memsz 0x00000114 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000404  00001180  00001180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  00001584  00001584  00001584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  0000159c  000015a4  0000159c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000114  000015ac  000015ac  000015ac  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000016c0  000016c0  000015a4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000278  00000000  00000000  000015c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000017c3  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000cbf  00000000  00000000  00003003  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000c53  00000000  00000000  00003cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002a0  00000000  00000000  00004918  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000cb8  00000000  00000000  00004bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000530  00000000  00000000  00005870  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00005da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000110  00000000  00000000  00005db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00006fc6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00006fc9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00006fd5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00006fd6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00006fd7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00006fdb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00006fdf  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00006fe3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00006fee  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00006ff9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00007004  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000052  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 29 .jdi          00004f1d  00000000  00000000  0000705e  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003cef5  00000000  00000000  0000bf7b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001180 l    d  .text	00000000 .text
00001584 l    d  .rodata	00000000 .rodata
0000159c l    d  .rwdata	00000000 .rwdata
000015ac l    d  .bss	00000000 .bss
000016c0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_timer_bsp//obj/HAL/src/crt0.o
000011b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000011bc l     F .text	00000028 timer_isr
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000015bc g     O .bss	00000004 alt_instruction_exception_handler
00001428 g     F .text	0000002c alt_main
000015c0 g     O .bss	00000100 alt_irq
000015a4 g       *ABS*	00000000 __flash_rwdata_start
00001454 g     F .text	00000038 alt_putstr
00001560 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
000015b4 g     O .bss	00000004 alt_argv
0000959c g       *ABS*	00000000 _gp
000014ec g     F .text	00000074 alt_exception_cause_generated_bad_addr
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000016c0 g       *ABS*	00000000 __bss_end
000012e0 g     F .text	00000068 alt_iic_isr_register
000012c8 g     F .text	00000018 alt_ic_irq_enabled
000015ac g     O .bss	00000004 alt_irq_active
000010fc g     F .exceptions	00000060 alt_irq_handler
000014e4 g     F .text	00000004 alt_dcache_flush_all
000015a4 g       *ABS*	00000000 __ram_rwdata_end
0000159c g       *ABS*	00000000 __ram_rodata_end
000015a0 g     O .rwdata	00000004 jtag_uart_0
000016c0 g       *ABS*	00000000 end
0000115c g     F .exceptions	00000024 alt_instruction_exception_entry
00002000 g       *ABS*	00000000 __alt_stack_pointer
000014b0 g     F .text	00000034 altera_avalon_jtag_uart_write
000011e4 g     F .text	00000054 init_timer_interrupt
00001180 g     F .text	0000003c _start
000014ac g     F .text	00000004 alt_sys_init
0000159c g       *ABS*	00000000 __ram_rwdata_start
00001584 g       *ABS*	00000000 __ram_rodata_start
000016c0 g       *ABS*	00000000 __alt_stack_base
000015ac g       *ABS*	00000000 __bss_start
00001238 g     F .text	0000001c main
000015b0 g     O .bss	00000004 alt_envp
00001584 g       *ABS*	00000000 __flash_rodata_start
0000148c g     F .text	00000020 alt_irq_init
000015b8 g     O .bss	00000004 alt_argc
00001020 g       .exceptions	00000000 alt_irq_entry
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001254 g     F .text	00000004 alt_ic_isr_register
000015a4 g       *ABS*	00000000 _edata
000016c0 g       *ABS*	00000000 _end
00001180 g       *ABS*	00000000 __ram_exceptions_end
00001290 g     F .text	00000038 alt_ic_irq_disable
00002000 g       *ABS*	00000000 __alt_data_end
00001020 g     F .exceptions	00000000 alt_exception
0000100c g       .entry	00000000 _exit
00001568 g     F .text	0000001c strlen
000014e8 g     F .text	00000004 alt_icache_flush_all
0000159c g     O .rwdata	00000004 alt_priority_mask
00001258 g     F .text	00000038 alt_ic_irq_enable
00001348 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08446014 	ori	at,at,4480
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .exceptions:

00001020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    1020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    1024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    1028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    102c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    1030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    1034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    1038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    103c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    1040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    1044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    1048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    104c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    1050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    1054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    1058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    105c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    1060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    1064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    1068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    106c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    1070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    1074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    1078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    107c:	10000326 	beq	r2,zero,108c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    1080:	20000226 	beq	r4,zero,108c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    1084:	00010fc0 	call	10fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    1088:	00000706 	br	10a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    108c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    1090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    1094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    1098:	000115c0 	call	115c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    109c:	1000021e 	bne	r2,zero,10a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    10a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    10a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    10a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    10ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    10b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    10b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    10b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    10bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    10c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    10c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    10c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    10cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    10d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    10d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    10d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    10dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    10e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    10e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    10e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    10ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    10f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    10f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    10f8:	ef80083a 	eret

000010fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    10fc:	defffe04 	addi	sp,sp,-8
    1100:	dfc00115 	stw	ra,4(sp)
    1104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    1108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    110c:	04000034 	movhi	r16,0
    1110:	84057004 	addi	r16,r16,5568

  active = alt_irq_pending ();

  do
  {
    i = 0;
    1114:	0005883a 	mov	r2,zero
    mask = 1;
    1118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    111c:	20ca703a 	and	r5,r4,r3
    1120:	28000b26 	beq	r5,zero,1150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    1124:	100490fa 	slli	r2,r2,3
    1128:	8085883a 	add	r2,r16,r2
    112c:	10c00017 	ldw	r3,0(r2)
    1130:	11000117 	ldw	r4,4(r2)
    1134:	183ee83a 	callr	r3
    1138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    113c:	203ff51e 	bne	r4,zero,1114 <_gp+0xffff7b78>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	dc000017 	ldw	r16,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    1150:	18c7883a 	add	r3,r3,r3
      i++;
    1154:	10800044 	addi	r2,r2,1

    } while (1);
    1158:	003ff006 	br	111c <_gp+0xffff7b80>

0000115c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    115c:	d0a00817 	ldw	r2,-32736(gp)
    1160:	10000426 	beq	r2,zero,1174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    1164:	200b883a 	mov	r5,r4
    1168:	000d883a 	mov	r6,zero
    116c:	013fffc4 	movi	r4,-1
    1170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    1174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    1178:	0005883a 	mov	r2,zero
    117c:	f800283a 	ret

Disassembly of section .text:

00001180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1184:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    118c:	d6a56714 	ori	gp,gp,38300
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1194:	10856b14 	ori	r2,r2,5548

    movhi r3, %hi(__bss_end)
    1198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    119c:	18c5b014 	ori	r3,r3,5824

    beq r2, r3, 1f
    11a0:	10c00326 	beq	r2,r3,11b0 <_start+0x30>

0:
    stw zero, (r2)
    11a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    11a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    11ac:	10fffd36 	bltu	r2,r3,11a4 <_gp+0xffff7c08>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    11b0:	00013480 	call	1348 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    11b4:	00014280 	call	1428 <alt_main>

000011b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    11b8:	003fff06 	br	11b8 <_gp+0xffff7c1c>

000011bc <timer_isr>:
static void timer_isr( void * context, alt_u32 id )
{
	static int count = 0;

	// Clear the interrupt
	IOWR_ALTERA_AVALON_TIMER_STATUS(0x3000, 0);
    11bc:	008c0004 	movi	r2,12288
    11c0:	10000035 	stwio	zero,0(r2)
	alt_u32 pio_state = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE);
    11c4:	00cc0804 	movi	r3,12320
    11c8:	18800037 	ldwio	r2,0(r3)

	// Do something
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, ~((pio_state & 0x01)));
    11cc:	1080004c 	andi	r2,r2,1
    11d0:	0084303a 	nor	r2,zero,r2
    11d4:	18800035 	stwio	r2,0(r3)
	alt_putstr("Hello from Nios II!\n"); //printf("\nTimer Expired: %d", count++);
    11d8:	01000034 	movhi	r4,0
    11dc:	21056104 	addi	r4,r4,5508
    11e0:	00014541 	jmpi	1454 <alt_putstr>

000011e4 <init_timer_interrupt>:

  return 0;
}

void init_timer_interrupt( void )
{
    11e4:	defffe04 	addi	sp,sp,-8
	// Register the ISR with HAL
	alt_ic_isr_register(0, 1, (void *)timer_isr, NULL, 0x0);
    11e8:	01800034 	movhi	r6,0
    11ec:	d8000015 	stw	zero,0(sp)
    11f0:	000f883a 	mov	r7,zero
    11f4:	31846f04 	addi	r6,r6,4540
    11f8:	01400044 	movi	r5,1
    11fc:	0009883a 	mov	r4,zero

  return 0;
}

void init_timer_interrupt( void )
{
    1200:	dfc00115 	stw	ra,4(sp)
	// Register the ISR with HAL
	alt_ic_isr_register(0, 1, (void *)timer_isr, NULL, 0x0);
    1204:	00012540 	call	1254 <alt_ic_isr_register>

	static const alt_u32 CLOCK_FREQUENCY = 50000000; // 50 MHz
	static const alt_u32 TIMER_PERIOD = CLOCK_FREQUENCY; // 1 second (50,000,000 counts)

	// Set the timer period
	IOWR_ALTERA_AVALON_TIMER_PERIODL(0x3000, TIMER_PERIOD & 0xFFFF); // Lower 16 bits
    1208:	008c0204 	movi	r2,12296
    120c:	00fc2014 	movui	r3,61568
    1210:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(0x3000, (TIMER_PERIOD >> 16) & 0xFFFF); // Upper 16 bits
    1214:	008c0304 	movi	r2,12300
    1218:	00c0be84 	movi	r3,762
    121c:	10c00035 	stwio	r3,0(r2)

	// Start the timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(0x3000, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
    1220:	008c0104 	movi	r2,12292
    1224:	00c001c4 	movi	r3,7
    1228:	10c00035 	stwio	r3,0(r2)
			                                   | ALTERA_AVALON_TIMER_CONTROL_START_MSK
											   | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
    122c:	dfc00117 	ldw	ra,4(sp)
    1230:	dec00204 	addi	sp,sp,8
    1234:	f800283a 	ret

00001238 <main>:
static void timer_isr( void * context, alt_u32 id );
void init_timer() ;

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    1238:	01000034 	movhi	r4,0
void init_timer_interrupt( void );
static void timer_isr( void * context, alt_u32 id );
void init_timer() ;

int main()
{ 
    123c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    1240:	21056104 	addi	r4,r4,5508
void init_timer_interrupt( void );
static void timer_isr( void * context, alt_u32 id );
void init_timer() ;

int main()
{ 
    1244:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    1248:	00014540 	call	1454 <alt_putstr>
		  delay++;
		  count = 0;
	  }
  };*/
	// Enable the timer
	init_timer_interrupt();
    124c:	00011e40 	call	11e4 <init_timer_interrupt>
    1250:	003fff06 	br	1250 <_gp+0xffff7cb4>

00001254 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    1254:	00012e01 	jmpi	12e0 <alt_iic_isr_register>

00001258 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1258:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    125c:	00bfff84 	movi	r2,-2
    1260:	2084703a 	and	r2,r4,r2
    1264:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    1268:	00c00044 	movi	r3,1
    126c:	d0a00417 	ldw	r2,-32752(gp)
    1270:	194a983a 	sll	r5,r3,r5
    1274:	288ab03a 	or	r5,r5,r2
    1278:	d1600415 	stw	r5,-32752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    127c:	d0a00417 	ldw	r2,-32752(gp)
    1280:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1284:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    1288:	0005883a 	mov	r2,zero
    128c:	f800283a 	ret

00001290 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1290:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1294:	00bfff84 	movi	r2,-2
    1298:	2084703a 	and	r2,r4,r2
    129c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    12a0:	00ffff84 	movi	r3,-2
    12a4:	d0a00417 	ldw	r2,-32752(gp)
    12a8:	194a183a 	rol	r5,r3,r5
    12ac:	288a703a 	and	r5,r5,r2
    12b0:	d1600415 	stw	r5,-32752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    12b4:	d0a00417 	ldw	r2,-32752(gp)
    12b8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    12bc:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    12c0:	0005883a 	mov	r2,zero
    12c4:	f800283a 	ret

000012c8 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    12c8:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    12cc:	00800044 	movi	r2,1
    12d0:	1144983a 	sll	r2,r2,r5
    12d4:	10c4703a 	and	r2,r2,r3
}
    12d8:	1004c03a 	cmpne	r2,r2,zero
    12dc:	f800283a 	ret

000012e0 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    12e0:	00c007c4 	movi	r3,31
    12e4:	19401616 	blt	r3,r5,1340 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    12e8:	defffe04 	addi	sp,sp,-8
    12ec:	dfc00115 	stw	ra,4(sp)
    12f0:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    12f4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    12f8:	00ffff84 	movi	r3,-2
    12fc:	80c6703a 	and	r3,r16,r3
    1300:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    1304:	280490fa 	slli	r2,r5,3
    1308:	00c00034 	movhi	r3,0
    130c:	18c57004 	addi	r3,r3,5568
    1310:	1885883a 	add	r2,r3,r2
    1314:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    1318:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    131c:	30000226 	beq	r6,zero,1328 <alt_iic_isr_register+0x48>
    1320:	00012580 	call	1258 <alt_ic_irq_enable>
    1324:	00000106 	br	132c <alt_iic_isr_register+0x4c>
    1328:	00012900 	call	1290 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    132c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    1330:	dfc00117 	ldw	ra,4(sp)
    1334:	dc000017 	ldw	r16,0(sp)
    1338:	dec00204 	addi	sp,sp,8
    133c:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    1340:	00bffa84 	movi	r2,-22
    1344:	f800283a 	ret

00001348 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1348:	deffff04 	addi	sp,sp,-4
    134c:	01000034 	movhi	r4,0
    1350:	01400034 	movhi	r5,0
    1354:	dfc00015 	stw	ra,0(sp)
    1358:	21056704 	addi	r4,r4,5532
    135c:	29456904 	addi	r5,r5,5540

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1360:	2140061e 	bne	r4,r5,137c <alt_load+0x34>
    1364:	01000034 	movhi	r4,0
    1368:	01400034 	movhi	r5,0
    136c:	21040804 	addi	r4,r4,4128
    1370:	29440804 	addi	r5,r5,4128
    1374:	2140121e 	bne	r4,r5,13c0 <alt_load+0x78>
    1378:	00000b06 	br	13a8 <alt_load+0x60>
    137c:	00c00034 	movhi	r3,0
    1380:	18c56904 	addi	r3,r3,5540
    1384:	1907c83a 	sub	r3,r3,r4
    1388:	0005883a 	mov	r2,zero
  {
    while( to != end )
    138c:	10fff526 	beq	r2,r3,1364 <_gp+0xffff7dc8>
    {
      *to++ = *from++;
    1390:	114f883a 	add	r7,r2,r5
    1394:	39c00017 	ldw	r7,0(r7)
    1398:	110d883a 	add	r6,r2,r4
    139c:	10800104 	addi	r2,r2,4
    13a0:	31c00015 	stw	r7,0(r6)
    13a4:	003ff906 	br	138c <_gp+0xffff7df0>
    13a8:	01000034 	movhi	r4,0
    13ac:	01400034 	movhi	r5,0
    13b0:	21056104 	addi	r4,r4,5508
    13b4:	29456104 	addi	r5,r5,5508

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    13b8:	2140101e 	bne	r4,r5,13fc <alt_load+0xb4>
    13bc:	00000b06 	br	13ec <alt_load+0xa4>
    13c0:	00c00034 	movhi	r3,0
    13c4:	18c46004 	addi	r3,r3,4480
    13c8:	1907c83a 	sub	r3,r3,r4
    13cc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    13d0:	10fff526 	beq	r2,r3,13a8 <_gp+0xffff7e0c>
    {
      *to++ = *from++;
    13d4:	114f883a 	add	r7,r2,r5
    13d8:	39c00017 	ldw	r7,0(r7)
    13dc:	110d883a 	add	r6,r2,r4
    13e0:	10800104 	addi	r2,r2,4
    13e4:	31c00015 	stw	r7,0(r6)
    13e8:	003ff906 	br	13d0 <_gp+0xffff7e34>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    13ec:	00014e40 	call	14e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    13f0:	dfc00017 	ldw	ra,0(sp)
    13f4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    13f8:	00014e81 	jmpi	14e8 <alt_icache_flush_all>
    13fc:	00c00034 	movhi	r3,0
    1400:	18c56704 	addi	r3,r3,5532
    1404:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1408:	0005883a 	mov	r2,zero
  {
    while( to != end )
    140c:	18bff726 	beq	r3,r2,13ec <_gp+0xffff7e50>
    {
      *to++ = *from++;
    1410:	114f883a 	add	r7,r2,r5
    1414:	39c00017 	ldw	r7,0(r7)
    1418:	110d883a 	add	r6,r2,r4
    141c:	10800104 	addi	r2,r2,4
    1420:	31c00015 	stw	r7,0(r6)
    1424:	003ff906 	br	140c <_gp+0xffff7e70>

00001428 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1428:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    142c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1430:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1434:	000148c0 	call	148c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1438:	00014ac0 	call	14ac <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    143c:	d1a00517 	ldw	r6,-32748(gp)
    1440:	d1600617 	ldw	r5,-32744(gp)
    1444:	d1200717 	ldw	r4,-32740(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1448:	dfc00017 	ldw	ra,0(sp)
    144c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1450:	00012381 	jmpi	1238 <main>

00001454 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    1454:	defffe04 	addi	sp,sp,-8
    1458:	dc000015 	stw	r16,0(sp)
    145c:	dfc00115 	stw	ra,4(sp)
    1460:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1464:	00015680 	call	1568 <strlen>
    1468:	01000034 	movhi	r4,0
    146c:	000f883a 	mov	r7,zero
    1470:	100d883a 	mov	r6,r2
    1474:	800b883a 	mov	r5,r16
    1478:	21056804 	addi	r4,r4,5536
#else
    return fputs(str, stdout);
#endif
#endif
}
    147c:	dfc00117 	ldw	ra,4(sp)
    1480:	dc000017 	ldw	r16,0(sp)
    1484:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1488:	00014b01 	jmpi	14b0 <altera_avalon_jtag_uart_write>

0000148c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    148c:	deffff04 	addi	sp,sp,-4
    1490:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    1494:	00015600 	call	1560 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1498:	00800044 	movi	r2,1
    149c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    14a0:	dfc00017 	ldw	ra,0(sp)
    14a4:	dec00104 	addi	sp,sp,4
    14a8:	f800283a 	ret

000014ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    14ac:	f800283a 	ret

000014b0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    14b0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    14b4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    14b8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    14bc:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    14c0:	2980072e 	bgeu	r5,r6,14e0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    14c4:	38c00037 	ldwio	r3,0(r7)
    14c8:	18ffffec 	andhi	r3,r3,65535
    14cc:	183ffc26 	beq	r3,zero,14c0 <_gp+0xffff7f24>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    14d0:	28c00007 	ldb	r3,0(r5)
    14d4:	20c00035 	stwio	r3,0(r4)
    14d8:	29400044 	addi	r5,r5,1
    14dc:	003ff806 	br	14c0 <_gp+0xffff7f24>

  return count;
}
    14e0:	f800283a 	ret

000014e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    14e4:	f800283a 	ret

000014e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    14e8:	f800283a 	ret

000014ec <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    14ec:	213ffe84 	addi	r4,r4,-6
    14f0:	008003c4 	movi	r2,15
    14f4:	11001636 	bltu	r2,r4,1550 <alt_exception_cause_generated_bad_addr+0x64>
    14f8:	200890ba 	slli	r4,r4,2
    14fc:	00800034 	movhi	r2,0
    1500:	10854404 	addi	r2,r2,5392
    1504:	2089883a 	add	r4,r4,r2
    1508:	20800017 	ldw	r2,0(r4)
    150c:	1000683a 	jmp	r2
    1510:	00001558 	cmpnei	zero,zero,85
    1514:	00001558 	cmpnei	zero,zero,85
    1518:	00001550 	cmplti	zero,zero,85
    151c:	00001550 	cmplti	zero,zero,85
    1520:	00001550 	cmplti	zero,zero,85
    1524:	00001558 	cmpnei	zero,zero,85
    1528:	00001550 	cmplti	zero,zero,85
    152c:	00001550 	cmplti	zero,zero,85
    1530:	00001558 	cmpnei	zero,zero,85
    1534:	00001558 	cmpnei	zero,zero,85
    1538:	00001550 	cmplti	zero,zero,85
    153c:	00001558 	cmpnei	zero,zero,85
    1540:	00001550 	cmplti	zero,zero,85
    1544:	00001550 	cmplti	zero,zero,85
    1548:	00001550 	cmplti	zero,zero,85
    154c:	00001558 	cmpnei	zero,zero,85
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    1550:	0005883a 	mov	r2,zero
    1554:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    1558:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    155c:	f800283a 	ret

00001560 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1560:	000170fa 	wrctl	ienable,zero
    1564:	f800283a 	ret

00001568 <strlen>:
    1568:	2005883a 	mov	r2,r4
    156c:	10c00007 	ldb	r3,0(r2)
    1570:	18000226 	beq	r3,zero,157c <strlen+0x14>
    1574:	10800044 	addi	r2,r2,1
    1578:	003ffc06 	br	156c <_gp+0xffff7fd0>
    157c:	1105c83a 	sub	r2,r2,r4
    1580:	f800283a 	ret
