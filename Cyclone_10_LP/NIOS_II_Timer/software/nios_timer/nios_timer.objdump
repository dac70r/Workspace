
nios_timer.elf:     file format elf32-littlenios2
nios_timer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x0000025c memsz 0x0000025c flags r-x
    LOAD off    0x0000127c vaddr 0x0000127c paddr 0x00001280 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001284 vaddr 0x00001284 paddr 0x00001284 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  00001280  2**0
                  CONTENTS
  2 .text         00000224  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  00001244  00001244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  0000127c  00001280  0000127c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00001284  00001284  00001284  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00001290  00001290  00001280  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000168  00000000  00000000  000012a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000b01  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000624  00000000  00000000  00001f11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000716  00000000  00000000  00002535  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000190  00000000  00000000  00002c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000060c  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000101  00000000  00000000  000033e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000034ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  00003500  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000439e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000043a1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000043ad  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000043ae  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000043af  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000043b3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000043b7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000043bb  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000043c6  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000043d1  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  000043dc  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000052  00000000  00000000  000043e4  2**0
                  CONTENTS, READONLY
 29 .jdi          00004f1d  00000000  00000000  00004436  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000369c4  00000000  00000000  00009353  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001244 l    d  .rodata	00000000 .rodata
0000127c l    d  .rwdata	00000000 .rwdata
00001284 l    d  .bss	00000000 .bss
00001290 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_timer_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
0000115c g     F .text	0000002c alt_main
00001280 g       *ABS*	00000000 __flash_rwdata_start
00001188 g     F .text	00000038 alt_putstr
00001220 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001288 g     O .bss	00000004 alt_argv
0000927c g       *ABS*	00000000 _gp
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00001290 g       *ABS*	00000000 __bss_end
00001218 g     F .text	00000004 alt_dcache_flush_all
00001280 g       *ABS*	00000000 __ram_rwdata_end
0000127c g       *ABS*	00000000 __ram_rodata_end
0000127c g     O .rwdata	00000004 jtag_uart_0
00001290 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
000011e4 g     F .text	00000034 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
000011e0 g     F .text	00000004 alt_sys_init
0000127c g       *ABS*	00000000 __ram_rwdata_start
00001244 g       *ABS*	00000000 __ram_rodata_start
00001290 g       *ABS*	00000000 __alt_stack_base
00001284 g       *ABS*	00000000 __bss_start
0000105c g     F .text	00000020 main
00001284 g     O .bss	00000004 alt_envp
00001244 g       *ABS*	00000000 __flash_rodata_start
000011c0 g     F .text	00000020 alt_irq_init
0000128c g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001280 g       *ABS*	00000000 _edata
00001290 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
00001228 g     F .text	0000001c strlen
0000121c g     F .text	00000004 alt_icache_flush_all
0000107c g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a49f14 	ori	gp,gp,37500
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1084a114 	ori	r2,r2,4740

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c4a414 	ori	r3,r3,4752

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff7dc8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	000107c0 	call	107c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	000115c0 	call	115c <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff7ddc>

0000105c <main>:
 */

#include "sys/alt_stdio.h"

int main()
{ 
    105c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    1060:	01000034 	movhi	r4,0
 */

#include "sys/alt_stdio.h"

int main()
{ 
    1064:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    1068:	21049104 	addi	r4,r4,4676
    106c:	00011880 	call	1188 <alt_putstr>

  /* Event loop never exits. */
  while (1){
	  alt_putstr("Hello from Nios II hahaha !\n");
    1070:	01000034 	movhi	r4,0
    1074:	21049704 	addi	r4,r4,4700
    1078:	003ffc06 	br	106c <_gp+0xffff7df0>

0000107c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    107c:	deffff04 	addi	sp,sp,-4
    1080:	01000034 	movhi	r4,0
    1084:	01400034 	movhi	r5,0
    1088:	dfc00015 	stw	ra,0(sp)
    108c:	21049f04 	addi	r4,r4,4732
    1090:	2944a004 	addi	r5,r5,4736

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1094:	2140061e 	bne	r4,r5,10b0 <alt_load+0x34>
    1098:	01000034 	movhi	r4,0
    109c:	01400034 	movhi	r5,0
    10a0:	21040804 	addi	r4,r4,4128
    10a4:	29440804 	addi	r5,r5,4128
    10a8:	2140121e 	bne	r4,r5,10f4 <alt_load+0x78>
    10ac:	00000b06 	br	10dc <alt_load+0x60>
    10b0:	00c00034 	movhi	r3,0
    10b4:	18c4a004 	addi	r3,r3,4736
    10b8:	1907c83a 	sub	r3,r3,r4
    10bc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    10c0:	10fff526 	beq	r2,r3,1098 <_gp+0xffff7e1c>
    {
      *to++ = *from++;
    10c4:	114f883a 	add	r7,r2,r5
    10c8:	39c00017 	ldw	r7,0(r7)
    10cc:	110d883a 	add	r6,r2,r4
    10d0:	10800104 	addi	r2,r2,4
    10d4:	31c00015 	stw	r7,0(r6)
    10d8:	003ff906 	br	10c0 <_gp+0xffff7e44>
    10dc:	01000034 	movhi	r4,0
    10e0:	01400034 	movhi	r5,0
    10e4:	21049104 	addi	r4,r4,4676
    10e8:	29449104 	addi	r5,r5,4676

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    10ec:	2140101e 	bne	r4,r5,1130 <alt_load+0xb4>
    10f0:	00000b06 	br	1120 <alt_load+0xa4>
    10f4:	00c00034 	movhi	r3,0
    10f8:	18c40804 	addi	r3,r3,4128
    10fc:	1907c83a 	sub	r3,r3,r4
    1100:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1104:	10fff526 	beq	r2,r3,10dc <_gp+0xffff7e60>
    {
      *to++ = *from++;
    1108:	114f883a 	add	r7,r2,r5
    110c:	39c00017 	ldw	r7,0(r7)
    1110:	110d883a 	add	r6,r2,r4
    1114:	10800104 	addi	r2,r2,4
    1118:	31c00015 	stw	r7,0(r6)
    111c:	003ff906 	br	1104 <_gp+0xffff7e88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1120:	00012180 	call	1218 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1124:	dfc00017 	ldw	ra,0(sp)
    1128:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    112c:	000121c1 	jmpi	121c <alt_icache_flush_all>
    1130:	00c00034 	movhi	r3,0
    1134:	18c49f04 	addi	r3,r3,4732
    1138:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    113c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1140:	18bff726 	beq	r3,r2,1120 <_gp+0xffff7ea4>
    {
      *to++ = *from++;
    1144:	114f883a 	add	r7,r2,r5
    1148:	39c00017 	ldw	r7,0(r7)
    114c:	110d883a 	add	r6,r2,r4
    1150:	10800104 	addi	r2,r2,4
    1154:	31c00015 	stw	r7,0(r6)
    1158:	003ff906 	br	1140 <_gp+0xffff7ec4>

0000115c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    115c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1160:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1164:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1168:	00011c00 	call	11c0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    116c:	00011e00 	call	11e0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1170:	d1a00217 	ldw	r6,-32760(gp)
    1174:	d1600317 	ldw	r5,-32756(gp)
    1178:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    117c:	dfc00017 	ldw	ra,0(sp)
    1180:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1184:	000105c1 	jmpi	105c <main>

00001188 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    1188:	defffe04 	addi	sp,sp,-8
    118c:	dc000015 	stw	r16,0(sp)
    1190:	dfc00115 	stw	ra,4(sp)
    1194:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1198:	00012280 	call	1228 <strlen>
    119c:	01000034 	movhi	r4,0
    11a0:	000f883a 	mov	r7,zero
    11a4:	100d883a 	mov	r6,r2
    11a8:	800b883a 	mov	r5,r16
    11ac:	21049f04 	addi	r4,r4,4732
#else
    return fputs(str, stdout);
#endif
#endif
}
    11b0:	dfc00117 	ldw	ra,4(sp)
    11b4:	dc000017 	ldw	r16,0(sp)
    11b8:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    11bc:	00011e41 	jmpi	11e4 <altera_avalon_jtag_uart_write>

000011c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    11c0:	deffff04 	addi	sp,sp,-4
    11c4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    11c8:	00012200 	call	1220 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    11cc:	00800044 	movi	r2,1
    11d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    11d4:	dfc00017 	ldw	ra,0(sp)
    11d8:	dec00104 	addi	sp,sp,4
    11dc:	f800283a 	ret

000011e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    11e0:	f800283a 	ret

000011e4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    11e4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    11e8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    11ec:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    11f0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    11f4:	2980072e 	bgeu	r5,r6,1214 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    11f8:	38c00037 	ldwio	r3,0(r7)
    11fc:	18ffffec 	andhi	r3,r3,65535
    1200:	183ffc26 	beq	r3,zero,11f4 <_gp+0xffff7f78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1204:	28c00007 	ldb	r3,0(r5)
    1208:	20c00035 	stwio	r3,0(r4)
    120c:	29400044 	addi	r5,r5,1
    1210:	003ff806 	br	11f4 <_gp+0xffff7f78>

  return count;
}
    1214:	f800283a 	ret

00001218 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1218:	f800283a 	ret

0000121c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    121c:	f800283a 	ret

00001220 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1220:	000170fa 	wrctl	ienable,zero
    1224:	f800283a 	ret

00001228 <strlen>:
    1228:	2005883a 	mov	r2,r4
    122c:	10c00007 	ldb	r3,0(r2)
    1230:	18000226 	beq	r3,zero,123c <strlen+0x14>
    1234:	10800044 	addi	r2,r2,1
    1238:	003ffc06 	br	122c <_gp+0xffff7fb0>
    123c:	1105c83a 	sub	r2,r2,r4
    1240:	f800283a 	ret
