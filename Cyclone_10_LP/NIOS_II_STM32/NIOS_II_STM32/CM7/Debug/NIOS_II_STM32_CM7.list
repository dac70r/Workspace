
NIOS_II_STM32_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078b8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007b58  08007b58  00008b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bf8  08007bf8  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007bf8  08007bf8  00008bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c00  08007c00  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c00  08007c00  00008c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c04  08007c04  00008c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  24000000  08007c08  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  24000060  08007c68  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240003c8  08007c68  000093c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a3b2  00000000  00000000  0000908e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003198  00000000  00000000  00023440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  000265d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f47  00000000  00000000  00027980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003beda  00000000  00000000  000288c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0d1  00000000  00000000  000647a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018b339  00000000  00000000  00081872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020cbab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057f4  00000000  00000000  0020cbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  002123e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007b40 	.word	0x08007b40

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	08007b40 	.word	0x08007b40

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b34      	ldr	r3, [pc, #208]	@ (8000884 <MX_GPIO_Init+0xe8>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b8:	4a32      	ldr	r2, [pc, #200]	@ (8000884 <MX_GPIO_Init+0xe8>)
 80007ba:	f043 0302 	orr.w	r3, r3, #2
 80007be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007c2:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <MX_GPIO_Init+0xe8>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c8:	f003 0302 	and.w	r3, r3, #2
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000884 <MX_GPIO_Init+0xe8>)
 80007d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d6:	4a2b      	ldr	r2, [pc, #172]	@ (8000884 <MX_GPIO_Init+0xe8>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e0:	4b28      	ldr	r3, [pc, #160]	@ (8000884 <MX_GPIO_Init+0xe8>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <MX_GPIO_Init+0xe8>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f4:	4a23      	ldr	r2, [pc, #140]	@ (8000884 <MX_GPIO_Init+0xe8>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <MX_GPIO_Init+0xe8>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000804:	f003 0304 	and.w	r3, r3, #4
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080c:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <MX_GPIO_Init+0xe8>)
 800080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000812:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <MX_GPIO_Init+0xe8>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <MX_GPIO_Init+0xe8>)
 800081e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000822:	f003 0310 	and.w	r3, r3, #16
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000830:	4815      	ldr	r0, [pc, #84]	@ (8000888 <MX_GPIO_Init+0xec>)
 8000832:	f001 fb9d 	bl	8001f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2102      	movs	r1, #2
 800083a:	4814      	ldr	r0, [pc, #80]	@ (800088c <MX_GPIO_Init+0xf0>)
 800083c:	f001 fb98 	bl	8001f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000840:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	480b      	ldr	r0, [pc, #44]	@ (8000888 <MX_GPIO_Init+0xec>)
 800085a:	f001 f9c1 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800085e:	2302      	movs	r3, #2
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_GPIO_Init+0xf0>)
 8000876:	f001 f9b3 	bl	8001be0 <HAL_GPIO_Init>

}
 800087a:	bf00      	nop
 800087c:	3728      	adds	r7, #40	@ 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	58024400 	.word	0x58024400
 8000888:	58020400 	.word	0x58020400
 800088c:	58021000 	.word	0x58021000

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b092      	sub	sp, #72	@ 0x48
 8000894:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000896:	f000 f9cb 	bl	8000c30 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800089a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800089e:	647b      	str	r3, [r7, #68]	@ 0x44
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008a0:	bf00      	nop
 80008a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000990 <main+0x100>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d004      	beq.n	80008b8 <main+0x28>
 80008ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80008b0:	1e5a      	subs	r2, r3, #1
 80008b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dcf4      	bgt.n	80008a2 <main+0x12>
  if ( timeout < 0 )
 80008b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	da01      	bge.n	80008c2 <main+0x32>
  {
  Error_Handler();
 80008be:	f000 f9e3 	bl	8000c88 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c2:	f000 fcfd 	bl	80012c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c6:	f000 f873 	bl	80009b0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008ca:	f000 f8ef 	bl	8000aac <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008ce:	4b30      	ldr	r3, [pc, #192]	@ (8000990 <main+0x100>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d4:	4a2e      	ldr	r2, [pc, #184]	@ (8000990 <main+0x100>)
 80008d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008de:	4b2c      	ldr	r3, [pc, #176]	@ (8000990 <main+0x100>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008ec:	2000      	movs	r0, #0
 80008ee:	f001 fb73 	bl	8001fd8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008f2:	2100      	movs	r1, #0
 80008f4:	2000      	movs	r0, #0
 80008f6:	f001 fb89 	bl	800200c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008fe:	647b      	str	r3, [r7, #68]	@ 0x44
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000900:	bf00      	nop
 8000902:	4b23      	ldr	r3, [pc, #140]	@ (8000990 <main+0x100>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800090a:	2b00      	cmp	r3, #0
 800090c:	d104      	bne.n	8000918 <main+0x88>
 800090e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000910:	1e5a      	subs	r2, r3, #1
 8000912:	647a      	str	r2, [r7, #68]	@ 0x44
 8000914:	2b00      	cmp	r3, #0
 8000916:	dcf4      	bgt.n	8000902 <main+0x72>
if ( timeout < 0 )
 8000918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800091a:	2b00      	cmp	r3, #0
 800091c:	da01      	bge.n	8000922 <main+0x92>
{
Error_Handler();
 800091e:	f000 f9b3 	bl	8000c88 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000922:	f7ff ff3b 	bl	800079c <MX_GPIO_Init>
  MX_SPI6_Init();
 8000926:	f000 fa15 	bl	8000d54 <MX_SPI6_Init>
  MX_TIM16_Init();
 800092a:	f000 fbb9 	bl	80010a0 <MX_TIM16_Init>
  MX_USART3_UART_Init();
 800092e:	f000 fc07 	bl	8001140 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8000932:	f000 f9b7 	bl	8000ca4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  uart_buf_len = sprintf(uart_buf, "Timer Test\r\n");							// Calculates the size of the sentence
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	4916      	ldr	r1, [pc, #88]	@ (8000994 <main+0x104>)
 800093c:	4618      	mov	r0, r3
 800093e:	f006 fc5f 	bl	8007200 <siprintf>
 8000942:	6438      	str	r0, [r7, #64]	@ 0x40
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);			// SPI Transmit
 8000944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000946:	b29a      	uxth	r2, r3
 8000948:	f107 0108 	add.w	r1, r7, #8
 800094c:	2364      	movs	r3, #100	@ 0x64
 800094e:	4812      	ldr	r0, [pc, #72]	@ (8000998 <main+0x108>)
 8000950:	f005 fb3c 	bl	8005fcc <HAL_UART_Transmit>

    // Starts the timer - Normal
    // HAL_TIM_Base_Start(&htim16);

	// Starts the timer - Interrupt Mode
	HAL_TIM_Base_Start_IT(&htim16);
 8000954:	4811      	ldr	r0, [pc, #68]	@ (800099c <main+0x10c>)
 8000956:	f005 f87d 	bl	8005a54 <HAL_TIM_Base_Start_IT>

  	// Using SPI in Interrupt Mode
	// Starts SPI in Non-Blocking Mode

	uint8_t *send_buff = (uint8_t *)"fred";										// Define Send Buffer
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <main+0x110>)
 800095c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t rec_buff[4];														// Define Receive Buffer

	HAL_SPI_Receive_IT(&hspi6, rx_data, 4U);									// Single SPI Receive in IT mode
 800095e:	2204      	movs	r2, #4
 8000960:	4910      	ldr	r1, [pc, #64]	@ (80009a4 <main+0x114>)
 8000962:	4811      	ldr	r0, [pc, #68]	@ (80009a8 <main+0x118>)
 8000964:	f004 fba0 	bl	80050a8 <HAL_SPI_Receive_IT>
	HAL_SPI_Transmit_IT(&hspi3, send_buff, 4U);									// Single SPI Transmit in IT mode
 8000968:	2204      	movs	r2, #4
 800096a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800096c:	480f      	ldr	r0, [pc, #60]	@ (80009ac <main+0x11c>)
 800096e:	f004 faf1 	bl	8004f54 <HAL_SPI_Transmit_IT>

	HAL_Delay(1000U);															// Delay for 1s
 8000972:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000976:	f000 fd35 	bl	80013e4 <HAL_Delay>
	  // Show elapsed time
	  // uart_buf_len = sprintf(uart_buf, "%u us\r\n", timer_val);						// Calculate lenght of timer_val
	  // HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);			// Prints the value of timer_val

	  // Doing other tasks
	  HAL_SPI_Transmit_IT(&hspi3, send_buff, 4U);									// Single SPI Transmit in IT mode
 800097a:	2204      	movs	r2, #4
 800097c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800097e:	480b      	ldr	r0, [pc, #44]	@ (80009ac <main+0x11c>)
 8000980:	f004 fae8 	bl	8004f54 <HAL_SPI_Transmit_IT>
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); 										// Toggle LED to show the system is running
	  HAL_Delay(500);                        										// Delay for 500 ms
 8000984:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000988:	f000 fd2c 	bl	80013e4 <HAL_Delay>
	  HAL_SPI_Transmit_IT(&hspi3, send_buff, 4U);									// Single SPI Transmit in IT mode
 800098c:	bf00      	nop
 800098e:	e7f4      	b.n	800097a <main+0xea>
 8000990:	58024400 	.word	0x58024400
 8000994:	08007b58 	.word	0x08007b58
 8000998:	240001e8 	.word	0x240001e8
 800099c:	2400019c 	.word	0x2400019c
 80009a0:	08007b68 	.word	0x08007b68
 80009a4:	2400007c 	.word	0x2400007c
 80009a8:	24000110 	.word	0x24000110
 80009ac:	24000088 	.word	0x24000088

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b09c      	sub	sp, #112	@ 0x70
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ba:	224c      	movs	r2, #76	@ 0x4c
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f006 fc3e 	bl	8007240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2220      	movs	r2, #32
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f006 fc38 	bl	8007240 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009d0:	2004      	movs	r0, #4
 80009d2:	f001 fb2f 	bl	8002034 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b32      	ldr	r3, [pc, #200]	@ (8000aa4 <SystemClock_Config+0xf4>)
 80009dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009de:	4a31      	ldr	r2, [pc, #196]	@ (8000aa4 <SystemClock_Config+0xf4>)
 80009e0:	f023 0301 	bic.w	r3, r3, #1
 80009e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009e6:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa4 <SystemClock_Config+0xf4>)
 80009e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa8 <SystemClock_Config+0xf8>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009f8:	4a2b      	ldr	r2, [pc, #172]	@ (8000aa8 <SystemClock_Config+0xf8>)
 80009fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b29      	ldr	r3, [pc, #164]	@ (8000aa8 <SystemClock_Config+0xf8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a0c:	bf00      	nop
 8000a0e:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <SystemClock_Config+0xf8>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a1a:	d1f8      	bne.n	8000a0e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a20:	2301      	movs	r3, #1
 8000a22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a24:	2340      	movs	r3, #64	@ 0x40
 8000a26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000a30:	2320      	movs	r3, #32
 8000a32:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 128;
 8000a34:	2380      	movs	r3, #128	@ 0x80
 8000a36:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a44:	2304      	movs	r3, #4
 8000a46:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 fb47 	bl	80020e8 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a60:	f000 f912 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	233f      	movs	r3, #63	@ 0x3f
 8000a66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000a6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 ff86 	bl	800299c <HAL_RCC_ClockConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a96:	f000 f8f7 	bl	8000c88 <Error_Handler>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3770      	adds	r7, #112	@ 0x70
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	58000400 	.word	0x58000400
 8000aa8:	58024800 	.word	0x58024800

08000aac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b0b0      	sub	sp, #192	@ 0xc0
 8000ab0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	22c0      	movs	r2, #192	@ 0xc0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f006 fbc1 	bl	8007240 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6|RCC_PERIPHCLK_USART3;
 8000abe:	f244 0202 	movw	r2, #16386	@ 0x4002
 8000ac2:	f04f 0300 	mov.w	r3, #0
 8000ac6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000aca:	2320      	movs	r3, #32
 8000acc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000ace:	2381      	movs	r3, #129	@ 0x81
 8000ad0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 8;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000ade:	2340      	movs	r3, #64	@ 0x40
 8000ae0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000aea:	2301      	movs	r3, #1
 8000aec:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL2;
 8000aee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000af2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af6:	463b      	mov	r3, r7
 8000af8:	4618      	mov	r0, r3
 8000afa:	f002 fadb 	bl	80030b4 <HAL_RCCEx_PeriphCLKConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000b04:	f000 f8c0 	bl	8000c88 <Error_Handler>
  }
}
 8000b08:	bf00      	nop
 8000b0a:	37c0      	adds	r7, #192	@ 0xc0
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Timer Period Elapsed Callback
// This function is called everytime the timer's counter is maximized.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b091      	sub	sp, #68	@ 0x44
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	// Check the timer handle
	if (htim == &htim16){
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a14      	ldr	r2, [pc, #80]	@ (8000b6c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d121      	bne.n	8000b64 <HAL_TIM_PeriodElapsedCallback+0x54>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000b20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b24:	4812      	ldr	r0, [pc, #72]	@ (8000b70 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b26:	f001 fa3c 	bl	8001fa2 <HAL_GPIO_TogglePin>
		// We only send this message everytime the LED changes from off to on -- why serial is faster than the led blinking? Solution is this

		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == GPIO_PIN_SET){
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	4811      	ldr	r0, [pc, #68]	@ (8000b74 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b2e:	f001 fa07 	bl	8001f40 <HAL_GPIO_ReadPin>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d115      	bne.n	8000b64 <HAL_TIM_PeriodElapsedCallback+0x54>
			char c[50] = "Timer Elapsed!\n";
 8000b38:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b3a:	f107 040c 	add.w	r4, r7, #12
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	6859      	ldr	r1, [r3, #4]
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	2222      	movs	r2, #34	@ 0x22
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f006 fb75 	bl	8007240 <memset>
			HAL_UART_Transmit(&huart3, (uint8_t *)c, sizeof(c), 100);
 8000b56:	f107 010c 	add.w	r1, r7, #12
 8000b5a:	2364      	movs	r3, #100	@ 0x64
 8000b5c:	2232      	movs	r2, #50	@ 0x32
 8000b5e:	4807      	ldr	r0, [pc, #28]	@ (8000b7c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b60:	f005 fa34 	bl	8005fcc <HAL_UART_Transmit>
		}
	}
}
 8000b64:	bf00      	nop
 8000b66:	3744      	adds	r7, #68	@ 0x44
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd90      	pop	{r4, r7, pc}
 8000b6c:	2400019c 	.word	0x2400019c
 8000b70:	58020400 	.word	0x58020400
 8000b74:	58021000 	.word	0x58021000
 8000b78:	08007b70 	.word	0x08007b70
 8000b7c:	240001e8 	.word	0x240001e8

08000b80 <HAL_SPI_RxCpltCallback>:

// SPI Receive Complete Callback
// This function is called everytime the SPI Receive is completed.
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI6) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <HAL_SPI_RxCpltCallback+0x44>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d113      	bne.n	8000bba <HAL_SPI_RxCpltCallback+0x3a>
        // Data reception complete, print in serial terminal
    	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8000b92:	2102      	movs	r1, #2
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <HAL_SPI_RxCpltCallback+0x48>)
 8000b96:	f001 fa04 	bl	8001fa2 <HAL_GPIO_TogglePin>
    	HAL_UART_Transmit(&huart3, (uint8_t *)rx_data, sizeof(4U), 100);
 8000b9a:	2364      	movs	r3, #100	@ 0x64
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	490b      	ldr	r1, [pc, #44]	@ (8000bcc <HAL_SPI_RxCpltCallback+0x4c>)
 8000ba0:	480b      	ldr	r0, [pc, #44]	@ (8000bd0 <HAL_SPI_RxCpltCallback+0x50>)
 8000ba2:	f005 fa13 	bl	8005fcc <HAL_UART_Transmit>

    	// Single SPI Receive gets the SPI ready for any incoming traffic via SPI
    	 if (HAL_SPI_Receive_IT(&hspi6, (uint8_t*)rx_data, sizeof(4U)) != HAL_OK) {
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	4908      	ldr	r1, [pc, #32]	@ (8000bcc <HAL_SPI_RxCpltCallback+0x4c>)
 8000baa:	480a      	ldr	r0, [pc, #40]	@ (8000bd4 <HAL_SPI_RxCpltCallback+0x54>)
 8000bac:	f004 fa7c 	bl	80050a8 <HAL_SPI_Receive_IT>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_SPI_RxCpltCallback+0x3a>
    	  		// Reception Error
    	  		Error_Handler();
 8000bb6:	f000 f867 	bl	8000c88 <Error_Handler>
    	 }
    }
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	58001400 	.word	0x58001400
 8000bc8:	58021000 	.word	0x58021000
 8000bcc:	2400007c 	.word	0x2400007c
 8000bd0:	240001e8 	.word	0x240001e8
 8000bd4:	24000110 	.word	0x24000110

08000bd8 <HAL_SPI_ErrorCallback>:

// SPI Error Callback
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b090      	sub	sp, #64	@ 0x40
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI6) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c24 <HAL_SPI_ErrorCallback+0x4c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d117      	bne.n	8000c1a <HAL_SPI_ErrorCallback+0x42>
        // Handle SPI error
    	char uart_buf_spi_spi[50] = "SPI Error\n";
 8000bea:	4a0f      	ldr	r2, [pc, #60]	@ (8000c28 <HAL_SPI_ErrorCallback+0x50>)
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	6810      	ldr	r0, [r2, #0]
 8000bf2:	6851      	ldr	r1, [r2, #4]
 8000bf4:	c303      	stmia	r3!, {r0, r1}
 8000bf6:	8911      	ldrh	r1, [r2, #8]
 8000bf8:	7a92      	ldrb	r2, [r2, #10]
 8000bfa:	8019      	strh	r1, [r3, #0]
 8000bfc:	709a      	strb	r2, [r3, #2]
 8000bfe:	f107 0317 	add.w	r3, r7, #23
 8000c02:	2227      	movs	r2, #39	@ 0x27
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f006 fb1a 	bl	8007240 <memset>
    	HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf_spi_spi, sizeof(uart_buf_spi_spi), 100);
 8000c0c:	f107 010c 	add.w	r1, r7, #12
 8000c10:	2364      	movs	r3, #100	@ 0x64
 8000c12:	2232      	movs	r2, #50	@ 0x32
 8000c14:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <HAL_SPI_ErrorCallback+0x54>)
 8000c16:	f005 f9d9 	bl	8005fcc <HAL_UART_Transmit>
    }
}
 8000c1a:	bf00      	nop
 8000c1c:	3740      	adds	r7, #64	@ 0x40
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	58001400 	.word	0x58001400
 8000c28:	08007b80 	.word	0x08007b80
 8000c2c:	240001e8 	.word	0x240001e8

08000c30 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c36:	463b      	mov	r3, r7
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c42:	f000 fd0f 	bl	8001664 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c46:	2301      	movs	r3, #1
 8000c48:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c52:	231f      	movs	r3, #31
 8000c54:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c56:	2387      	movs	r3, #135	@ 0x87
 8000c58:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c62:	2301      	movs	r3, #1
 8000c64:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c66:	2301      	movs	r3, #1
 8000c68:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c72:	463b      	mov	r3, r7
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 fd2d 	bl	80016d4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c7a:	2004      	movs	r0, #4
 8000c7c:	f000 fd0a 	bl	8001694 <HAL_MPU_Enable>

}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Turn LED on permanently
 8000c90:	2201      	movs	r2, #1
 8000c92:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c96:	4802      	ldr	r0, [pc, #8]	@ (8000ca0 <Error_Handler+0x18>)
 8000c98:	f001 f96a 	bl	8001f70 <HAL_GPIO_WritePin>
 8000c9c:	e7f8      	b.n	8000c90 <Error_Handler+0x8>
 8000c9e:	bf00      	nop
 8000ca0:	58020400 	.word	0x58020400

08000ca4 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi6;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000ca8:	4b28      	ldr	r3, [pc, #160]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000caa:	4a29      	ldr	r2, [pc, #164]	@ (8000d50 <MX_SPI3_Init+0xac>)
 8000cac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cae:	4b27      	ldr	r3, [pc, #156]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000cb0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cb4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cb6:	4b25      	ldr	r3, [pc, #148]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cbc:	4b23      	ldr	r3, [pc, #140]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000cbe:	2207      	movs	r2, #7
 8000cc0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cc2:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000cc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000cc8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cca:	4b20      	ldr	r3, [pc, #128]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000ccc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000cd0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000cd4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000cd8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000cdc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ce0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cee:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000cfc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d00:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d08:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d26:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <MX_SPI3_Init+0xa8>)
 8000d3a:	f003 ffe7 	bl	8004d0c <HAL_SPI_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_SPI3_Init+0xa4>
  {
    Error_Handler();
 8000d44:	f7ff ffa0 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	24000088 	.word	0x24000088
 8000d50:	40003c00 	.word	0x40003c00

08000d54 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8000d58:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000d5a:	4a26      	ldr	r2, [pc, #152]	@ (8000df4 <MX_SPI6_Init+0xa0>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_SLAVE;
 8000d5e:	4b24      	ldr	r3, [pc, #144]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000d64:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000d72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d76:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000d7a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d7e:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000d82:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d86:	619a      	str	r2, [r3, #24]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d88:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d94:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000da0:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000da6:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000dac:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000db2:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000db8:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	@ (8000df0 <MX_SPI6_Init+0x9c>)
 8000dde:	f003 ff95 	bl	8004d0c <HAL_SPI_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_SPI6_Init+0x98>
  {
    Error_Handler();
 8000de8:	f7ff ff4e 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24000110 	.word	0x24000110
 8000df4:	58001400 	.word	0x58001400

08000df8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0bc      	sub	sp, #240	@ 0xf0
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e10:	f107 0318 	add.w	r3, r7, #24
 8000e14:	22c0      	movs	r2, #192	@ 0xc0
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f006 fa11 	bl	8007240 <memset>
  if(spiHandle->Instance==SPI3)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a4b      	ldr	r2, [pc, #300]	@ (8000f50 <HAL_SPI_MspInit+0x158>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d14e      	bne.n	8000ec6 <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000e28:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e38:	f107 0318 	add.w	r3, r7, #24
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f002 f939 	bl	80030b4 <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000e48:	f7ff ff1e 	bl	8000c88 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e4c:	4b41      	ldr	r3, [pc, #260]	@ (8000f54 <HAL_SPI_MspInit+0x15c>)
 8000e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e52:	4a40      	ldr	r2, [pc, #256]	@ (8000f54 <HAL_SPI_MspInit+0x15c>)
 8000e54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f54 <HAL_SPI_MspInit+0x15c>)
 8000e5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f54 <HAL_SPI_MspInit+0x15c>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e70:	4a38      	ldr	r2, [pc, #224]	@ (8000f54 <HAL_SPI_MspInit+0x15c>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e7a:	4b36      	ldr	r3, [pc, #216]	@ (8000f54 <HAL_SPI_MspInit+0x15c>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e88:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000e8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ea2:	2306      	movs	r3, #6
 8000ea4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000eac:	4619      	mov	r1, r3
 8000eae:	482a      	ldr	r0, [pc, #168]	@ (8000f58 <HAL_SPI_MspInit+0x160>)
 8000eb0:	f000 fe96 	bl	8001be0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2033      	movs	r0, #51	@ 0x33
 8000eba:	f000 fb9e 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000ebe:	2033      	movs	r0, #51	@ 0x33
 8000ec0:	f000 fbb5 	bl	800162e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8000ec4:	e03f      	b.n	8000f46 <HAL_SPI_MspInit+0x14e>
  else if(spiHandle->Instance==SPI6)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a24      	ldr	r2, [pc, #144]	@ (8000f5c <HAL_SPI_MspInit+0x164>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d13a      	bne.n	8000f46 <HAL_SPI_MspInit+0x14e>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8000ed0:	4b20      	ldr	r3, [pc, #128]	@ (8000f54 <HAL_SPI_MspInit+0x15c>)
 8000ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f54 <HAL_SPI_MspInit+0x15c>)
 8000ed8:	f043 0320 	orr.w	r3, r3, #32
 8000edc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f54 <HAL_SPI_MspInit+0x15c>)
 8000ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ee6:	f003 0320 	and.w	r3, r3, #32
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <HAL_SPI_MspInit+0x15c>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef4:	4a17      	ldr	r2, [pc, #92]	@ (8000f54 <HAL_SPI_MspInit+0x15c>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <HAL_SPI_MspInit+0x15c>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f0c:	2338      	movs	r3, #56	@ 0x38
 8000f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8000f24:	2308      	movs	r3, #8
 8000f26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480b      	ldr	r0, [pc, #44]	@ (8000f60 <HAL_SPI_MspInit+0x168>)
 8000f32:	f000 fe55 	bl	8001be0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2056      	movs	r0, #86	@ 0x56
 8000f3c:	f000 fb5d 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8000f40:	2056      	movs	r0, #86	@ 0x56
 8000f42:	f000 fb74 	bl	800162e <HAL_NVIC_EnableIRQ>
}
 8000f46:	bf00      	nop
 8000f48:	37f0      	adds	r7, #240	@ 0xf0
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40003c00 	.word	0x40003c00
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58020800 	.word	0x58020800
 8000f5c:	58001400 	.word	0x58001400
 8000f60:	58020400 	.word	0x58020400

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <HAL_MspInit+0x30>)
 8000f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f70:	4a08      	ldr	r2, [pc, #32]	@ (8000f94 <HAL_MspInit+0x30>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_MspInit+0x30>)
 8000f7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	58024400 	.word	0x58024400

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <NMI_Handler+0x4>

08000fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <MemManage_Handler+0x4>

08000fb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fee:	f000 f9d9 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <SPI3_IRQHandler+0x10>)
 8000ffe:	f004 f8fd 	bl	80051fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	24000088 	.word	0x24000088

0800100c <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <SPI6_IRQHandler+0x10>)
 8001012:	f004 f8f3 	bl	80051fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	24000110 	.word	0x24000110

08001020 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <TIM16_IRQHandler+0x10>)
 8001026:	f004 fd8d 	bl	8005b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2400019c 	.word	0x2400019c

08001034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800103c:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <_sbrk+0x5c>)
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <_sbrk+0x60>)
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001048:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <_sbrk+0x64>)
 8001052:	4a12      	ldr	r2, [pc, #72]	@ (800109c <_sbrk+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001064:	f006 f8f4 	bl	8007250 <__errno>
 8001068:	4603      	mov	r3, r0
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	e009      	b.n	8001088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <_sbrk+0x64>)
 8001084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	24080000 	.word	0x24080000
 8001094:	00000400 	.word	0x00000400
 8001098:	24000198 	.word	0x24000198
 800109c:	240003c8 	.word	0x240003c8

080010a0 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80010a4:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <MX_TIM16_Init+0x48>)
 80010a6:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <MX_TIM16_Init+0x4c>)
 80010a8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3200-1;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <MX_TIM16_Init+0x48>)
 80010ac:	f640 427f 	movw	r2, #3199	@ 0xc7f
 80010b0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <MX_TIM16_Init+0x48>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 80010b8:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <MX_TIM16_Init+0x48>)
 80010ba:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010be:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_TIM16_Init+0x48>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80010c6:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <MX_TIM16_Init+0x48>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <MX_TIM16_Init+0x48>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_TIM16_Init+0x48>)
 80010d4:	f004 fc67 	bl	80059a6 <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80010de:	f7ff fdd3 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2400019c 	.word	0x2400019c
 80010ec:	40014400 	.word	0x40014400

080010f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001138 <HAL_TIM_Base_MspInit+0x48>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d116      	bne.n	8001130 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <HAL_TIM_Base_MspInit+0x4c>)
 8001104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001108:	4a0c      	ldr	r2, [pc, #48]	@ (800113c <HAL_TIM_Base_MspInit+0x4c>)
 800110a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <HAL_TIM_Base_MspInit+0x4c>)
 8001114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2075      	movs	r0, #117	@ 0x75
 8001126:	f000 fa68 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800112a:	2075      	movs	r0, #117	@ 0x75
 800112c:	f000 fa7f 	bl	800162e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40014400 	.word	0x40014400
 800113c:	58024400 	.word	0x58024400

08001140 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001144:	4b22      	ldr	r3, [pc, #136]	@ (80011d0 <MX_USART3_UART_Init+0x90>)
 8001146:	4a23      	ldr	r2, [pc, #140]	@ (80011d4 <MX_USART3_UART_Init+0x94>)
 8001148:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800114a:	4b21      	ldr	r3, [pc, #132]	@ (80011d0 <MX_USART3_UART_Init+0x90>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <MX_USART3_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b1d      	ldr	r3, [pc, #116]	@ (80011d0 <MX_USART3_UART_Init+0x90>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800115e:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <MX_USART3_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <MX_USART3_UART_Init+0x90>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <MX_USART3_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <MX_USART3_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001176:	4b16      	ldr	r3, [pc, #88]	@ (80011d0 <MX_USART3_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800117c:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <MX_USART3_UART_Init+0x90>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001182:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <MX_USART3_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001188:	4811      	ldr	r0, [pc, #68]	@ (80011d0 <MX_USART3_UART_Init+0x90>)
 800118a:	f004 fecf 	bl	8005f2c <HAL_UART_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001194:	f7ff fd78 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001198:	2100      	movs	r1, #0
 800119a:	480d      	ldr	r0, [pc, #52]	@ (80011d0 <MX_USART3_UART_Init+0x90>)
 800119c:	f005 ff65 	bl	800706a <HAL_UARTEx_SetTxFifoThreshold>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011a6:	f7ff fd6f 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011aa:	2100      	movs	r1, #0
 80011ac:	4808      	ldr	r0, [pc, #32]	@ (80011d0 <MX_USART3_UART_Init+0x90>)
 80011ae:	f005 ff9a 	bl	80070e6 <HAL_UARTEx_SetRxFifoThreshold>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011b8:	f7ff fd66 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <MX_USART3_UART_Init+0x90>)
 80011be:	f005 ff1b 	bl	8006ff8 <HAL_UARTEx_DisableFifoMode>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011c8:	f7ff fd5e 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	240001e8 	.word	0x240001e8
 80011d4:	40004800 	.word	0x40004800

080011d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	@ 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001260 <HAL_UART_MspInit+0x88>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d12e      	bne.n	8001258 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <HAL_UART_MspInit+0x8c>)
 80011fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001200:	4a18      	ldr	r2, [pc, #96]	@ (8001264 <HAL_UART_MspInit+0x8c>)
 8001202:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001206:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <HAL_UART_MspInit+0x8c>)
 800120c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001210:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <HAL_UART_MspInit+0x8c>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121e:	4a11      	ldr	r2, [pc, #68]	@ (8001264 <HAL_UART_MspInit+0x8c>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001228:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <HAL_UART_MspInit+0x8c>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001236:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001248:	2307      	movs	r3, #7
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4805      	ldr	r0, [pc, #20]	@ (8001268 <HAL_UART_MspInit+0x90>)
 8001254:	f000 fcc4 	bl	8001be0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	@ 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40004800 	.word	0x40004800
 8001264:	58024400 	.word	0x58024400
 8001268:	58020c00 	.word	0x58020c00

0800126c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001270:	f7ff f9fe 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001274:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001276:	490d      	ldr	r1, [pc, #52]	@ (80012ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001278:	4a0d      	ldr	r2, [pc, #52]	@ (80012b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800128c:	4c0a      	ldr	r4, [pc, #40]	@ (80012b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129a:	f005 ffdf 	bl	800725c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129e:	f7ff faf7 	bl	8000890 <main>
  bx  lr
 80012a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012ac:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80012b0:	08007c08 	.word	0x08007c08
  ldr r2, =_sbss
 80012b4:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80012b8:	240003c8 	.word	0x240003c8

080012bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC3_IRQHandler>
	...

080012c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c6:	2003      	movs	r0, #3
 80012c8:	f000 f98c 	bl	80015e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012cc:	f001 fd1c 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 80012d0:	4602      	mov	r2, r0
 80012d2:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <HAL_Init+0x68>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	4913      	ldr	r1, [pc, #76]	@ (800132c <HAL_Init+0x6c>)
 80012de:	5ccb      	ldrb	r3, [r1, r3]
 80012e0:	f003 031f 	and.w	r3, r3, #31
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
 80012e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <HAL_Init+0x68>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	4a0e      	ldr	r2, [pc, #56]	@ (800132c <HAL_Init+0x6c>)
 80012f4:	5cd3      	ldrb	r3, [r2, r3]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001300:	4a0b      	ldr	r2, [pc, #44]	@ (8001330 <HAL_Init+0x70>)
 8001302:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001304:	4a0b      	ldr	r2, [pc, #44]	@ (8001334 <HAL_Init+0x74>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800130a:	200f      	movs	r0, #15
 800130c:	f000 f814 	bl	8001338 <HAL_InitTick>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e002      	b.n	8001320 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800131a:	f7ff fe23 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	58024400 	.word	0x58024400
 800132c:	08007b8c 	.word	0x08007b8c
 8001330:	24000004 	.word	0x24000004
 8001334:	24000000 	.word	0x24000000

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <HAL_InitTick+0x60>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e021      	b.n	8001390 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800134c:	4b13      	ldr	r3, [pc, #76]	@ (800139c <HAL_InitTick+0x64>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <HAL_InitTick+0x60>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f971 	bl	800164a <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 f93b 	bl	80015fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001384:	4a06      	ldr	r2, [pc, #24]	@ (80013a0 <HAL_InitTick+0x68>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2400000c 	.word	0x2400000c
 800139c:	24000000 	.word	0x24000000
 80013a0:	24000008 	.word	0x24000008

080013a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_IncTick+0x20>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_IncTick+0x24>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a04      	ldr	r2, [pc, #16]	@ (80013c8 <HAL_IncTick+0x24>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	2400000c 	.word	0x2400000c
 80013c8:	2400027c 	.word	0x2400027c

080013cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b03      	ldr	r3, [pc, #12]	@ (80013e0 <HAL_GetTick+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	2400027c 	.word	0x2400027c

080013e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ec:	f7ff ffee 	bl	80013cc <HAL_GetTick>
 80013f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fc:	d005      	beq.n	800140a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <HAL_Delay+0x44>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800140a:	bf00      	nop
 800140c:	f7ff ffde 	bl	80013cc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d8f7      	bhi.n	800140c <HAL_Delay+0x28>
  {
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2400000c 	.word	0x2400000c

0800142c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001430:	4b03      	ldr	r3, [pc, #12]	@ (8001440 <HAL_GetREVID+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	0c1b      	lsrs	r3, r3, #16
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	5c001000 	.word	0x5c001000

08001444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <__NVIC_SetPriorityGrouping+0x40>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800146c:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	4313      	orrs	r3, r2
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <__NVIC_SetPriorityGrouping+0x40>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00
 8001488:	05fa0000 	.word	0x05fa0000

0800148c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db0b      	blt.n	80014d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	4907      	ldr	r1, [pc, #28]	@ (80014e0 <__NVIC_EnableIRQ+0x38>)
 80014c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	2001      	movs	r0, #1
 80014ca:	fa00 f202 	lsl.w	r2, r0, r2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	@ (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	@ (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	@ 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
         );
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	@ 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015b0:	d301      	bcc.n	80015b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00f      	b.n	80015d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b6:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <SysTick_Config+0x40>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015be:	210f      	movs	r1, #15
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f7ff ff8e 	bl	80014e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c8:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <SysTick_Config+0x40>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ce:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <SysTick_Config+0x40>)
 80015d0:	2207      	movs	r2, #7
 80015d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	e000e010 	.word	0xe000e010

080015e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ff29 	bl	8001444 <__NVIC_SetPriorityGrouping>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001608:	f7ff ff40 	bl	800148c <__NVIC_GetPriorityGrouping>
 800160c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	6978      	ldr	r0, [r7, #20]
 8001614:	f7ff ff90 	bl	8001538 <NVIC_EncodePriority>
 8001618:	4602      	mov	r2, r0
 800161a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff5f 	bl	80014e4 <__NVIC_SetPriority>
}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff33 	bl	80014a8 <__NVIC_EnableIRQ>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ffa4 	bl	80015a0 <SysTick_Config>
 8001658:	4603      	mov	r3, r0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001668:	f3bf 8f5f 	dmb	sy
}
 800166c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800166e:	4b07      	ldr	r3, [pc, #28]	@ (800168c <HAL_MPU_Disable+0x28>)
 8001670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001672:	4a06      	ldr	r2, [pc, #24]	@ (800168c <HAL_MPU_Disable+0x28>)
 8001674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001678:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800167a:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <HAL_MPU_Disable+0x2c>)
 800167c:	2200      	movs	r2, #0
 800167e:	605a      	str	r2, [r3, #4]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00
 8001690:	e000ed90 	.word	0xe000ed90

08001694 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800169c:	4a0b      	ldr	r2, [pc, #44]	@ (80016cc <HAL_MPU_Enable+0x38>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <HAL_MPU_Enable+0x3c>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016aa:	4a09      	ldr	r2, [pc, #36]	@ (80016d0 <HAL_MPU_Enable+0x3c>)
 80016ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016b0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80016b2:	f3bf 8f4f 	dsb	sy
}
 80016b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016b8:	f3bf 8f6f 	isb	sy
}
 80016bc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed90 	.word	0xe000ed90
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	785a      	ldrb	r2, [r3, #1]
 80016e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <HAL_MPU_ConfigRegion+0x7c>)
 80016e2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80016e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <HAL_MPU_ConfigRegion+0x7c>)
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	4a19      	ldr	r2, [pc, #100]	@ (8001750 <HAL_MPU_ConfigRegion+0x7c>)
 80016ea:	f023 0301 	bic.w	r3, r3, #1
 80016ee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80016f0:	4a17      	ldr	r2, [pc, #92]	@ (8001750 <HAL_MPU_ConfigRegion+0x7c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7b1b      	ldrb	r3, [r3, #12]
 80016fc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7adb      	ldrb	r3, [r3, #11]
 8001702:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001704:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7a9b      	ldrb	r3, [r3, #10]
 800170a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800170c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7b5b      	ldrb	r3, [r3, #13]
 8001712:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001714:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7b9b      	ldrb	r3, [r3, #14]
 800171a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800171c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7bdb      	ldrb	r3, [r3, #15]
 8001722:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001724:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7a5b      	ldrb	r3, [r3, #9]
 800172a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800172c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7a1b      	ldrb	r3, [r3, #8]
 8001732:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001734:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800173c:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800173e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001740:	6113      	str	r3, [r2, #16]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed90 	.word	0xe000ed90

08001754 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e237      	b.n	8001bd6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d004      	beq.n	800177c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2280      	movs	r2, #128	@ 0x80
 8001776:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e22c      	b.n	8001bd6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a5c      	ldr	r2, [pc, #368]	@ (80018f4 <HAL_DMA_Abort_IT+0x1a0>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d04a      	beq.n	800181c <HAL_DMA_Abort_IT+0xc8>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a5b      	ldr	r2, [pc, #364]	@ (80018f8 <HAL_DMA_Abort_IT+0x1a4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d045      	beq.n	800181c <HAL_DMA_Abort_IT+0xc8>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a59      	ldr	r2, [pc, #356]	@ (80018fc <HAL_DMA_Abort_IT+0x1a8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d040      	beq.n	800181c <HAL_DMA_Abort_IT+0xc8>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a58      	ldr	r2, [pc, #352]	@ (8001900 <HAL_DMA_Abort_IT+0x1ac>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d03b      	beq.n	800181c <HAL_DMA_Abort_IT+0xc8>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a56      	ldr	r2, [pc, #344]	@ (8001904 <HAL_DMA_Abort_IT+0x1b0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d036      	beq.n	800181c <HAL_DMA_Abort_IT+0xc8>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a55      	ldr	r2, [pc, #340]	@ (8001908 <HAL_DMA_Abort_IT+0x1b4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d031      	beq.n	800181c <HAL_DMA_Abort_IT+0xc8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a53      	ldr	r2, [pc, #332]	@ (800190c <HAL_DMA_Abort_IT+0x1b8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d02c      	beq.n	800181c <HAL_DMA_Abort_IT+0xc8>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a52      	ldr	r2, [pc, #328]	@ (8001910 <HAL_DMA_Abort_IT+0x1bc>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d027      	beq.n	800181c <HAL_DMA_Abort_IT+0xc8>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a50      	ldr	r2, [pc, #320]	@ (8001914 <HAL_DMA_Abort_IT+0x1c0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d022      	beq.n	800181c <HAL_DMA_Abort_IT+0xc8>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a4f      	ldr	r2, [pc, #316]	@ (8001918 <HAL_DMA_Abort_IT+0x1c4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d01d      	beq.n	800181c <HAL_DMA_Abort_IT+0xc8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a4d      	ldr	r2, [pc, #308]	@ (800191c <HAL_DMA_Abort_IT+0x1c8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d018      	beq.n	800181c <HAL_DMA_Abort_IT+0xc8>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a4c      	ldr	r2, [pc, #304]	@ (8001920 <HAL_DMA_Abort_IT+0x1cc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d013      	beq.n	800181c <HAL_DMA_Abort_IT+0xc8>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001924 <HAL_DMA_Abort_IT+0x1d0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00e      	beq.n	800181c <HAL_DMA_Abort_IT+0xc8>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a49      	ldr	r2, [pc, #292]	@ (8001928 <HAL_DMA_Abort_IT+0x1d4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d009      	beq.n	800181c <HAL_DMA_Abort_IT+0xc8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a47      	ldr	r2, [pc, #284]	@ (800192c <HAL_DMA_Abort_IT+0x1d8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d004      	beq.n	800181c <HAL_DMA_Abort_IT+0xc8>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a46      	ldr	r2, [pc, #280]	@ (8001930 <HAL_DMA_Abort_IT+0x1dc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_DMA_Abort_IT+0xcc>
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <HAL_DMA_Abort_IT+0xce>
 8001820:	2300      	movs	r3, #0
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8086 	beq.w	8001934 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2204      	movs	r2, #4
 800182c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a2f      	ldr	r2, [pc, #188]	@ (80018f4 <HAL_DMA_Abort_IT+0x1a0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d04a      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x17c>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a2e      	ldr	r2, [pc, #184]	@ (80018f8 <HAL_DMA_Abort_IT+0x1a4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d045      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x17c>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a2c      	ldr	r2, [pc, #176]	@ (80018fc <HAL_DMA_Abort_IT+0x1a8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d040      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x17c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a2b      	ldr	r2, [pc, #172]	@ (8001900 <HAL_DMA_Abort_IT+0x1ac>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d03b      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x17c>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a29      	ldr	r2, [pc, #164]	@ (8001904 <HAL_DMA_Abort_IT+0x1b0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d036      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x17c>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a28      	ldr	r2, [pc, #160]	@ (8001908 <HAL_DMA_Abort_IT+0x1b4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d031      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x17c>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a26      	ldr	r2, [pc, #152]	@ (800190c <HAL_DMA_Abort_IT+0x1b8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d02c      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x17c>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a25      	ldr	r2, [pc, #148]	@ (8001910 <HAL_DMA_Abort_IT+0x1bc>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d027      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x17c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a23      	ldr	r2, [pc, #140]	@ (8001914 <HAL_DMA_Abort_IT+0x1c0>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d022      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x17c>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a22      	ldr	r2, [pc, #136]	@ (8001918 <HAL_DMA_Abort_IT+0x1c4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d01d      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x17c>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a20      	ldr	r2, [pc, #128]	@ (800191c <HAL_DMA_Abort_IT+0x1c8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d018      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x17c>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001920 <HAL_DMA_Abort_IT+0x1cc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d013      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x17c>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001924 <HAL_DMA_Abort_IT+0x1d0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00e      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x17c>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001928 <HAL_DMA_Abort_IT+0x1d4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d009      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x17c>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a1a      	ldr	r2, [pc, #104]	@ (800192c <HAL_DMA_Abort_IT+0x1d8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d004      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x17c>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a19      	ldr	r2, [pc, #100]	@ (8001930 <HAL_DMA_Abort_IT+0x1dc>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d108      	bne.n	80018e2 <HAL_DMA_Abort_IT+0x18e>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	e178      	b.n	8001bd4 <HAL_DMA_Abort_IT+0x480>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0201 	bic.w	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e16f      	b.n	8001bd4 <HAL_DMA_Abort_IT+0x480>
 80018f4:	40020010 	.word	0x40020010
 80018f8:	40020028 	.word	0x40020028
 80018fc:	40020040 	.word	0x40020040
 8001900:	40020058 	.word	0x40020058
 8001904:	40020070 	.word	0x40020070
 8001908:	40020088 	.word	0x40020088
 800190c:	400200a0 	.word	0x400200a0
 8001910:	400200b8 	.word	0x400200b8
 8001914:	40020410 	.word	0x40020410
 8001918:	40020428 	.word	0x40020428
 800191c:	40020440 	.word	0x40020440
 8001920:	40020458 	.word	0x40020458
 8001924:	40020470 	.word	0x40020470
 8001928:	40020488 	.word	0x40020488
 800192c:	400204a0 	.word	0x400204a0
 8001930:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 020e 	bic.w	r2, r2, #14
 8001942:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a6c      	ldr	r2, [pc, #432]	@ (8001afc <HAL_DMA_Abort_IT+0x3a8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d04a      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x290>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a6b      	ldr	r2, [pc, #428]	@ (8001b00 <HAL_DMA_Abort_IT+0x3ac>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d045      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x290>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a69      	ldr	r2, [pc, #420]	@ (8001b04 <HAL_DMA_Abort_IT+0x3b0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d040      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x290>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a68      	ldr	r2, [pc, #416]	@ (8001b08 <HAL_DMA_Abort_IT+0x3b4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d03b      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x290>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a66      	ldr	r2, [pc, #408]	@ (8001b0c <HAL_DMA_Abort_IT+0x3b8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d036      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x290>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a65      	ldr	r2, [pc, #404]	@ (8001b10 <HAL_DMA_Abort_IT+0x3bc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d031      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x290>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a63      	ldr	r2, [pc, #396]	@ (8001b14 <HAL_DMA_Abort_IT+0x3c0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d02c      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x290>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a62      	ldr	r2, [pc, #392]	@ (8001b18 <HAL_DMA_Abort_IT+0x3c4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d027      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x290>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a60      	ldr	r2, [pc, #384]	@ (8001b1c <HAL_DMA_Abort_IT+0x3c8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d022      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x290>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001b20 <HAL_DMA_Abort_IT+0x3cc>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d01d      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x290>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001b24 <HAL_DMA_Abort_IT+0x3d0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d018      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x290>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a5c      	ldr	r2, [pc, #368]	@ (8001b28 <HAL_DMA_Abort_IT+0x3d4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d013      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x290>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a5a      	ldr	r2, [pc, #360]	@ (8001b2c <HAL_DMA_Abort_IT+0x3d8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00e      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x290>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a59      	ldr	r2, [pc, #356]	@ (8001b30 <HAL_DMA_Abort_IT+0x3dc>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d009      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x290>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a57      	ldr	r2, [pc, #348]	@ (8001b34 <HAL_DMA_Abort_IT+0x3e0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d004      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x290>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a56      	ldr	r2, [pc, #344]	@ (8001b38 <HAL_DMA_Abort_IT+0x3e4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d108      	bne.n	80019f6 <HAL_DMA_Abort_IT+0x2a2>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0201 	bic.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e007      	b.n	8001a06 <HAL_DMA_Abort_IT+0x2b2>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0201 	bic.w	r2, r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a3c      	ldr	r2, [pc, #240]	@ (8001afc <HAL_DMA_Abort_IT+0x3a8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d072      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a3a      	ldr	r2, [pc, #232]	@ (8001b00 <HAL_DMA_Abort_IT+0x3ac>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d06d      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a39      	ldr	r2, [pc, #228]	@ (8001b04 <HAL_DMA_Abort_IT+0x3b0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d068      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a37      	ldr	r2, [pc, #220]	@ (8001b08 <HAL_DMA_Abort_IT+0x3b4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d063      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a36      	ldr	r2, [pc, #216]	@ (8001b0c <HAL_DMA_Abort_IT+0x3b8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d05e      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a34      	ldr	r2, [pc, #208]	@ (8001b10 <HAL_DMA_Abort_IT+0x3bc>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d059      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a33      	ldr	r2, [pc, #204]	@ (8001b14 <HAL_DMA_Abort_IT+0x3c0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d054      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a31      	ldr	r2, [pc, #196]	@ (8001b18 <HAL_DMA_Abort_IT+0x3c4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d04f      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a30      	ldr	r2, [pc, #192]	@ (8001b1c <HAL_DMA_Abort_IT+0x3c8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d04a      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a2e      	ldr	r2, [pc, #184]	@ (8001b20 <HAL_DMA_Abort_IT+0x3cc>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d045      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001b24 <HAL_DMA_Abort_IT+0x3d0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d040      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a2b      	ldr	r2, [pc, #172]	@ (8001b28 <HAL_DMA_Abort_IT+0x3d4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d03b      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a2a      	ldr	r2, [pc, #168]	@ (8001b2c <HAL_DMA_Abort_IT+0x3d8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d036      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a28      	ldr	r2, [pc, #160]	@ (8001b30 <HAL_DMA_Abort_IT+0x3dc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d031      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a27      	ldr	r2, [pc, #156]	@ (8001b34 <HAL_DMA_Abort_IT+0x3e0>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d02c      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a25      	ldr	r2, [pc, #148]	@ (8001b38 <HAL_DMA_Abort_IT+0x3e4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d027      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a24      	ldr	r2, [pc, #144]	@ (8001b3c <HAL_DMA_Abort_IT+0x3e8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d022      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a22      	ldr	r2, [pc, #136]	@ (8001b40 <HAL_DMA_Abort_IT+0x3ec>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d01d      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a21      	ldr	r2, [pc, #132]	@ (8001b44 <HAL_DMA_Abort_IT+0x3f0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d018      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b48 <HAL_DMA_Abort_IT+0x3f4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b4c <HAL_DMA_Abort_IT+0x3f8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d00e      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1c      	ldr	r2, [pc, #112]	@ (8001b50 <HAL_DMA_Abort_IT+0x3fc>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d009      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b54 <HAL_DMA_Abort_IT+0x400>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d004      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x3a2>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a19      	ldr	r2, [pc, #100]	@ (8001b58 <HAL_DMA_Abort_IT+0x404>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d132      	bne.n	8001b5c <HAL_DMA_Abort_IT+0x408>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e031      	b.n	8001b5e <HAL_DMA_Abort_IT+0x40a>
 8001afa:	bf00      	nop
 8001afc:	40020010 	.word	0x40020010
 8001b00:	40020028 	.word	0x40020028
 8001b04:	40020040 	.word	0x40020040
 8001b08:	40020058 	.word	0x40020058
 8001b0c:	40020070 	.word	0x40020070
 8001b10:	40020088 	.word	0x40020088
 8001b14:	400200a0 	.word	0x400200a0
 8001b18:	400200b8 	.word	0x400200b8
 8001b1c:	40020410 	.word	0x40020410
 8001b20:	40020428 	.word	0x40020428
 8001b24:	40020440 	.word	0x40020440
 8001b28:	40020458 	.word	0x40020458
 8001b2c:	40020470 	.word	0x40020470
 8001b30:	40020488 	.word	0x40020488
 8001b34:	400204a0 	.word	0x400204a0
 8001b38:	400204b8 	.word	0x400204b8
 8001b3c:	58025408 	.word	0x58025408
 8001b40:	5802541c 	.word	0x5802541c
 8001b44:	58025430 	.word	0x58025430
 8001b48:	58025444 	.word	0x58025444
 8001b4c:	58025458 	.word	0x58025458
 8001b50:	5802546c 	.word	0x5802546c
 8001b54:	58025480 	.word	0x58025480
 8001b58:	58025494 	.word	0x58025494
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d028      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b70:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b76:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7c:	f003 031f 	and.w	r3, r3, #31
 8001b80:	2201      	movs	r2, #1
 8001b82:	409a      	lsls	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001b90:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00c      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ba8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001bb2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	@ 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bee:	4b89      	ldr	r3, [pc, #548]	@ (8001e14 <HAL_GPIO_Init+0x234>)
 8001bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bf2:	e194      	b.n	8001f1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8186 	beq.w	8001f18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d005      	beq.n	8001c24 <HAL_GPIO_Init+0x44>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d130      	bne.n	8001c86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	f003 0201 	and.w	r2, r3, #1
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d017      	beq.n	8001cc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d123      	bne.n	8001d16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	691a      	ldr	r2, [r3, #16]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	08da      	lsrs	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3208      	adds	r2, #8
 8001d10:	69b9      	ldr	r1, [r7, #24]
 8001d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0203 	and.w	r2, r3, #3
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80e0 	beq.w	8001f18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d58:	4b2f      	ldr	r3, [pc, #188]	@ (8001e18 <HAL_GPIO_Init+0x238>)
 8001d5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d5e:	4a2e      	ldr	r2, [pc, #184]	@ (8001e18 <HAL_GPIO_Init+0x238>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d68:	4b2b      	ldr	r3, [pc, #172]	@ (8001e18 <HAL_GPIO_Init+0x238>)
 8001d6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d76:	4a29      	ldr	r2, [pc, #164]	@ (8001e1c <HAL_GPIO_Init+0x23c>)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a20      	ldr	r2, [pc, #128]	@ (8001e20 <HAL_GPIO_Init+0x240>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d052      	beq.n	8001e48 <HAL_GPIO_Init+0x268>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e24 <HAL_GPIO_Init+0x244>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d031      	beq.n	8001e0e <HAL_GPIO_Init+0x22e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a1e      	ldr	r2, [pc, #120]	@ (8001e28 <HAL_GPIO_Init+0x248>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d02b      	beq.n	8001e0a <HAL_GPIO_Init+0x22a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e2c <HAL_GPIO_Init+0x24c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d025      	beq.n	8001e06 <HAL_GPIO_Init+0x226>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8001e30 <HAL_GPIO_Init+0x250>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d01f      	beq.n	8001e02 <HAL_GPIO_Init+0x222>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e34 <HAL_GPIO_Init+0x254>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d019      	beq.n	8001dfe <HAL_GPIO_Init+0x21e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8001e38 <HAL_GPIO_Init+0x258>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_GPIO_Init+0x21a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a19      	ldr	r2, [pc, #100]	@ (8001e3c <HAL_GPIO_Init+0x25c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00d      	beq.n	8001df6 <HAL_GPIO_Init+0x216>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a18      	ldr	r2, [pc, #96]	@ (8001e40 <HAL_GPIO_Init+0x260>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d007      	beq.n	8001df2 <HAL_GPIO_Init+0x212>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a17      	ldr	r2, [pc, #92]	@ (8001e44 <HAL_GPIO_Init+0x264>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d101      	bne.n	8001dee <HAL_GPIO_Init+0x20e>
 8001dea:	2309      	movs	r3, #9
 8001dec:	e02d      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001dee:	230a      	movs	r3, #10
 8001df0:	e02b      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001df2:	2308      	movs	r3, #8
 8001df4:	e029      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001df6:	2307      	movs	r3, #7
 8001df8:	e027      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001dfa:	2306      	movs	r3, #6
 8001dfc:	e025      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001dfe:	2305      	movs	r3, #5
 8001e00:	e023      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001e02:	2304      	movs	r3, #4
 8001e04:	e021      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001e06:	2303      	movs	r3, #3
 8001e08:	e01f      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e01d      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e01b      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001e12:	bf00      	nop
 8001e14:	58000080 	.word	0x58000080
 8001e18:	58024400 	.word	0x58024400
 8001e1c:	58000400 	.word	0x58000400
 8001e20:	58020000 	.word	0x58020000
 8001e24:	58020400 	.word	0x58020400
 8001e28:	58020800 	.word	0x58020800
 8001e2c:	58020c00 	.word	0x58020c00
 8001e30:	58021000 	.word	0x58021000
 8001e34:	58021400 	.word	0x58021400
 8001e38:	58021800 	.word	0x58021800
 8001e3c:	58021c00 	.word	0x58021c00
 8001e40:	58022000 	.word	0x58022000
 8001e44:	58022400 	.word	0x58022400
 8001e48:	2300      	movs	r3, #0
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	f002 0203 	and.w	r2, r2, #3
 8001e50:	0092      	lsls	r2, r2, #2
 8001e52:	4093      	lsls	r3, r2
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e5a:	4938      	ldr	r1, [pc, #224]	@ (8001f3c <HAL_GPIO_Init+0x35c>)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ebc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f47f ae63 	bne.w	8001bf4 <HAL_GPIO_Init+0x14>
  }
}
 8001f2e:	bf00      	nop
 8001f30:	bf00      	nop
 8001f32:	3724      	adds	r7, #36	@ 0x24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	58000400 	.word	0x58000400

08001f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	887b      	ldrh	r3, [r7, #2]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e001      	b.n	8001f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	807b      	strh	r3, [r7, #2]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f80:	787b      	ldrb	r3, [r7, #1]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f8c:	e003      	b.n	8001f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f8e:	887b      	ldrh	r3, [r7, #2]
 8001f90:	041a      	lsls	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	619a      	str	r2, [r3, #24]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fb4:	887a      	ldrh	r2, [r7, #2]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	041a      	lsls	r2, r3, #16
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	887b      	ldrh	r3, [r7, #2]
 8001fc2:	400b      	ands	r3, r1
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	619a      	str	r2, [r3, #24]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001fe0:	4a08      	ldr	r2, [pc, #32]	@ (8002004 <HAL_HSEM_FastTake+0x2c>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3320      	adds	r3, #32
 8001fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fea:	4a07      	ldr	r2, [pc, #28]	@ (8002008 <HAL_HSEM_FastTake+0x30>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d101      	bne.n	8001ff4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e000      	b.n	8001ff6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	58026400 	.word	0x58026400
 8002008:	80000300 	.word	0x80000300

0800200c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002016:	4906      	ldr	r1, [pc, #24]	@ (8002030 <HAL_HSEM_Release+0x24>)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	58026400 	.word	0x58026400

08002034 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800203c:	4b29      	ldr	r3, [pc, #164]	@ (80020e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	2b06      	cmp	r3, #6
 8002046:	d00a      	beq.n	800205e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002048:	4b26      	ldr	r3, [pc, #152]	@ (80020e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e040      	b.n	80020dc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e03e      	b.n	80020dc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800205e:	4b21      	ldr	r3, [pc, #132]	@ (80020e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002066:	491f      	ldr	r1, [pc, #124]	@ (80020e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4313      	orrs	r3, r2
 800206c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800206e:	f7ff f9ad 	bl	80013cc <HAL_GetTick>
 8002072:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002074:	e009      	b.n	800208a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002076:	f7ff f9a9 	bl	80013cc <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002084:	d901      	bls.n	800208a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e028      	b.n	80020dc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800208a:	4b16      	ldr	r3, [pc, #88]	@ (80020e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002096:	d1ee      	bne.n	8002076 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b1e      	cmp	r3, #30
 800209c:	d008      	beq.n	80020b0 <HAL_PWREx_ConfigSupply+0x7c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80020a2:	d005      	beq.n	80020b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b1d      	cmp	r3, #29
 80020a8:	d002      	beq.n	80020b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b2d      	cmp	r3, #45	@ 0x2d
 80020ae:	d114      	bne.n	80020da <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80020b0:	f7ff f98c 	bl	80013cc <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80020b6:	e009      	b.n	80020cc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020b8:	f7ff f988 	bl	80013cc <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020c6:	d901      	bls.n	80020cc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e007      	b.n	80020dc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80020cc:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <HAL_PWREx_ConfigSupply+0xb0>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d8:	d1ee      	bne.n	80020b8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	58024800 	.word	0x58024800

080020e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08c      	sub	sp, #48	@ 0x30
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f000 bc48 	b.w	800298c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 8088 	beq.w	800221a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210a:	4b99      	ldr	r3, [pc, #612]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002112:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002114:	4b96      	ldr	r3, [pc, #600]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 8002116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002118:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800211a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800211c:	2b10      	cmp	r3, #16
 800211e:	d007      	beq.n	8002130 <HAL_RCC_OscConfig+0x48>
 8002120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002122:	2b18      	cmp	r3, #24
 8002124:	d111      	bne.n	800214a <HAL_RCC_OscConfig+0x62>
 8002126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d10c      	bne.n	800214a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	4b8f      	ldr	r3, [pc, #572]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d06d      	beq.n	8002218 <HAL_RCC_OscConfig+0x130>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d169      	bne.n	8002218 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	f000 bc21 	b.w	800298c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x7a>
 8002154:	4b86      	ldr	r3, [pc, #536]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a85      	ldr	r2, [pc, #532]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 800215a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e02e      	b.n	80021c0 <HAL_RCC_OscConfig+0xd8>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x9c>
 800216a:	4b81      	ldr	r3, [pc, #516]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a80      	ldr	r2, [pc, #512]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 8002170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b7e      	ldr	r3, [pc, #504]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a7d      	ldr	r2, [pc, #500]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 800217c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e01d      	b.n	80021c0 <HAL_RCC_OscConfig+0xd8>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0xc0>
 800218e:	4b78      	ldr	r3, [pc, #480]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a77      	ldr	r2, [pc, #476]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b75      	ldr	r3, [pc, #468]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a74      	ldr	r2, [pc, #464]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 80021a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0xd8>
 80021a8:	4b71      	ldr	r3, [pc, #452]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a70      	ldr	r2, [pc, #448]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 80021ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b6e      	ldr	r3, [pc, #440]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a6d      	ldr	r2, [pc, #436]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 80021ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7ff f900 	bl	80013cc <HAL_GetTick>
 80021cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7ff f8fc 	bl	80013cc <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	@ 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e3d4      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021e2:	4b63      	ldr	r3, [pc, #396]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0xe8>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7ff f8ec 	bl	80013cc <HAL_GetTick>
 80021f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff f8e8 	bl	80013cc <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	@ 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e3c0      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800220a:	4b59      	ldr	r3, [pc, #356]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x110>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 80ca 	beq.w	80023bc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002228:	4b51      	ldr	r3, [pc, #324]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002230:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002232:	4b4f      	ldr	r3, [pc, #316]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 8002234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002236:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_RCC_OscConfig+0x166>
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	2b18      	cmp	r3, #24
 8002242:	d156      	bne.n	80022f2 <HAL_RCC_OscConfig+0x20a>
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d151      	bne.n	80022f2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800224e:	4b48      	ldr	r3, [pc, #288]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_RCC_OscConfig+0x17e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e392      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002266:	4b42      	ldr	r3, [pc, #264]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 0219 	bic.w	r2, r3, #25
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	493f      	ldr	r1, [pc, #252]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7ff f8a8 	bl	80013cc <HAL_GetTick>
 800227c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002280:	f7ff f8a4 	bl	80013cc <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e37c      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002292:	4b37      	ldr	r3, [pc, #220]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229e:	f7ff f8c5 	bl	800142c <HAL_GetREVID>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d817      	bhi.n	80022dc <HAL_RCC_OscConfig+0x1f4>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	2b40      	cmp	r3, #64	@ 0x40
 80022b2:	d108      	bne.n	80022c6 <HAL_RCC_OscConfig+0x1de>
 80022b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80022bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 80022be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022c2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c4:	e07a      	b.n	80023bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	031b      	lsls	r3, r3, #12
 80022d4:	4926      	ldr	r1, [pc, #152]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022da:	e06f      	b.n	80023bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022dc:	4b24      	ldr	r3, [pc, #144]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	061b      	lsls	r3, r3, #24
 80022ea:	4921      	ldr	r1, [pc, #132]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f0:	e064      	b.n	80023bc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d047      	beq.n	800238a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 0219 	bic.w	r2, r3, #25
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	491a      	ldr	r1, [pc, #104]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 8002308:	4313      	orrs	r3, r2
 800230a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7ff f85e 	bl	80013cc <HAL_GetTick>
 8002310:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002314:	f7ff f85a 	bl	80013cc <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e332      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002326:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	f7ff f87b 	bl	800142c <HAL_GetREVID>
 8002336:	4603      	mov	r3, r0
 8002338:	f241 0203 	movw	r2, #4099	@ 0x1003
 800233c:	4293      	cmp	r3, r2
 800233e:	d819      	bhi.n	8002374 <HAL_RCC_OscConfig+0x28c>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b40      	cmp	r3, #64	@ 0x40
 8002346:	d108      	bne.n	800235a <HAL_RCC_OscConfig+0x272>
 8002348:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002350:	4a07      	ldr	r2, [pc, #28]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 8002352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002356:	6053      	str	r3, [r2, #4]
 8002358:	e030      	b.n	80023bc <HAL_RCC_OscConfig+0x2d4>
 800235a:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	031b      	lsls	r3, r3, #12
 8002368:	4901      	ldr	r1, [pc, #4]	@ (8002370 <HAL_RCC_OscConfig+0x288>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
 800236e:	e025      	b.n	80023bc <HAL_RCC_OscConfig+0x2d4>
 8002370:	58024400 	.word	0x58024400
 8002374:	4b9a      	ldr	r3, [pc, #616]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	061b      	lsls	r3, r3, #24
 8002382:	4997      	ldr	r1, [pc, #604]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
 8002388:	e018      	b.n	80023bc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238a:	4b95      	ldr	r3, [pc, #596]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a94      	ldr	r2, [pc, #592]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7ff f819 	bl	80013cc <HAL_GetTick>
 800239a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239e:	f7ff f815 	bl	80013cc <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e2ed      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023b0:	4b8b      	ldr	r3, [pc, #556]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80a9 	beq.w	800251c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ca:	4b85      	ldr	r3, [pc, #532]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023d4:	4b82      	ldr	r3, [pc, #520]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80023d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d007      	beq.n	80023f0 <HAL_RCC_OscConfig+0x308>
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2b18      	cmp	r3, #24
 80023e4:	d13a      	bne.n	800245c <HAL_RCC_OscConfig+0x374>
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d135      	bne.n	800245c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023f0:	4b7b      	ldr	r3, [pc, #492]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_OscConfig+0x320>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	2b80      	cmp	r3, #128	@ 0x80
 8002402:	d001      	beq.n	8002408 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e2c1      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002408:	f7ff f810 	bl	800142c <HAL_GetREVID>
 800240c:	4603      	mov	r3, r0
 800240e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002412:	4293      	cmp	r3, r2
 8002414:	d817      	bhi.n	8002446 <HAL_RCC_OscConfig+0x35e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	2b20      	cmp	r3, #32
 800241c:	d108      	bne.n	8002430 <HAL_RCC_OscConfig+0x348>
 800241e:	4b70      	ldr	r3, [pc, #448]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002426:	4a6e      	ldr	r2, [pc, #440]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 8002428:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800242c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800242e:	e075      	b.n	800251c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002430:	4b6b      	ldr	r3, [pc, #428]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	069b      	lsls	r3, r3, #26
 800243e:	4968      	ldr	r1, [pc, #416]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002444:	e06a      	b.n	800251c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002446:	4b66      	ldr	r3, [pc, #408]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	061b      	lsls	r3, r3, #24
 8002454:	4962      	ldr	r1, [pc, #392]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 8002456:	4313      	orrs	r3, r2
 8002458:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800245a:	e05f      	b.n	800251c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d042      	beq.n	80024ea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002464:	4b5e      	ldr	r3, [pc, #376]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a5d      	ldr	r2, [pc, #372]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 800246a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800246e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe ffac 	bl	80013cc <HAL_GetTick>
 8002474:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002478:	f7fe ffa8 	bl	80013cc <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e280      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800248a:	4b55      	ldr	r3, [pc, #340]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002496:	f7fe ffc9 	bl	800142c <HAL_GetREVID>
 800249a:	4603      	mov	r3, r0
 800249c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d817      	bhi.n	80024d4 <HAL_RCC_OscConfig+0x3ec>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d108      	bne.n	80024be <HAL_RCC_OscConfig+0x3d6>
 80024ac:	4b4c      	ldr	r3, [pc, #304]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80024b4:	4a4a      	ldr	r2, [pc, #296]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80024b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024ba:	6053      	str	r3, [r2, #4]
 80024bc:	e02e      	b.n	800251c <HAL_RCC_OscConfig+0x434>
 80024be:	4b48      	ldr	r3, [pc, #288]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	069b      	lsls	r3, r3, #26
 80024cc:	4944      	ldr	r1, [pc, #272]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
 80024d2:	e023      	b.n	800251c <HAL_RCC_OscConfig+0x434>
 80024d4:	4b42      	ldr	r3, [pc, #264]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	493f      	ldr	r1, [pc, #252]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60cb      	str	r3, [r1, #12]
 80024e8:	e018      	b.n	800251c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024ea:	4b3d      	ldr	r3, [pc, #244]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a3c      	ldr	r2, [pc, #240]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80024f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe ff69 	bl	80013cc <HAL_GetTick>
 80024fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024fe:	f7fe ff65 	bl	80013cc <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e23d      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002510:	4b33      	ldr	r3, [pc, #204]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d036      	beq.n	8002596 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d019      	beq.n	8002564 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002530:	4b2b      	ldr	r3, [pc, #172]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 8002532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002534:	4a2a      	ldr	r2, [pc, #168]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253c:	f7fe ff46 	bl	80013cc <HAL_GetTick>
 8002540:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002544:	f7fe ff42 	bl	80013cc <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e21a      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002556:	4b22      	ldr	r3, [pc, #136]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 8002558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x45c>
 8002562:	e018      	b.n	8002596 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002564:	4b1e      	ldr	r3, [pc, #120]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 8002566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002568:	4a1d      	ldr	r2, [pc, #116]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe ff2c 	bl	80013cc <HAL_GetTick>
 8002574:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002578:	f7fe ff28 	bl	80013cc <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e200      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800258a:	4b15      	ldr	r3, [pc, #84]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 800258c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d039      	beq.n	8002616 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d01c      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025aa:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a0c      	ldr	r2, [pc, #48]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80025b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025b6:	f7fe ff09 	bl	80013cc <HAL_GetTick>
 80025ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025be:	f7fe ff05 	bl	80013cc <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1dd      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025d0:	4b03      	ldr	r3, [pc, #12]	@ (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x4d6>
 80025dc:	e01b      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
 80025de:	bf00      	nop
 80025e0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025e4:	4b9b      	ldr	r3, [pc, #620]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a9a      	ldr	r2, [pc, #616]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80025ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025f0:	f7fe feec 	bl	80013cc <HAL_GetTick>
 80025f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025f8:	f7fe fee8 	bl	80013cc <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1c0      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800260a:	4b92      	ldr	r3, [pc, #584]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8081 	beq.w	8002726 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002624:	4b8c      	ldr	r3, [pc, #560]	@ (8002858 <HAL_RCC_OscConfig+0x770>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a8b      	ldr	r2, [pc, #556]	@ (8002858 <HAL_RCC_OscConfig+0x770>)
 800262a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002630:	f7fe fecc 	bl	80013cc <HAL_GetTick>
 8002634:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002638:	f7fe fec8 	bl	80013cc <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	@ 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e1a0      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800264a:	4b83      	ldr	r3, [pc, #524]	@ (8002858 <HAL_RCC_OscConfig+0x770>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d106      	bne.n	800266c <HAL_RCC_OscConfig+0x584>
 800265e:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002662:	4a7c      	ldr	r2, [pc, #496]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6713      	str	r3, [r2, #112]	@ 0x70
 800266a:	e02d      	b.n	80026c8 <HAL_RCC_OscConfig+0x5e0>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10c      	bne.n	800268e <HAL_RCC_OscConfig+0x5a6>
 8002674:	4b77      	ldr	r3, [pc, #476]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002678:	4a76      	ldr	r2, [pc, #472]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002680:	4b74      	ldr	r3, [pc, #464]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002684:	4a73      	ldr	r2, [pc, #460]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002686:	f023 0304 	bic.w	r3, r3, #4
 800268a:	6713      	str	r3, [r2, #112]	@ 0x70
 800268c:	e01c      	b.n	80026c8 <HAL_RCC_OscConfig+0x5e0>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b05      	cmp	r3, #5
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x5c8>
 8002696:	4b6f      	ldr	r3, [pc, #444]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269a:	4a6e      	ldr	r2, [pc, #440]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 800269c:	f043 0304 	orr.w	r3, r3, #4
 80026a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a6:	4a6b      	ldr	r2, [pc, #428]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0x5e0>
 80026b0:	4b68      	ldr	r3, [pc, #416]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b4:	4a67      	ldr	r2, [pc, #412]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80026bc:	4b65      	ldr	r3, [pc, #404]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80026be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c0:	4a64      	ldr	r2, [pc, #400]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80026c2:	f023 0304 	bic.w	r3, r3, #4
 80026c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d015      	beq.n	80026fc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d0:	f7fe fe7c 	bl	80013cc <HAL_GetTick>
 80026d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d8:	f7fe fe78 	bl	80013cc <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e14e      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026ee:	4b59      	ldr	r3, [pc, #356]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0ee      	beq.n	80026d8 <HAL_RCC_OscConfig+0x5f0>
 80026fa:	e014      	b.n	8002726 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7fe fe66 	bl	80013cc <HAL_GetTick>
 8002700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002702:	e00a      	b.n	800271a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7fe fe62 	bl	80013cc <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e138      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800271a:	4b4e      	ldr	r3, [pc, #312]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ee      	bne.n	8002704 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 812d 	beq.w	800298a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002730:	4b48      	ldr	r3, [pc, #288]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002738:	2b18      	cmp	r3, #24
 800273a:	f000 80bd 	beq.w	80028b8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	2b02      	cmp	r3, #2
 8002744:	f040 809e 	bne.w	8002884 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002748:	4b42      	ldr	r3, [pc, #264]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a41      	ldr	r2, [pc, #260]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 800274e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fe3a 	bl	80013cc <HAL_GetTick>
 8002758:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe fe36 	bl	80013cc <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e10e      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800276e:	4b39      	ldr	r3, [pc, #228]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277a:	4b36      	ldr	r3, [pc, #216]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 800277c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800277e:	4b37      	ldr	r3, [pc, #220]	@ (800285c <HAL_RCC_OscConfig+0x774>)
 8002780:	4013      	ands	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800278a:	0112      	lsls	r2, r2, #4
 800278c:	430a      	orrs	r2, r1
 800278e:	4931      	ldr	r1, [pc, #196]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002790:	4313      	orrs	r3, r2
 8002792:	628b      	str	r3, [r1, #40]	@ 0x28
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	3b01      	subs	r3, #1
 800279a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a2:	3b01      	subs	r3, #1
 80027a4:	025b      	lsls	r3, r3, #9
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ae:	3b01      	subs	r3, #1
 80027b0:	041b      	lsls	r3, r3, #16
 80027b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027bc:	3b01      	subs	r3, #1
 80027be:	061b      	lsls	r3, r3, #24
 80027c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80027c4:	4923      	ldr	r1, [pc, #140]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80027ca:	4b22      	ldr	r3, [pc, #136]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80027cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ce:	4a21      	ldr	r2, [pc, #132]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80027d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027da:	4b21      	ldr	r3, [pc, #132]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 80027dc:	4013      	ands	r3, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027e2:	00d2      	lsls	r2, r2, #3
 80027e4:	491b      	ldr	r1, [pc, #108]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80027ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ee:	f023 020c 	bic.w	r2, r3, #12
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	4917      	ldr	r1, [pc, #92]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80027fc:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	f023 0202 	bic.w	r2, r3, #2
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002808:	4912      	ldr	r1, [pc, #72]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 800280a:	4313      	orrs	r3, r2
 800280c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800280e:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002812:	4a10      	ldr	r2, [pc, #64]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002818:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800281a:	4b0e      	ldr	r3, [pc, #56]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 800281c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281e:	4a0d      	ldr	r2, [pc, #52]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002824:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002826:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282a:	4a0a      	ldr	r2, [pc, #40]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002830:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002832:	4b08      	ldr	r3, [pc, #32]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002836:	4a07      	ldr	r2, [pc, #28]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800283e:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a04      	ldr	r2, [pc, #16]	@ (8002854 <HAL_RCC_OscConfig+0x76c>)
 8002844:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7fe fdbf 	bl	80013cc <HAL_GetTick>
 800284e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002850:	e011      	b.n	8002876 <HAL_RCC_OscConfig+0x78e>
 8002852:	bf00      	nop
 8002854:	58024400 	.word	0x58024400
 8002858:	58024800 	.word	0x58024800
 800285c:	fffffc0c 	.word	0xfffffc0c
 8002860:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002864:	f7fe fdb2 	bl	80013cc <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e08a      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002876:	4b47      	ldr	r3, [pc, #284]	@ (8002994 <HAL_RCC_OscConfig+0x8ac>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x77c>
 8002882:	e082      	b.n	800298a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002884:	4b43      	ldr	r3, [pc, #268]	@ (8002994 <HAL_RCC_OscConfig+0x8ac>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a42      	ldr	r2, [pc, #264]	@ (8002994 <HAL_RCC_OscConfig+0x8ac>)
 800288a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800288e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fd9c 	bl	80013cc <HAL_GetTick>
 8002894:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe fd98 	bl	80013cc <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e070      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002994 <HAL_RCC_OscConfig+0x8ac>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x7b0>
 80028b6:	e068      	b.n	800298a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028b8:	4b36      	ldr	r3, [pc, #216]	@ (8002994 <HAL_RCC_OscConfig+0x8ac>)
 80028ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028be:	4b35      	ldr	r3, [pc, #212]	@ (8002994 <HAL_RCC_OscConfig+0x8ac>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d031      	beq.n	8002930 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f003 0203 	and.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d12a      	bne.n	8002930 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d122      	bne.n	8002930 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d11a      	bne.n	8002930 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	0a5b      	lsrs	r3, r3, #9
 80028fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002906:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d111      	bne.n	8002930 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	0c1b      	lsrs	r3, r3, #16
 8002910:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002918:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800291a:	429a      	cmp	r2, r3
 800291c:	d108      	bne.n	8002930 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	0e1b      	lsrs	r3, r3, #24
 8002922:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e02b      	b.n	800298c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002934:	4b17      	ldr	r3, [pc, #92]	@ (8002994 <HAL_RCC_OscConfig+0x8ac>)
 8002936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002938:	08db      	lsrs	r3, r3, #3
 800293a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800293e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	429a      	cmp	r2, r3
 8002948:	d01f      	beq.n	800298a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800294a:	4b12      	ldr	r3, [pc, #72]	@ (8002994 <HAL_RCC_OscConfig+0x8ac>)
 800294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294e:	4a11      	ldr	r2, [pc, #68]	@ (8002994 <HAL_RCC_OscConfig+0x8ac>)
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002956:	f7fe fd39 	bl	80013cc <HAL_GetTick>
 800295a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800295c:	bf00      	nop
 800295e:	f7fe fd35 	bl	80013cc <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002966:	4293      	cmp	r3, r2
 8002968:	d0f9      	beq.n	800295e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800296a:	4b0a      	ldr	r3, [pc, #40]	@ (8002994 <HAL_RCC_OscConfig+0x8ac>)
 800296c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800296e:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <HAL_RCC_OscConfig+0x8b0>)
 8002970:	4013      	ands	r3, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002976:	00d2      	lsls	r2, r2, #3
 8002978:	4906      	ldr	r1, [pc, #24]	@ (8002994 <HAL_RCC_OscConfig+0x8ac>)
 800297a:	4313      	orrs	r3, r2
 800297c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800297e:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <HAL_RCC_OscConfig+0x8ac>)
 8002980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002982:	4a04      	ldr	r2, [pc, #16]	@ (8002994 <HAL_RCC_OscConfig+0x8ac>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3730      	adds	r7, #48	@ 0x30
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	58024400 	.word	0x58024400
 8002998:	ffff0007 	.word	0xffff0007

0800299c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e19c      	b.n	8002cea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b0:	4b8a      	ldr	r3, [pc, #552]	@ (8002bdc <HAL_RCC_ClockConfig+0x240>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d910      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b87      	ldr	r3, [pc, #540]	@ (8002bdc <HAL_RCC_ClockConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 020f 	bic.w	r2, r3, #15
 80029c6:	4985      	ldr	r1, [pc, #532]	@ (8002bdc <HAL_RCC_ClockConfig+0x240>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b83      	ldr	r3, [pc, #524]	@ (8002bdc <HAL_RCC_ClockConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e184      	b.n	8002cea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d010      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	4b7b      	ldr	r3, [pc, #492]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d908      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029fc:	4b78      	ldr	r3, [pc, #480]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	4975      	ldr	r1, [pc, #468]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d010      	beq.n	8002a3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	4b70      	ldr	r3, [pc, #448]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d908      	bls.n	8002a3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	496a      	ldr	r1, [pc, #424]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d010      	beq.n	8002a6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	4b64      	ldr	r3, [pc, #400]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d908      	bls.n	8002a6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a58:	4b61      	ldr	r3, [pc, #388]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	495e      	ldr	r1, [pc, #376]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d010      	beq.n	8002a98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	4b59      	ldr	r3, [pc, #356]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d908      	bls.n	8002a98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a86:	4b56      	ldr	r3, [pc, #344]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	4953      	ldr	r1, [pc, #332]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d010      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d908      	bls.n	8002ac6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f023 020f 	bic.w	r2, r3, #15
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4947      	ldr	r1, [pc, #284]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d055      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ad2:	4b43      	ldr	r3, [pc, #268]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4940      	ldr	r1, [pc, #256]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002aec:	4b3c      	ldr	r3, [pc, #240]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d121      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0f6      	b.n	8002cea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d107      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b04:	4b36      	ldr	r3, [pc, #216]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d115      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0ea      	b.n	8002cea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b1c:	4b30      	ldr	r3, [pc, #192]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0de      	b.n	8002cea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0d6      	b.n	8002cea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b3c:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f023 0207 	bic.w	r2, r3, #7
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4925      	ldr	r1, [pc, #148]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b4e:	f7fe fc3d 	bl	80013cc <HAL_GetTick>
 8002b52:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b56:	f7fe fc39 	bl	80013cc <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e0be      	b.n	8002cea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d1eb      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d010      	beq.n	8002bac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	4b14      	ldr	r3, [pc, #80]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d208      	bcs.n	8002bac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9a:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f023 020f 	bic.w	r2, r3, #15
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	490e      	ldr	r1, [pc, #56]	@ (8002be0 <HAL_RCC_ClockConfig+0x244>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bac:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <HAL_RCC_ClockConfig+0x240>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d214      	bcs.n	8002be4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <HAL_RCC_ClockConfig+0x240>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 020f 	bic.w	r2, r3, #15
 8002bc2:	4906      	ldr	r1, [pc, #24]	@ (8002bdc <HAL_RCC_ClockConfig+0x240>)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b04      	ldr	r3, [pc, #16]	@ (8002bdc <HAL_RCC_ClockConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e086      	b.n	8002cea <HAL_RCC_ClockConfig+0x34e>
 8002bdc:	52002000 	.word	0x52002000
 8002be0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d010      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf4 <HAL_RCC_ClockConfig+0x358>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d208      	bcs.n	8002c12 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c00:	4b3c      	ldr	r3, [pc, #240]	@ (8002cf4 <HAL_RCC_ClockConfig+0x358>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	4939      	ldr	r1, [pc, #228]	@ (8002cf4 <HAL_RCC_ClockConfig+0x358>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d010      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	4b34      	ldr	r3, [pc, #208]	@ (8002cf4 <HAL_RCC_ClockConfig+0x358>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d208      	bcs.n	8002c40 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c2e:	4b31      	ldr	r3, [pc, #196]	@ (8002cf4 <HAL_RCC_ClockConfig+0x358>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	492e      	ldr	r1, [pc, #184]	@ (8002cf4 <HAL_RCC_ClockConfig+0x358>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d010      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	4b28      	ldr	r3, [pc, #160]	@ (8002cf4 <HAL_RCC_ClockConfig+0x358>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d208      	bcs.n	8002c6e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c5c:	4b25      	ldr	r3, [pc, #148]	@ (8002cf4 <HAL_RCC_ClockConfig+0x358>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	4922      	ldr	r1, [pc, #136]	@ (8002cf4 <HAL_RCC_ClockConfig+0x358>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d010      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69da      	ldr	r2, [r3, #28]
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf4 <HAL_RCC_ClockConfig+0x358>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d208      	bcs.n	8002c9c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf4 <HAL_RCC_ClockConfig+0x358>)
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	4917      	ldr	r1, [pc, #92]	@ (8002cf4 <HAL_RCC_ClockConfig+0x358>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c9c:	f000 f834 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b14      	ldr	r3, [pc, #80]	@ (8002cf4 <HAL_RCC_ClockConfig+0x358>)
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	0a1b      	lsrs	r3, r3, #8
 8002ca8:	f003 030f 	and.w	r3, r3, #15
 8002cac:	4912      	ldr	r1, [pc, #72]	@ (8002cf8 <HAL_RCC_ClockConfig+0x35c>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cba:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf4 <HAL_RCC_ClockConfig+0x358>)
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf8 <HAL_RCC_ClockConfig+0x35c>)
 8002cc4:	5cd3      	ldrb	r3, [r2, r3]
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cfc <HAL_RCC_ClockConfig+0x360>)
 8002cd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002d00 <HAL_RCC_ClockConfig+0x364>)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002cda:	4b0a      	ldr	r3, [pc, #40]	@ (8002d04 <HAL_RCC_ClockConfig+0x368>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fb2a 	bl	8001338 <HAL_InitTick>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	58024400 	.word	0x58024400
 8002cf8:	08007b8c 	.word	0x08007b8c
 8002cfc:	24000004 	.word	0x24000004
 8002d00:	24000000 	.word	0x24000000
 8002d04:	24000008 	.word	0x24000008

08002d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	@ 0x24
 8002d0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d0e:	4bb3      	ldr	r3, [pc, #716]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d16:	2b18      	cmp	r3, #24
 8002d18:	f200 8155 	bhi.w	8002fc6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d22:	bf00      	nop
 8002d24:	08002d89 	.word	0x08002d89
 8002d28:	08002fc7 	.word	0x08002fc7
 8002d2c:	08002fc7 	.word	0x08002fc7
 8002d30:	08002fc7 	.word	0x08002fc7
 8002d34:	08002fc7 	.word	0x08002fc7
 8002d38:	08002fc7 	.word	0x08002fc7
 8002d3c:	08002fc7 	.word	0x08002fc7
 8002d40:	08002fc7 	.word	0x08002fc7
 8002d44:	08002daf 	.word	0x08002daf
 8002d48:	08002fc7 	.word	0x08002fc7
 8002d4c:	08002fc7 	.word	0x08002fc7
 8002d50:	08002fc7 	.word	0x08002fc7
 8002d54:	08002fc7 	.word	0x08002fc7
 8002d58:	08002fc7 	.word	0x08002fc7
 8002d5c:	08002fc7 	.word	0x08002fc7
 8002d60:	08002fc7 	.word	0x08002fc7
 8002d64:	08002db5 	.word	0x08002db5
 8002d68:	08002fc7 	.word	0x08002fc7
 8002d6c:	08002fc7 	.word	0x08002fc7
 8002d70:	08002fc7 	.word	0x08002fc7
 8002d74:	08002fc7 	.word	0x08002fc7
 8002d78:	08002fc7 	.word	0x08002fc7
 8002d7c:	08002fc7 	.word	0x08002fc7
 8002d80:	08002fc7 	.word	0x08002fc7
 8002d84:	08002dbb 	.word	0x08002dbb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d88:	4b94      	ldr	r3, [pc, #592]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d009      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d94:	4b91      	ldr	r3, [pc, #580]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	08db      	lsrs	r3, r3, #3
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	4a90      	ldr	r2, [pc, #576]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
 8002da4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002da6:	e111      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002da8:	4b8d      	ldr	r3, [pc, #564]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002daa:	61bb      	str	r3, [r7, #24]
      break;
 8002dac:	e10e      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002dae:	4b8d      	ldr	r3, [pc, #564]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002db0:	61bb      	str	r3, [r7, #24]
      break;
 8002db2:	e10b      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002db4:	4b8c      	ldr	r3, [pc, #560]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002db6:	61bb      	str	r3, [r7, #24]
      break;
 8002db8:	e108      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002dba:	4b88      	ldr	r3, [pc, #544]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002dc4:	4b85      	ldr	r3, [pc, #532]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002dd0:	4b82      	ldr	r3, [pc, #520]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002dda:	4b80      	ldr	r3, [pc, #512]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dde:	08db      	lsrs	r3, r3, #3
 8002de0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	fb02 f303 	mul.w	r3, r2, r3
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80e1 	beq.w	8002fc0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	f000 8083 	beq.w	8002f0c <HAL_RCC_GetSysClockFreq+0x204>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	f200 80a1 	bhi.w	8002f50 <HAL_RCC_GetSysClockFreq+0x248>
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x114>
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d056      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e1a:	e099      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d02d      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e28:	4b6c      	ldr	r3, [pc, #432]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	08db      	lsrs	r3, r3, #3
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	4a6b      	ldr	r2, [pc, #428]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
 8002e38:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	ee07 3a90 	vmov	s15, r3
 8002e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e52:	4b62      	ldr	r3, [pc, #392]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e66:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002e82:	e087      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	ee07 3a90 	vmov	s15, r3
 8002e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e8e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002ff0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e96:	4b51      	ldr	r3, [pc, #324]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e9e:	ee07 3a90 	vmov	s15, r3
 8002ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eaa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ec6:	e065      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002ff4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eda:	4b40      	ldr	r3, [pc, #256]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f0a:	e043      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f16:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002ff8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f32:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f4e:	e021      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002ff4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f62:	4b1e      	ldr	r3, [pc, #120]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f76:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f92:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002f94:	4b11      	ldr	r3, [pc, #68]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f98:	0a5b      	lsrs	r3, r3, #9
 8002f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	ee07 3a90 	vmov	s15, r3
 8002fa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fb8:	ee17 3a90 	vmov	r3, s15
 8002fbc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002fbe:	e005      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
      break;
 8002fc4:	e002      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002fc6:	4b07      	ldr	r3, [pc, #28]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fc8:	61bb      	str	r3, [r7, #24]
      break;
 8002fca:	bf00      	nop
  }

  return sysclockfreq;
 8002fcc:	69bb      	ldr	r3, [r7, #24]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3724      	adds	r7, #36	@ 0x24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	58024400 	.word	0x58024400
 8002fe0:	03d09000 	.word	0x03d09000
 8002fe4:	003d0900 	.word	0x003d0900
 8002fe8:	017d7840 	.word	0x017d7840
 8002fec:	46000000 	.word	0x46000000
 8002ff0:	4c742400 	.word	0x4c742400
 8002ff4:	4a742400 	.word	0x4a742400
 8002ff8:	4bbebc20 	.word	0x4bbebc20

08002ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003002:	f7ff fe81 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8003006:	4602      	mov	r2, r0
 8003008:	4b10      	ldr	r3, [pc, #64]	@ (800304c <HAL_RCC_GetHCLKFreq+0x50>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	490f      	ldr	r1, [pc, #60]	@ (8003050 <HAL_RCC_GetHCLKFreq+0x54>)
 8003014:	5ccb      	ldrb	r3, [r1, r3]
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	fa22 f303 	lsr.w	r3, r2, r3
 800301e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003020:	4b0a      	ldr	r3, [pc, #40]	@ (800304c <HAL_RCC_GetHCLKFreq+0x50>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	4a09      	ldr	r2, [pc, #36]	@ (8003050 <HAL_RCC_GetHCLKFreq+0x54>)
 800302a:	5cd3      	ldrb	r3, [r2, r3]
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	fa22 f303 	lsr.w	r3, r2, r3
 8003036:	4a07      	ldr	r2, [pc, #28]	@ (8003054 <HAL_RCC_GetHCLKFreq+0x58>)
 8003038:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800303a:	4a07      	ldr	r2, [pc, #28]	@ (8003058 <HAL_RCC_GetHCLKFreq+0x5c>)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003040:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <HAL_RCC_GetHCLKFreq+0x58>)
 8003042:	681b      	ldr	r3, [r3, #0]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	58024400 	.word	0x58024400
 8003050:	08007b8c 	.word	0x08007b8c
 8003054:	24000004 	.word	0x24000004
 8003058:	24000000 	.word	0x24000000

0800305c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003060:	f7ff ffcc 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 8003064:	4602      	mov	r2, r0
 8003066:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	4904      	ldr	r1, [pc, #16]	@ (8003084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	58024400 	.word	0x58024400
 8003084:	08007b8c 	.word	0x08007b8c

08003088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800308c:	f7ff ffb6 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	4904      	ldr	r1, [pc, #16]	@ (80030b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	58024400 	.word	0x58024400
 80030b0:	08007b8c 	.word	0x08007b8c

080030b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b8:	b0ca      	sub	sp, #296	@ 0x128
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030c0:	2300      	movs	r3, #0
 80030c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030c6:	2300      	movs	r3, #0
 80030c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80030d8:	2500      	movs	r5, #0
 80030da:	ea54 0305 	orrs.w	r3, r4, r5
 80030de:	d049      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80030e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030ea:	d02f      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80030ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030f0:	d828      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80030f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030f6:	d01a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030fc:	d822      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003106:	d007      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003108:	e01c      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800310a:	4bb8      	ldr	r3, [pc, #736]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800310c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310e:	4ab7      	ldr	r2, [pc, #732]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003114:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003116:	e01a      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800311c:	3308      	adds	r3, #8
 800311e:	2102      	movs	r1, #2
 8003120:	4618      	mov	r0, r3
 8003122:	f001 fc8f 	bl	8004a44 <RCCEx_PLL2_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800312c:	e00f      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800312e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003132:	3328      	adds	r3, #40	@ 0x28
 8003134:	2102      	movs	r1, #2
 8003136:	4618      	mov	r0, r3
 8003138:	f001 fd36 	bl	8004ba8 <RCCEx_PLL3_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003142:	e004      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800314a:	e000      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800314c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800314e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003156:	4ba5      	ldr	r3, [pc, #660]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800315e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003162:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003164:	4aa1      	ldr	r2, [pc, #644]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003166:	430b      	orrs	r3, r1
 8003168:	6513      	str	r3, [r2, #80]	@ 0x50
 800316a:	e003      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003170:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003180:	f04f 0900 	mov.w	r9, #0
 8003184:	ea58 0309 	orrs.w	r3, r8, r9
 8003188:	d047      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800318a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800318e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003190:	2b04      	cmp	r3, #4
 8003192:	d82a      	bhi.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003194:	a201      	add	r2, pc, #4	@ (adr r2, 800319c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319a:	bf00      	nop
 800319c:	080031b1 	.word	0x080031b1
 80031a0:	080031bf 	.word	0x080031bf
 80031a4:	080031d5 	.word	0x080031d5
 80031a8:	080031f3 	.word	0x080031f3
 80031ac:	080031f3 	.word	0x080031f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031b0:	4b8e      	ldr	r3, [pc, #568]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b4:	4a8d      	ldr	r2, [pc, #564]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031bc:	e01a      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c2:	3308      	adds	r3, #8
 80031c4:	2100      	movs	r1, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f001 fc3c 	bl	8004a44 <RCCEx_PLL2_Config>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031d2:	e00f      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d8:	3328      	adds	r3, #40	@ 0x28
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f001 fce3 	bl	8004ba8 <RCCEx_PLL3_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031e8:	e004      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031f0:	e000      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80031f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031fc:	4b7b      	ldr	r3, [pc, #492]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003200:	f023 0107 	bic.w	r1, r3, #7
 8003204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320a:	4a78      	ldr	r2, [pc, #480]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800320c:	430b      	orrs	r3, r1
 800320e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003210:	e003      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003216:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800321a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003222:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003226:	f04f 0b00 	mov.w	fp, #0
 800322a:	ea5a 030b 	orrs.w	r3, sl, fp
 800322e:	d04c      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800323a:	d030      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800323c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003240:	d829      	bhi.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003242:	2bc0      	cmp	r3, #192	@ 0xc0
 8003244:	d02d      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003246:	2bc0      	cmp	r3, #192	@ 0xc0
 8003248:	d825      	bhi.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800324a:	2b80      	cmp	r3, #128	@ 0x80
 800324c:	d018      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800324e:	2b80      	cmp	r3, #128	@ 0x80
 8003250:	d821      	bhi.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003256:	2b40      	cmp	r3, #64	@ 0x40
 8003258:	d007      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800325a:	e01c      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800325c:	4b63      	ldr	r3, [pc, #396]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800325e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003260:	4a62      	ldr	r2, [pc, #392]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003268:	e01c      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800326a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800326e:	3308      	adds	r3, #8
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f001 fbe6 	bl	8004a44 <RCCEx_PLL2_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800327e:	e011      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003284:	3328      	adds	r3, #40	@ 0x28
 8003286:	2100      	movs	r1, #0
 8003288:	4618      	mov	r0, r3
 800328a:	f001 fc8d 	bl	8004ba8 <RCCEx_PLL3_Config>
 800328e:	4603      	mov	r3, r0
 8003290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003294:	e006      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800329c:	e002      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80032a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10a      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80032ac:	4b4f      	ldr	r3, [pc, #316]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ba:	4a4c      	ldr	r2, [pc, #304]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032bc:	430b      	orrs	r3, r1
 80032be:	6513      	str	r3, [r2, #80]	@ 0x50
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80032d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80032e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80032e4:	460b      	mov	r3, r1
 80032e6:	4313      	orrs	r3, r2
 80032e8:	d053      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80032ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80032f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032f6:	d035      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80032f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032fc:	d82e      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80032fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003302:	d031      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003304:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003308:	d828      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800330a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800330e:	d01a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003310:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003314:	d822      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800331a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800331e:	d007      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003320:	e01c      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003322:	4b32      	ldr	r3, [pc, #200]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003326:	4a31      	ldr	r2, [pc, #196]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800332c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800332e:	e01c      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003334:	3308      	adds	r3, #8
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f001 fb83 	bl	8004a44 <RCCEx_PLL2_Config>
 800333e:	4603      	mov	r3, r0
 8003340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003344:	e011      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334a:	3328      	adds	r3, #40	@ 0x28
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f001 fc2a 	bl	8004ba8 <RCCEx_PLL3_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800335a:	e006      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003362:	e002      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003364:	bf00      	nop
 8003366:	e000      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800336a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10b      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003372:	4b1e      	ldr	r3, [pc, #120]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003376:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800337a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003382:	4a1a      	ldr	r2, [pc, #104]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003384:	430b      	orrs	r3, r1
 8003386:	6593      	str	r3, [r2, #88]	@ 0x58
 8003388:	e003      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800338e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800339e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80033a2:	2300      	movs	r3, #0
 80033a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80033a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80033ac:	460b      	mov	r3, r1
 80033ae:	4313      	orrs	r3, r2
 80033b0:	d056      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80033b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80033ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033be:	d038      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80033c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033c4:	d831      	bhi.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033ca:	d034      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80033cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033d0:	d82b      	bhi.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033d6:	d01d      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80033d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033dc:	d825      	bhi.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d006      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80033e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033e6:	d00a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80033e8:	e01f      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033ea:	bf00      	nop
 80033ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f0:	4ba2      	ldr	r3, [pc, #648]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	4aa1      	ldr	r2, [pc, #644]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033fc:	e01c      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003402:	3308      	adds	r3, #8
 8003404:	2100      	movs	r1, #0
 8003406:	4618      	mov	r0, r3
 8003408:	f001 fb1c 	bl	8004a44 <RCCEx_PLL2_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003412:	e011      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003418:	3328      	adds	r3, #40	@ 0x28
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f001 fbc3 	bl	8004ba8 <RCCEx_PLL3_Config>
 8003422:	4603      	mov	r3, r0
 8003424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003428:	e006      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003430:	e002      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003432:	bf00      	nop
 8003434:	e000      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003438:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003440:	4b8e      	ldr	r3, [pc, #568]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003444:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003450:	4a8a      	ldr	r2, [pc, #552]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003452:	430b      	orrs	r3, r1
 8003454:	6593      	str	r3, [r2, #88]	@ 0x58
 8003456:	e003      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800345c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800346c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003470:	2300      	movs	r3, #0
 8003472:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003476:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800347a:	460b      	mov	r3, r1
 800347c:	4313      	orrs	r3, r2
 800347e:	d03a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003486:	2b30      	cmp	r3, #48	@ 0x30
 8003488:	d01f      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800348a:	2b30      	cmp	r3, #48	@ 0x30
 800348c:	d819      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800348e:	2b20      	cmp	r3, #32
 8003490:	d00c      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003492:	2b20      	cmp	r3, #32
 8003494:	d815      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003496:	2b00      	cmp	r3, #0
 8003498:	d019      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800349a:	2b10      	cmp	r3, #16
 800349c:	d111      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800349e:	4b77      	ldr	r3, [pc, #476]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a2:	4a76      	ldr	r2, [pc, #472]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80034aa:	e011      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b0:	3308      	adds	r3, #8
 80034b2:	2102      	movs	r1, #2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f001 fac5 	bl	8004a44 <RCCEx_PLL2_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80034c0:	e006      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034c8:	e002      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80034ca:	bf00      	nop
 80034cc:	e000      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80034ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80034d8:	4b68      	ldr	r3, [pc, #416]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034dc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80034e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e6:	4a65      	ldr	r2, [pc, #404]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034e8:	430b      	orrs	r3, r1
 80034ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034ec:	e003      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80034f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003502:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003506:	2300      	movs	r3, #0
 8003508:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800350c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003510:	460b      	mov	r3, r1
 8003512:	4313      	orrs	r3, r2
 8003514:	d051      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800351c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003520:	d035      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003522:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003526:	d82e      	bhi.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003528:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800352c:	d031      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800352e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003532:	d828      	bhi.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003538:	d01a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800353a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800353e:	d822      	bhi.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003548:	d007      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800354a:	e01c      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354c:	4b4b      	ldr	r3, [pc, #300]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	4a4a      	ldr	r2, [pc, #296]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003558:	e01c      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800355a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355e:	3308      	adds	r3, #8
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f001 fa6e 	bl	8004a44 <RCCEx_PLL2_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800356e:	e011      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003574:	3328      	adds	r3, #40	@ 0x28
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f001 fb15 	bl	8004ba8 <RCCEx_PLL3_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003584:	e006      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800358c:	e002      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800358e:	bf00      	nop
 8003590:	e000      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10a      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800359c:	4b37      	ldr	r3, [pc, #220]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800359e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80035a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035aa:	4a34      	ldr	r2, [pc, #208]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ac:	430b      	orrs	r3, r1
 80035ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80035b0:	e003      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80035c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035ca:	2300      	movs	r3, #0
 80035cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80035d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80035d4:	460b      	mov	r3, r1
 80035d6:	4313      	orrs	r3, r2
 80035d8:	d056      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035e4:	d033      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80035e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035ea:	d82c      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035f0:	d02f      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80035f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035f6:	d826      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035fc:	d02b      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80035fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003602:	d820      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003604:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003608:	d012      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800360a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800360e:	d81a      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003610:	2b00      	cmp	r3, #0
 8003612:	d022      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003618:	d115      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800361a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361e:	3308      	adds	r3, #8
 8003620:	2101      	movs	r1, #1
 8003622:	4618      	mov	r0, r3
 8003624:	f001 fa0e 	bl	8004a44 <RCCEx_PLL2_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800362e:	e015      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003634:	3328      	adds	r3, #40	@ 0x28
 8003636:	2101      	movs	r1, #1
 8003638:	4618      	mov	r0, r3
 800363a:	f001 fab5 	bl	8004ba8 <RCCEx_PLL3_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003644:	e00a      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800364c:	e006      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800364e:	bf00      	nop
 8003650:	e004      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003652:	bf00      	nop
 8003654:	e002      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003656:	bf00      	nop
 8003658:	e000      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800365a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10d      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003664:	4b05      	ldr	r3, [pc, #20]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003668:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800366c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003672:	4a02      	ldr	r2, [pc, #8]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003674:	430b      	orrs	r3, r1
 8003676:	6513      	str	r3, [r2, #80]	@ 0x50
 8003678:	e006      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800367a:	bf00      	nop
 800367c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003684:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003690:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003694:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003698:	2300      	movs	r3, #0
 800369a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800369e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4313      	orrs	r3, r2
 80036a6:	d055      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80036a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80036b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036b4:	d033      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80036b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ba:	d82c      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c0:	d02f      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80036c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c6:	d826      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036cc:	d02b      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80036ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036d2:	d820      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036d8:	d012      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80036da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036de:	d81a      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d022      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80036e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036e8:	d115      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ee:	3308      	adds	r3, #8
 80036f0:	2101      	movs	r1, #1
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 f9a6 	bl	8004a44 <RCCEx_PLL2_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036fe:	e015      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003704:	3328      	adds	r3, #40	@ 0x28
 8003706:	2101      	movs	r1, #1
 8003708:	4618      	mov	r0, r3
 800370a:	f001 fa4d 	bl	8004ba8 <RCCEx_PLL3_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003714:	e00a      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800371c:	e006      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800371e:	bf00      	nop
 8003720:	e004      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003722:	bf00      	nop
 8003724:	e002      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003726:	bf00      	nop
 8003728:	e000      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800372a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10b      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003734:	4ba3      	ldr	r3, [pc, #652]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800373c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003740:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003744:	4a9f      	ldr	r2, [pc, #636]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003746:	430b      	orrs	r3, r1
 8003748:	6593      	str	r3, [r2, #88]	@ 0x58
 800374a:	e003      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003750:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003760:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003764:	2300      	movs	r3, #0
 8003766:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800376a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800376e:	460b      	mov	r3, r1
 8003770:	4313      	orrs	r3, r2
 8003772:	d037      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800377e:	d00e      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003780:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003784:	d816      	bhi.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003786:	2b00      	cmp	r3, #0
 8003788:	d018      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800378a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800378e:	d111      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003790:	4b8c      	ldr	r3, [pc, #560]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003794:	4a8b      	ldr	r2, [pc, #556]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800379a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800379c:	e00f      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a2:	3308      	adds	r3, #8
 80037a4:	2101      	movs	r1, #1
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 f94c 	bl	8004a44 <RCCEx_PLL2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037b2:	e004      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037ba:	e000      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80037bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10a      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037c6:	4b7f      	ldr	r3, [pc, #508]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d4:	4a7b      	ldr	r2, [pc, #492]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037d6:	430b      	orrs	r3, r1
 80037d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80037da:	e003      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80037f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037f4:	2300      	movs	r3, #0
 80037f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80037fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80037fe:	460b      	mov	r3, r1
 8003800:	4313      	orrs	r3, r2
 8003802:	d039      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800380a:	2b03      	cmp	r3, #3
 800380c:	d81c      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800380e:	a201      	add	r2, pc, #4	@ (adr r2, 8003814 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003814:	08003851 	.word	0x08003851
 8003818:	08003825 	.word	0x08003825
 800381c:	08003833 	.word	0x08003833
 8003820:	08003851 	.word	0x08003851
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003824:	4b67      	ldr	r3, [pc, #412]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003828:	4a66      	ldr	r2, [pc, #408]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800382a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800382e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003830:	e00f      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003836:	3308      	adds	r3, #8
 8003838:	2102      	movs	r1, #2
 800383a:	4618      	mov	r0, r3
 800383c:	f001 f902 	bl	8004a44 <RCCEx_PLL2_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003846:	e004      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800384e:	e000      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10a      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800385a:	4b5a      	ldr	r3, [pc, #360]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800385c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385e:	f023 0103 	bic.w	r1, r3, #3
 8003862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003868:	4a56      	ldr	r2, [pc, #344]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800386a:	430b      	orrs	r3, r1
 800386c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800386e:	e003      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003874:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003884:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003888:	2300      	movs	r3, #0
 800388a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800388e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003892:	460b      	mov	r3, r1
 8003894:	4313      	orrs	r3, r2
 8003896:	f000 809f 	beq.w	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800389a:	4b4b      	ldr	r3, [pc, #300]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a4a      	ldr	r2, [pc, #296]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038a6:	f7fd fd91 	bl	80013cc <HAL_GetTick>
 80038aa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ae:	e00b      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b0:	f7fd fd8c 	bl	80013cc <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b64      	cmp	r3, #100	@ 0x64
 80038be:	d903      	bls.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038c6:	e005      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038c8:	4b3f      	ldr	r3, [pc, #252]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ed      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80038d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d179      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80038dc:	4b39      	ldr	r3, [pc, #228]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038e8:	4053      	eors	r3, r2
 80038ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d015      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038f2:	4b34      	ldr	r3, [pc, #208]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038fe:	4b31      	ldr	r3, [pc, #196]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003902:	4a30      	ldr	r2, [pc, #192]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003908:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800390a:	4b2e      	ldr	r3, [pc, #184]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390e:	4a2d      	ldr	r2, [pc, #180]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003914:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003916:	4a2b      	ldr	r2, [pc, #172]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003918:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800391c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003922:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800392a:	d118      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fd fd4e 	bl	80013cc <HAL_GetTick>
 8003930:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003934:	e00d      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003936:	f7fd fd49 	bl	80013cc <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003940:	1ad2      	subs	r2, r2, r3
 8003942:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003946:	429a      	cmp	r2, r3
 8003948:	d903      	bls.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003950:	e005      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003952:	4b1c      	ldr	r3, [pc, #112]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0eb      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800395e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003962:	2b00      	cmp	r3, #0
 8003964:	d129      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800396e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003972:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003976:	d10e      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003978:	4b12      	ldr	r3, [pc, #72]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003984:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003988:	091a      	lsrs	r2, r3, #4
 800398a:	4b10      	ldr	r3, [pc, #64]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800398c:	4013      	ands	r3, r2
 800398e:	4a0d      	ldr	r2, [pc, #52]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003990:	430b      	orrs	r3, r1
 8003992:	6113      	str	r3, [r2, #16]
 8003994:	e005      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003996:	4b0b      	ldr	r3, [pc, #44]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	4a0a      	ldr	r2, [pc, #40]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800399c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80039a0:	6113      	str	r3, [r2, #16]
 80039a2:	4b08      	ldr	r3, [pc, #32]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039a4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80039a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b2:	4a04      	ldr	r2, [pc, #16]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039b8:	e00e      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80039c2:	e009      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80039c4:	58024400 	.word	0x58024400
 80039c8:	58024800 	.word	0x58024800
 80039cc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f002 0301 	and.w	r3, r2, #1
 80039e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f000 8089 	beq.w	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80039fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a00:	2b28      	cmp	r3, #40	@ 0x28
 8003a02:	d86b      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003a04:	a201      	add	r2, pc, #4	@ (adr r2, 8003a0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0a:	bf00      	nop
 8003a0c:	08003ae5 	.word	0x08003ae5
 8003a10:	08003add 	.word	0x08003add
 8003a14:	08003add 	.word	0x08003add
 8003a18:	08003add 	.word	0x08003add
 8003a1c:	08003add 	.word	0x08003add
 8003a20:	08003add 	.word	0x08003add
 8003a24:	08003add 	.word	0x08003add
 8003a28:	08003add 	.word	0x08003add
 8003a2c:	08003ab1 	.word	0x08003ab1
 8003a30:	08003add 	.word	0x08003add
 8003a34:	08003add 	.word	0x08003add
 8003a38:	08003add 	.word	0x08003add
 8003a3c:	08003add 	.word	0x08003add
 8003a40:	08003add 	.word	0x08003add
 8003a44:	08003add 	.word	0x08003add
 8003a48:	08003add 	.word	0x08003add
 8003a4c:	08003ac7 	.word	0x08003ac7
 8003a50:	08003add 	.word	0x08003add
 8003a54:	08003add 	.word	0x08003add
 8003a58:	08003add 	.word	0x08003add
 8003a5c:	08003add 	.word	0x08003add
 8003a60:	08003add 	.word	0x08003add
 8003a64:	08003add 	.word	0x08003add
 8003a68:	08003add 	.word	0x08003add
 8003a6c:	08003ae5 	.word	0x08003ae5
 8003a70:	08003add 	.word	0x08003add
 8003a74:	08003add 	.word	0x08003add
 8003a78:	08003add 	.word	0x08003add
 8003a7c:	08003add 	.word	0x08003add
 8003a80:	08003add 	.word	0x08003add
 8003a84:	08003add 	.word	0x08003add
 8003a88:	08003add 	.word	0x08003add
 8003a8c:	08003ae5 	.word	0x08003ae5
 8003a90:	08003add 	.word	0x08003add
 8003a94:	08003add 	.word	0x08003add
 8003a98:	08003add 	.word	0x08003add
 8003a9c:	08003add 	.word	0x08003add
 8003aa0:	08003add 	.word	0x08003add
 8003aa4:	08003add 	.word	0x08003add
 8003aa8:	08003add 	.word	0x08003add
 8003aac:	08003ae5 	.word	0x08003ae5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 ffc3 	bl	8004a44 <RCCEx_PLL2_Config>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ac4:	e00f      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aca:	3328      	adds	r3, #40	@ 0x28
 8003acc:	2101      	movs	r1, #1
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f001 f86a 	bl	8004ba8 <RCCEx_PLL3_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ada:	e004      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003aee:	4bbf      	ldr	r3, [pc, #764]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003afc:	4abb      	ldr	r2, [pc, #748]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003afe:	430b      	orrs	r3, r1
 8003b00:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b02:	e003      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	f002 0302 	and.w	r3, r2, #2
 8003b18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003b22:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003b26:	460b      	mov	r3, r1
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	d041      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b32:	2b05      	cmp	r3, #5
 8003b34:	d824      	bhi.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003b36:	a201      	add	r2, pc, #4	@ (adr r2, 8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3c:	08003b89 	.word	0x08003b89
 8003b40:	08003b55 	.word	0x08003b55
 8003b44:	08003b6b 	.word	0x08003b6b
 8003b48:	08003b89 	.word	0x08003b89
 8003b4c:	08003b89 	.word	0x08003b89
 8003b50:	08003b89 	.word	0x08003b89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b58:	3308      	adds	r3, #8
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 ff71 	bl	8004a44 <RCCEx_PLL2_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b68:	e00f      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	3328      	adds	r3, #40	@ 0x28
 8003b70:	2101      	movs	r1, #1
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 f818 	bl	8004ba8 <RCCEx_PLL3_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b7e:	e004      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b86:	e000      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b92:	4b96      	ldr	r3, [pc, #600]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b96:	f023 0107 	bic.w	r1, r3, #7
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ba0:	4a92      	ldr	r2, [pc, #584]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ba6:	e003      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb8:	f002 0304 	and.w	r3, r2, #4
 8003bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bc6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	d044      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bd8:	2b05      	cmp	r3, #5
 8003bda:	d825      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003be4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003c31 	.word	0x08003c31
 8003be8:	08003bfd 	.word	0x08003bfd
 8003bec:	08003c13 	.word	0x08003c13
 8003bf0:	08003c31 	.word	0x08003c31
 8003bf4:	08003c31 	.word	0x08003c31
 8003bf8:	08003c31 	.word	0x08003c31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c00:	3308      	adds	r3, #8
 8003c02:	2101      	movs	r1, #1
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 ff1d 	bl	8004a44 <RCCEx_PLL2_Config>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c10:	e00f      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c16:	3328      	adds	r3, #40	@ 0x28
 8003c18:	2101      	movs	r1, #1
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 ffc4 	bl	8004ba8 <RCCEx_PLL3_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c26:	e004      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c2e:	e000      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10b      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c3a:	4b6c      	ldr	r3, [pc, #432]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3e:	f023 0107 	bic.w	r1, r3, #7
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c4a:	4a68      	ldr	r2, [pc, #416]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c50:	e003      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c62:	f002 0320 	and.w	r3, r2, #32
 8003c66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c74:	460b      	mov	r3, r1
 8003c76:	4313      	orrs	r3, r2
 8003c78:	d055      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c86:	d033      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c8c:	d82c      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c92:	d02f      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c98:	d826      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c9e:	d02b      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003ca0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ca4:	d820      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ca6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003caa:	d012      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cb0:	d81a      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d022      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003cb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cba:	d115      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 febd 	bl	8004a44 <RCCEx_PLL2_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003cd0:	e015      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd6:	3328      	adds	r3, #40	@ 0x28
 8003cd8:	2102      	movs	r1, #2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 ff64 	bl	8004ba8 <RCCEx_PLL3_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cee:	e006      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003cf0:	bf00      	nop
 8003cf2:	e004      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003cf4:	bf00      	nop
 8003cf6:	e002      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003cf8:	bf00      	nop
 8003cfa:	e000      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10b      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d06:	4b39      	ldr	r3, [pc, #228]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d16:	4a35      	ldr	r2, [pc, #212]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d1c:	e003      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003d32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d36:	2300      	movs	r3, #0
 8003d38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003d3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4313      	orrs	r3, r2
 8003d44:	d058      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003d52:	d033      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003d54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003d58:	d82c      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d5e:	d02f      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d64:	d826      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d6a:	d02b      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003d6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d70:	d820      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d76:	d012      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003d78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d7c:	d81a      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d022      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d86:	d115      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8c:	3308      	adds	r3, #8
 8003d8e:	2100      	movs	r1, #0
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fe57 	bl	8004a44 <RCCEx_PLL2_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d9c:	e015      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da2:	3328      	adds	r3, #40	@ 0x28
 8003da4:	2102      	movs	r1, #2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fefe 	bl	8004ba8 <RCCEx_PLL3_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003db2:	e00a      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dba:	e006      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003dbc:	bf00      	nop
 8003dbe:	e004      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003dc0:	bf00      	nop
 8003dc2:	e002      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003dc4:	bf00      	nop
 8003dc6:	e000      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10e      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dd2:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003de2:	4a02      	ldr	r2, [pc, #8]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003de4:	430b      	orrs	r3, r1
 8003de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003de8:	e006      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003dea:	bf00      	nop
 8003dec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e00:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003e04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003e12:	460b      	mov	r3, r1
 8003e14:	4313      	orrs	r3, r2
 8003e16:	d055      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e20:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003e24:	d033      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003e26:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003e2a:	d82c      	bhi.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e30:	d02f      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003e32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e36:	d826      	bhi.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e38:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003e3c:	d02b      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003e3e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003e42:	d820      	bhi.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e48:	d012      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003e4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e4e:	d81a      	bhi.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d022      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e58:	d115      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5e:	3308      	adds	r3, #8
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fdee 	bl	8004a44 <RCCEx_PLL2_Config>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e6e:	e015      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e74:	3328      	adds	r3, #40	@ 0x28
 8003e76:	2102      	movs	r1, #2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fe95 	bl	8004ba8 <RCCEx_PLL3_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e84:	e00a      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e8c:	e006      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e8e:	bf00      	nop
 8003e90:	e004      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e92:	bf00      	nop
 8003e94:	e002      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e96:	bf00      	nop
 8003e98:	e000      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10b      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ea4:	4ba1      	ldr	r3, [pc, #644]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003eb4:	4a9d      	ldr	r2, [pc, #628]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eba:	e003      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	f002 0308 	and.w	r3, r2, #8
 8003ed0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003eda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	d01e      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef0:	d10c      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef6:	3328      	adds	r3, #40	@ 0x28
 8003ef8:	2102      	movs	r1, #2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fe54 	bl	8004ba8 <RCCEx_PLL3_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f0c:	4b87      	ldr	r3, [pc, #540]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f10:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f1c:	4a83      	ldr	r2, [pc, #524]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f1e:	430b      	orrs	r3, r1
 8003f20:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	f002 0310 	and.w	r3, r2, #16
 8003f2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f32:	2300      	movs	r3, #0
 8003f34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	d01e      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f4e:	d10c      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f54:	3328      	adds	r3, #40	@ 0x28
 8003f56:	2102      	movs	r1, #2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fe25 	bl	8004ba8 <RCCEx_PLL3_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f6a:	4b70      	ldr	r3, [pc, #448]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f7a:	4a6c      	ldr	r2, [pc, #432]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f88:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003f8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f90:	2300      	movs	r3, #0
 8003f92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	d03e      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003fa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fac:	d022      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003fae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fb2:	d81b      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fbc:	d00b      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003fbe:	e015      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fd3b 	bl	8004a44 <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fd4:	e00f      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fda:	3328      	adds	r3, #40	@ 0x28
 8003fdc:	2102      	movs	r1, #2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fde2 	bl	8004ba8 <RCCEx_PLL3_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fea:	e004      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ffe:	4b4b      	ldr	r3, [pc, #300]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004002:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800400e:	4a47      	ldr	r2, [pc, #284]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004010:	430b      	orrs	r3, r1
 8004012:	6593      	str	r3, [r2, #88]	@ 0x58
 8004014:	e003      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800401a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800402a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800402c:	2300      	movs	r3, #0
 800402e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004030:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004034:	460b      	mov	r3, r1
 8004036:	4313      	orrs	r3, r2
 8004038:	d03b      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004042:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004046:	d01f      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004048:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800404c:	d818      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800404e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004052:	d003      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004054:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004058:	d007      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800405a:	e011      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800405c:	4b33      	ldr	r3, [pc, #204]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800405e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004060:	4a32      	ldr	r2, [pc, #200]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004066:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004068:	e00f      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406e:	3328      	adds	r3, #40	@ 0x28
 8004070:	2101      	movs	r1, #1
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fd98 	bl	8004ba8 <RCCEx_PLL3_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800407e:	e004      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004086:	e000      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800408a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10b      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004092:	4b26      	ldr	r3, [pc, #152]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004096:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a2:	4a22      	ldr	r2, [pc, #136]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80040a8:	e003      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80040be:	673b      	str	r3, [r7, #112]	@ 0x70
 80040c0:	2300      	movs	r3, #0
 80040c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80040c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80040c8:	460b      	mov	r3, r1
 80040ca:	4313      	orrs	r3, r2
 80040cc:	d034      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80040ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80040d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040dc:	d007      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80040de:	e011      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e0:	4b12      	ldr	r3, [pc, #72]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e4:	4a11      	ldr	r2, [pc, #68]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040ec:	e00e      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f2:	3308      	adds	r3, #8
 80040f4:	2102      	movs	r1, #2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fca4 	bl	8004a44 <RCCEx_PLL2_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004102:	e003      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800410a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10d      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004114:	4b05      	ldr	r3, [pc, #20]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004118:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004122:	4a02      	ldr	r2, [pc, #8]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004124:	430b      	orrs	r3, r1
 8004126:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004128:	e006      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800412a:	bf00      	nop
 800412c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004144:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004146:	2300      	movs	r3, #0
 8004148:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800414a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800414e:	460b      	mov	r3, r1
 8004150:	4313      	orrs	r3, r2
 8004152:	d00c      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004158:	3328      	adds	r3, #40	@ 0x28
 800415a:	2102      	movs	r1, #2
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fd23 	bl	8004ba8 <RCCEx_PLL3_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800416e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800417a:	663b      	str	r3, [r7, #96]	@ 0x60
 800417c:	2300      	movs	r3, #0
 800417e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004180:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004184:	460b      	mov	r3, r1
 8004186:	4313      	orrs	r3, r2
 8004188:	d038      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004192:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004196:	d018      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004198:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800419c:	d811      	bhi.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800419e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041a2:	d014      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80041a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041a8:	d80b      	bhi.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d011      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80041ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041b2:	d106      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b4:	4bc3      	ldr	r3, [pc, #780]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	4ac2      	ldr	r2, [pc, #776]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80041c0:	e008      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041c8:	e004      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041ca:	bf00      	nop
 80041cc:	e002      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041ce:	bf00      	nop
 80041d0:	e000      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10b      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041dc:	4bb9      	ldr	r3, [pc, #740]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041ec:	4ab5      	ldr	r2, [pc, #724]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041ee:	430b      	orrs	r3, r1
 80041f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80041f2:	e003      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004208:	65bb      	str	r3, [r7, #88]	@ 0x58
 800420a:	2300      	movs	r3, #0
 800420c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800420e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004212:	460b      	mov	r3, r1
 8004214:	4313      	orrs	r3, r2
 8004216:	d009      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004218:	4baa      	ldr	r3, [pc, #680]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800421a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800421c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004226:	4aa7      	ldr	r2, [pc, #668]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004228:	430b      	orrs	r3, r1
 800422a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800422c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004234:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004238:	653b      	str	r3, [r7, #80]	@ 0x50
 800423a:	2300      	movs	r3, #0
 800423c:	657b      	str	r3, [r7, #84]	@ 0x54
 800423e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004242:	460b      	mov	r3, r1
 8004244:	4313      	orrs	r3, r2
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004248:	4b9e      	ldr	r3, [pc, #632]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004254:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004258:	4a9a      	ldr	r2, [pc, #616]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800425a:	430b      	orrs	r3, r1
 800425c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800425e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800426a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800426c:	2300      	movs	r3, #0
 800426e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004270:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004274:	460b      	mov	r3, r1
 8004276:	4313      	orrs	r3, r2
 8004278:	d009      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800427a:	4b92      	ldr	r3, [pc, #584]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800427c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800427e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004288:	4a8e      	ldr	r2, [pc, #568]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800428a:	430b      	orrs	r3, r1
 800428c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800429a:	643b      	str	r3, [r7, #64]	@ 0x40
 800429c:	2300      	movs	r3, #0
 800429e:	647b      	str	r3, [r7, #68]	@ 0x44
 80042a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80042a4:	460b      	mov	r3, r1
 80042a6:	4313      	orrs	r3, r2
 80042a8:	d00e      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042aa:	4b86      	ldr	r3, [pc, #536]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	4a85      	ldr	r2, [pc, #532]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80042b4:	6113      	str	r3, [r2, #16]
 80042b6:	4b83      	ldr	r3, [pc, #524]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042b8:	6919      	ldr	r1, [r3, #16]
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80042c2:	4a80      	ldr	r2, [pc, #512]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80042d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042d6:	2300      	movs	r3, #0
 80042d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80042de:	460b      	mov	r3, r1
 80042e0:	4313      	orrs	r3, r2
 80042e2:	d009      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042e4:	4b77      	ldr	r3, [pc, #476]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80042ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f2:	4a74      	ldr	r2, [pc, #464]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042f4:	430b      	orrs	r3, r1
 80042f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004304:	633b      	str	r3, [r7, #48]	@ 0x30
 8004306:	2300      	movs	r3, #0
 8004308:	637b      	str	r3, [r7, #52]	@ 0x34
 800430a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800430e:	460b      	mov	r3, r1
 8004310:	4313      	orrs	r3, r2
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004314:	4b6b      	ldr	r3, [pc, #428]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004318:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004324:	4a67      	ldr	r2, [pc, #412]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004326:	430b      	orrs	r3, r1
 8004328:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800432a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004332:	2100      	movs	r1, #0
 8004334:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800433c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004340:	460b      	mov	r3, r1
 8004342:	4313      	orrs	r3, r2
 8004344:	d011      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434a:	3308      	adds	r3, #8
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fb78 	bl	8004a44 <RCCEx_PLL2_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800435a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004366:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800436a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	2100      	movs	r1, #0
 8004374:	6239      	str	r1, [r7, #32]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	627b      	str	r3, [r7, #36]	@ 0x24
 800437c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004380:	460b      	mov	r3, r1
 8004382:	4313      	orrs	r3, r2
 8004384:	d011      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438a:	3308      	adds	r3, #8
 800438c:	2101      	movs	r1, #1
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fb58 	bl	8004a44 <RCCEx_PLL2_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800439a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80043aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	2100      	movs	r1, #0
 80043b4:	61b9      	str	r1, [r7, #24]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80043c0:	460b      	mov	r3, r1
 80043c2:	4313      	orrs	r3, r2
 80043c4:	d011      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ca:	3308      	adds	r3, #8
 80043cc:	2102      	movs	r1, #2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fb38 	bl	8004a44 <RCCEx_PLL2_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80043da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	2100      	movs	r1, #0
 80043f4:	6139      	str	r1, [r7, #16]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004400:	460b      	mov	r3, r1
 8004402:	4313      	orrs	r3, r2
 8004404:	d011      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440a:	3328      	adds	r3, #40	@ 0x28
 800440c:	2100      	movs	r1, #0
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fbca 	bl	8004ba8 <RCCEx_PLL3_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800441a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004426:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800442a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	2100      	movs	r1, #0
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	f003 0310 	and.w	r3, r3, #16
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004440:	460b      	mov	r3, r1
 8004442:	4313      	orrs	r3, r2
 8004444:	d011      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444a:	3328      	adds	r3, #40	@ 0x28
 800444c:	2101      	movs	r1, #1
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fbaa 	bl	8004ba8 <RCCEx_PLL3_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800445a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	2100      	movs	r1, #0
 8004474:	6039      	str	r1, [r7, #0]
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	607b      	str	r3, [r7, #4]
 800447c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004480:	460b      	mov	r3, r1
 8004482:	4313      	orrs	r3, r2
 8004484:	d011      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448a:	3328      	adds	r3, #40	@ 0x28
 800448c:	2102      	movs	r1, #2
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fb8a 	bl	8004ba8 <RCCEx_PLL3_Config>
 8004494:	4603      	mov	r3, r0
 8004496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800449a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80044aa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80044be:	46bd      	mov	sp, r7
 80044c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044c4:	58024400 	.word	0x58024400

080044c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80044cc:	f7fe fd96 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	091b      	lsrs	r3, r3, #4
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	4904      	ldr	r1, [pc, #16]	@ (80044f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80044de:	5ccb      	ldrb	r3, [r1, r3]
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	58024400 	.word	0x58024400
 80044f0:	08007b8c 	.word	0x08007b8c

080044f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	@ 0x24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044fc:	4ba1      	ldr	r3, [pc, #644]	@ (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004506:	4b9f      	ldr	r3, [pc, #636]	@ (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450a:	0b1b      	lsrs	r3, r3, #12
 800450c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004510:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004512:	4b9c      	ldr	r3, [pc, #624]	@ (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004516:	091b      	lsrs	r3, r3, #4
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800451e:	4b99      	ldr	r3, [pc, #612]	@ (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004522:	08db      	lsrs	r3, r3, #3
 8004524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	fb02 f303 	mul.w	r3, r2, r3
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8111 	beq.w	8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	2b02      	cmp	r3, #2
 8004546:	f000 8083 	beq.w	8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2b02      	cmp	r3, #2
 800454e:	f200 80a1 	bhi.w	8004694 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d056      	beq.n	800460c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800455e:	e099      	b.n	8004694 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004560:	4b88      	ldr	r3, [pc, #544]	@ (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d02d      	beq.n	80045c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800456c:	4b85      	ldr	r3, [pc, #532]	@ (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	08db      	lsrs	r3, r3, #3
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	4a84      	ldr	r2, [pc, #528]	@ (8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
 800457c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	ee07 3a90 	vmov	s15, r3
 8004584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004596:	4b7b      	ldr	r3, [pc, #492]	@ (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800478c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045c6:	e087      	b.n	80046d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004790 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80045d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045da:	4b6a      	ldr	r3, [pc, #424]	@ (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800478c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800460a:	e065      	b.n	80046d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004794 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800461a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461e:	4b59      	ldr	r3, [pc, #356]	@ (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004632:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800478c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800464e:	e043      	b.n	80046d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800465e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004662:	4b48      	ldr	r3, [pc, #288]	@ (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004672:	ed97 6a03 	vldr	s12, [r7, #12]
 8004676:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800478c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800467a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004692:	e021      	b.n	80046d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004794 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a6:	4b37      	ldr	r3, [pc, #220]	@ (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800478c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80046d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046dc:	0a5b      	lsrs	r3, r3, #9
 80046de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046fe:	ee17 2a90 	vmov	r2, s15
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004706:	4b1f      	ldr	r3, [pc, #124]	@ (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470a:	0c1b      	lsrs	r3, r3, #16
 800470c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004710:	ee07 3a90 	vmov	s15, r3
 8004714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004718:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800471c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004720:	edd7 6a07 	vldr	s13, [r7, #28]
 8004724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800472c:	ee17 2a90 	vmov	r2, s15
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004734:	4b13      	ldr	r3, [pc, #76]	@ (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004738:	0e1b      	lsrs	r3, r3, #24
 800473a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800474a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800474e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800475a:	ee17 2a90 	vmov	r2, s15
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004762:	e008      	b.n	8004776 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	609a      	str	r2, [r3, #8]
}
 8004776:	bf00      	nop
 8004778:	3724      	adds	r7, #36	@ 0x24
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	58024400 	.word	0x58024400
 8004788:	03d09000 	.word	0x03d09000
 800478c:	46000000 	.word	0x46000000
 8004790:	4c742400 	.word	0x4c742400
 8004794:	4a742400 	.word	0x4a742400
 8004798:	4bbebc20 	.word	0x4bbebc20

0800479c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800479c:	b480      	push	{r7}
 800479e:	b089      	sub	sp, #36	@ 0x24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047a4:	4ba1      	ldr	r3, [pc, #644]	@ (8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80047ae:	4b9f      	ldr	r3, [pc, #636]	@ (8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b2:	0d1b      	lsrs	r3, r3, #20
 80047b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80047ba:	4b9c      	ldr	r3, [pc, #624]	@ (8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047be:	0a1b      	lsrs	r3, r3, #8
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80047c6:	4b99      	ldr	r3, [pc, #612]	@ (8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ca:	08db      	lsrs	r3, r3, #3
 80047cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	fb02 f303 	mul.w	r3, r2, r3
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8111 	beq.w	8004a0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	f000 8083 	beq.w	80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	f200 80a1 	bhi.w	800493c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d056      	beq.n	80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004806:	e099      	b.n	800493c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004808:	4b88      	ldr	r3, [pc, #544]	@ (8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d02d      	beq.n	8004870 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004814:	4b85      	ldr	r3, [pc, #532]	@ (8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	08db      	lsrs	r3, r3, #3
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	4a84      	ldr	r2, [pc, #528]	@ (8004a30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
 8004824:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	ee07 3a90 	vmov	s15, r3
 800482c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483e:	4b7b      	ldr	r3, [pc, #492]	@ (8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004852:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800485a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800486e:	e087      	b.n	8004980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800487e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004882:	4b6a      	ldr	r3, [pc, #424]	@ (8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004892:	ed97 6a03 	vldr	s12, [r7, #12]
 8004896:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800489a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048b2:	e065      	b.n	8004980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c6:	4b59      	ldr	r3, [pc, #356]	@ (8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048f6:	e043      	b.n	8004980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004902:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800490a:	4b48      	ldr	r3, [pc, #288]	@ (8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800491a:	ed97 6a03 	vldr	s12, [r7, #12]
 800491e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800492a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800492e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800493a:	e021      	b.n	8004980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004946:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800494a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494e:	4b37      	ldr	r3, [pc, #220]	@ (8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004962:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800496a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800497e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004980:	4b2a      	ldr	r3, [pc, #168]	@ (8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004984:	0a5b      	lsrs	r3, r3, #9
 8004986:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004992:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004996:	ee37 7a87 	vadd.f32	s14, s15, s14
 800499a:	edd7 6a07 	vldr	s13, [r7, #28]
 800499e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049a6:	ee17 2a90 	vmov	r2, s15
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80049ae:	4b1f      	ldr	r3, [pc, #124]	@ (8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	0c1b      	lsrs	r3, r3, #16
 80049b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049b8:	ee07 3a90 	vmov	s15, r3
 80049bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80049cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d4:	ee17 2a90 	vmov	r2, s15
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80049dc:	4b13      	ldr	r3, [pc, #76]	@ (8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e0:	0e1b      	lsrs	r3, r3, #24
 80049e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a02:	ee17 2a90 	vmov	r2, s15
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a0a:	e008      	b.n	8004a1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	609a      	str	r2, [r3, #8]
}
 8004a1e:	bf00      	nop
 8004a20:	3724      	adds	r7, #36	@ 0x24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	58024400 	.word	0x58024400
 8004a30:	03d09000 	.word	0x03d09000
 8004a34:	46000000 	.word	0x46000000
 8004a38:	4c742400 	.word	0x4c742400
 8004a3c:	4a742400 	.word	0x4a742400
 8004a40:	4bbebc20 	.word	0x4bbebc20

08004a44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a52:	4b53      	ldr	r3, [pc, #332]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d101      	bne.n	8004a62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e099      	b.n	8004b96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a62:	4b4f      	ldr	r3, [pc, #316]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a4e      	ldr	r2, [pc, #312]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004a68:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6e:	f7fc fcad 	bl	80013cc <HAL_GetTick>
 8004a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a74:	e008      	b.n	8004a88 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a76:	f7fc fca9 	bl	80013cc <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e086      	b.n	8004b96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a88:	4b45      	ldr	r3, [pc, #276]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1f0      	bne.n	8004a76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a94:	4b42      	ldr	r3, [pc, #264]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a98:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	031b      	lsls	r3, r3, #12
 8004aa2:	493f      	ldr	r1, [pc, #252]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	025b      	lsls	r3, r3, #9
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	041b      	lsls	r3, r3, #16
 8004ac6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	061b      	lsls	r3, r3, #24
 8004ad4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ad8:	4931      	ldr	r1, [pc, #196]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ade:	4b30      	ldr	r3, [pc, #192]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	492d      	ldr	r1, [pc, #180]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004af0:	4b2b      	ldr	r3, [pc, #172]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af4:	f023 0220 	bic.w	r2, r3, #32
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	4928      	ldr	r1, [pc, #160]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b02:	4b27      	ldr	r3, [pc, #156]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b06:	4a26      	ldr	r2, [pc, #152]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004b08:	f023 0310 	bic.w	r3, r3, #16
 8004b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b0e:	4b24      	ldr	r3, [pc, #144]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004b10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b12:	4b24      	ldr	r3, [pc, #144]	@ (8004ba4 <RCCEx_PLL2_Config+0x160>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	69d2      	ldr	r2, [r2, #28]
 8004b1a:	00d2      	lsls	r2, r2, #3
 8004b1c:	4920      	ldr	r1, [pc, #128]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b22:	4b1f      	ldr	r3, [pc, #124]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b26:	4a1e      	ldr	r2, [pc, #120]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004b28:	f043 0310 	orr.w	r3, r3, #16
 8004b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d106      	bne.n	8004b42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b34:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	4a19      	ldr	r2, [pc, #100]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004b3a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b40:	e00f      	b.n	8004b62 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d106      	bne.n	8004b56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b48:	4b15      	ldr	r3, [pc, #84]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4c:	4a14      	ldr	r2, [pc, #80]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004b4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b54:	e005      	b.n	8004b62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b56:	4b12      	ldr	r3, [pc, #72]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	4a11      	ldr	r2, [pc, #68]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004b5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b60:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b62:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a0e      	ldr	r2, [pc, #56]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004b68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6e:	f7fc fc2d 	bl	80013cc <HAL_GetTick>
 8004b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b74:	e008      	b.n	8004b88 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b76:	f7fc fc29 	bl	80013cc <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e006      	b.n	8004b96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b88:	4b05      	ldr	r3, [pc, #20]	@ (8004ba0 <RCCEx_PLL2_Config+0x15c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	58024400 	.word	0x58024400
 8004ba4:	ffff0007 	.word	0xffff0007

08004ba8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bb6:	4b53      	ldr	r3, [pc, #332]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	d101      	bne.n	8004bc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e099      	b.n	8004cfa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a4e      	ldr	r2, [pc, #312]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004bcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd2:	f7fc fbfb 	bl	80013cc <HAL_GetTick>
 8004bd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bd8:	e008      	b.n	8004bec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004bda:	f7fc fbf7 	bl	80013cc <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e086      	b.n	8004cfa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bec:	4b45      	ldr	r3, [pc, #276]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1f0      	bne.n	8004bda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004bf8:	4b42      	ldr	r3, [pc, #264]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	051b      	lsls	r3, r3, #20
 8004c06:	493f      	ldr	r1, [pc, #252]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	025b      	lsls	r3, r3, #9
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	041b      	lsls	r3, r3, #16
 8004c2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	061b      	lsls	r3, r3, #24
 8004c38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c3c:	4931      	ldr	r1, [pc, #196]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c42:	4b30      	ldr	r3, [pc, #192]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c46:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	492d      	ldr	r1, [pc, #180]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c54:	4b2b      	ldr	r3, [pc, #172]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	4928      	ldr	r1, [pc, #160]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c66:	4b27      	ldr	r3, [pc, #156]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6a:	4a26      	ldr	r2, [pc, #152]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c72:	4b24      	ldr	r3, [pc, #144]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004c74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c76:	4b24      	ldr	r3, [pc, #144]	@ (8004d08 <RCCEx_PLL3_Config+0x160>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	69d2      	ldr	r2, [r2, #28]
 8004c7e:	00d2      	lsls	r2, r2, #3
 8004c80:	4920      	ldr	r1, [pc, #128]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c86:	4b1f      	ldr	r3, [pc, #124]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d106      	bne.n	8004ca6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c98:	4b1a      	ldr	r3, [pc, #104]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	4a19      	ldr	r2, [pc, #100]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004c9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ca4:	e00f      	b.n	8004cc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d106      	bne.n	8004cba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004cac:	4b15      	ldr	r3, [pc, #84]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb0:	4a14      	ldr	r2, [pc, #80]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004cb2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cb8:	e005      	b.n	8004cc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004cba:	4b12      	ldr	r3, [pc, #72]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbe:	4a11      	ldr	r2, [pc, #68]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004cc0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a0e      	ldr	r2, [pc, #56]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd2:	f7fc fb7b 	bl	80013cc <HAL_GetTick>
 8004cd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cd8:	e008      	b.n	8004cec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cda:	f7fc fb77 	bl	80013cc <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e006      	b.n	8004cfa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cec:	4b05      	ldr	r3, [pc, #20]	@ (8004d04 <RCCEx_PLL3_Config+0x15c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	58024400 	.word	0x58024400
 8004d08:	ffff0007 	.word	0xffff0007

08004d0c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e10f      	b.n	8004f3e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a87      	ldr	r2, [pc, #540]	@ (8004f48 <HAL_SPI_Init+0x23c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00f      	beq.n	8004d4e <HAL_SPI_Init+0x42>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a86      	ldr	r2, [pc, #536]	@ (8004f4c <HAL_SPI_Init+0x240>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00a      	beq.n	8004d4e <HAL_SPI_Init+0x42>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a84      	ldr	r2, [pc, #528]	@ (8004f50 <HAL_SPI_Init+0x244>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d005      	beq.n	8004d4e <HAL_SPI_Init+0x42>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	2b0f      	cmp	r3, #15
 8004d48:	d901      	bls.n	8004d4e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e0f7      	b.n	8004f3e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fe0e 	bl	8005970 <SPI_GetPacketSize>
 8004d54:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a7b      	ldr	r2, [pc, #492]	@ (8004f48 <HAL_SPI_Init+0x23c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00c      	beq.n	8004d7a <HAL_SPI_Init+0x6e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a79      	ldr	r2, [pc, #484]	@ (8004f4c <HAL_SPI_Init+0x240>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d007      	beq.n	8004d7a <HAL_SPI_Init+0x6e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a78      	ldr	r2, [pc, #480]	@ (8004f50 <HAL_SPI_Init+0x244>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d002      	beq.n	8004d7a <HAL_SPI_Init+0x6e>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d811      	bhi.n	8004d9e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004d7e:	4a72      	ldr	r2, [pc, #456]	@ (8004f48 <HAL_SPI_Init+0x23c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d009      	beq.n	8004d98 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a70      	ldr	r2, [pc, #448]	@ (8004f4c <HAL_SPI_Init+0x240>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d004      	beq.n	8004d98 <HAL_SPI_Init+0x8c>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a6f      	ldr	r2, [pc, #444]	@ (8004f50 <HAL_SPI_Init+0x244>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d104      	bne.n	8004da2 <HAL_SPI_Init+0x96>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b10      	cmp	r3, #16
 8004d9c:	d901      	bls.n	8004da2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e0cd      	b.n	8004f3e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fc f81e 	bl	8000df8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0201 	bic.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004dde:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004de8:	d119      	bne.n	8004e1e <HAL_SPI_Init+0x112>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004df2:	d103      	bne.n	8004dfc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d008      	beq.n	8004e0e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10c      	bne.n	8004e1e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004e08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e0c:	d107      	bne.n	8004e1e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00f      	beq.n	8004e4a <HAL_SPI_Init+0x13e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	2b06      	cmp	r3, #6
 8004e30:	d90b      	bls.n	8004e4a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	e007      	b.n	8004e5a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69da      	ldr	r2, [r3, #28]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e62:	431a      	orrs	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6c:	ea42 0103 	orr.w	r1, r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eba:	ea42 0103 	orr.w	r1, r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d113      	bne.n	8004efa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ee4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ef8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0201 	bic.w	r2, r2, #1
 8004f08:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40013000 	.word	0x40013000
 8004f4c:	40003800 	.word	0x40003800
 8004f50:	40003c00 	.word	0x40003c00

08004f54 <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if ((pData == NULL) || (Size == 0UL))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_SPI_Transmit_IT+0x1a>
 8004f68:	88fb      	ldrh	r3, [r7, #6]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e08b      	b.n	800508a <HAL_SPI_Transmit_IT+0x136>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d001      	beq.n	8004f82 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e083      	b.n	800508a <HAL_SPI_Transmit_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_SPI_Transmit_IT+0x3c>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e07c      	b.n	800508a <HAL_SPI_Transmit_IT+0x136>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	88fa      	ldrh	r2, [r7, #6]
 8004fb2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	88fa      	ldrh	r2, [r7, #6]
 8004fba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	2b0f      	cmp	r3, #15
 8004fe0:	d903      	bls.n	8004fea <HAL_SPI_Transmit_IT+0x96>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8005098 <HAL_SPI_Transmit_IT+0x144>)
 8004fe6:	675a      	str	r2, [r3, #116]	@ 0x74
 8004fe8:	e00a      	b.n	8005000 <HAL_SPI_Transmit_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	2b07      	cmp	r3, #7
 8004ff0:	d903      	bls.n	8004ffa <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4a29      	ldr	r2, [pc, #164]	@ (800509c <HAL_SPI_Transmit_IT+0x148>)
 8004ff6:	675a      	str	r2, [r3, #116]	@ 0x74
 8004ff8:	e002      	b.n	8005000 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4a28      	ldr	r2, [pc, #160]	@ (80050a0 <HAL_SPI_Transmit_IT+0x14c>)
 8004ffe:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005008:	d108      	bne.n	800501c <HAL_SPI_Transmit_IT+0xc8>
  {
    SPI_1LINE_TX(hspi);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	e009      	b.n	8005030 <HAL_SPI_Transmit_IT+0xdc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800502e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	4b1b      	ldr	r3, [pc, #108]	@ (80050a4 <HAL_SPI_Transmit_IT+0x150>)
 8005038:	4013      	ands	r3, r2
 800503a:	88f9      	ldrh	r1, [r7, #6]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	430b      	orrs	r3, r1
 8005042:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6919      	ldr	r1, [r3, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	f240 732a 	movw	r3, #1834	@ 0x72a
 800506a:	430b      	orrs	r3, r1
 800506c:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005076:	d107      	bne.n	8005088 <HAL_SPI_Transmit_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005086:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	080057d7 	.word	0x080057d7
 800509c:	08005779 	.word	0x08005779
 80050a0:	0800571f 	.word	0x0800571f
 80050a4:	ffff0000 	.word	0xffff0000

080050a8 <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	4613      	mov	r3, r2
 80050b4:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d001      	beq.n	80050c6 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 80050c2:	2302      	movs	r3, #2
 80050c4:	e08b      	b.n	80051de <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0UL))
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <HAL_SPI_Receive_IT+0x2a>
 80050cc:	88fb      	ldrh	r3, [r7, #6]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e083      	b.n	80051de <HAL_SPI_Receive_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_SPI_Receive_IT+0x3c>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e07c      	b.n	80051de <HAL_SPI_Receive_IT+0x136>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2204      	movs	r2, #4
 80050f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	88fa      	ldrh	r2, [r7, #6]
 8005106:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	88fa      	ldrh	r2, [r7, #6]
 800510e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxISR       = NULL;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->Reload.pRxBuffPtr  = NULL;
  hspi->Reload.RxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	2b0f      	cmp	r3, #15
 8005134:	d903      	bls.n	800513e <HAL_SPI_Receive_IT+0x96>
  {
    hspi->RxISR = SPI_RxISR_32BIT;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4a2c      	ldr	r2, [pc, #176]	@ (80051ec <HAL_SPI_Receive_IT+0x144>)
 800513a:	671a      	str	r2, [r3, #112]	@ 0x70
 800513c:	e00a      	b.n	8005154 <HAL_SPI_Receive_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	2b07      	cmp	r3, #7
 8005144:	d903      	bls.n	800514e <HAL_SPI_Receive_IT+0xa6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4a29      	ldr	r2, [pc, #164]	@ (80051f0 <HAL_SPI_Receive_IT+0x148>)
 800514a:	671a      	str	r2, [r3, #112]	@ 0x70
 800514c:	e002      	b.n	8005154 <HAL_SPI_Receive_IT+0xac>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4a28      	ldr	r2, [pc, #160]	@ (80051f4 <HAL_SPI_Receive_IT+0x14c>)
 8005152:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800515c:	d108      	bne.n	8005170 <HAL_SPI_Receive_IT+0xc8>
  {
    SPI_1LINE_RX(hspi);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e009      	b.n	8005184 <HAL_SPI_Receive_IT+0xdc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005182:	60da      	str	r2, [r3, #12]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	4b1b      	ldr	r3, [pc, #108]	@ (80051f8 <HAL_SPI_Receive_IT+0x150>)
 800518c:	4013      	ands	r3, r2
 800518e:	88f9      	ldrh	r1, [r7, #6]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	430b      	orrs	r3, r1
 8005196:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, RXP, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6919      	ldr	r1, [r3, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	f240 7349 	movw	r3, #1865	@ 0x749
 80051be:	430b      	orrs	r3, r1
 80051c0:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051ca:	d107      	bne.n	80051dc <HAL_SPI_Receive_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	080056c7 	.word	0x080056c7
 80051f0:	08005667 	.word	0x08005667
 80051f4:	08005609 	.word	0x08005609
 80051f8:	ffff0000 	.word	0xffff0000

080051fc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	@ 0x28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005214:	6a3a      	ldr	r2, [r7, #32]
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4013      	ands	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005224:	2300      	movs	r3, #0
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800522e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3330      	adds	r3, #48	@ 0x30
 8005236:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800523e:	2b00      	cmp	r3, #0
 8005240:	d010      	beq.n	8005264 <HAL_SPI_IRQHandler+0x68>
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00b      	beq.n	8005264 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800525a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f9af 	bl	80055c0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8005262:	e192      	b.n	800558a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	d113      	bne.n	8005296 <HAL_SPI_IRQHandler+0x9a>
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10e      	bne.n	8005296 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800527e:	2b00      	cmp	r3, #0
 8005280:	d009      	beq.n	8005296 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	4798      	blx	r3
    hspi->RxISR(hspi);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	4798      	blx	r3
    handled = 1UL;
 8005292:	2301      	movs	r3, #1
 8005294:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10f      	bne.n	80052c0 <HAL_SPI_IRQHandler+0xc4>
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d105      	bne.n	80052c0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	4798      	blx	r3
    handled = 1UL;
 80052bc:	2301      	movs	r3, #1
 80052be:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10f      	bne.n	80052ea <HAL_SPI_IRQHandler+0xee>
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d105      	bne.n	80052ea <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	4798      	blx	r3
    handled = 1UL;
 80052e6:	2301      	movs	r3, #1
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f040 8147 	bne.w	8005580 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 808b 	beq.w	8005414 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699a      	ldr	r2, [r3, #24]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f042 0208 	orr.w	r2, r2, #8
 800530c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699a      	ldr	r2, [r3, #24]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0210 	orr.w	r2, r2, #16
 800531c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699a      	ldr	r2, [r3, #24]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800532c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0208 	bic.w	r2, r2, #8
 800533c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d13d      	bne.n	80053c8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800534c:	e036      	b.n	80053bc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	2b0f      	cmp	r3, #15
 8005354:	d90b      	bls.n	800536e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800535e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005360:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005366:	1d1a      	adds	r2, r3, #4
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	665a      	str	r2, [r3, #100]	@ 0x64
 800536c:	e01d      	b.n	80053aa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	2b07      	cmp	r3, #7
 8005374:	d90b      	bls.n	800538e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	8812      	ldrh	r2, [r2, #0]
 800537e:	b292      	uxth	r2, r2
 8005380:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005386:	1c9a      	adds	r2, r3, #2
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	665a      	str	r2, [r3, #100]	@ 0x64
 800538c:	e00d      	b.n	80053aa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800539a:	7812      	ldrb	r2, [r2, #0]
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1c2      	bne.n	800534e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fa31 	bl	8005830 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7fb fbf9 	bl	8000bd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80053e6:	e0d0      	b.n	800558a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80053e8:	7cfb      	ldrb	r3, [r7, #19]
 80053ea:	2b05      	cmp	r3, #5
 80053ec:	d103      	bne.n	80053f6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f8dc 	bl	80055ac <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80053f4:	e0c6      	b.n	8005584 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80053f6:	7cfb      	ldrb	r3, [r7, #19]
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d103      	bne.n	8005404 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7fb fbbf 	bl	8000b80 <HAL_SPI_RxCpltCallback>
    return;
 8005402:	e0bf      	b.n	8005584 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005404:	7cfb      	ldrb	r3, [r7, #19]
 8005406:	2b03      	cmp	r3, #3
 8005408:	f040 80bc 	bne.w	8005584 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f8c3 	bl	8005598 <HAL_SPI_TxCpltCallback>
    return;
 8005412:	e0b7      	b.n	8005584 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 80b5 	beq.w	800558a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00f      	beq.n	800544a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005430:	f043 0204 	orr.w	r2, r3, #4
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699a      	ldr	r2, [r3, #24]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005448:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00f      	beq.n	8005474 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800545a:	f043 0201 	orr.w	r2, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005472:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00f      	beq.n	800549e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005484:	f043 0208 	orr.w	r2, r3, #8
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699a      	ldr	r2, [r3, #24]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800549c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00f      	beq.n	80054c8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0220 	orr.w	r2, r2, #32
 80054c6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d05a      	beq.n	8005588 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0201 	bic.w	r2, r2, #1
 80054e0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6919      	ldr	r1, [r3, #16]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4b28      	ldr	r3, [pc, #160]	@ (8005590 <HAL_SPI_IRQHandler+0x394>)
 80054ee:	400b      	ands	r3, r1
 80054f0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80054f8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80054fc:	d138      	bne.n	8005570 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800550c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d013      	beq.n	800553e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800551a:	4a1e      	ldr	r2, [pc, #120]	@ (8005594 <HAL_SPI_IRQHandler+0x398>)
 800551c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005522:	4618      	mov	r0, r3
 8005524:	f7fc f916 	bl	8001754 <HAL_DMA_Abort_IT>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005534:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005542:	2b00      	cmp	r3, #0
 8005544:	d020      	beq.n	8005588 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800554a:	4a12      	ldr	r2, [pc, #72]	@ (8005594 <HAL_SPI_IRQHandler+0x398>)
 800554c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005552:	4618      	mov	r0, r3
 8005554:	f7fc f8fe 	bl	8001754 <HAL_DMA_Abort_IT>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d014      	beq.n	8005588 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005564:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800556e:	e00b      	b.n	8005588 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7fb fb2d 	bl	8000bd8 <HAL_SPI_ErrorCallback>
    return;
 800557e:	e003      	b.n	8005588 <HAL_SPI_IRQHandler+0x38c>
    return;
 8005580:	bf00      	nop
 8005582:	e002      	b.n	800558a <HAL_SPI_IRQHandler+0x38e>
    return;
 8005584:	bf00      	nop
 8005586:	e000      	b.n	800558a <HAL_SPI_IRQHandler+0x38e>
    return;
 8005588:	bf00      	nop
  }
}
 800558a:	3728      	adds	r7, #40	@ 0x28
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	fffffc94 	.word	0xfffffc94
 8005594:	080055d5 	.word	0x080055d5

08005598 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f7fb faec 	bl	8000bd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005600:	bf00      	nop
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800561c:	7812      	ldrb	r2, [r2, #0]
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d107      	bne.n	800565a <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8005666:	b480      	push	{r7}
 8005668:	b085      	sub	sp, #20
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3330      	adds	r3, #48	@ 0x30
 8005674:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	8812      	ldrh	r2, [r2, #0]
 800567e:	b292      	uxth	r2, r2
 8005680:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005686:	1c9a      	adds	r2, r3, #2
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d107      	bne.n	80056ba <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0201 	bic.w	r2, r2, #1
 80056b8:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80056ba:	bf00      	nop
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80056d8:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056de:	1d1a      	adds	r2, r3, #4
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d107      	bne.n	8005712 <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3320      	adds	r3, #32
 8005730:	7812      	ldrb	r2, [r2, #0]
 8005732:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d107      	bne.n	800576c <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0202 	bic.w	r2, r2, #2
 800576a:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3320      	adds	r3, #32
 8005786:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800578c:	881a      	ldrh	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005796:	1c9a      	adds	r2, r3, #2
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d107      	bne.n	80057ca <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0202 	bic.w	r2, r2, #2
 80057c8:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6812      	ldr	r2, [r2, #0]
 80057e8:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ee:	1d1a      	adds	r2, r3, #4
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d107      	bne.n	8005822 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0202 	bic.w	r2, r2, #2
 8005820:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
	...

08005830 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0208 	orr.w	r2, r2, #8
 800584e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0210 	orr.w	r2, r2, #16
 800585e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0201 	bic.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6919      	ldr	r1, [r3, #16]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4b3c      	ldr	r3, [pc, #240]	@ (800596c <SPI_CloseTransfer+0x13c>)
 800587c:	400b      	ands	r3, r1
 800587e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800588e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b04      	cmp	r3, #4
 800589a:	d014      	beq.n	80058c6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00f      	beq.n	80058c6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699a      	ldr	r2, [r3, #24]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0220 	orr.w	r2, r2, #32
 80058c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d014      	beq.n	80058fc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00f      	beq.n	80058fc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058e2:	f043 0204 	orr.w	r2, r3, #4
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058fa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00f      	beq.n	8005926 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800590c:	f043 0201 	orr.w	r2, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	699a      	ldr	r2, [r3, #24]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005924:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00f      	beq.n	8005950 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005936:	f043 0208 	orr.w	r2, r3, #8
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800594e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005960:	bf00      	nop
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	fffffc90 	.word	0xfffffc90

08005970 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597c:	095b      	lsrs	r3, r3, #5
 800597e:	3301      	adds	r3, #1
 8005980:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	3301      	adds	r3, #1
 8005988:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	3307      	adds	r3, #7
 800598e:	08db      	lsrs	r3, r3, #3
 8005990:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	fb02 f303 	mul.w	r3, r2, r3
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e049      	b.n	8005a4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d106      	bne.n	80059d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fb fb8f 	bl	80010f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2202      	movs	r2, #2
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4619      	mov	r1, r3
 80059e4:	4610      	mov	r0, r2
 80059e6:	f000 f9dd 	bl	8005da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d001      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e054      	b.n	8005b16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a26      	ldr	r2, [pc, #152]	@ (8005b24 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d022      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a96:	d01d      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a22      	ldr	r2, [pc, #136]	@ (8005b28 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d018      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a21      	ldr	r2, [pc, #132]	@ (8005b2c <HAL_TIM_Base_Start_IT+0xd8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d013      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8005b30 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00e      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1e      	ldr	r2, [pc, #120]	@ (8005b34 <HAL_TIM_Base_Start_IT+0xe0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d009      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b38 <HAL_TIM_Base_Start_IT+0xe4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d004      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1b      	ldr	r2, [pc, #108]	@ (8005b3c <HAL_TIM_Base_Start_IT+0xe8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d115      	bne.n	8005b00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	4b19      	ldr	r3, [pc, #100]	@ (8005b40 <HAL_TIM_Base_Start_IT+0xec>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b06      	cmp	r3, #6
 8005ae4:	d015      	beq.n	8005b12 <HAL_TIM_Base_Start_IT+0xbe>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aec:	d011      	beq.n	8005b12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f042 0201 	orr.w	r2, r2, #1
 8005afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005afe:	e008      	b.n	8005b12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0201 	orr.w	r2, r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	e000      	b.n	8005b14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40000400 	.word	0x40000400
 8005b2c:	40000800 	.word	0x40000800
 8005b30:	40000c00 	.word	0x40000c00
 8005b34:	40010400 	.word	0x40010400
 8005b38:	40001800 	.word	0x40001800
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	00010007 	.word	0x00010007

08005b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d020      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01b      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0202 	mvn.w	r2, #2
 8005b78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f8e9 	bl	8005d66 <HAL_TIM_IC_CaptureCallback>
 8005b94:	e005      	b.n	8005ba2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f8db 	bl	8005d52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f8ec 	bl	8005d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d020      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01b      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0204 	mvn.w	r2, #4
 8005bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f8c3 	bl	8005d66 <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f8b5 	bl	8005d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f8c6 	bl	8005d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d020      	beq.n	8005c40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01b      	beq.n	8005c40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0208 	mvn.w	r2, #8
 8005c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2204      	movs	r2, #4
 8005c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f89d 	bl	8005d66 <HAL_TIM_IC_CaptureCallback>
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f88f 	bl	8005d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f8a0 	bl	8005d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 0310 	and.w	r3, r3, #16
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d020      	beq.n	8005c8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01b      	beq.n	8005c8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0210 	mvn.w	r2, #16
 8005c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2208      	movs	r2, #8
 8005c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f877 	bl	8005d66 <HAL_TIM_IC_CaptureCallback>
 8005c78:	e005      	b.n	8005c86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f869 	bl	8005d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f87a 	bl	8005d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00c      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0201 	mvn.w	r2, #1
 8005ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fa ff30 	bl	8000b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00c      	beq.n	8005cde <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d007      	beq.n	8005cde <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f913 	bl	8005f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00c      	beq.n	8005d02 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d007      	beq.n	8005d02 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f90b 	bl	8005f18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00c      	beq.n	8005d26 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d007      	beq.n	8005d26 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f834 	bl	8005d8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00c      	beq.n	8005d4a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f06f 0220 	mvn.w	r2, #32
 8005d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f8d3 	bl	8005ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d4a:	bf00      	nop
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
	...

08005da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a46      	ldr	r2, [pc, #280]	@ (8005ed0 <TIM_Base_SetConfig+0x12c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d013      	beq.n	8005de4 <TIM_Base_SetConfig+0x40>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dc2:	d00f      	beq.n	8005de4 <TIM_Base_SetConfig+0x40>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a43      	ldr	r2, [pc, #268]	@ (8005ed4 <TIM_Base_SetConfig+0x130>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00b      	beq.n	8005de4 <TIM_Base_SetConfig+0x40>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a42      	ldr	r2, [pc, #264]	@ (8005ed8 <TIM_Base_SetConfig+0x134>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d007      	beq.n	8005de4 <TIM_Base_SetConfig+0x40>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a41      	ldr	r2, [pc, #260]	@ (8005edc <TIM_Base_SetConfig+0x138>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d003      	beq.n	8005de4 <TIM_Base_SetConfig+0x40>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a40      	ldr	r2, [pc, #256]	@ (8005ee0 <TIM_Base_SetConfig+0x13c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d108      	bne.n	8005df6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a35      	ldr	r2, [pc, #212]	@ (8005ed0 <TIM_Base_SetConfig+0x12c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01f      	beq.n	8005e3e <TIM_Base_SetConfig+0x9a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e04:	d01b      	beq.n	8005e3e <TIM_Base_SetConfig+0x9a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a32      	ldr	r2, [pc, #200]	@ (8005ed4 <TIM_Base_SetConfig+0x130>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d017      	beq.n	8005e3e <TIM_Base_SetConfig+0x9a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a31      	ldr	r2, [pc, #196]	@ (8005ed8 <TIM_Base_SetConfig+0x134>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d013      	beq.n	8005e3e <TIM_Base_SetConfig+0x9a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a30      	ldr	r2, [pc, #192]	@ (8005edc <TIM_Base_SetConfig+0x138>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00f      	beq.n	8005e3e <TIM_Base_SetConfig+0x9a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a2f      	ldr	r2, [pc, #188]	@ (8005ee0 <TIM_Base_SetConfig+0x13c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00b      	beq.n	8005e3e <TIM_Base_SetConfig+0x9a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a2e      	ldr	r2, [pc, #184]	@ (8005ee4 <TIM_Base_SetConfig+0x140>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d007      	beq.n	8005e3e <TIM_Base_SetConfig+0x9a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a2d      	ldr	r2, [pc, #180]	@ (8005ee8 <TIM_Base_SetConfig+0x144>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d003      	beq.n	8005e3e <TIM_Base_SetConfig+0x9a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a2c      	ldr	r2, [pc, #176]	@ (8005eec <TIM_Base_SetConfig+0x148>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d108      	bne.n	8005e50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a16      	ldr	r2, [pc, #88]	@ (8005ed0 <TIM_Base_SetConfig+0x12c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00f      	beq.n	8005e9c <TIM_Base_SetConfig+0xf8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a18      	ldr	r2, [pc, #96]	@ (8005ee0 <TIM_Base_SetConfig+0x13c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00b      	beq.n	8005e9c <TIM_Base_SetConfig+0xf8>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a17      	ldr	r2, [pc, #92]	@ (8005ee4 <TIM_Base_SetConfig+0x140>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d007      	beq.n	8005e9c <TIM_Base_SetConfig+0xf8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a16      	ldr	r2, [pc, #88]	@ (8005ee8 <TIM_Base_SetConfig+0x144>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d003      	beq.n	8005e9c <TIM_Base_SetConfig+0xf8>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a15      	ldr	r2, [pc, #84]	@ (8005eec <TIM_Base_SetConfig+0x148>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d103      	bne.n	8005ea4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	691a      	ldr	r2, [r3, #16]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d105      	bne.n	8005ec2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f023 0201 	bic.w	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	611a      	str	r2, [r3, #16]
  }
}
 8005ec2:	bf00      	nop
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40010000 	.word	0x40010000
 8005ed4:	40000400 	.word	0x40000400
 8005ed8:	40000800 	.word	0x40000800
 8005edc:	40000c00 	.word	0x40000c00
 8005ee0:	40010400 	.word	0x40010400
 8005ee4:	40014000 	.word	0x40014000
 8005ee8:	40014400 	.word	0x40014400
 8005eec:	40014800 	.word	0x40014800

08005ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e042      	b.n	8005fc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7fb f941 	bl	80011d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2224      	movs	r2, #36	@ 0x24
 8005f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0201 	bic.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fe1e 	bl	8006bb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f8b3 	bl	80060e8 <UART_SetConfig>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e01b      	b.n	8005fc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0201 	orr.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fe9d 	bl	8006cfc <UART_CheckIdleState>
 8005fc2:	4603      	mov	r3, r0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	@ 0x28
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	d17b      	bne.n	80060de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <HAL_UART_Transmit+0x26>
 8005fec:	88fb      	ldrh	r3, [r7, #6]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e074      	b.n	80060e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2221      	movs	r2, #33	@ 0x21
 8006002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006006:	f7fb f9e1 	bl	80013cc <HAL_GetTick>
 800600a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	88fa      	ldrh	r2, [r7, #6]
 8006010:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	88fa      	ldrh	r2, [r7, #6]
 8006018:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006024:	d108      	bne.n	8006038 <HAL_UART_Transmit+0x6c>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d104      	bne.n	8006038 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800602e:	2300      	movs	r3, #0
 8006030:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	e003      	b.n	8006040 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800603c:	2300      	movs	r3, #0
 800603e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006040:	e030      	b.n	80060a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2200      	movs	r2, #0
 800604a:	2180      	movs	r1, #128	@ 0x80
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 feff 	bl	8006e50 <UART_WaitOnFlagUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d005      	beq.n	8006064 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e03d      	b.n	80060e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10b      	bne.n	8006082 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006078:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	3302      	adds	r3, #2
 800607e:	61bb      	str	r3, [r7, #24]
 8006080:	e007      	b.n	8006092 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	781a      	ldrb	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	3301      	adds	r3, #1
 8006090:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006098:	b29b      	uxth	r3, r3
 800609a:	3b01      	subs	r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1c8      	bne.n	8006042 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2200      	movs	r2, #0
 80060b8:	2140      	movs	r1, #64	@ 0x40
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 fec8 	bl	8006e50 <UART_WaitOnFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d005      	beq.n	80060d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e006      	b.n	80060e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	e000      	b.n	80060e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80060de:	2302      	movs	r3, #2
  }
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3720      	adds	r7, #32
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060ec:	b092      	sub	sp, #72	@ 0x48
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	431a      	orrs	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	431a      	orrs	r2, r3
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	4313      	orrs	r3, r2
 800610e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	4bbe      	ldr	r3, [pc, #760]	@ (8006410 <UART_SetConfig+0x328>)
 8006118:	4013      	ands	r3, r2
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006120:	430b      	orrs	r3, r1
 8006122:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4ab3      	ldr	r2, [pc, #716]	@ (8006414 <UART_SetConfig+0x32c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d004      	beq.n	8006154 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006150:	4313      	orrs	r3, r2
 8006152:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	4baf      	ldr	r3, [pc, #700]	@ (8006418 <UART_SetConfig+0x330>)
 800615c:	4013      	ands	r3, r2
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006164:	430b      	orrs	r3, r1
 8006166:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616e:	f023 010f 	bic.w	r1, r3, #15
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4aa6      	ldr	r2, [pc, #664]	@ (800641c <UART_SetConfig+0x334>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d177      	bne.n	8006278 <UART_SetConfig+0x190>
 8006188:	4ba5      	ldr	r3, [pc, #660]	@ (8006420 <UART_SetConfig+0x338>)
 800618a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800618c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006190:	2b28      	cmp	r3, #40	@ 0x28
 8006192:	d86d      	bhi.n	8006270 <UART_SetConfig+0x188>
 8006194:	a201      	add	r2, pc, #4	@ (adr r2, 800619c <UART_SetConfig+0xb4>)
 8006196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619a:	bf00      	nop
 800619c:	08006241 	.word	0x08006241
 80061a0:	08006271 	.word	0x08006271
 80061a4:	08006271 	.word	0x08006271
 80061a8:	08006271 	.word	0x08006271
 80061ac:	08006271 	.word	0x08006271
 80061b0:	08006271 	.word	0x08006271
 80061b4:	08006271 	.word	0x08006271
 80061b8:	08006271 	.word	0x08006271
 80061bc:	08006249 	.word	0x08006249
 80061c0:	08006271 	.word	0x08006271
 80061c4:	08006271 	.word	0x08006271
 80061c8:	08006271 	.word	0x08006271
 80061cc:	08006271 	.word	0x08006271
 80061d0:	08006271 	.word	0x08006271
 80061d4:	08006271 	.word	0x08006271
 80061d8:	08006271 	.word	0x08006271
 80061dc:	08006251 	.word	0x08006251
 80061e0:	08006271 	.word	0x08006271
 80061e4:	08006271 	.word	0x08006271
 80061e8:	08006271 	.word	0x08006271
 80061ec:	08006271 	.word	0x08006271
 80061f0:	08006271 	.word	0x08006271
 80061f4:	08006271 	.word	0x08006271
 80061f8:	08006271 	.word	0x08006271
 80061fc:	08006259 	.word	0x08006259
 8006200:	08006271 	.word	0x08006271
 8006204:	08006271 	.word	0x08006271
 8006208:	08006271 	.word	0x08006271
 800620c:	08006271 	.word	0x08006271
 8006210:	08006271 	.word	0x08006271
 8006214:	08006271 	.word	0x08006271
 8006218:	08006271 	.word	0x08006271
 800621c:	08006261 	.word	0x08006261
 8006220:	08006271 	.word	0x08006271
 8006224:	08006271 	.word	0x08006271
 8006228:	08006271 	.word	0x08006271
 800622c:	08006271 	.word	0x08006271
 8006230:	08006271 	.word	0x08006271
 8006234:	08006271 	.word	0x08006271
 8006238:	08006271 	.word	0x08006271
 800623c:	08006269 	.word	0x08006269
 8006240:	2301      	movs	r3, #1
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006246:	e222      	b.n	800668e <UART_SetConfig+0x5a6>
 8006248:	2304      	movs	r3, #4
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624e:	e21e      	b.n	800668e <UART_SetConfig+0x5a6>
 8006250:	2308      	movs	r3, #8
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006256:	e21a      	b.n	800668e <UART_SetConfig+0x5a6>
 8006258:	2310      	movs	r3, #16
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625e:	e216      	b.n	800668e <UART_SetConfig+0x5a6>
 8006260:	2320      	movs	r3, #32
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006266:	e212      	b.n	800668e <UART_SetConfig+0x5a6>
 8006268:	2340      	movs	r3, #64	@ 0x40
 800626a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626e:	e20e      	b.n	800668e <UART_SetConfig+0x5a6>
 8006270:	2380      	movs	r3, #128	@ 0x80
 8006272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006276:	e20a      	b.n	800668e <UART_SetConfig+0x5a6>
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a69      	ldr	r2, [pc, #420]	@ (8006424 <UART_SetConfig+0x33c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d130      	bne.n	80062e4 <UART_SetConfig+0x1fc>
 8006282:	4b67      	ldr	r3, [pc, #412]	@ (8006420 <UART_SetConfig+0x338>)
 8006284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	2b05      	cmp	r3, #5
 800628c:	d826      	bhi.n	80062dc <UART_SetConfig+0x1f4>
 800628e:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <UART_SetConfig+0x1ac>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062ad 	.word	0x080062ad
 8006298:	080062b5 	.word	0x080062b5
 800629c:	080062bd 	.word	0x080062bd
 80062a0:	080062c5 	.word	0x080062c5
 80062a4:	080062cd 	.word	0x080062cd
 80062a8:	080062d5 	.word	0x080062d5
 80062ac:	2300      	movs	r3, #0
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b2:	e1ec      	b.n	800668e <UART_SetConfig+0x5a6>
 80062b4:	2304      	movs	r3, #4
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ba:	e1e8      	b.n	800668e <UART_SetConfig+0x5a6>
 80062bc:	2308      	movs	r3, #8
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c2:	e1e4      	b.n	800668e <UART_SetConfig+0x5a6>
 80062c4:	2310      	movs	r3, #16
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ca:	e1e0      	b.n	800668e <UART_SetConfig+0x5a6>
 80062cc:	2320      	movs	r3, #32
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062d2:	e1dc      	b.n	800668e <UART_SetConfig+0x5a6>
 80062d4:	2340      	movs	r3, #64	@ 0x40
 80062d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062da:	e1d8      	b.n	800668e <UART_SetConfig+0x5a6>
 80062dc:	2380      	movs	r3, #128	@ 0x80
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062e2:	e1d4      	b.n	800668e <UART_SetConfig+0x5a6>
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a4f      	ldr	r2, [pc, #316]	@ (8006428 <UART_SetConfig+0x340>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d130      	bne.n	8006350 <UART_SetConfig+0x268>
 80062ee:	4b4c      	ldr	r3, [pc, #304]	@ (8006420 <UART_SetConfig+0x338>)
 80062f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	2b05      	cmp	r3, #5
 80062f8:	d826      	bhi.n	8006348 <UART_SetConfig+0x260>
 80062fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006300 <UART_SetConfig+0x218>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	08006319 	.word	0x08006319
 8006304:	08006321 	.word	0x08006321
 8006308:	08006329 	.word	0x08006329
 800630c:	08006331 	.word	0x08006331
 8006310:	08006339 	.word	0x08006339
 8006314:	08006341 	.word	0x08006341
 8006318:	2300      	movs	r3, #0
 800631a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800631e:	e1b6      	b.n	800668e <UART_SetConfig+0x5a6>
 8006320:	2304      	movs	r3, #4
 8006322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006326:	e1b2      	b.n	800668e <UART_SetConfig+0x5a6>
 8006328:	2308      	movs	r3, #8
 800632a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632e:	e1ae      	b.n	800668e <UART_SetConfig+0x5a6>
 8006330:	2310      	movs	r3, #16
 8006332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006336:	e1aa      	b.n	800668e <UART_SetConfig+0x5a6>
 8006338:	2320      	movs	r3, #32
 800633a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800633e:	e1a6      	b.n	800668e <UART_SetConfig+0x5a6>
 8006340:	2340      	movs	r3, #64	@ 0x40
 8006342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006346:	e1a2      	b.n	800668e <UART_SetConfig+0x5a6>
 8006348:	2380      	movs	r3, #128	@ 0x80
 800634a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800634e:	e19e      	b.n	800668e <UART_SetConfig+0x5a6>
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a35      	ldr	r2, [pc, #212]	@ (800642c <UART_SetConfig+0x344>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d130      	bne.n	80063bc <UART_SetConfig+0x2d4>
 800635a:	4b31      	ldr	r3, [pc, #196]	@ (8006420 <UART_SetConfig+0x338>)
 800635c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	2b05      	cmp	r3, #5
 8006364:	d826      	bhi.n	80063b4 <UART_SetConfig+0x2cc>
 8006366:	a201      	add	r2, pc, #4	@ (adr r2, 800636c <UART_SetConfig+0x284>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	08006385 	.word	0x08006385
 8006370:	0800638d 	.word	0x0800638d
 8006374:	08006395 	.word	0x08006395
 8006378:	0800639d 	.word	0x0800639d
 800637c:	080063a5 	.word	0x080063a5
 8006380:	080063ad 	.word	0x080063ad
 8006384:	2300      	movs	r3, #0
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800638a:	e180      	b.n	800668e <UART_SetConfig+0x5a6>
 800638c:	2304      	movs	r3, #4
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006392:	e17c      	b.n	800668e <UART_SetConfig+0x5a6>
 8006394:	2308      	movs	r3, #8
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800639a:	e178      	b.n	800668e <UART_SetConfig+0x5a6>
 800639c:	2310      	movs	r3, #16
 800639e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063a2:	e174      	b.n	800668e <UART_SetConfig+0x5a6>
 80063a4:	2320      	movs	r3, #32
 80063a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063aa:	e170      	b.n	800668e <UART_SetConfig+0x5a6>
 80063ac:	2340      	movs	r3, #64	@ 0x40
 80063ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063b2:	e16c      	b.n	800668e <UART_SetConfig+0x5a6>
 80063b4:	2380      	movs	r3, #128	@ 0x80
 80063b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ba:	e168      	b.n	800668e <UART_SetConfig+0x5a6>
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006430 <UART_SetConfig+0x348>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d142      	bne.n	800644c <UART_SetConfig+0x364>
 80063c6:	4b16      	ldr	r3, [pc, #88]	@ (8006420 <UART_SetConfig+0x338>)
 80063c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	2b05      	cmp	r3, #5
 80063d0:	d838      	bhi.n	8006444 <UART_SetConfig+0x35c>
 80063d2:	a201      	add	r2, pc, #4	@ (adr r2, 80063d8 <UART_SetConfig+0x2f0>)
 80063d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d8:	080063f1 	.word	0x080063f1
 80063dc:	080063f9 	.word	0x080063f9
 80063e0:	08006401 	.word	0x08006401
 80063e4:	08006409 	.word	0x08006409
 80063e8:	08006435 	.word	0x08006435
 80063ec:	0800643d 	.word	0x0800643d
 80063f0:	2300      	movs	r3, #0
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f6:	e14a      	b.n	800668e <UART_SetConfig+0x5a6>
 80063f8:	2304      	movs	r3, #4
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063fe:	e146      	b.n	800668e <UART_SetConfig+0x5a6>
 8006400:	2308      	movs	r3, #8
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006406:	e142      	b.n	800668e <UART_SetConfig+0x5a6>
 8006408:	2310      	movs	r3, #16
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640e:	e13e      	b.n	800668e <UART_SetConfig+0x5a6>
 8006410:	cfff69f3 	.word	0xcfff69f3
 8006414:	58000c00 	.word	0x58000c00
 8006418:	11fff4ff 	.word	0x11fff4ff
 800641c:	40011000 	.word	0x40011000
 8006420:	58024400 	.word	0x58024400
 8006424:	40004400 	.word	0x40004400
 8006428:	40004800 	.word	0x40004800
 800642c:	40004c00 	.word	0x40004c00
 8006430:	40005000 	.word	0x40005000
 8006434:	2320      	movs	r3, #32
 8006436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800643a:	e128      	b.n	800668e <UART_SetConfig+0x5a6>
 800643c:	2340      	movs	r3, #64	@ 0x40
 800643e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006442:	e124      	b.n	800668e <UART_SetConfig+0x5a6>
 8006444:	2380      	movs	r3, #128	@ 0x80
 8006446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800644a:	e120      	b.n	800668e <UART_SetConfig+0x5a6>
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4acb      	ldr	r2, [pc, #812]	@ (8006780 <UART_SetConfig+0x698>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d176      	bne.n	8006544 <UART_SetConfig+0x45c>
 8006456:	4bcb      	ldr	r3, [pc, #812]	@ (8006784 <UART_SetConfig+0x69c>)
 8006458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800645a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800645e:	2b28      	cmp	r3, #40	@ 0x28
 8006460:	d86c      	bhi.n	800653c <UART_SetConfig+0x454>
 8006462:	a201      	add	r2, pc, #4	@ (adr r2, 8006468 <UART_SetConfig+0x380>)
 8006464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006468:	0800650d 	.word	0x0800650d
 800646c:	0800653d 	.word	0x0800653d
 8006470:	0800653d 	.word	0x0800653d
 8006474:	0800653d 	.word	0x0800653d
 8006478:	0800653d 	.word	0x0800653d
 800647c:	0800653d 	.word	0x0800653d
 8006480:	0800653d 	.word	0x0800653d
 8006484:	0800653d 	.word	0x0800653d
 8006488:	08006515 	.word	0x08006515
 800648c:	0800653d 	.word	0x0800653d
 8006490:	0800653d 	.word	0x0800653d
 8006494:	0800653d 	.word	0x0800653d
 8006498:	0800653d 	.word	0x0800653d
 800649c:	0800653d 	.word	0x0800653d
 80064a0:	0800653d 	.word	0x0800653d
 80064a4:	0800653d 	.word	0x0800653d
 80064a8:	0800651d 	.word	0x0800651d
 80064ac:	0800653d 	.word	0x0800653d
 80064b0:	0800653d 	.word	0x0800653d
 80064b4:	0800653d 	.word	0x0800653d
 80064b8:	0800653d 	.word	0x0800653d
 80064bc:	0800653d 	.word	0x0800653d
 80064c0:	0800653d 	.word	0x0800653d
 80064c4:	0800653d 	.word	0x0800653d
 80064c8:	08006525 	.word	0x08006525
 80064cc:	0800653d 	.word	0x0800653d
 80064d0:	0800653d 	.word	0x0800653d
 80064d4:	0800653d 	.word	0x0800653d
 80064d8:	0800653d 	.word	0x0800653d
 80064dc:	0800653d 	.word	0x0800653d
 80064e0:	0800653d 	.word	0x0800653d
 80064e4:	0800653d 	.word	0x0800653d
 80064e8:	0800652d 	.word	0x0800652d
 80064ec:	0800653d 	.word	0x0800653d
 80064f0:	0800653d 	.word	0x0800653d
 80064f4:	0800653d 	.word	0x0800653d
 80064f8:	0800653d 	.word	0x0800653d
 80064fc:	0800653d 	.word	0x0800653d
 8006500:	0800653d 	.word	0x0800653d
 8006504:	0800653d 	.word	0x0800653d
 8006508:	08006535 	.word	0x08006535
 800650c:	2301      	movs	r3, #1
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006512:	e0bc      	b.n	800668e <UART_SetConfig+0x5a6>
 8006514:	2304      	movs	r3, #4
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651a:	e0b8      	b.n	800668e <UART_SetConfig+0x5a6>
 800651c:	2308      	movs	r3, #8
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006522:	e0b4      	b.n	800668e <UART_SetConfig+0x5a6>
 8006524:	2310      	movs	r3, #16
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652a:	e0b0      	b.n	800668e <UART_SetConfig+0x5a6>
 800652c:	2320      	movs	r3, #32
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006532:	e0ac      	b.n	800668e <UART_SetConfig+0x5a6>
 8006534:	2340      	movs	r3, #64	@ 0x40
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653a:	e0a8      	b.n	800668e <UART_SetConfig+0x5a6>
 800653c:	2380      	movs	r3, #128	@ 0x80
 800653e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006542:	e0a4      	b.n	800668e <UART_SetConfig+0x5a6>
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a8f      	ldr	r2, [pc, #572]	@ (8006788 <UART_SetConfig+0x6a0>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d130      	bne.n	80065b0 <UART_SetConfig+0x4c8>
 800654e:	4b8d      	ldr	r3, [pc, #564]	@ (8006784 <UART_SetConfig+0x69c>)
 8006550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	2b05      	cmp	r3, #5
 8006558:	d826      	bhi.n	80065a8 <UART_SetConfig+0x4c0>
 800655a:	a201      	add	r2, pc, #4	@ (adr r2, 8006560 <UART_SetConfig+0x478>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006579 	.word	0x08006579
 8006564:	08006581 	.word	0x08006581
 8006568:	08006589 	.word	0x08006589
 800656c:	08006591 	.word	0x08006591
 8006570:	08006599 	.word	0x08006599
 8006574:	080065a1 	.word	0x080065a1
 8006578:	2300      	movs	r3, #0
 800657a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800657e:	e086      	b.n	800668e <UART_SetConfig+0x5a6>
 8006580:	2304      	movs	r3, #4
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006586:	e082      	b.n	800668e <UART_SetConfig+0x5a6>
 8006588:	2308      	movs	r3, #8
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800658e:	e07e      	b.n	800668e <UART_SetConfig+0x5a6>
 8006590:	2310      	movs	r3, #16
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006596:	e07a      	b.n	800668e <UART_SetConfig+0x5a6>
 8006598:	2320      	movs	r3, #32
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659e:	e076      	b.n	800668e <UART_SetConfig+0x5a6>
 80065a0:	2340      	movs	r3, #64	@ 0x40
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a6:	e072      	b.n	800668e <UART_SetConfig+0x5a6>
 80065a8:	2380      	movs	r3, #128	@ 0x80
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ae:	e06e      	b.n	800668e <UART_SetConfig+0x5a6>
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a75      	ldr	r2, [pc, #468]	@ (800678c <UART_SetConfig+0x6a4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d130      	bne.n	800661c <UART_SetConfig+0x534>
 80065ba:	4b72      	ldr	r3, [pc, #456]	@ (8006784 <UART_SetConfig+0x69c>)
 80065bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	2b05      	cmp	r3, #5
 80065c4:	d826      	bhi.n	8006614 <UART_SetConfig+0x52c>
 80065c6:	a201      	add	r2, pc, #4	@ (adr r2, 80065cc <UART_SetConfig+0x4e4>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	080065e5 	.word	0x080065e5
 80065d0:	080065ed 	.word	0x080065ed
 80065d4:	080065f5 	.word	0x080065f5
 80065d8:	080065fd 	.word	0x080065fd
 80065dc:	08006605 	.word	0x08006605
 80065e0:	0800660d 	.word	0x0800660d
 80065e4:	2300      	movs	r3, #0
 80065e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ea:	e050      	b.n	800668e <UART_SetConfig+0x5a6>
 80065ec:	2304      	movs	r3, #4
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f2:	e04c      	b.n	800668e <UART_SetConfig+0x5a6>
 80065f4:	2308      	movs	r3, #8
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fa:	e048      	b.n	800668e <UART_SetConfig+0x5a6>
 80065fc:	2310      	movs	r3, #16
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006602:	e044      	b.n	800668e <UART_SetConfig+0x5a6>
 8006604:	2320      	movs	r3, #32
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660a:	e040      	b.n	800668e <UART_SetConfig+0x5a6>
 800660c:	2340      	movs	r3, #64	@ 0x40
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006612:	e03c      	b.n	800668e <UART_SetConfig+0x5a6>
 8006614:	2380      	movs	r3, #128	@ 0x80
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800661a:	e038      	b.n	800668e <UART_SetConfig+0x5a6>
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a5b      	ldr	r2, [pc, #364]	@ (8006790 <UART_SetConfig+0x6a8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d130      	bne.n	8006688 <UART_SetConfig+0x5a0>
 8006626:	4b57      	ldr	r3, [pc, #348]	@ (8006784 <UART_SetConfig+0x69c>)
 8006628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	2b05      	cmp	r3, #5
 8006630:	d826      	bhi.n	8006680 <UART_SetConfig+0x598>
 8006632:	a201      	add	r2, pc, #4	@ (adr r2, 8006638 <UART_SetConfig+0x550>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	08006651 	.word	0x08006651
 800663c:	08006659 	.word	0x08006659
 8006640:	08006661 	.word	0x08006661
 8006644:	08006669 	.word	0x08006669
 8006648:	08006671 	.word	0x08006671
 800664c:	08006679 	.word	0x08006679
 8006650:	2302      	movs	r3, #2
 8006652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006656:	e01a      	b.n	800668e <UART_SetConfig+0x5a6>
 8006658:	2304      	movs	r3, #4
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665e:	e016      	b.n	800668e <UART_SetConfig+0x5a6>
 8006660:	2308      	movs	r3, #8
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006666:	e012      	b.n	800668e <UART_SetConfig+0x5a6>
 8006668:	2310      	movs	r3, #16
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666e:	e00e      	b.n	800668e <UART_SetConfig+0x5a6>
 8006670:	2320      	movs	r3, #32
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006676:	e00a      	b.n	800668e <UART_SetConfig+0x5a6>
 8006678:	2340      	movs	r3, #64	@ 0x40
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667e:	e006      	b.n	800668e <UART_SetConfig+0x5a6>
 8006680:	2380      	movs	r3, #128	@ 0x80
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006686:	e002      	b.n	800668e <UART_SetConfig+0x5a6>
 8006688:	2380      	movs	r3, #128	@ 0x80
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a3f      	ldr	r2, [pc, #252]	@ (8006790 <UART_SetConfig+0x6a8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	f040 80f8 	bne.w	800688a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800669a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800669e:	2b20      	cmp	r3, #32
 80066a0:	dc46      	bgt.n	8006730 <UART_SetConfig+0x648>
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	f2c0 8082 	blt.w	80067ac <UART_SetConfig+0x6c4>
 80066a8:	3b02      	subs	r3, #2
 80066aa:	2b1e      	cmp	r3, #30
 80066ac:	d87e      	bhi.n	80067ac <UART_SetConfig+0x6c4>
 80066ae:	a201      	add	r2, pc, #4	@ (adr r2, 80066b4 <UART_SetConfig+0x5cc>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	08006737 	.word	0x08006737
 80066b8:	080067ad 	.word	0x080067ad
 80066bc:	0800673f 	.word	0x0800673f
 80066c0:	080067ad 	.word	0x080067ad
 80066c4:	080067ad 	.word	0x080067ad
 80066c8:	080067ad 	.word	0x080067ad
 80066cc:	0800674f 	.word	0x0800674f
 80066d0:	080067ad 	.word	0x080067ad
 80066d4:	080067ad 	.word	0x080067ad
 80066d8:	080067ad 	.word	0x080067ad
 80066dc:	080067ad 	.word	0x080067ad
 80066e0:	080067ad 	.word	0x080067ad
 80066e4:	080067ad 	.word	0x080067ad
 80066e8:	080067ad 	.word	0x080067ad
 80066ec:	0800675f 	.word	0x0800675f
 80066f0:	080067ad 	.word	0x080067ad
 80066f4:	080067ad 	.word	0x080067ad
 80066f8:	080067ad 	.word	0x080067ad
 80066fc:	080067ad 	.word	0x080067ad
 8006700:	080067ad 	.word	0x080067ad
 8006704:	080067ad 	.word	0x080067ad
 8006708:	080067ad 	.word	0x080067ad
 800670c:	080067ad 	.word	0x080067ad
 8006710:	080067ad 	.word	0x080067ad
 8006714:	080067ad 	.word	0x080067ad
 8006718:	080067ad 	.word	0x080067ad
 800671c:	080067ad 	.word	0x080067ad
 8006720:	080067ad 	.word	0x080067ad
 8006724:	080067ad 	.word	0x080067ad
 8006728:	080067ad 	.word	0x080067ad
 800672c:	0800679f 	.word	0x0800679f
 8006730:	2b40      	cmp	r3, #64	@ 0x40
 8006732:	d037      	beq.n	80067a4 <UART_SetConfig+0x6bc>
 8006734:	e03a      	b.n	80067ac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006736:	f7fd fec7 	bl	80044c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800673a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800673c:	e03c      	b.n	80067b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800673e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006742:	4618      	mov	r0, r3
 8006744:	f7fd fed6 	bl	80044f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800674c:	e034      	b.n	80067b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800674e:	f107 0318 	add.w	r3, r7, #24
 8006752:	4618      	mov	r0, r3
 8006754:	f7fe f822 	bl	800479c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800675c:	e02c      	b.n	80067b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800675e:	4b09      	ldr	r3, [pc, #36]	@ (8006784 <UART_SetConfig+0x69c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b00      	cmp	r3, #0
 8006768:	d016      	beq.n	8006798 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800676a:	4b06      	ldr	r3, [pc, #24]	@ (8006784 <UART_SetConfig+0x69c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	08db      	lsrs	r3, r3, #3
 8006770:	f003 0303 	and.w	r3, r3, #3
 8006774:	4a07      	ldr	r2, [pc, #28]	@ (8006794 <UART_SetConfig+0x6ac>)
 8006776:	fa22 f303 	lsr.w	r3, r2, r3
 800677a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800677c:	e01c      	b.n	80067b8 <UART_SetConfig+0x6d0>
 800677e:	bf00      	nop
 8006780:	40011400 	.word	0x40011400
 8006784:	58024400 	.word	0x58024400
 8006788:	40007800 	.word	0x40007800
 800678c:	40007c00 	.word	0x40007c00
 8006790:	58000c00 	.word	0x58000c00
 8006794:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006798:	4b9d      	ldr	r3, [pc, #628]	@ (8006a10 <UART_SetConfig+0x928>)
 800679a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800679c:	e00c      	b.n	80067b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800679e:	4b9d      	ldr	r3, [pc, #628]	@ (8006a14 <UART_SetConfig+0x92c>)
 80067a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a2:	e009      	b.n	80067b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067aa:	e005      	b.n	80067b8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80067b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 81de 	beq.w	8006b7c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c4:	4a94      	ldr	r2, [pc, #592]	@ (8006a18 <UART_SetConfig+0x930>)
 80067c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067ca:	461a      	mov	r2, r3
 80067cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80067d2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	4613      	mov	r3, r2
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	4413      	add	r3, r2
 80067de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d305      	bcc.n	80067f0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d903      	bls.n	80067f8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80067f6:	e1c1      	b.n	8006b7c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067fa:	2200      	movs	r2, #0
 80067fc:	60bb      	str	r3, [r7, #8]
 80067fe:	60fa      	str	r2, [r7, #12]
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006804:	4a84      	ldr	r2, [pc, #528]	@ (8006a18 <UART_SetConfig+0x930>)
 8006806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800680a:	b29b      	uxth	r3, r3
 800680c:	2200      	movs	r2, #0
 800680e:	603b      	str	r3, [r7, #0]
 8006810:	607a      	str	r2, [r7, #4]
 8006812:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006816:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800681a:	f7f9 fdb1 	bl	8000380 <__aeabi_uldivmod>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4610      	mov	r0, r2
 8006824:	4619      	mov	r1, r3
 8006826:	f04f 0200 	mov.w	r2, #0
 800682a:	f04f 0300 	mov.w	r3, #0
 800682e:	020b      	lsls	r3, r1, #8
 8006830:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006834:	0202      	lsls	r2, r0, #8
 8006836:	6979      	ldr	r1, [r7, #20]
 8006838:	6849      	ldr	r1, [r1, #4]
 800683a:	0849      	lsrs	r1, r1, #1
 800683c:	2000      	movs	r0, #0
 800683e:	460c      	mov	r4, r1
 8006840:	4605      	mov	r5, r0
 8006842:	eb12 0804 	adds.w	r8, r2, r4
 8006846:	eb43 0905 	adc.w	r9, r3, r5
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	469a      	mov	sl, r3
 8006852:	4693      	mov	fp, r2
 8006854:	4652      	mov	r2, sl
 8006856:	465b      	mov	r3, fp
 8006858:	4640      	mov	r0, r8
 800685a:	4649      	mov	r1, r9
 800685c:	f7f9 fd90 	bl	8000380 <__aeabi_uldivmod>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4613      	mov	r3, r2
 8006866:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800686e:	d308      	bcc.n	8006882 <UART_SetConfig+0x79a>
 8006870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006876:	d204      	bcs.n	8006882 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800687e:	60da      	str	r2, [r3, #12]
 8006880:	e17c      	b.n	8006b7c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006888:	e178      	b.n	8006b7c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006892:	f040 80c5 	bne.w	8006a20 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006896:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800689a:	2b20      	cmp	r3, #32
 800689c:	dc48      	bgt.n	8006930 <UART_SetConfig+0x848>
 800689e:	2b00      	cmp	r3, #0
 80068a0:	db7b      	blt.n	800699a <UART_SetConfig+0x8b2>
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	d879      	bhi.n	800699a <UART_SetConfig+0x8b2>
 80068a6:	a201      	add	r2, pc, #4	@ (adr r2, 80068ac <UART_SetConfig+0x7c4>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	08006937 	.word	0x08006937
 80068b0:	0800693f 	.word	0x0800693f
 80068b4:	0800699b 	.word	0x0800699b
 80068b8:	0800699b 	.word	0x0800699b
 80068bc:	08006947 	.word	0x08006947
 80068c0:	0800699b 	.word	0x0800699b
 80068c4:	0800699b 	.word	0x0800699b
 80068c8:	0800699b 	.word	0x0800699b
 80068cc:	08006957 	.word	0x08006957
 80068d0:	0800699b 	.word	0x0800699b
 80068d4:	0800699b 	.word	0x0800699b
 80068d8:	0800699b 	.word	0x0800699b
 80068dc:	0800699b 	.word	0x0800699b
 80068e0:	0800699b 	.word	0x0800699b
 80068e4:	0800699b 	.word	0x0800699b
 80068e8:	0800699b 	.word	0x0800699b
 80068ec:	08006967 	.word	0x08006967
 80068f0:	0800699b 	.word	0x0800699b
 80068f4:	0800699b 	.word	0x0800699b
 80068f8:	0800699b 	.word	0x0800699b
 80068fc:	0800699b 	.word	0x0800699b
 8006900:	0800699b 	.word	0x0800699b
 8006904:	0800699b 	.word	0x0800699b
 8006908:	0800699b 	.word	0x0800699b
 800690c:	0800699b 	.word	0x0800699b
 8006910:	0800699b 	.word	0x0800699b
 8006914:	0800699b 	.word	0x0800699b
 8006918:	0800699b 	.word	0x0800699b
 800691c:	0800699b 	.word	0x0800699b
 8006920:	0800699b 	.word	0x0800699b
 8006924:	0800699b 	.word	0x0800699b
 8006928:	0800699b 	.word	0x0800699b
 800692c:	0800698d 	.word	0x0800698d
 8006930:	2b40      	cmp	r3, #64	@ 0x40
 8006932:	d02e      	beq.n	8006992 <UART_SetConfig+0x8aa>
 8006934:	e031      	b.n	800699a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006936:	f7fc fb91 	bl	800305c <HAL_RCC_GetPCLK1Freq>
 800693a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800693c:	e033      	b.n	80069a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800693e:	f7fc fba3 	bl	8003088 <HAL_RCC_GetPCLK2Freq>
 8006942:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006944:	e02f      	b.n	80069a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800694a:	4618      	mov	r0, r3
 800694c:	f7fd fdd2 	bl	80044f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006954:	e027      	b.n	80069a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006956:	f107 0318 	add.w	r3, r7, #24
 800695a:	4618      	mov	r0, r3
 800695c:	f7fd ff1e 	bl	800479c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006964:	e01f      	b.n	80069a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006966:	4b2d      	ldr	r3, [pc, #180]	@ (8006a1c <UART_SetConfig+0x934>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006972:	4b2a      	ldr	r3, [pc, #168]	@ (8006a1c <UART_SetConfig+0x934>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	08db      	lsrs	r3, r3, #3
 8006978:	f003 0303 	and.w	r3, r3, #3
 800697c:	4a24      	ldr	r2, [pc, #144]	@ (8006a10 <UART_SetConfig+0x928>)
 800697e:	fa22 f303 	lsr.w	r3, r2, r3
 8006982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006984:	e00f      	b.n	80069a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006986:	4b22      	ldr	r3, [pc, #136]	@ (8006a10 <UART_SetConfig+0x928>)
 8006988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800698a:	e00c      	b.n	80069a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800698c:	4b21      	ldr	r3, [pc, #132]	@ (8006a14 <UART_SetConfig+0x92c>)
 800698e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006990:	e009      	b.n	80069a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006998:	e005      	b.n	80069a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80069a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 80e7 	beq.w	8006b7c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b2:	4a19      	ldr	r2, [pc, #100]	@ (8006a18 <UART_SetConfig+0x930>)
 80069b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b8:	461a      	mov	r2, r3
 80069ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80069c0:	005a      	lsls	r2, r3, #1
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	085b      	lsrs	r3, r3, #1
 80069c8:	441a      	add	r2, r3
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d6:	2b0f      	cmp	r3, #15
 80069d8:	d916      	bls.n	8006a08 <UART_SetConfig+0x920>
 80069da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069e0:	d212      	bcs.n	8006a08 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f023 030f 	bic.w	r3, r3, #15
 80069ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ee:	085b      	lsrs	r3, r3, #1
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80069fa:	4313      	orrs	r3, r2
 80069fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006a04:	60da      	str	r2, [r3, #12]
 8006a06:	e0b9      	b.n	8006b7c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006a0e:	e0b5      	b.n	8006b7c <UART_SetConfig+0xa94>
 8006a10:	03d09000 	.word	0x03d09000
 8006a14:	003d0900 	.word	0x003d0900
 8006a18:	08007b9c 	.word	0x08007b9c
 8006a1c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a20:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006a24:	2b20      	cmp	r3, #32
 8006a26:	dc49      	bgt.n	8006abc <UART_SetConfig+0x9d4>
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	db7c      	blt.n	8006b26 <UART_SetConfig+0xa3e>
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	d87a      	bhi.n	8006b26 <UART_SetConfig+0xa3e>
 8006a30:	a201      	add	r2, pc, #4	@ (adr r2, 8006a38 <UART_SetConfig+0x950>)
 8006a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a36:	bf00      	nop
 8006a38:	08006ac3 	.word	0x08006ac3
 8006a3c:	08006acb 	.word	0x08006acb
 8006a40:	08006b27 	.word	0x08006b27
 8006a44:	08006b27 	.word	0x08006b27
 8006a48:	08006ad3 	.word	0x08006ad3
 8006a4c:	08006b27 	.word	0x08006b27
 8006a50:	08006b27 	.word	0x08006b27
 8006a54:	08006b27 	.word	0x08006b27
 8006a58:	08006ae3 	.word	0x08006ae3
 8006a5c:	08006b27 	.word	0x08006b27
 8006a60:	08006b27 	.word	0x08006b27
 8006a64:	08006b27 	.word	0x08006b27
 8006a68:	08006b27 	.word	0x08006b27
 8006a6c:	08006b27 	.word	0x08006b27
 8006a70:	08006b27 	.word	0x08006b27
 8006a74:	08006b27 	.word	0x08006b27
 8006a78:	08006af3 	.word	0x08006af3
 8006a7c:	08006b27 	.word	0x08006b27
 8006a80:	08006b27 	.word	0x08006b27
 8006a84:	08006b27 	.word	0x08006b27
 8006a88:	08006b27 	.word	0x08006b27
 8006a8c:	08006b27 	.word	0x08006b27
 8006a90:	08006b27 	.word	0x08006b27
 8006a94:	08006b27 	.word	0x08006b27
 8006a98:	08006b27 	.word	0x08006b27
 8006a9c:	08006b27 	.word	0x08006b27
 8006aa0:	08006b27 	.word	0x08006b27
 8006aa4:	08006b27 	.word	0x08006b27
 8006aa8:	08006b27 	.word	0x08006b27
 8006aac:	08006b27 	.word	0x08006b27
 8006ab0:	08006b27 	.word	0x08006b27
 8006ab4:	08006b27 	.word	0x08006b27
 8006ab8:	08006b19 	.word	0x08006b19
 8006abc:	2b40      	cmp	r3, #64	@ 0x40
 8006abe:	d02e      	beq.n	8006b1e <UART_SetConfig+0xa36>
 8006ac0:	e031      	b.n	8006b26 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ac2:	f7fc facb 	bl	800305c <HAL_RCC_GetPCLK1Freq>
 8006ac6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ac8:	e033      	b.n	8006b32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aca:	f7fc fadd 	bl	8003088 <HAL_RCC_GetPCLK2Freq>
 8006ace:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ad0:	e02f      	b.n	8006b32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fd fd0c 	bl	80044f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ae0:	e027      	b.n	8006b32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ae2:	f107 0318 	add.w	r3, r7, #24
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fd fe58 	bl	800479c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006af0:	e01f      	b.n	8006b32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006af2:	4b2d      	ldr	r3, [pc, #180]	@ (8006ba8 <UART_SetConfig+0xac0>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0320 	and.w	r3, r3, #32
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d009      	beq.n	8006b12 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006afe:	4b2a      	ldr	r3, [pc, #168]	@ (8006ba8 <UART_SetConfig+0xac0>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	08db      	lsrs	r3, r3, #3
 8006b04:	f003 0303 	and.w	r3, r3, #3
 8006b08:	4a28      	ldr	r2, [pc, #160]	@ (8006bac <UART_SetConfig+0xac4>)
 8006b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b10:	e00f      	b.n	8006b32 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006b12:	4b26      	ldr	r3, [pc, #152]	@ (8006bac <UART_SetConfig+0xac4>)
 8006b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b16:	e00c      	b.n	8006b32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b18:	4b25      	ldr	r3, [pc, #148]	@ (8006bb0 <UART_SetConfig+0xac8>)
 8006b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b1c:	e009      	b.n	8006b32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b24:	e005      	b.n	8006b32 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006b30:	bf00      	nop
    }

    if (pclk != 0U)
 8006b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d021      	beq.n	8006b7c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bb4 <UART_SetConfig+0xacc>)
 8006b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b42:	461a      	mov	r2, r3
 8006b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b46:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	085b      	lsrs	r3, r3, #1
 8006b50:	441a      	add	r2, r3
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5e:	2b0f      	cmp	r3, #15
 8006b60:	d909      	bls.n	8006b76 <UART_SetConfig+0xa8e>
 8006b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b68:	d205      	bcs.n	8006b76 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60da      	str	r2, [r3, #12]
 8006b74:	e002      	b.n	8006b7c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2200      	movs	r2, #0
 8006b96:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006b98:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3748      	adds	r7, #72	@ 0x48
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ba6:	bf00      	nop
 8006ba8:	58024400 	.word	0x58024400
 8006bac:	03d09000 	.word	0x03d09000
 8006bb0:	003d0900 	.word	0x003d0900
 8006bb4:	08007b9c 	.word	0x08007b9c

08006bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc4:	f003 0308 	and.w	r3, r3, #8
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00a      	beq.n	8006be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00a      	beq.n	8006c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00a      	beq.n	8006c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d01a      	beq.n	8006cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cb6:	d10a      	bne.n	8006cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	605a      	str	r2, [r3, #4]
  }
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b098      	sub	sp, #96	@ 0x60
 8006d00:	af02      	add	r7, sp, #8
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d0c:	f7fa fb5e 	bl	80013cc <HAL_GetTick>
 8006d10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0308 	and.w	r3, r3, #8
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d12f      	bne.n	8006d80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f88e 	bl	8006e50 <UART_WaitOnFlagUntilTimeout>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d022      	beq.n	8006d80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d42:	e853 3f00 	ldrex	r3, [r3]
 8006d46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d5a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d60:	e841 2300 	strex	r3, r2, [r1]
 8006d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e6      	bne.n	8006d3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e063      	b.n	8006e48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0304 	and.w	r3, r3, #4
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d149      	bne.n	8006e22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d8e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d96:	2200      	movs	r2, #0
 8006d98:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f857 	bl	8006e50 <UART_WaitOnFlagUntilTimeout>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d03c      	beq.n	8006e22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	e853 3f00 	ldrex	r3, [r3]
 8006db4:	623b      	str	r3, [r7, #32]
   return(result);
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e6      	bne.n	8006da8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3308      	adds	r3, #8
 8006de0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f023 0301 	bic.w	r3, r3, #1
 8006df0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3308      	adds	r3, #8
 8006df8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006dfa:	61fa      	str	r2, [r7, #28]
 8006dfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	69b9      	ldr	r1, [r7, #24]
 8006e00:	69fa      	ldr	r2, [r7, #28]
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	617b      	str	r3, [r7, #20]
   return(result);
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e5      	bne.n	8006dda <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e012      	b.n	8006e48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3758      	adds	r7, #88	@ 0x58
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e60:	e04f      	b.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e68:	d04b      	beq.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e6a:	f7fa faaf 	bl	80013cc <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d302      	bcc.n	8006e80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e04e      	b.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0304 	and.w	r3, r3, #4
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d037      	beq.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b80      	cmp	r3, #128	@ 0x80
 8006e96:	d034      	beq.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2b40      	cmp	r3, #64	@ 0x40
 8006e9c:	d031      	beq.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	f003 0308 	and.w	r3, r3, #8
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d110      	bne.n	8006ece <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2208      	movs	r2, #8
 8006eb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 f839 	bl	8006f2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2208      	movs	r2, #8
 8006ebe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e029      	b.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006edc:	d111      	bne.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ee6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 f81f 	bl	8006f2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e00f      	b.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	69da      	ldr	r2, [r3, #28]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	bf0c      	ite	eq
 8006f12:	2301      	moveq	r3, #1
 8006f14:	2300      	movne	r3, #0
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	461a      	mov	r2, r3
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d0a0      	beq.n	8006e62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
	...

08006f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b095      	sub	sp, #84	@ 0x54
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f3c:	e853 3f00 	ldrex	r3, [r3]
 8006f40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f52:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e6      	bne.n	8006f34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	4b1e      	ldr	r3, [pc, #120]	@ (8006ff4 <UART_EndRxTransfer+0xc8>)
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3308      	adds	r3, #8
 8006f84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f8e:	e841 2300 	strex	r3, r2, [r1]
 8006f92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e5      	bne.n	8006f66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d118      	bne.n	8006fd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	e853 3f00 	ldrex	r3, [r3]
 8006fae:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f023 0310 	bic.w	r3, r3, #16
 8006fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fc0:	61bb      	str	r3, [r7, #24]
 8006fc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc4:	6979      	ldr	r1, [r7, #20]
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	e841 2300 	strex	r3, r2, [r1]
 8006fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e6      	bne.n	8006fa2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006fe8:	bf00      	nop
 8006fea:	3754      	adds	r7, #84	@ 0x54
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	effffffe 	.word	0xeffffffe

08006ff8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007006:	2b01      	cmp	r3, #1
 8007008:	d101      	bne.n	800700e <HAL_UARTEx_DisableFifoMode+0x16>
 800700a:	2302      	movs	r3, #2
 800700c:	e027      	b.n	800705e <HAL_UARTEx_DisableFifoMode+0x66>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2224      	movs	r2, #36	@ 0x24
 800701a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0201 	bic.w	r2, r2, #1
 8007034:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800703c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800707e:	2302      	movs	r3, #2
 8007080:	e02d      	b.n	80070de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2224      	movs	r2, #36	@ 0x24
 800708e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0201 	bic.w	r2, r2, #1
 80070a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f850 	bl	8007164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d101      	bne.n	80070fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070fa:	2302      	movs	r3, #2
 80070fc:	e02d      	b.n	800715a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2224      	movs	r2, #36	@ 0x24
 800710a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 0201 	bic.w	r2, r2, #1
 8007124:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f812 	bl	8007164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2220      	movs	r2, #32
 800714c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
	...

08007164 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007170:	2b00      	cmp	r3, #0
 8007172:	d108      	bne.n	8007186 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007184:	e031      	b.n	80071ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007186:	2310      	movs	r3, #16
 8007188:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800718a:	2310      	movs	r3, #16
 800718c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	0e5b      	lsrs	r3, r3, #25
 8007196:	b2db      	uxtb	r3, r3
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	0f5b      	lsrs	r3, r3, #29
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071ae:	7bbb      	ldrb	r3, [r7, #14]
 80071b0:	7b3a      	ldrb	r2, [r7, #12]
 80071b2:	4911      	ldr	r1, [pc, #68]	@ (80071f8 <UARTEx_SetNbDataToProcess+0x94>)
 80071b4:	5c8a      	ldrb	r2, [r1, r2]
 80071b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80071ba:	7b3a      	ldrb	r2, [r7, #12]
 80071bc:	490f      	ldr	r1, [pc, #60]	@ (80071fc <UARTEx_SetNbDataToProcess+0x98>)
 80071be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
 80071ce:	7b7a      	ldrb	r2, [r7, #13]
 80071d0:	4909      	ldr	r1, [pc, #36]	@ (80071f8 <UARTEx_SetNbDataToProcess+0x94>)
 80071d2:	5c8a      	ldrb	r2, [r1, r2]
 80071d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80071d8:	7b7a      	ldrb	r2, [r7, #13]
 80071da:	4908      	ldr	r1, [pc, #32]	@ (80071fc <UARTEx_SetNbDataToProcess+0x98>)
 80071dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071de:	fb93 f3f2 	sdiv	r3, r3, r2
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80071ea:	bf00      	nop
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	08007bb4 	.word	0x08007bb4
 80071fc:	08007bbc 	.word	0x08007bbc

08007200 <siprintf>:
 8007200:	b40e      	push	{r1, r2, r3}
 8007202:	b500      	push	{lr}
 8007204:	b09c      	sub	sp, #112	@ 0x70
 8007206:	ab1d      	add	r3, sp, #116	@ 0x74
 8007208:	9002      	str	r0, [sp, #8]
 800720a:	9006      	str	r0, [sp, #24]
 800720c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007210:	4809      	ldr	r0, [pc, #36]	@ (8007238 <siprintf+0x38>)
 8007212:	9107      	str	r1, [sp, #28]
 8007214:	9104      	str	r1, [sp, #16]
 8007216:	4909      	ldr	r1, [pc, #36]	@ (800723c <siprintf+0x3c>)
 8007218:	f853 2b04 	ldr.w	r2, [r3], #4
 800721c:	9105      	str	r1, [sp, #20]
 800721e:	6800      	ldr	r0, [r0, #0]
 8007220:	9301      	str	r3, [sp, #4]
 8007222:	a902      	add	r1, sp, #8
 8007224:	f000 f994 	bl	8007550 <_svfiprintf_r>
 8007228:	9b02      	ldr	r3, [sp, #8]
 800722a:	2200      	movs	r2, #0
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	b01c      	add	sp, #112	@ 0x70
 8007230:	f85d eb04 	ldr.w	lr, [sp], #4
 8007234:	b003      	add	sp, #12
 8007236:	4770      	bx	lr
 8007238:	24000010 	.word	0x24000010
 800723c:	ffff0208 	.word	0xffff0208

08007240 <memset>:
 8007240:	4402      	add	r2, r0
 8007242:	4603      	mov	r3, r0
 8007244:	4293      	cmp	r3, r2
 8007246:	d100      	bne.n	800724a <memset+0xa>
 8007248:	4770      	bx	lr
 800724a:	f803 1b01 	strb.w	r1, [r3], #1
 800724e:	e7f9      	b.n	8007244 <memset+0x4>

08007250 <__errno>:
 8007250:	4b01      	ldr	r3, [pc, #4]	@ (8007258 <__errno+0x8>)
 8007252:	6818      	ldr	r0, [r3, #0]
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	24000010 	.word	0x24000010

0800725c <__libc_init_array>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	4d0d      	ldr	r5, [pc, #52]	@ (8007294 <__libc_init_array+0x38>)
 8007260:	4c0d      	ldr	r4, [pc, #52]	@ (8007298 <__libc_init_array+0x3c>)
 8007262:	1b64      	subs	r4, r4, r5
 8007264:	10a4      	asrs	r4, r4, #2
 8007266:	2600      	movs	r6, #0
 8007268:	42a6      	cmp	r6, r4
 800726a:	d109      	bne.n	8007280 <__libc_init_array+0x24>
 800726c:	4d0b      	ldr	r5, [pc, #44]	@ (800729c <__libc_init_array+0x40>)
 800726e:	4c0c      	ldr	r4, [pc, #48]	@ (80072a0 <__libc_init_array+0x44>)
 8007270:	f000 fc66 	bl	8007b40 <_init>
 8007274:	1b64      	subs	r4, r4, r5
 8007276:	10a4      	asrs	r4, r4, #2
 8007278:	2600      	movs	r6, #0
 800727a:	42a6      	cmp	r6, r4
 800727c:	d105      	bne.n	800728a <__libc_init_array+0x2e>
 800727e:	bd70      	pop	{r4, r5, r6, pc}
 8007280:	f855 3b04 	ldr.w	r3, [r5], #4
 8007284:	4798      	blx	r3
 8007286:	3601      	adds	r6, #1
 8007288:	e7ee      	b.n	8007268 <__libc_init_array+0xc>
 800728a:	f855 3b04 	ldr.w	r3, [r5], #4
 800728e:	4798      	blx	r3
 8007290:	3601      	adds	r6, #1
 8007292:	e7f2      	b.n	800727a <__libc_init_array+0x1e>
 8007294:	08007c00 	.word	0x08007c00
 8007298:	08007c00 	.word	0x08007c00
 800729c:	08007c00 	.word	0x08007c00
 80072a0:	08007c04 	.word	0x08007c04

080072a4 <__retarget_lock_acquire_recursive>:
 80072a4:	4770      	bx	lr

080072a6 <__retarget_lock_release_recursive>:
 80072a6:	4770      	bx	lr

080072a8 <_free_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	4605      	mov	r5, r0
 80072ac:	2900      	cmp	r1, #0
 80072ae:	d041      	beq.n	8007334 <_free_r+0x8c>
 80072b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072b4:	1f0c      	subs	r4, r1, #4
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	bfb8      	it	lt
 80072ba:	18e4      	addlt	r4, r4, r3
 80072bc:	f000 f8e0 	bl	8007480 <__malloc_lock>
 80072c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007338 <_free_r+0x90>)
 80072c2:	6813      	ldr	r3, [r2, #0]
 80072c4:	b933      	cbnz	r3, 80072d4 <_free_r+0x2c>
 80072c6:	6063      	str	r3, [r4, #4]
 80072c8:	6014      	str	r4, [r2, #0]
 80072ca:	4628      	mov	r0, r5
 80072cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072d0:	f000 b8dc 	b.w	800748c <__malloc_unlock>
 80072d4:	42a3      	cmp	r3, r4
 80072d6:	d908      	bls.n	80072ea <_free_r+0x42>
 80072d8:	6820      	ldr	r0, [r4, #0]
 80072da:	1821      	adds	r1, r4, r0
 80072dc:	428b      	cmp	r3, r1
 80072de:	bf01      	itttt	eq
 80072e0:	6819      	ldreq	r1, [r3, #0]
 80072e2:	685b      	ldreq	r3, [r3, #4]
 80072e4:	1809      	addeq	r1, r1, r0
 80072e6:	6021      	streq	r1, [r4, #0]
 80072e8:	e7ed      	b.n	80072c6 <_free_r+0x1e>
 80072ea:	461a      	mov	r2, r3
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	b10b      	cbz	r3, 80072f4 <_free_r+0x4c>
 80072f0:	42a3      	cmp	r3, r4
 80072f2:	d9fa      	bls.n	80072ea <_free_r+0x42>
 80072f4:	6811      	ldr	r1, [r2, #0]
 80072f6:	1850      	adds	r0, r2, r1
 80072f8:	42a0      	cmp	r0, r4
 80072fa:	d10b      	bne.n	8007314 <_free_r+0x6c>
 80072fc:	6820      	ldr	r0, [r4, #0]
 80072fe:	4401      	add	r1, r0
 8007300:	1850      	adds	r0, r2, r1
 8007302:	4283      	cmp	r3, r0
 8007304:	6011      	str	r1, [r2, #0]
 8007306:	d1e0      	bne.n	80072ca <_free_r+0x22>
 8007308:	6818      	ldr	r0, [r3, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	6053      	str	r3, [r2, #4]
 800730e:	4408      	add	r0, r1
 8007310:	6010      	str	r0, [r2, #0]
 8007312:	e7da      	b.n	80072ca <_free_r+0x22>
 8007314:	d902      	bls.n	800731c <_free_r+0x74>
 8007316:	230c      	movs	r3, #12
 8007318:	602b      	str	r3, [r5, #0]
 800731a:	e7d6      	b.n	80072ca <_free_r+0x22>
 800731c:	6820      	ldr	r0, [r4, #0]
 800731e:	1821      	adds	r1, r4, r0
 8007320:	428b      	cmp	r3, r1
 8007322:	bf04      	itt	eq
 8007324:	6819      	ldreq	r1, [r3, #0]
 8007326:	685b      	ldreq	r3, [r3, #4]
 8007328:	6063      	str	r3, [r4, #4]
 800732a:	bf04      	itt	eq
 800732c:	1809      	addeq	r1, r1, r0
 800732e:	6021      	streq	r1, [r4, #0]
 8007330:	6054      	str	r4, [r2, #4]
 8007332:	e7ca      	b.n	80072ca <_free_r+0x22>
 8007334:	bd38      	pop	{r3, r4, r5, pc}
 8007336:	bf00      	nop
 8007338:	240003c4 	.word	0x240003c4

0800733c <sbrk_aligned>:
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	4e0f      	ldr	r6, [pc, #60]	@ (800737c <sbrk_aligned+0x40>)
 8007340:	460c      	mov	r4, r1
 8007342:	6831      	ldr	r1, [r6, #0]
 8007344:	4605      	mov	r5, r0
 8007346:	b911      	cbnz	r1, 800734e <sbrk_aligned+0x12>
 8007348:	f000 fba6 	bl	8007a98 <_sbrk_r>
 800734c:	6030      	str	r0, [r6, #0]
 800734e:	4621      	mov	r1, r4
 8007350:	4628      	mov	r0, r5
 8007352:	f000 fba1 	bl	8007a98 <_sbrk_r>
 8007356:	1c43      	adds	r3, r0, #1
 8007358:	d103      	bne.n	8007362 <sbrk_aligned+0x26>
 800735a:	f04f 34ff 	mov.w	r4, #4294967295
 800735e:	4620      	mov	r0, r4
 8007360:	bd70      	pop	{r4, r5, r6, pc}
 8007362:	1cc4      	adds	r4, r0, #3
 8007364:	f024 0403 	bic.w	r4, r4, #3
 8007368:	42a0      	cmp	r0, r4
 800736a:	d0f8      	beq.n	800735e <sbrk_aligned+0x22>
 800736c:	1a21      	subs	r1, r4, r0
 800736e:	4628      	mov	r0, r5
 8007370:	f000 fb92 	bl	8007a98 <_sbrk_r>
 8007374:	3001      	adds	r0, #1
 8007376:	d1f2      	bne.n	800735e <sbrk_aligned+0x22>
 8007378:	e7ef      	b.n	800735a <sbrk_aligned+0x1e>
 800737a:	bf00      	nop
 800737c:	240003c0 	.word	0x240003c0

08007380 <_malloc_r>:
 8007380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007384:	1ccd      	adds	r5, r1, #3
 8007386:	f025 0503 	bic.w	r5, r5, #3
 800738a:	3508      	adds	r5, #8
 800738c:	2d0c      	cmp	r5, #12
 800738e:	bf38      	it	cc
 8007390:	250c      	movcc	r5, #12
 8007392:	2d00      	cmp	r5, #0
 8007394:	4606      	mov	r6, r0
 8007396:	db01      	blt.n	800739c <_malloc_r+0x1c>
 8007398:	42a9      	cmp	r1, r5
 800739a:	d904      	bls.n	80073a6 <_malloc_r+0x26>
 800739c:	230c      	movs	r3, #12
 800739e:	6033      	str	r3, [r6, #0]
 80073a0:	2000      	movs	r0, #0
 80073a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800747c <_malloc_r+0xfc>
 80073aa:	f000 f869 	bl	8007480 <__malloc_lock>
 80073ae:	f8d8 3000 	ldr.w	r3, [r8]
 80073b2:	461c      	mov	r4, r3
 80073b4:	bb44      	cbnz	r4, 8007408 <_malloc_r+0x88>
 80073b6:	4629      	mov	r1, r5
 80073b8:	4630      	mov	r0, r6
 80073ba:	f7ff ffbf 	bl	800733c <sbrk_aligned>
 80073be:	1c43      	adds	r3, r0, #1
 80073c0:	4604      	mov	r4, r0
 80073c2:	d158      	bne.n	8007476 <_malloc_r+0xf6>
 80073c4:	f8d8 4000 	ldr.w	r4, [r8]
 80073c8:	4627      	mov	r7, r4
 80073ca:	2f00      	cmp	r7, #0
 80073cc:	d143      	bne.n	8007456 <_malloc_r+0xd6>
 80073ce:	2c00      	cmp	r4, #0
 80073d0:	d04b      	beq.n	800746a <_malloc_r+0xea>
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	4639      	mov	r1, r7
 80073d6:	4630      	mov	r0, r6
 80073d8:	eb04 0903 	add.w	r9, r4, r3
 80073dc:	f000 fb5c 	bl	8007a98 <_sbrk_r>
 80073e0:	4581      	cmp	r9, r0
 80073e2:	d142      	bne.n	800746a <_malloc_r+0xea>
 80073e4:	6821      	ldr	r1, [r4, #0]
 80073e6:	1a6d      	subs	r5, r5, r1
 80073e8:	4629      	mov	r1, r5
 80073ea:	4630      	mov	r0, r6
 80073ec:	f7ff ffa6 	bl	800733c <sbrk_aligned>
 80073f0:	3001      	adds	r0, #1
 80073f2:	d03a      	beq.n	800746a <_malloc_r+0xea>
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	442b      	add	r3, r5
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	f8d8 3000 	ldr.w	r3, [r8]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	bb62      	cbnz	r2, 800745c <_malloc_r+0xdc>
 8007402:	f8c8 7000 	str.w	r7, [r8]
 8007406:	e00f      	b.n	8007428 <_malloc_r+0xa8>
 8007408:	6822      	ldr	r2, [r4, #0]
 800740a:	1b52      	subs	r2, r2, r5
 800740c:	d420      	bmi.n	8007450 <_malloc_r+0xd0>
 800740e:	2a0b      	cmp	r2, #11
 8007410:	d917      	bls.n	8007442 <_malloc_r+0xc2>
 8007412:	1961      	adds	r1, r4, r5
 8007414:	42a3      	cmp	r3, r4
 8007416:	6025      	str	r5, [r4, #0]
 8007418:	bf18      	it	ne
 800741a:	6059      	strne	r1, [r3, #4]
 800741c:	6863      	ldr	r3, [r4, #4]
 800741e:	bf08      	it	eq
 8007420:	f8c8 1000 	streq.w	r1, [r8]
 8007424:	5162      	str	r2, [r4, r5]
 8007426:	604b      	str	r3, [r1, #4]
 8007428:	4630      	mov	r0, r6
 800742a:	f000 f82f 	bl	800748c <__malloc_unlock>
 800742e:	f104 000b 	add.w	r0, r4, #11
 8007432:	1d23      	adds	r3, r4, #4
 8007434:	f020 0007 	bic.w	r0, r0, #7
 8007438:	1ac2      	subs	r2, r0, r3
 800743a:	bf1c      	itt	ne
 800743c:	1a1b      	subne	r3, r3, r0
 800743e:	50a3      	strne	r3, [r4, r2]
 8007440:	e7af      	b.n	80073a2 <_malloc_r+0x22>
 8007442:	6862      	ldr	r2, [r4, #4]
 8007444:	42a3      	cmp	r3, r4
 8007446:	bf0c      	ite	eq
 8007448:	f8c8 2000 	streq.w	r2, [r8]
 800744c:	605a      	strne	r2, [r3, #4]
 800744e:	e7eb      	b.n	8007428 <_malloc_r+0xa8>
 8007450:	4623      	mov	r3, r4
 8007452:	6864      	ldr	r4, [r4, #4]
 8007454:	e7ae      	b.n	80073b4 <_malloc_r+0x34>
 8007456:	463c      	mov	r4, r7
 8007458:	687f      	ldr	r7, [r7, #4]
 800745a:	e7b6      	b.n	80073ca <_malloc_r+0x4a>
 800745c:	461a      	mov	r2, r3
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	42a3      	cmp	r3, r4
 8007462:	d1fb      	bne.n	800745c <_malloc_r+0xdc>
 8007464:	2300      	movs	r3, #0
 8007466:	6053      	str	r3, [r2, #4]
 8007468:	e7de      	b.n	8007428 <_malloc_r+0xa8>
 800746a:	230c      	movs	r3, #12
 800746c:	6033      	str	r3, [r6, #0]
 800746e:	4630      	mov	r0, r6
 8007470:	f000 f80c 	bl	800748c <__malloc_unlock>
 8007474:	e794      	b.n	80073a0 <_malloc_r+0x20>
 8007476:	6005      	str	r5, [r0, #0]
 8007478:	e7d6      	b.n	8007428 <_malloc_r+0xa8>
 800747a:	bf00      	nop
 800747c:	240003c4 	.word	0x240003c4

08007480 <__malloc_lock>:
 8007480:	4801      	ldr	r0, [pc, #4]	@ (8007488 <__malloc_lock+0x8>)
 8007482:	f7ff bf0f 	b.w	80072a4 <__retarget_lock_acquire_recursive>
 8007486:	bf00      	nop
 8007488:	240003bc 	.word	0x240003bc

0800748c <__malloc_unlock>:
 800748c:	4801      	ldr	r0, [pc, #4]	@ (8007494 <__malloc_unlock+0x8>)
 800748e:	f7ff bf0a 	b.w	80072a6 <__retarget_lock_release_recursive>
 8007492:	bf00      	nop
 8007494:	240003bc 	.word	0x240003bc

08007498 <__ssputs_r>:
 8007498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800749c:	688e      	ldr	r6, [r1, #8]
 800749e:	461f      	mov	r7, r3
 80074a0:	42be      	cmp	r6, r7
 80074a2:	680b      	ldr	r3, [r1, #0]
 80074a4:	4682      	mov	sl, r0
 80074a6:	460c      	mov	r4, r1
 80074a8:	4690      	mov	r8, r2
 80074aa:	d82d      	bhi.n	8007508 <__ssputs_r+0x70>
 80074ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80074b4:	d026      	beq.n	8007504 <__ssputs_r+0x6c>
 80074b6:	6965      	ldr	r5, [r4, #20]
 80074b8:	6909      	ldr	r1, [r1, #16]
 80074ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074be:	eba3 0901 	sub.w	r9, r3, r1
 80074c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074c6:	1c7b      	adds	r3, r7, #1
 80074c8:	444b      	add	r3, r9
 80074ca:	106d      	asrs	r5, r5, #1
 80074cc:	429d      	cmp	r5, r3
 80074ce:	bf38      	it	cc
 80074d0:	461d      	movcc	r5, r3
 80074d2:	0553      	lsls	r3, r2, #21
 80074d4:	d527      	bpl.n	8007526 <__ssputs_r+0x8e>
 80074d6:	4629      	mov	r1, r5
 80074d8:	f7ff ff52 	bl	8007380 <_malloc_r>
 80074dc:	4606      	mov	r6, r0
 80074de:	b360      	cbz	r0, 800753a <__ssputs_r+0xa2>
 80074e0:	6921      	ldr	r1, [r4, #16]
 80074e2:	464a      	mov	r2, r9
 80074e4:	f000 fae8 	bl	8007ab8 <memcpy>
 80074e8:	89a3      	ldrh	r3, [r4, #12]
 80074ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80074ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074f2:	81a3      	strh	r3, [r4, #12]
 80074f4:	6126      	str	r6, [r4, #16]
 80074f6:	6165      	str	r5, [r4, #20]
 80074f8:	444e      	add	r6, r9
 80074fa:	eba5 0509 	sub.w	r5, r5, r9
 80074fe:	6026      	str	r6, [r4, #0]
 8007500:	60a5      	str	r5, [r4, #8]
 8007502:	463e      	mov	r6, r7
 8007504:	42be      	cmp	r6, r7
 8007506:	d900      	bls.n	800750a <__ssputs_r+0x72>
 8007508:	463e      	mov	r6, r7
 800750a:	6820      	ldr	r0, [r4, #0]
 800750c:	4632      	mov	r2, r6
 800750e:	4641      	mov	r1, r8
 8007510:	f000 faa8 	bl	8007a64 <memmove>
 8007514:	68a3      	ldr	r3, [r4, #8]
 8007516:	1b9b      	subs	r3, r3, r6
 8007518:	60a3      	str	r3, [r4, #8]
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	4433      	add	r3, r6
 800751e:	6023      	str	r3, [r4, #0]
 8007520:	2000      	movs	r0, #0
 8007522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007526:	462a      	mov	r2, r5
 8007528:	f000 fad4 	bl	8007ad4 <_realloc_r>
 800752c:	4606      	mov	r6, r0
 800752e:	2800      	cmp	r0, #0
 8007530:	d1e0      	bne.n	80074f4 <__ssputs_r+0x5c>
 8007532:	6921      	ldr	r1, [r4, #16]
 8007534:	4650      	mov	r0, sl
 8007536:	f7ff feb7 	bl	80072a8 <_free_r>
 800753a:	230c      	movs	r3, #12
 800753c:	f8ca 3000 	str.w	r3, [sl]
 8007540:	89a3      	ldrh	r3, [r4, #12]
 8007542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007546:	81a3      	strh	r3, [r4, #12]
 8007548:	f04f 30ff 	mov.w	r0, #4294967295
 800754c:	e7e9      	b.n	8007522 <__ssputs_r+0x8a>
	...

08007550 <_svfiprintf_r>:
 8007550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007554:	4698      	mov	r8, r3
 8007556:	898b      	ldrh	r3, [r1, #12]
 8007558:	061b      	lsls	r3, r3, #24
 800755a:	b09d      	sub	sp, #116	@ 0x74
 800755c:	4607      	mov	r7, r0
 800755e:	460d      	mov	r5, r1
 8007560:	4614      	mov	r4, r2
 8007562:	d510      	bpl.n	8007586 <_svfiprintf_r+0x36>
 8007564:	690b      	ldr	r3, [r1, #16]
 8007566:	b973      	cbnz	r3, 8007586 <_svfiprintf_r+0x36>
 8007568:	2140      	movs	r1, #64	@ 0x40
 800756a:	f7ff ff09 	bl	8007380 <_malloc_r>
 800756e:	6028      	str	r0, [r5, #0]
 8007570:	6128      	str	r0, [r5, #16]
 8007572:	b930      	cbnz	r0, 8007582 <_svfiprintf_r+0x32>
 8007574:	230c      	movs	r3, #12
 8007576:	603b      	str	r3, [r7, #0]
 8007578:	f04f 30ff 	mov.w	r0, #4294967295
 800757c:	b01d      	add	sp, #116	@ 0x74
 800757e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007582:	2340      	movs	r3, #64	@ 0x40
 8007584:	616b      	str	r3, [r5, #20]
 8007586:	2300      	movs	r3, #0
 8007588:	9309      	str	r3, [sp, #36]	@ 0x24
 800758a:	2320      	movs	r3, #32
 800758c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007590:	f8cd 800c 	str.w	r8, [sp, #12]
 8007594:	2330      	movs	r3, #48	@ 0x30
 8007596:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007734 <_svfiprintf_r+0x1e4>
 800759a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800759e:	f04f 0901 	mov.w	r9, #1
 80075a2:	4623      	mov	r3, r4
 80075a4:	469a      	mov	sl, r3
 80075a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075aa:	b10a      	cbz	r2, 80075b0 <_svfiprintf_r+0x60>
 80075ac:	2a25      	cmp	r2, #37	@ 0x25
 80075ae:	d1f9      	bne.n	80075a4 <_svfiprintf_r+0x54>
 80075b0:	ebba 0b04 	subs.w	fp, sl, r4
 80075b4:	d00b      	beq.n	80075ce <_svfiprintf_r+0x7e>
 80075b6:	465b      	mov	r3, fp
 80075b8:	4622      	mov	r2, r4
 80075ba:	4629      	mov	r1, r5
 80075bc:	4638      	mov	r0, r7
 80075be:	f7ff ff6b 	bl	8007498 <__ssputs_r>
 80075c2:	3001      	adds	r0, #1
 80075c4:	f000 80a7 	beq.w	8007716 <_svfiprintf_r+0x1c6>
 80075c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075ca:	445a      	add	r2, fp
 80075cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80075ce:	f89a 3000 	ldrb.w	r3, [sl]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 809f 	beq.w	8007716 <_svfiprintf_r+0x1c6>
 80075d8:	2300      	movs	r3, #0
 80075da:	f04f 32ff 	mov.w	r2, #4294967295
 80075de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075e2:	f10a 0a01 	add.w	sl, sl, #1
 80075e6:	9304      	str	r3, [sp, #16]
 80075e8:	9307      	str	r3, [sp, #28]
 80075ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80075f0:	4654      	mov	r4, sl
 80075f2:	2205      	movs	r2, #5
 80075f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f8:	484e      	ldr	r0, [pc, #312]	@ (8007734 <_svfiprintf_r+0x1e4>)
 80075fa:	f7f8 fe71 	bl	80002e0 <memchr>
 80075fe:	9a04      	ldr	r2, [sp, #16]
 8007600:	b9d8      	cbnz	r0, 800763a <_svfiprintf_r+0xea>
 8007602:	06d0      	lsls	r0, r2, #27
 8007604:	bf44      	itt	mi
 8007606:	2320      	movmi	r3, #32
 8007608:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800760c:	0711      	lsls	r1, r2, #28
 800760e:	bf44      	itt	mi
 8007610:	232b      	movmi	r3, #43	@ 0x2b
 8007612:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007616:	f89a 3000 	ldrb.w	r3, [sl]
 800761a:	2b2a      	cmp	r3, #42	@ 0x2a
 800761c:	d015      	beq.n	800764a <_svfiprintf_r+0xfa>
 800761e:	9a07      	ldr	r2, [sp, #28]
 8007620:	4654      	mov	r4, sl
 8007622:	2000      	movs	r0, #0
 8007624:	f04f 0c0a 	mov.w	ip, #10
 8007628:	4621      	mov	r1, r4
 800762a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800762e:	3b30      	subs	r3, #48	@ 0x30
 8007630:	2b09      	cmp	r3, #9
 8007632:	d94b      	bls.n	80076cc <_svfiprintf_r+0x17c>
 8007634:	b1b0      	cbz	r0, 8007664 <_svfiprintf_r+0x114>
 8007636:	9207      	str	r2, [sp, #28]
 8007638:	e014      	b.n	8007664 <_svfiprintf_r+0x114>
 800763a:	eba0 0308 	sub.w	r3, r0, r8
 800763e:	fa09 f303 	lsl.w	r3, r9, r3
 8007642:	4313      	orrs	r3, r2
 8007644:	9304      	str	r3, [sp, #16]
 8007646:	46a2      	mov	sl, r4
 8007648:	e7d2      	b.n	80075f0 <_svfiprintf_r+0xa0>
 800764a:	9b03      	ldr	r3, [sp, #12]
 800764c:	1d19      	adds	r1, r3, #4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	9103      	str	r1, [sp, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	bfbb      	ittet	lt
 8007656:	425b      	neglt	r3, r3
 8007658:	f042 0202 	orrlt.w	r2, r2, #2
 800765c:	9307      	strge	r3, [sp, #28]
 800765e:	9307      	strlt	r3, [sp, #28]
 8007660:	bfb8      	it	lt
 8007662:	9204      	strlt	r2, [sp, #16]
 8007664:	7823      	ldrb	r3, [r4, #0]
 8007666:	2b2e      	cmp	r3, #46	@ 0x2e
 8007668:	d10a      	bne.n	8007680 <_svfiprintf_r+0x130>
 800766a:	7863      	ldrb	r3, [r4, #1]
 800766c:	2b2a      	cmp	r3, #42	@ 0x2a
 800766e:	d132      	bne.n	80076d6 <_svfiprintf_r+0x186>
 8007670:	9b03      	ldr	r3, [sp, #12]
 8007672:	1d1a      	adds	r2, r3, #4
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	9203      	str	r2, [sp, #12]
 8007678:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800767c:	3402      	adds	r4, #2
 800767e:	9305      	str	r3, [sp, #20]
 8007680:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007744 <_svfiprintf_r+0x1f4>
 8007684:	7821      	ldrb	r1, [r4, #0]
 8007686:	2203      	movs	r2, #3
 8007688:	4650      	mov	r0, sl
 800768a:	f7f8 fe29 	bl	80002e0 <memchr>
 800768e:	b138      	cbz	r0, 80076a0 <_svfiprintf_r+0x150>
 8007690:	9b04      	ldr	r3, [sp, #16]
 8007692:	eba0 000a 	sub.w	r0, r0, sl
 8007696:	2240      	movs	r2, #64	@ 0x40
 8007698:	4082      	lsls	r2, r0
 800769a:	4313      	orrs	r3, r2
 800769c:	3401      	adds	r4, #1
 800769e:	9304      	str	r3, [sp, #16]
 80076a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a4:	4824      	ldr	r0, [pc, #144]	@ (8007738 <_svfiprintf_r+0x1e8>)
 80076a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076aa:	2206      	movs	r2, #6
 80076ac:	f7f8 fe18 	bl	80002e0 <memchr>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d036      	beq.n	8007722 <_svfiprintf_r+0x1d2>
 80076b4:	4b21      	ldr	r3, [pc, #132]	@ (800773c <_svfiprintf_r+0x1ec>)
 80076b6:	bb1b      	cbnz	r3, 8007700 <_svfiprintf_r+0x1b0>
 80076b8:	9b03      	ldr	r3, [sp, #12]
 80076ba:	3307      	adds	r3, #7
 80076bc:	f023 0307 	bic.w	r3, r3, #7
 80076c0:	3308      	adds	r3, #8
 80076c2:	9303      	str	r3, [sp, #12]
 80076c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c6:	4433      	add	r3, r6
 80076c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ca:	e76a      	b.n	80075a2 <_svfiprintf_r+0x52>
 80076cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80076d0:	460c      	mov	r4, r1
 80076d2:	2001      	movs	r0, #1
 80076d4:	e7a8      	b.n	8007628 <_svfiprintf_r+0xd8>
 80076d6:	2300      	movs	r3, #0
 80076d8:	3401      	adds	r4, #1
 80076da:	9305      	str	r3, [sp, #20]
 80076dc:	4619      	mov	r1, r3
 80076de:	f04f 0c0a 	mov.w	ip, #10
 80076e2:	4620      	mov	r0, r4
 80076e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076e8:	3a30      	subs	r2, #48	@ 0x30
 80076ea:	2a09      	cmp	r2, #9
 80076ec:	d903      	bls.n	80076f6 <_svfiprintf_r+0x1a6>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0c6      	beq.n	8007680 <_svfiprintf_r+0x130>
 80076f2:	9105      	str	r1, [sp, #20]
 80076f4:	e7c4      	b.n	8007680 <_svfiprintf_r+0x130>
 80076f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80076fa:	4604      	mov	r4, r0
 80076fc:	2301      	movs	r3, #1
 80076fe:	e7f0      	b.n	80076e2 <_svfiprintf_r+0x192>
 8007700:	ab03      	add	r3, sp, #12
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	462a      	mov	r2, r5
 8007706:	4b0e      	ldr	r3, [pc, #56]	@ (8007740 <_svfiprintf_r+0x1f0>)
 8007708:	a904      	add	r1, sp, #16
 800770a:	4638      	mov	r0, r7
 800770c:	f3af 8000 	nop.w
 8007710:	1c42      	adds	r2, r0, #1
 8007712:	4606      	mov	r6, r0
 8007714:	d1d6      	bne.n	80076c4 <_svfiprintf_r+0x174>
 8007716:	89ab      	ldrh	r3, [r5, #12]
 8007718:	065b      	lsls	r3, r3, #25
 800771a:	f53f af2d 	bmi.w	8007578 <_svfiprintf_r+0x28>
 800771e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007720:	e72c      	b.n	800757c <_svfiprintf_r+0x2c>
 8007722:	ab03      	add	r3, sp, #12
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	462a      	mov	r2, r5
 8007728:	4b05      	ldr	r3, [pc, #20]	@ (8007740 <_svfiprintf_r+0x1f0>)
 800772a:	a904      	add	r1, sp, #16
 800772c:	4638      	mov	r0, r7
 800772e:	f000 f879 	bl	8007824 <_printf_i>
 8007732:	e7ed      	b.n	8007710 <_svfiprintf_r+0x1c0>
 8007734:	08007bc4 	.word	0x08007bc4
 8007738:	08007bce 	.word	0x08007bce
 800773c:	00000000 	.word	0x00000000
 8007740:	08007499 	.word	0x08007499
 8007744:	08007bca 	.word	0x08007bca

08007748 <_printf_common>:
 8007748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800774c:	4616      	mov	r6, r2
 800774e:	4698      	mov	r8, r3
 8007750:	688a      	ldr	r2, [r1, #8]
 8007752:	690b      	ldr	r3, [r1, #16]
 8007754:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007758:	4293      	cmp	r3, r2
 800775a:	bfb8      	it	lt
 800775c:	4613      	movlt	r3, r2
 800775e:	6033      	str	r3, [r6, #0]
 8007760:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007764:	4607      	mov	r7, r0
 8007766:	460c      	mov	r4, r1
 8007768:	b10a      	cbz	r2, 800776e <_printf_common+0x26>
 800776a:	3301      	adds	r3, #1
 800776c:	6033      	str	r3, [r6, #0]
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	0699      	lsls	r1, r3, #26
 8007772:	bf42      	ittt	mi
 8007774:	6833      	ldrmi	r3, [r6, #0]
 8007776:	3302      	addmi	r3, #2
 8007778:	6033      	strmi	r3, [r6, #0]
 800777a:	6825      	ldr	r5, [r4, #0]
 800777c:	f015 0506 	ands.w	r5, r5, #6
 8007780:	d106      	bne.n	8007790 <_printf_common+0x48>
 8007782:	f104 0a19 	add.w	sl, r4, #25
 8007786:	68e3      	ldr	r3, [r4, #12]
 8007788:	6832      	ldr	r2, [r6, #0]
 800778a:	1a9b      	subs	r3, r3, r2
 800778c:	42ab      	cmp	r3, r5
 800778e:	dc26      	bgt.n	80077de <_printf_common+0x96>
 8007790:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007794:	6822      	ldr	r2, [r4, #0]
 8007796:	3b00      	subs	r3, #0
 8007798:	bf18      	it	ne
 800779a:	2301      	movne	r3, #1
 800779c:	0692      	lsls	r2, r2, #26
 800779e:	d42b      	bmi.n	80077f8 <_printf_common+0xb0>
 80077a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077a4:	4641      	mov	r1, r8
 80077a6:	4638      	mov	r0, r7
 80077a8:	47c8      	blx	r9
 80077aa:	3001      	adds	r0, #1
 80077ac:	d01e      	beq.n	80077ec <_printf_common+0xa4>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	6922      	ldr	r2, [r4, #16]
 80077b2:	f003 0306 	and.w	r3, r3, #6
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	bf02      	ittt	eq
 80077ba:	68e5      	ldreq	r5, [r4, #12]
 80077bc:	6833      	ldreq	r3, [r6, #0]
 80077be:	1aed      	subeq	r5, r5, r3
 80077c0:	68a3      	ldr	r3, [r4, #8]
 80077c2:	bf0c      	ite	eq
 80077c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077c8:	2500      	movne	r5, #0
 80077ca:	4293      	cmp	r3, r2
 80077cc:	bfc4      	itt	gt
 80077ce:	1a9b      	subgt	r3, r3, r2
 80077d0:	18ed      	addgt	r5, r5, r3
 80077d2:	2600      	movs	r6, #0
 80077d4:	341a      	adds	r4, #26
 80077d6:	42b5      	cmp	r5, r6
 80077d8:	d11a      	bne.n	8007810 <_printf_common+0xc8>
 80077da:	2000      	movs	r0, #0
 80077dc:	e008      	b.n	80077f0 <_printf_common+0xa8>
 80077de:	2301      	movs	r3, #1
 80077e0:	4652      	mov	r2, sl
 80077e2:	4641      	mov	r1, r8
 80077e4:	4638      	mov	r0, r7
 80077e6:	47c8      	blx	r9
 80077e8:	3001      	adds	r0, #1
 80077ea:	d103      	bne.n	80077f4 <_printf_common+0xac>
 80077ec:	f04f 30ff 	mov.w	r0, #4294967295
 80077f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f4:	3501      	adds	r5, #1
 80077f6:	e7c6      	b.n	8007786 <_printf_common+0x3e>
 80077f8:	18e1      	adds	r1, r4, r3
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	2030      	movs	r0, #48	@ 0x30
 80077fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007802:	4422      	add	r2, r4
 8007804:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007808:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800780c:	3302      	adds	r3, #2
 800780e:	e7c7      	b.n	80077a0 <_printf_common+0x58>
 8007810:	2301      	movs	r3, #1
 8007812:	4622      	mov	r2, r4
 8007814:	4641      	mov	r1, r8
 8007816:	4638      	mov	r0, r7
 8007818:	47c8      	blx	r9
 800781a:	3001      	adds	r0, #1
 800781c:	d0e6      	beq.n	80077ec <_printf_common+0xa4>
 800781e:	3601      	adds	r6, #1
 8007820:	e7d9      	b.n	80077d6 <_printf_common+0x8e>
	...

08007824 <_printf_i>:
 8007824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007828:	7e0f      	ldrb	r7, [r1, #24]
 800782a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800782c:	2f78      	cmp	r7, #120	@ 0x78
 800782e:	4691      	mov	r9, r2
 8007830:	4680      	mov	r8, r0
 8007832:	460c      	mov	r4, r1
 8007834:	469a      	mov	sl, r3
 8007836:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800783a:	d807      	bhi.n	800784c <_printf_i+0x28>
 800783c:	2f62      	cmp	r7, #98	@ 0x62
 800783e:	d80a      	bhi.n	8007856 <_printf_i+0x32>
 8007840:	2f00      	cmp	r7, #0
 8007842:	f000 80d2 	beq.w	80079ea <_printf_i+0x1c6>
 8007846:	2f58      	cmp	r7, #88	@ 0x58
 8007848:	f000 80b9 	beq.w	80079be <_printf_i+0x19a>
 800784c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007850:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007854:	e03a      	b.n	80078cc <_printf_i+0xa8>
 8007856:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800785a:	2b15      	cmp	r3, #21
 800785c:	d8f6      	bhi.n	800784c <_printf_i+0x28>
 800785e:	a101      	add	r1, pc, #4	@ (adr r1, 8007864 <_printf_i+0x40>)
 8007860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007864:	080078bd 	.word	0x080078bd
 8007868:	080078d1 	.word	0x080078d1
 800786c:	0800784d 	.word	0x0800784d
 8007870:	0800784d 	.word	0x0800784d
 8007874:	0800784d 	.word	0x0800784d
 8007878:	0800784d 	.word	0x0800784d
 800787c:	080078d1 	.word	0x080078d1
 8007880:	0800784d 	.word	0x0800784d
 8007884:	0800784d 	.word	0x0800784d
 8007888:	0800784d 	.word	0x0800784d
 800788c:	0800784d 	.word	0x0800784d
 8007890:	080079d1 	.word	0x080079d1
 8007894:	080078fb 	.word	0x080078fb
 8007898:	0800798b 	.word	0x0800798b
 800789c:	0800784d 	.word	0x0800784d
 80078a0:	0800784d 	.word	0x0800784d
 80078a4:	080079f3 	.word	0x080079f3
 80078a8:	0800784d 	.word	0x0800784d
 80078ac:	080078fb 	.word	0x080078fb
 80078b0:	0800784d 	.word	0x0800784d
 80078b4:	0800784d 	.word	0x0800784d
 80078b8:	08007993 	.word	0x08007993
 80078bc:	6833      	ldr	r3, [r6, #0]
 80078be:	1d1a      	adds	r2, r3, #4
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6032      	str	r2, [r6, #0]
 80078c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078cc:	2301      	movs	r3, #1
 80078ce:	e09d      	b.n	8007a0c <_printf_i+0x1e8>
 80078d0:	6833      	ldr	r3, [r6, #0]
 80078d2:	6820      	ldr	r0, [r4, #0]
 80078d4:	1d19      	adds	r1, r3, #4
 80078d6:	6031      	str	r1, [r6, #0]
 80078d8:	0606      	lsls	r6, r0, #24
 80078da:	d501      	bpl.n	80078e0 <_printf_i+0xbc>
 80078dc:	681d      	ldr	r5, [r3, #0]
 80078de:	e003      	b.n	80078e8 <_printf_i+0xc4>
 80078e0:	0645      	lsls	r5, r0, #25
 80078e2:	d5fb      	bpl.n	80078dc <_printf_i+0xb8>
 80078e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078e8:	2d00      	cmp	r5, #0
 80078ea:	da03      	bge.n	80078f4 <_printf_i+0xd0>
 80078ec:	232d      	movs	r3, #45	@ 0x2d
 80078ee:	426d      	negs	r5, r5
 80078f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078f4:	4859      	ldr	r0, [pc, #356]	@ (8007a5c <_printf_i+0x238>)
 80078f6:	230a      	movs	r3, #10
 80078f8:	e011      	b.n	800791e <_printf_i+0xfa>
 80078fa:	6821      	ldr	r1, [r4, #0]
 80078fc:	6833      	ldr	r3, [r6, #0]
 80078fe:	0608      	lsls	r0, r1, #24
 8007900:	f853 5b04 	ldr.w	r5, [r3], #4
 8007904:	d402      	bmi.n	800790c <_printf_i+0xe8>
 8007906:	0649      	lsls	r1, r1, #25
 8007908:	bf48      	it	mi
 800790a:	b2ad      	uxthmi	r5, r5
 800790c:	2f6f      	cmp	r7, #111	@ 0x6f
 800790e:	4853      	ldr	r0, [pc, #332]	@ (8007a5c <_printf_i+0x238>)
 8007910:	6033      	str	r3, [r6, #0]
 8007912:	bf14      	ite	ne
 8007914:	230a      	movne	r3, #10
 8007916:	2308      	moveq	r3, #8
 8007918:	2100      	movs	r1, #0
 800791a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800791e:	6866      	ldr	r6, [r4, #4]
 8007920:	60a6      	str	r6, [r4, #8]
 8007922:	2e00      	cmp	r6, #0
 8007924:	bfa2      	ittt	ge
 8007926:	6821      	ldrge	r1, [r4, #0]
 8007928:	f021 0104 	bicge.w	r1, r1, #4
 800792c:	6021      	strge	r1, [r4, #0]
 800792e:	b90d      	cbnz	r5, 8007934 <_printf_i+0x110>
 8007930:	2e00      	cmp	r6, #0
 8007932:	d04b      	beq.n	80079cc <_printf_i+0x1a8>
 8007934:	4616      	mov	r6, r2
 8007936:	fbb5 f1f3 	udiv	r1, r5, r3
 800793a:	fb03 5711 	mls	r7, r3, r1, r5
 800793e:	5dc7      	ldrb	r7, [r0, r7]
 8007940:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007944:	462f      	mov	r7, r5
 8007946:	42bb      	cmp	r3, r7
 8007948:	460d      	mov	r5, r1
 800794a:	d9f4      	bls.n	8007936 <_printf_i+0x112>
 800794c:	2b08      	cmp	r3, #8
 800794e:	d10b      	bne.n	8007968 <_printf_i+0x144>
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	07df      	lsls	r7, r3, #31
 8007954:	d508      	bpl.n	8007968 <_printf_i+0x144>
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	6861      	ldr	r1, [r4, #4]
 800795a:	4299      	cmp	r1, r3
 800795c:	bfde      	ittt	le
 800795e:	2330      	movle	r3, #48	@ 0x30
 8007960:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007964:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007968:	1b92      	subs	r2, r2, r6
 800796a:	6122      	str	r2, [r4, #16]
 800796c:	f8cd a000 	str.w	sl, [sp]
 8007970:	464b      	mov	r3, r9
 8007972:	aa03      	add	r2, sp, #12
 8007974:	4621      	mov	r1, r4
 8007976:	4640      	mov	r0, r8
 8007978:	f7ff fee6 	bl	8007748 <_printf_common>
 800797c:	3001      	adds	r0, #1
 800797e:	d14a      	bne.n	8007a16 <_printf_i+0x1f2>
 8007980:	f04f 30ff 	mov.w	r0, #4294967295
 8007984:	b004      	add	sp, #16
 8007986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	f043 0320 	orr.w	r3, r3, #32
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	4833      	ldr	r0, [pc, #204]	@ (8007a60 <_printf_i+0x23c>)
 8007994:	2778      	movs	r7, #120	@ 0x78
 8007996:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	6831      	ldr	r1, [r6, #0]
 800799e:	061f      	lsls	r7, r3, #24
 80079a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80079a4:	d402      	bmi.n	80079ac <_printf_i+0x188>
 80079a6:	065f      	lsls	r7, r3, #25
 80079a8:	bf48      	it	mi
 80079aa:	b2ad      	uxthmi	r5, r5
 80079ac:	6031      	str	r1, [r6, #0]
 80079ae:	07d9      	lsls	r1, r3, #31
 80079b0:	bf44      	itt	mi
 80079b2:	f043 0320 	orrmi.w	r3, r3, #32
 80079b6:	6023      	strmi	r3, [r4, #0]
 80079b8:	b11d      	cbz	r5, 80079c2 <_printf_i+0x19e>
 80079ba:	2310      	movs	r3, #16
 80079bc:	e7ac      	b.n	8007918 <_printf_i+0xf4>
 80079be:	4827      	ldr	r0, [pc, #156]	@ (8007a5c <_printf_i+0x238>)
 80079c0:	e7e9      	b.n	8007996 <_printf_i+0x172>
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	f023 0320 	bic.w	r3, r3, #32
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	e7f6      	b.n	80079ba <_printf_i+0x196>
 80079cc:	4616      	mov	r6, r2
 80079ce:	e7bd      	b.n	800794c <_printf_i+0x128>
 80079d0:	6833      	ldr	r3, [r6, #0]
 80079d2:	6825      	ldr	r5, [r4, #0]
 80079d4:	6961      	ldr	r1, [r4, #20]
 80079d6:	1d18      	adds	r0, r3, #4
 80079d8:	6030      	str	r0, [r6, #0]
 80079da:	062e      	lsls	r6, r5, #24
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	d501      	bpl.n	80079e4 <_printf_i+0x1c0>
 80079e0:	6019      	str	r1, [r3, #0]
 80079e2:	e002      	b.n	80079ea <_printf_i+0x1c6>
 80079e4:	0668      	lsls	r0, r5, #25
 80079e6:	d5fb      	bpl.n	80079e0 <_printf_i+0x1bc>
 80079e8:	8019      	strh	r1, [r3, #0]
 80079ea:	2300      	movs	r3, #0
 80079ec:	6123      	str	r3, [r4, #16]
 80079ee:	4616      	mov	r6, r2
 80079f0:	e7bc      	b.n	800796c <_printf_i+0x148>
 80079f2:	6833      	ldr	r3, [r6, #0]
 80079f4:	1d1a      	adds	r2, r3, #4
 80079f6:	6032      	str	r2, [r6, #0]
 80079f8:	681e      	ldr	r6, [r3, #0]
 80079fa:	6862      	ldr	r2, [r4, #4]
 80079fc:	2100      	movs	r1, #0
 80079fe:	4630      	mov	r0, r6
 8007a00:	f7f8 fc6e 	bl	80002e0 <memchr>
 8007a04:	b108      	cbz	r0, 8007a0a <_printf_i+0x1e6>
 8007a06:	1b80      	subs	r0, r0, r6
 8007a08:	6060      	str	r0, [r4, #4]
 8007a0a:	6863      	ldr	r3, [r4, #4]
 8007a0c:	6123      	str	r3, [r4, #16]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a14:	e7aa      	b.n	800796c <_printf_i+0x148>
 8007a16:	6923      	ldr	r3, [r4, #16]
 8007a18:	4632      	mov	r2, r6
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	4640      	mov	r0, r8
 8007a1e:	47d0      	blx	sl
 8007a20:	3001      	adds	r0, #1
 8007a22:	d0ad      	beq.n	8007980 <_printf_i+0x15c>
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	079b      	lsls	r3, r3, #30
 8007a28:	d413      	bmi.n	8007a52 <_printf_i+0x22e>
 8007a2a:	68e0      	ldr	r0, [r4, #12]
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	4298      	cmp	r0, r3
 8007a30:	bfb8      	it	lt
 8007a32:	4618      	movlt	r0, r3
 8007a34:	e7a6      	b.n	8007984 <_printf_i+0x160>
 8007a36:	2301      	movs	r3, #1
 8007a38:	4632      	mov	r2, r6
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	47d0      	blx	sl
 8007a40:	3001      	adds	r0, #1
 8007a42:	d09d      	beq.n	8007980 <_printf_i+0x15c>
 8007a44:	3501      	adds	r5, #1
 8007a46:	68e3      	ldr	r3, [r4, #12]
 8007a48:	9903      	ldr	r1, [sp, #12]
 8007a4a:	1a5b      	subs	r3, r3, r1
 8007a4c:	42ab      	cmp	r3, r5
 8007a4e:	dcf2      	bgt.n	8007a36 <_printf_i+0x212>
 8007a50:	e7eb      	b.n	8007a2a <_printf_i+0x206>
 8007a52:	2500      	movs	r5, #0
 8007a54:	f104 0619 	add.w	r6, r4, #25
 8007a58:	e7f5      	b.n	8007a46 <_printf_i+0x222>
 8007a5a:	bf00      	nop
 8007a5c:	08007bd5 	.word	0x08007bd5
 8007a60:	08007be6 	.word	0x08007be6

08007a64 <memmove>:
 8007a64:	4288      	cmp	r0, r1
 8007a66:	b510      	push	{r4, lr}
 8007a68:	eb01 0402 	add.w	r4, r1, r2
 8007a6c:	d902      	bls.n	8007a74 <memmove+0x10>
 8007a6e:	4284      	cmp	r4, r0
 8007a70:	4623      	mov	r3, r4
 8007a72:	d807      	bhi.n	8007a84 <memmove+0x20>
 8007a74:	1e43      	subs	r3, r0, #1
 8007a76:	42a1      	cmp	r1, r4
 8007a78:	d008      	beq.n	8007a8c <memmove+0x28>
 8007a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a82:	e7f8      	b.n	8007a76 <memmove+0x12>
 8007a84:	4402      	add	r2, r0
 8007a86:	4601      	mov	r1, r0
 8007a88:	428a      	cmp	r2, r1
 8007a8a:	d100      	bne.n	8007a8e <memmove+0x2a>
 8007a8c:	bd10      	pop	{r4, pc}
 8007a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a96:	e7f7      	b.n	8007a88 <memmove+0x24>

08007a98 <_sbrk_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4d06      	ldr	r5, [pc, #24]	@ (8007ab4 <_sbrk_r+0x1c>)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	4608      	mov	r0, r1
 8007aa2:	602b      	str	r3, [r5, #0]
 8007aa4:	f7f9 fac6 	bl	8001034 <_sbrk>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d102      	bne.n	8007ab2 <_sbrk_r+0x1a>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	b103      	cbz	r3, 8007ab2 <_sbrk_r+0x1a>
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	240003b8 	.word	0x240003b8

08007ab8 <memcpy>:
 8007ab8:	440a      	add	r2, r1
 8007aba:	4291      	cmp	r1, r2
 8007abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ac0:	d100      	bne.n	8007ac4 <memcpy+0xc>
 8007ac2:	4770      	bx	lr
 8007ac4:	b510      	push	{r4, lr}
 8007ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ace:	4291      	cmp	r1, r2
 8007ad0:	d1f9      	bne.n	8007ac6 <memcpy+0xe>
 8007ad2:	bd10      	pop	{r4, pc}

08007ad4 <_realloc_r>:
 8007ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad8:	4680      	mov	r8, r0
 8007ada:	4615      	mov	r5, r2
 8007adc:	460c      	mov	r4, r1
 8007ade:	b921      	cbnz	r1, 8007aea <_realloc_r+0x16>
 8007ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	f7ff bc4b 	b.w	8007380 <_malloc_r>
 8007aea:	b92a      	cbnz	r2, 8007af8 <_realloc_r+0x24>
 8007aec:	f7ff fbdc 	bl	80072a8 <_free_r>
 8007af0:	2400      	movs	r4, #0
 8007af2:	4620      	mov	r0, r4
 8007af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af8:	f000 f81a 	bl	8007b30 <_malloc_usable_size_r>
 8007afc:	4285      	cmp	r5, r0
 8007afe:	4606      	mov	r6, r0
 8007b00:	d802      	bhi.n	8007b08 <_realloc_r+0x34>
 8007b02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b06:	d8f4      	bhi.n	8007af2 <_realloc_r+0x1e>
 8007b08:	4629      	mov	r1, r5
 8007b0a:	4640      	mov	r0, r8
 8007b0c:	f7ff fc38 	bl	8007380 <_malloc_r>
 8007b10:	4607      	mov	r7, r0
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d0ec      	beq.n	8007af0 <_realloc_r+0x1c>
 8007b16:	42b5      	cmp	r5, r6
 8007b18:	462a      	mov	r2, r5
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	bf28      	it	cs
 8007b1e:	4632      	movcs	r2, r6
 8007b20:	f7ff ffca 	bl	8007ab8 <memcpy>
 8007b24:	4621      	mov	r1, r4
 8007b26:	4640      	mov	r0, r8
 8007b28:	f7ff fbbe 	bl	80072a8 <_free_r>
 8007b2c:	463c      	mov	r4, r7
 8007b2e:	e7e0      	b.n	8007af2 <_realloc_r+0x1e>

08007b30 <_malloc_usable_size_r>:
 8007b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b34:	1f18      	subs	r0, r3, #4
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	bfbc      	itt	lt
 8007b3a:	580b      	ldrlt	r3, [r1, r0]
 8007b3c:	18c0      	addlt	r0, r0, r3
 8007b3e:	4770      	bx	lr

08007b40 <_init>:
 8007b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b42:	bf00      	nop
 8007b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b46:	bc08      	pop	{r3}
 8007b48:	469e      	mov	lr, r3
 8007b4a:	4770      	bx	lr

08007b4c <_fini>:
 8007b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4e:	bf00      	nop
 8007b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b52:	bc08      	pop	{r3}
 8007b54:	469e      	mov	lr, r3
 8007b56:	4770      	bx	lr
