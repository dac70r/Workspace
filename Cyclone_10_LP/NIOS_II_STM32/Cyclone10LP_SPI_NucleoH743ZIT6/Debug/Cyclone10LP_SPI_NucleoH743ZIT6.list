
Cyclone10LP_SPI_NucleoH743ZIT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ac4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005d5c  08005d5c  00006d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005d94  08005d94  00006d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005d9c  08005d9c  00006d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005da0  08005da0  00006da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000001c  24000000  08005da4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000013c  2400001c  08005dc0  0000701c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000158  08005dc0  00007158  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011c42  00000000  00000000  0000704a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000023b0  00000000  00000000  00018c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c28  00000000  00000000  0001b040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000094e  00000000  00000000  0001bc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003672a  00000000  00000000  0001c5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000121ba  00000000  00000000  00052ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159926  00000000  00000000  00064e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001be7c0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000319c  00000000  00000000  001be804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000aa  00000000  00000000  001c19a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400001c 	.word	0x2400001c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005d44 	.word	0x08005d44

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000020 	.word	0x24000020
 80002d4:	08005d44 	.word	0x08005d44

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08c      	sub	sp, #48	@ 0x30
 80005cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	4b55      	ldr	r3, [pc, #340]	@ (8000734 <MX_GPIO_Init+0x16c>)
 80005e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e4:	4a53      	ldr	r2, [pc, #332]	@ (8000734 <MX_GPIO_Init+0x16c>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ee:	4b51      	ldr	r3, [pc, #324]	@ (8000734 <MX_GPIO_Init+0x16c>)
 80005f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	61bb      	str	r3, [r7, #24]
 80005fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fc:	4b4d      	ldr	r3, [pc, #308]	@ (8000734 <MX_GPIO_Init+0x16c>)
 80005fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000602:	4a4c      	ldr	r2, [pc, #304]	@ (8000734 <MX_GPIO_Init+0x16c>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800060c:	4b49      	ldr	r3, [pc, #292]	@ (8000734 <MX_GPIO_Init+0x16c>)
 800060e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b46      	ldr	r3, [pc, #280]	@ (8000734 <MX_GPIO_Init+0x16c>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000620:	4a44      	ldr	r2, [pc, #272]	@ (8000734 <MX_GPIO_Init+0x16c>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800062a:	4b42      	ldr	r3, [pc, #264]	@ (8000734 <MX_GPIO_Init+0x16c>)
 800062c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000638:	4b3e      	ldr	r3, [pc, #248]	@ (8000734 <MX_GPIO_Init+0x16c>)
 800063a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800063e:	4a3d      	ldr	r2, [pc, #244]	@ (8000734 <MX_GPIO_Init+0x16c>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000648:	4b3a      	ldr	r3, [pc, #232]	@ (8000734 <MX_GPIO_Init+0x16c>)
 800064a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000656:	4b37      	ldr	r3, [pc, #220]	@ (8000734 <MX_GPIO_Init+0x16c>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800065c:	4a35      	ldr	r2, [pc, #212]	@ (8000734 <MX_GPIO_Init+0x16c>)
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000666:	4b33      	ldr	r3, [pc, #204]	@ (8000734 <MX_GPIO_Init+0x16c>)
 8000668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800066c:	f003 0308 	and.w	r3, r3, #8
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000674:	4b2f      	ldr	r3, [pc, #188]	@ (8000734 <MX_GPIO_Init+0x16c>)
 8000676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800067a:	4a2e      	ldr	r2, [pc, #184]	@ (8000734 <MX_GPIO_Init+0x16c>)
 800067c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000684:	4b2b      	ldr	r3, [pc, #172]	@ (8000734 <MX_GPIO_Init+0x16c>)
 8000686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800068a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000692:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <MX_GPIO_Init+0x16c>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000698:	4a26      	ldr	r2, [pc, #152]	@ (8000734 <MX_GPIO_Init+0x16c>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a2:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <MX_GPIO_Init+0x16c>)
 80006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a8:	f003 0310 	and.w	r3, r3, #16
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006b6:	4820      	ldr	r0, [pc, #128]	@ (8000738 <MX_GPIO_Init+0x170>)
 80006b8:	f000 ff6a 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80006c2:	481e      	ldr	r0, [pc, #120]	@ (800073c <MX_GPIO_Init+0x174>)
 80006c4:	f000 ff64 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2102      	movs	r1, #2
 80006cc:	481c      	ldr	r0, [pc, #112]	@ (8000740 <MX_GPIO_Init+0x178>)
 80006ce:	f000 ff5f 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80006d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4813      	ldr	r0, [pc, #76]	@ (8000738 <MX_GPIO_Init+0x170>)
 80006ec:	f000 fda0 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 80006f0:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <MX_GPIO_Init+0x174>)
 800070a:	f000 fd91 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800070e:	2302      	movs	r3, #2
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	4806      	ldr	r0, [pc, #24]	@ (8000740 <MX_GPIO_Init+0x178>)
 8000726:	f000 fd83 	bl	8001230 <HAL_GPIO_Init>

}
 800072a:	bf00      	nop
 800072c:	3730      	adds	r7, #48	@ 0x30
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	58024400 	.word	0x58024400
 8000738:	58020400 	.word	0x58020400
 800073c:	58021800 	.word	0x58021800
 8000740:	58021000 	.word	0x58021000

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000748:	f000 f8d4 	bl	80008f4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 fb52 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f82c 	bl	80007ac <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000754:	f000 f89c 	bl	8000890 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f7ff ff36 	bl	80005c8 <MX_GPIO_Init>
  MX_SPI6_Init();
 800075c:	f000 f8fc 	bl	8000958 <MX_SPI6_Init>
  MX_USART3_UART_Init();
 8000760:	f000 fa88 	bl	8000c74 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);							// Pulls the SPI line down low
 8000764:	2200      	movs	r2, #0
 8000766:	2108      	movs	r1, #8
 8000768:	480c      	ldr	r0, [pc, #48]	@ (800079c <main+0x58>)
 800076a:	f000 ff11 	bl	8001590 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi6, rx_data, 2U, 1000);									// Single SPI Receive in Regular Mode
 800076e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000772:	2202      	movs	r2, #2
 8000774:	490a      	ldr	r1, [pc, #40]	@ (80007a0 <main+0x5c>)
 8000776:	480b      	ldr	r0, [pc, #44]	@ (80007a4 <main+0x60>)
 8000778:	f003 feae 	bl	80044d8 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);							// Pulls the SPI line back high
 800077c:	2201      	movs	r2, #1
 800077e:	2108      	movs	r1, #8
 8000780:	4806      	ldr	r0, [pc, #24]	@ (800079c <main+0x58>)
 8000782:	f000 ff05 	bl	8001590 <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); 										// Toggle LED to show the system is running
 8000786:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800078a:	4807      	ldr	r0, [pc, #28]	@ (80007a8 <main+0x64>)
 800078c:	f000 ff19 	bl	80015c2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000794:	f000 fbc0 	bl	8000f18 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);							// Pulls the SPI line down low
 8000798:	bf00      	nop
 800079a:	e7e3      	b.n	8000764 <main+0x20>
 800079c:	58021800 	.word	0x58021800
 80007a0:	24000000 	.word	0x24000000
 80007a4:	24000038 	.word	0x24000038
 80007a8:	58020400 	.word	0x58020400

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b09c      	sub	sp, #112	@ 0x70
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b6:	224c      	movs	r2, #76	@ 0x4c
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 fa96 	bl	8005cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2220      	movs	r2, #32
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f005 fa90 	bl	8005cec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007cc:	2002      	movs	r0, #2
 80007ce:	f000 ff13 	bl	80015f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000884 <SystemClock_Config+0xd8>)
 80007d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007da:	4a2a      	ldr	r2, [pc, #168]	@ (8000884 <SystemClock_Config+0xd8>)
 80007dc:	f023 0301 	bic.w	r3, r3, #1
 80007e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007e2:	4b28      	ldr	r3, [pc, #160]	@ (8000884 <SystemClock_Config+0xd8>)
 80007e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <SystemClock_Config+0xdc>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007f4:	4a24      	ldr	r2, [pc, #144]	@ (8000888 <SystemClock_Config+0xdc>)
 80007f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <SystemClock_Config+0xdc>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000808:	bf00      	nop
 800080a:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <SystemClock_Config+0xdc>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000816:	d1f8      	bne.n	800080a <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000818:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <SystemClock_Config+0xe0>)
 800081a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800081c:	4a1b      	ldr	r2, [pc, #108]	@ (800088c <SystemClock_Config+0xe0>)
 800081e:	f023 0303 	bic.w	r3, r3, #3
 8000822:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000824:	2302      	movs	r3, #2
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000828:	2301      	movs	r3, #1
 800082a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2340      	movs	r3, #64	@ 0x40
 800082e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000830:	2300      	movs	r3, #0
 8000832:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000838:	4618      	mov	r0, r3
 800083a:	f000 ff17 	bl	800166c <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000844:	f000 f882 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	233f      	movs	r3, #63	@ 0x3f
 800084a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2101      	movs	r1, #1
 800086c:	4618      	mov	r0, r3
 800086e:	f001 fb57 	bl	8001f20 <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000878:	f000 f868 	bl	800094c <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3770      	adds	r7, #112	@ 0x70
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58000400 	.word	0x58000400
 8000888:	58024800 	.word	0x58024800
 800088c:	58024400 	.word	0x58024400

08000890 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b0b0      	sub	sp, #192	@ 0xc0
 8000894:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	22c0      	movs	r2, #192	@ 0xc0
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f005 fa25 	bl	8005cec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6|RCC_PERIPHCLK_USART3;
 80008a2:	f244 0202 	movw	r2, #16386	@ 0x4002
 80008a6:	f04f 0300 	mov.w	r3, #0
 80008aa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 80008ae:	2320      	movs	r3, #32
 80008b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 80008b2:	2381      	movs	r3, #129	@ 0x81
 80008b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 6;
 80008ba:	2306      	movs	r3, #6
 80008bc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80008c2:	2340      	movs	r3, #64	@ 0x40
 80008c4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 80008ce:	2301      	movs	r3, #1
 80008d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL2;
 80008d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80008d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008da:	463b      	mov	r3, r7
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 feab 	bl	8002638 <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80008e8:	f000 f830 	bl	800094c <Error_Handler>
  }
}
 80008ec:	bf00      	nop
 80008ee:	37c0      	adds	r7, #192	@ 0xc0
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000906:	f000 fc1b 	bl	8001140 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800090a:	2301      	movs	r3, #1
 800090c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800090e:	2300      	movs	r3, #0
 8000910:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000916:	231f      	movs	r3, #31
 8000918:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800091a:	2387      	movs	r3, #135	@ 0x87
 800091c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800091e:	2300      	movs	r3, #0
 8000920:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000922:	2300      	movs	r3, #0
 8000924:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000926:	2301      	movs	r3, #1
 8000928:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800092a:	2301      	movs	r3, #1
 800092c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000936:	463b      	mov	r3, r7
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fc39 	bl	80011b0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800093e:	2004      	movs	r0, #4
 8000940:	f000 fc16 	bl	8001170 <HAL_MPU_Enable>

}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <Error_Handler+0x8>

08000958 <MX_SPI6_Init>:

SPI_HandleTypeDef hspi6;

/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 800095c:	4b25      	ldr	r3, [pc, #148]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 800095e:	4a26      	ldr	r2, [pc, #152]	@ (80009f8 <MX_SPI6_Init+0xa0>)
 8000960:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_SLAVE;
 8000962:	4b24      	ldr	r3, [pc, #144]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000968:	4b22      	ldr	r3, [pc, #136]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 800096a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800096e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8000970:	4b20      	ldr	r3, [pc, #128]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 8000972:	2207      	movs	r2, #7
 8000974:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000976:	4b1f      	ldr	r3, [pc, #124]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 8000978:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800097c:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_2EDGE;
 800097e:	4b1d      	ldr	r3, [pc, #116]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 8000980:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000984:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
 8000986:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800098c:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 800098e:	2200      	movs	r2, #0
 8000990:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 8000994:	2200      	movs	r2, #0
 8000996:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000998:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 800099a:	2200      	movs	r2, #0
 800099c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009a4:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009aa:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009b0:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009bc:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <MX_SPI6_Init+0x9c>)
 80009e2:	f003 fc55 	bl	8004290 <HAL_SPI_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_SPI6_Init+0x98>
  {
    Error_Handler();
 80009ec:	f7ff ffae 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	24000038 	.word	0x24000038
 80009f8:	58001400 	.word	0x58001400

080009fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	@ 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI6)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a29      	ldr	r2, [pc, #164]	@ (8000ac0 <HAL_SPI_MspInit+0xc4>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d14c      	bne.n	8000ab8 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI6_MspInit 0 */

  /* USER CODE END SPI6_MspInit 0 */
    /* SPI6 clock enable */
    __HAL_RCC_SPI6_CLK_ENABLE();
 8000a1e:	4b29      	ldr	r3, [pc, #164]	@ (8000ac4 <HAL_SPI_MspInit+0xc8>)
 8000a20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a24:	4a27      	ldr	r2, [pc, #156]	@ (8000ac4 <HAL_SPI_MspInit+0xc8>)
 8000a26:	f043 0320 	orr.w	r3, r3, #32
 8000a2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a2e:	4b25      	ldr	r3, [pc, #148]	@ (8000ac4 <HAL_SPI_MspInit+0xc8>)
 8000a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a34:	f003 0320 	and.w	r3, r3, #32
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <HAL_SPI_MspInit+0xc8>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a42:	4a20      	ldr	r2, [pc, #128]	@ (8000ac4 <HAL_SPI_MspInit+0xc8>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac4 <HAL_SPI_MspInit+0xc8>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <HAL_SPI_MspInit+0xc8>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a60:	4a18      	ldr	r2, [pc, #96]	@ (8000ac4 <HAL_SPI_MspInit+0xc8>)
 8000a62:	f043 0302 	orr.w	r3, r3, #2
 8000a66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <HAL_SPI_MspInit+0xc8>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI6_NSS
    PB3 (JTDO/TRACESWO)     ------> SPI6_SCK
    PB4 (NJTRST)     ------> SPI6_MISO
    PB5     ------> SPI6_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a78:	2310      	movs	r3, #16
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480d      	ldr	r0, [pc, #52]	@ (8000ac8 <HAL_SPI_MspInit+0xcc>)
 8000a94:	f000 fbcc 	bl	8001230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a98:	2338      	movs	r3, #56	@ 0x38
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4806      	ldr	r0, [pc, #24]	@ (8000acc <HAL_SPI_MspInit+0xd0>)
 8000ab4:	f000 fbbc 	bl	8001230 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	@ 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	58001400 	.word	0x58001400
 8000ac4:	58024400 	.word	0x58024400
 8000ac8:	58020000 	.word	0x58020000
 8000acc:	58020400 	.word	0x58020400

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <HAL_MspInit+0x30>)
 8000ad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000adc:	4a08      	ldr	r2, [pc, #32]	@ (8000b00 <HAL_MspInit+0x30>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <HAL_MspInit+0x30>)
 8000ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	58024400 	.word	0x58024400

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <NMI_Handler+0x4>

08000b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5a:	f000 f9bd 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b68:	4b37      	ldr	r3, [pc, #220]	@ (8000c48 <SystemInit+0xe4>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b6e:	4a36      	ldr	r2, [pc, #216]	@ (8000c48 <SystemInit+0xe4>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b78:	4b34      	ldr	r3, [pc, #208]	@ (8000c4c <SystemInit+0xe8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 030f 	and.w	r3, r3, #15
 8000b80:	2b06      	cmp	r3, #6
 8000b82:	d807      	bhi.n	8000b94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b84:	4b31      	ldr	r3, [pc, #196]	@ (8000c4c <SystemInit+0xe8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f023 030f 	bic.w	r3, r3, #15
 8000b8c:	4a2f      	ldr	r2, [pc, #188]	@ (8000c4c <SystemInit+0xe8>)
 8000b8e:	f043 0307 	orr.w	r3, r3, #7
 8000b92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b94:	4b2e      	ldr	r3, [pc, #184]	@ (8000c50 <SystemInit+0xec>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a2d      	ldr	r2, [pc, #180]	@ (8000c50 <SystemInit+0xec>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c50 <SystemInit+0xec>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c50 <SystemInit+0xec>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	4929      	ldr	r1, [pc, #164]	@ (8000c50 <SystemInit+0xec>)
 8000bac:	4b29      	ldr	r3, [pc, #164]	@ (8000c54 <SystemInit+0xf0>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb2:	4b26      	ldr	r3, [pc, #152]	@ (8000c4c <SystemInit+0xe8>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 0308 	and.w	r3, r3, #8
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d007      	beq.n	8000bce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bbe:	4b23      	ldr	r3, [pc, #140]	@ (8000c4c <SystemInit+0xe8>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f023 030f 	bic.w	r3, r3, #15
 8000bc6:	4a21      	ldr	r2, [pc, #132]	@ (8000c4c <SystemInit+0xe8>)
 8000bc8:	f043 0307 	orr.w	r3, r3, #7
 8000bcc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bce:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <SystemInit+0xec>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <SystemInit+0xec>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bda:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <SystemInit+0xec>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000be0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <SystemInit+0xec>)
 8000be2:	4a1d      	ldr	r2, [pc, #116]	@ (8000c58 <SystemInit+0xf4>)
 8000be4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <SystemInit+0xec>)
 8000be8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c5c <SystemInit+0xf8>)
 8000bea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <SystemInit+0xec>)
 8000bee:	4a1c      	ldr	r2, [pc, #112]	@ (8000c60 <SystemInit+0xfc>)
 8000bf0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <SystemInit+0xec>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <SystemInit+0xec>)
 8000bfa:	4a19      	ldr	r2, [pc, #100]	@ (8000c60 <SystemInit+0xfc>)
 8000bfc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <SystemInit+0xec>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c04:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <SystemInit+0xec>)
 8000c06:	4a16      	ldr	r2, [pc, #88]	@ (8000c60 <SystemInit+0xfc>)
 8000c08:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <SystemInit+0xec>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <SystemInit+0xec>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0e      	ldr	r2, [pc, #56]	@ (8000c50 <SystemInit+0xec>)
 8000c16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <SystemInit+0xec>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <SystemInit+0x100>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <SystemInit+0x104>)
 8000c28:	4013      	ands	r3, r2
 8000c2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c2e:	d202      	bcs.n	8000c36 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <SystemInit+0x108>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <SystemInit+0x10c>)
 8000c38:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00
 8000c4c:	52002000 	.word	0x52002000
 8000c50:	58024400 	.word	0x58024400
 8000c54:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c58:	02020200 	.word	0x02020200
 8000c5c:	01ff0000 	.word	0x01ff0000
 8000c60:	01010280 	.word	0x01010280
 8000c64:	5c001000 	.word	0x5c001000
 8000c68:	ffff0000 	.word	0xffff0000
 8000c6c:	51008108 	.word	0x51008108
 8000c70:	52004000 	.word	0x52004000

08000c74 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c78:	4b22      	ldr	r3, [pc, #136]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c7a:	4a23      	ldr	r2, [pc, #140]	@ (8000d08 <MX_USART3_UART_Init+0x94>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000caa:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cbc:	4811      	ldr	r0, [pc, #68]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cbe:	f003 ff38 	bl	8004b32 <HAL_UART_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cc8:	f7ff fe40 	bl	800094c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ccc:	2100      	movs	r1, #0
 8000cce:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cd0:	f004 ff41 	bl	8005b56 <HAL_UARTEx_SetTxFifoThreshold>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cda:	f7ff fe37 	bl	800094c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4808      	ldr	r0, [pc, #32]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000ce2:	f004 ff76 	bl	8005bd2 <HAL_UARTEx_SetRxFifoThreshold>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cec:	f7ff fe2e 	bl	800094c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cf0:	4804      	ldr	r0, [pc, #16]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cf2:	f004 fef7 	bl	8005ae4 <HAL_UARTEx_DisableFifoMode>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cfc:	f7ff fe26 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	240000c0 	.word	0x240000c0
 8000d08:	40004800 	.word	0x40004800

08000d0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a1a      	ldr	r2, [pc, #104]	@ (8000d94 <HAL_UART_MspInit+0x88>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d12e      	bne.n	8000d8c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d98 <HAL_UART_MspInit+0x8c>)
 8000d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d34:	4a18      	ldr	r2, [pc, #96]	@ (8000d98 <HAL_UART_MspInit+0x8c>)
 8000d36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d3a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d3e:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <HAL_UART_MspInit+0x8c>)
 8000d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_UART_MspInit+0x8c>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d52:	4a11      	ldr	r2, [pc, #68]	@ (8000d98 <HAL_UART_MspInit+0x8c>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <HAL_UART_MspInit+0x8c>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <HAL_UART_MspInit+0x90>)
 8000d88:	f000 fa52 	bl	8001230 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	3728      	adds	r7, #40	@ 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40004800 	.word	0x40004800
 8000d98:	58024400 	.word	0x58024400
 8000d9c:	58020c00 	.word	0x58020c00

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000da4:	f7ff fede 	bl	8000b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	@ (8000de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f004 ff95 	bl	8005cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fcb7 	bl	8000744 <main>
  bx  lr
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ddc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000de0:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 8000de4:	08005da4 	.word	0x08005da4
  ldr r2, =_sbss
 8000de8:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 8000dec:	24000158 	.word	0x24000158

08000df0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC3_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	f000 f96e 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e00:	f001 fa44 	bl	800228c <HAL_RCC_GetSysClockFreq>
 8000e04:	4602      	mov	r2, r0
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <HAL_Init+0x68>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	0a1b      	lsrs	r3, r3, #8
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	4913      	ldr	r1, [pc, #76]	@ (8000e60 <HAL_Init+0x6c>)
 8000e12:	5ccb      	ldrb	r3, [r1, r3]
 8000e14:	f003 031f 	and.w	r3, r3, #31
 8000e18:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <HAL_Init+0x68>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <HAL_Init+0x6c>)
 8000e28:	5cd3      	ldrb	r3, [r2, r3]
 8000e2a:	f003 031f 	and.w	r3, r3, #31
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	fa22 f303 	lsr.w	r3, r2, r3
 8000e34:	4a0b      	ldr	r2, [pc, #44]	@ (8000e64 <HAL_Init+0x70>)
 8000e36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e38:	4a0b      	ldr	r2, [pc, #44]	@ (8000e68 <HAL_Init+0x74>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3e:	200f      	movs	r0, #15
 8000e40:	f000 f814 	bl	8000e6c <HAL_InitTick>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e002      	b.n	8000e54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4e:	f7ff fe3f 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	08005d5c 	.word	0x08005d5c
 8000e64:	24000010 	.word	0x24000010
 8000e68:	2400000c 	.word	0x2400000c

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e74:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <HAL_InitTick+0x60>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e021      	b.n	8000ec4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e80:	4b13      	ldr	r3, [pc, #76]	@ (8000ed0 <HAL_InitTick+0x64>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <HAL_InitTick+0x60>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f945 	bl	8001126 <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f91d 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	@ (8000ed4 <HAL_InitTick+0x68>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	24000018 	.word	0x24000018
 8000ed0:	2400000c 	.word	0x2400000c
 8000ed4:	24000014 	.word	0x24000014

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	24000018 	.word	0x24000018
 8000efc:	24000154 	.word	0x24000154

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	24000154 	.word	0x24000154

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff ffee 	bl	8000f00 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <HAL_Delay+0x44>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffde 	bl	8000f00 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	24000018 	.word	0x24000018

08000f60 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f64:	4b03      	ldr	r3, [pc, #12]	@ (8000f74 <HAL_GetREVID+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	0c1b      	lsrs	r3, r3, #16
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	5c001000 	.word	0x5c001000

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00
 8000fbc:	05fa0000 	.word	0x05fa0000

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	@ (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	@ (800102c <__NVIC_SetPriority+0x50>)
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff47 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff5e 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff90 	bl	8001030 <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5f 	bl	8000fdc <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffb2 	bl	8001098 <SysTick_Config>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001144:	f3bf 8f5f 	dmb	sy
}
 8001148:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <HAL_MPU_Disable+0x28>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114e:	4a06      	ldr	r2, [pc, #24]	@ (8001168 <HAL_MPU_Disable+0x28>)
 8001150:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001154:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001156:	4b05      	ldr	r3, [pc, #20]	@ (800116c <HAL_MPU_Disable+0x2c>)
 8001158:	2200      	movs	r2, #0
 800115a:	605a      	str	r2, [r3, #4]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00
 800116c:	e000ed90 	.word	0xe000ed90

08001170 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001178:	4a0b      	ldr	r2, [pc, #44]	@ (80011a8 <HAL_MPU_Enable+0x38>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001182:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <HAL_MPU_Enable+0x3c>)
 8001184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001186:	4a09      	ldr	r2, [pc, #36]	@ (80011ac <HAL_MPU_Enable+0x3c>)
 8001188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800118c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed90 	.word	0xe000ed90
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	785a      	ldrb	r2, [r3, #1]
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <HAL_MPU_ConfigRegion+0x7c>)
 80011be:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80011c0:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <HAL_MPU_ConfigRegion+0x7c>)
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	4a19      	ldr	r2, [pc, #100]	@ (800122c <HAL_MPU_ConfigRegion+0x7c>)
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80011cc:	4a17      	ldr	r2, [pc, #92]	@ (800122c <HAL_MPU_ConfigRegion+0x7c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7b1b      	ldrb	r3, [r3, #12]
 80011d8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7adb      	ldrb	r3, [r3, #11]
 80011de:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7a9b      	ldrb	r3, [r3, #10]
 80011e6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7b5b      	ldrb	r3, [r3, #13]
 80011ee:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7b9b      	ldrb	r3, [r3, #14]
 80011f6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7bdb      	ldrb	r3, [r3, #15]
 80011fe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001200:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7a5b      	ldrb	r3, [r3, #9]
 8001206:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001208:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7a1b      	ldrb	r3, [r3, #8]
 800120e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001210:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	7812      	ldrb	r2, [r2, #0]
 8001216:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001218:	4a04      	ldr	r2, [pc, #16]	@ (800122c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800121a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800121c:	6113      	str	r3, [r2, #16]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed90 	.word	0xe000ed90

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	@ 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800123e:	4b89      	ldr	r3, [pc, #548]	@ (8001464 <HAL_GPIO_Init+0x234>)
 8001240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001242:	e194      	b.n	800156e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8186 	beq.w	8001568 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d005      	beq.n	8001274 <HAL_GPIO_Init+0x44>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d130      	bne.n	80012d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012aa:	2201      	movs	r2, #1
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	f003 0201 	and.w	r2, r3, #1
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d017      	beq.n	8001312 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d123      	bne.n	8001366 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	08da      	lsrs	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3208      	adds	r2, #8
 8001360:	69b9      	ldr	r1, [r7, #24]
 8001362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0203 	and.w	r2, r3, #3
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 80e0 	beq.w	8001568 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001468 <HAL_GPIO_Init+0x238>)
 80013aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013ae:	4a2e      	ldr	r2, [pc, #184]	@ (8001468 <HAL_GPIO_Init+0x238>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <HAL_GPIO_Init+0x238>)
 80013ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013c6:	4a29      	ldr	r2, [pc, #164]	@ (800146c <HAL_GPIO_Init+0x23c>)
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	089b      	lsrs	r3, r3, #2
 80013cc:	3302      	adds	r3, #2
 80013ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	220f      	movs	r2, #15
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a20      	ldr	r2, [pc, #128]	@ (8001470 <HAL_GPIO_Init+0x240>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d052      	beq.n	8001498 <HAL_GPIO_Init+0x268>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001474 <HAL_GPIO_Init+0x244>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d031      	beq.n	800145e <HAL_GPIO_Init+0x22e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001478 <HAL_GPIO_Init+0x248>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d02b      	beq.n	800145a <HAL_GPIO_Init+0x22a>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a1d      	ldr	r2, [pc, #116]	@ (800147c <HAL_GPIO_Init+0x24c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d025      	beq.n	8001456 <HAL_GPIO_Init+0x226>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a1c      	ldr	r2, [pc, #112]	@ (8001480 <HAL_GPIO_Init+0x250>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d01f      	beq.n	8001452 <HAL_GPIO_Init+0x222>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a1b      	ldr	r2, [pc, #108]	@ (8001484 <HAL_GPIO_Init+0x254>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d019      	beq.n	800144e <HAL_GPIO_Init+0x21e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a1a      	ldr	r2, [pc, #104]	@ (8001488 <HAL_GPIO_Init+0x258>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0x21a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a19      	ldr	r2, [pc, #100]	@ (800148c <HAL_GPIO_Init+0x25c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00d      	beq.n	8001446 <HAL_GPIO_Init+0x216>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a18      	ldr	r2, [pc, #96]	@ (8001490 <HAL_GPIO_Init+0x260>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d007      	beq.n	8001442 <HAL_GPIO_Init+0x212>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a17      	ldr	r2, [pc, #92]	@ (8001494 <HAL_GPIO_Init+0x264>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d101      	bne.n	800143e <HAL_GPIO_Init+0x20e>
 800143a:	2309      	movs	r3, #9
 800143c:	e02d      	b.n	800149a <HAL_GPIO_Init+0x26a>
 800143e:	230a      	movs	r3, #10
 8001440:	e02b      	b.n	800149a <HAL_GPIO_Init+0x26a>
 8001442:	2308      	movs	r3, #8
 8001444:	e029      	b.n	800149a <HAL_GPIO_Init+0x26a>
 8001446:	2307      	movs	r3, #7
 8001448:	e027      	b.n	800149a <HAL_GPIO_Init+0x26a>
 800144a:	2306      	movs	r3, #6
 800144c:	e025      	b.n	800149a <HAL_GPIO_Init+0x26a>
 800144e:	2305      	movs	r3, #5
 8001450:	e023      	b.n	800149a <HAL_GPIO_Init+0x26a>
 8001452:	2304      	movs	r3, #4
 8001454:	e021      	b.n	800149a <HAL_GPIO_Init+0x26a>
 8001456:	2303      	movs	r3, #3
 8001458:	e01f      	b.n	800149a <HAL_GPIO_Init+0x26a>
 800145a:	2302      	movs	r3, #2
 800145c:	e01d      	b.n	800149a <HAL_GPIO_Init+0x26a>
 800145e:	2301      	movs	r3, #1
 8001460:	e01b      	b.n	800149a <HAL_GPIO_Init+0x26a>
 8001462:	bf00      	nop
 8001464:	58000080 	.word	0x58000080
 8001468:	58024400 	.word	0x58024400
 800146c:	58000400 	.word	0x58000400
 8001470:	58020000 	.word	0x58020000
 8001474:	58020400 	.word	0x58020400
 8001478:	58020800 	.word	0x58020800
 800147c:	58020c00 	.word	0x58020c00
 8001480:	58021000 	.word	0x58021000
 8001484:	58021400 	.word	0x58021400
 8001488:	58021800 	.word	0x58021800
 800148c:	58021c00 	.word	0x58021c00
 8001490:	58022000 	.word	0x58022000
 8001494:	58022400 	.word	0x58022400
 8001498:	2300      	movs	r3, #0
 800149a:	69fa      	ldr	r2, [r7, #28]
 800149c:	f002 0203 	and.w	r2, r2, #3
 80014a0:	0092      	lsls	r2, r2, #2
 80014a2:	4093      	lsls	r3, r2
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014aa:	4938      	ldr	r1, [pc, #224]	@ (800158c <HAL_GPIO_Init+0x35c>)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800150c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	3301      	adds	r3, #1
 800156c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	fa22 f303 	lsr.w	r3, r2, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	f47f ae63 	bne.w	8001244 <HAL_GPIO_Init+0x14>
  }
}
 800157e:	bf00      	nop
 8001580:	bf00      	nop
 8001582:	3724      	adds	r7, #36	@ 0x24
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	58000400 	.word	0x58000400

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80015ac:	e003      	b.n	80015b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	619a      	str	r2, [r3, #24]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015d4:	887a      	ldrh	r2, [r7, #2]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	041a      	lsls	r2, r3, #16
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43d9      	mvns	r1, r3
 80015e0:	887b      	ldrh	r3, [r7, #2]
 80015e2:	400b      	ands	r3, r1
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	619a      	str	r2, [r3, #24]
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001600:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <HAL_PWREx_ConfigSupply+0x70>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b04      	cmp	r3, #4
 800160a:	d00a      	beq.n	8001622 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800160c:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <HAL_PWREx_ConfigSupply+0x70>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	429a      	cmp	r2, r3
 8001618:	d001      	beq.n	800161e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e01f      	b.n	800165e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e01d      	b.n	800165e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <HAL_PWREx_ConfigSupply+0x70>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f023 0207 	bic.w	r2, r3, #7
 800162a:	490f      	ldr	r1, [pc, #60]	@ (8001668 <HAL_PWREx_ConfigSupply+0x70>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4313      	orrs	r3, r2
 8001630:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001632:	f7ff fc65 	bl	8000f00 <HAL_GetTick>
 8001636:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001638:	e009      	b.n	800164e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800163a:	f7ff fc61 	bl	8000f00 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001648:	d901      	bls.n	800164e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e007      	b.n	800165e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_PWREx_ConfigSupply+0x70>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800165a:	d1ee      	bne.n	800163a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	58024800 	.word	0x58024800

0800166c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08c      	sub	sp, #48	@ 0x30
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	f000 bc48 	b.w	8001f10 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8088 	beq.w	800179e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168e:	4b99      	ldr	r3, [pc, #612]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001698:	4b96      	ldr	r3, [pc, #600]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 800169a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800169e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a0:	2b10      	cmp	r3, #16
 80016a2:	d007      	beq.n	80016b4 <HAL_RCC_OscConfig+0x48>
 80016a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a6:	2b18      	cmp	r3, #24
 80016a8:	d111      	bne.n	80016ce <HAL_RCC_OscConfig+0x62>
 80016aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d10c      	bne.n	80016ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	4b8f      	ldr	r3, [pc, #572]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d06d      	beq.n	800179c <HAL_RCC_OscConfig+0x130>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d169      	bne.n	800179c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	f000 bc21 	b.w	8001f10 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_OscConfig+0x7a>
 80016d8:	4b86      	ldr	r3, [pc, #536]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a85      	ldr	r2, [pc, #532]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 80016de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	e02e      	b.n	8001744 <HAL_RCC_OscConfig+0xd8>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x9c>
 80016ee:	4b81      	ldr	r3, [pc, #516]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a80      	ldr	r2, [pc, #512]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 80016f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b7e      	ldr	r3, [pc, #504]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a7d      	ldr	r2, [pc, #500]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001700:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e01d      	b.n	8001744 <HAL_RCC_OscConfig+0xd8>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0xc0>
 8001712:	4b78      	ldr	r3, [pc, #480]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a77      	ldr	r2, [pc, #476]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b75      	ldr	r3, [pc, #468]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a74      	ldr	r2, [pc, #464]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0xd8>
 800172c:	4b71      	ldr	r3, [pc, #452]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a70      	ldr	r2, [pc, #448]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b6e      	ldr	r3, [pc, #440]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a6d      	ldr	r2, [pc, #436]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 800173e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d013      	beq.n	8001774 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fbd8 	bl	8000f00 <HAL_GetTick>
 8001750:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fbd4 	bl	8000f00 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	@ 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e3d4      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001766:	4b63      	ldr	r3, [pc, #396]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0xe8>
 8001772:	e014      	b.n	800179e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff fbc4 	bl	8000f00 <HAL_GetTick>
 8001778:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff fbc0 	bl	8000f00 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	@ 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e3c0      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800178e:	4b59      	ldr	r3, [pc, #356]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x110>
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80ca 	beq.w	8001940 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ac:	4b51      	ldr	r3, [pc, #324]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017b6:	4b4f      	ldr	r3, [pc, #316]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 80017b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d007      	beq.n	80017d2 <HAL_RCC_OscConfig+0x166>
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	2b18      	cmp	r3, #24
 80017c6:	d156      	bne.n	8001876 <HAL_RCC_OscConfig+0x20a>
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d151      	bne.n	8001876 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d2:	4b48      	ldr	r3, [pc, #288]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x17e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e392      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017ea:	4b42      	ldr	r3, [pc, #264]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 0219 	bic.w	r2, r3, #25
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	493f      	ldr	r1, [pc, #252]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff fb80 	bl	8000f00 <HAL_GetTick>
 8001800:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001804:	f7ff fb7c 	bl	8000f00 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e37c      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001816:	4b37      	ldr	r3, [pc, #220]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001822:	f7ff fb9d 	bl	8000f60 <HAL_GetREVID>
 8001826:	4603      	mov	r3, r0
 8001828:	f241 0203 	movw	r2, #4099	@ 0x1003
 800182c:	4293      	cmp	r3, r2
 800182e:	d817      	bhi.n	8001860 <HAL_RCC_OscConfig+0x1f4>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	2b40      	cmp	r3, #64	@ 0x40
 8001836:	d108      	bne.n	800184a <HAL_RCC_OscConfig+0x1de>
 8001838:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001840:	4a2c      	ldr	r2, [pc, #176]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001846:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001848:	e07a      	b.n	8001940 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184a:	4b2a      	ldr	r3, [pc, #168]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	031b      	lsls	r3, r3, #12
 8001858:	4926      	ldr	r1, [pc, #152]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800185e:	e06f      	b.n	8001940 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b24      	ldr	r3, [pc, #144]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	061b      	lsls	r3, r3, #24
 800186e:	4921      	ldr	r1, [pc, #132]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001874:	e064      	b.n	8001940 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d047      	beq.n	800190e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800187e:	4b1d      	ldr	r3, [pc, #116]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 0219 	bic.w	r2, r3, #25
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	491a      	ldr	r1, [pc, #104]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff fb36 	bl	8000f00 <HAL_GetTick>
 8001894:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001898:	f7ff fb32 	bl	8000f00 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e332      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018aa:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b6:	f7ff fb53 	bl	8000f60 <HAL_GetREVID>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d819      	bhi.n	80018f8 <HAL_RCC_OscConfig+0x28c>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	2b40      	cmp	r3, #64	@ 0x40
 80018ca:	d108      	bne.n	80018de <HAL_RCC_OscConfig+0x272>
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80018d4:	4a07      	ldr	r2, [pc, #28]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 80018d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018da:	6053      	str	r3, [r2, #4]
 80018dc:	e030      	b.n	8001940 <HAL_RCC_OscConfig+0x2d4>
 80018de:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	031b      	lsls	r3, r3, #12
 80018ec:	4901      	ldr	r1, [pc, #4]	@ (80018f4 <HAL_RCC_OscConfig+0x288>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
 80018f2:	e025      	b.n	8001940 <HAL_RCC_OscConfig+0x2d4>
 80018f4:	58024400 	.word	0x58024400
 80018f8:	4b9a      	ldr	r3, [pc, #616]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	061b      	lsls	r3, r3, #24
 8001906:	4997      	ldr	r1, [pc, #604]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
 800190c:	e018      	b.n	8001940 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190e:	4b95      	ldr	r3, [pc, #596]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a94      	ldr	r2, [pc, #592]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191a:	f7ff faf1 	bl	8000f00 <HAL_GetTick>
 800191e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001922:	f7ff faed 	bl	8000f00 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e2ed      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001934:	4b8b      	ldr	r3, [pc, #556]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80a9 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800194e:	4b85      	ldr	r3, [pc, #532]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001956:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001958:	4b82      	ldr	r3, [pc, #520]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 800195a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b08      	cmp	r3, #8
 8001962:	d007      	beq.n	8001974 <HAL_RCC_OscConfig+0x308>
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b18      	cmp	r3, #24
 8001968:	d13a      	bne.n	80019e0 <HAL_RCC_OscConfig+0x374>
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d135      	bne.n	80019e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001974:	4b7b      	ldr	r3, [pc, #492]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_OscConfig+0x320>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	2b80      	cmp	r3, #128	@ 0x80
 8001986:	d001      	beq.n	800198c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e2c1      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800198c:	f7ff fae8 	bl	8000f60 <HAL_GetREVID>
 8001990:	4603      	mov	r3, r0
 8001992:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001996:	4293      	cmp	r3, r2
 8001998:	d817      	bhi.n	80019ca <HAL_RCC_OscConfig+0x35e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	2b20      	cmp	r3, #32
 80019a0:	d108      	bne.n	80019b4 <HAL_RCC_OscConfig+0x348>
 80019a2:	4b70      	ldr	r3, [pc, #448]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80019aa:	4a6e      	ldr	r2, [pc, #440]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 80019ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80019b0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019b2:	e075      	b.n	8001aa0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	069b      	lsls	r3, r3, #26
 80019c2:	4968      	ldr	r1, [pc, #416]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019c8:	e06a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019ca:	4b66      	ldr	r3, [pc, #408]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	061b      	lsls	r3, r3, #24
 80019d8:	4962      	ldr	r1, [pc, #392]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019de:	e05f      	b.n	8001aa0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d042      	beq.n	8001a6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80019e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 80019ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff fa84 	bl	8000f00 <HAL_GetTick>
 80019f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80019fc:	f7ff fa80 	bl	8000f00 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e280      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a0e:	4b55      	ldr	r3, [pc, #340]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a1a:	f7ff faa1 	bl	8000f60 <HAL_GetREVID>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d817      	bhi.n	8001a58 <HAL_RCC_OscConfig+0x3ec>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	2b20      	cmp	r3, #32
 8001a2e:	d108      	bne.n	8001a42 <HAL_RCC_OscConfig+0x3d6>
 8001a30:	4b4c      	ldr	r3, [pc, #304]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001a38:	4a4a      	ldr	r2, [pc, #296]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001a3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001a3e:	6053      	str	r3, [r2, #4]
 8001a40:	e02e      	b.n	8001aa0 <HAL_RCC_OscConfig+0x434>
 8001a42:	4b48      	ldr	r3, [pc, #288]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	069b      	lsls	r3, r3, #26
 8001a50:	4944      	ldr	r1, [pc, #272]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
 8001a56:	e023      	b.n	8001aa0 <HAL_RCC_OscConfig+0x434>
 8001a58:	4b42      	ldr	r3, [pc, #264]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	061b      	lsls	r3, r3, #24
 8001a66:	493f      	ldr	r1, [pc, #252]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	60cb      	str	r3, [r1, #12]
 8001a6c:	e018      	b.n	8001aa0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a3c      	ldr	r2, [pc, #240]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001a74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fa41 	bl	8000f00 <HAL_GetTick>
 8001a7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a82:	f7ff fa3d 	bl	8000f00 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e23d      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a94:	4b33      	ldr	r3, [pc, #204]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d036      	beq.n	8001b1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d019      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab8:	4a2a      	ldr	r2, [pc, #168]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff fa1e 	bl	8000f00 <HAL_GetTick>
 8001ac4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac8:	f7ff fa1a 	bl	8000f00 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e21a      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ada:	4b22      	ldr	r3, [pc, #136]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x45c>
 8001ae6:	e018      	b.n	8001b1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aec:	4a1d      	ldr	r2, [pc, #116]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001aee:	f023 0301 	bic.w	r3, r3, #1
 8001af2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff fa04 	bl	8000f00 <HAL_GetTick>
 8001af8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afc:	f7ff fa00 	bl	8000f00 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e200      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d039      	beq.n	8001b9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d01c      	beq.n	8001b68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a0c      	ldr	r2, [pc, #48]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001b34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b3a:	f7ff f9e1 	bl	8000f00 <HAL_GetTick>
 8001b3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b42:	f7ff f9dd 	bl	8000f00 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e1dd      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b54:	4b03      	ldr	r3, [pc, #12]	@ (8001b64 <HAL_RCC_OscConfig+0x4f8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x4d6>
 8001b60:	e01b      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
 8001b62:	bf00      	nop
 8001b64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b68:	4b9b      	ldr	r3, [pc, #620]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a9a      	ldr	r2, [pc, #616]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001b6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b74:	f7ff f9c4 	bl	8000f00 <HAL_GetTick>
 8001b78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b7c:	f7ff f9c0 	bl	8000f00 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e1c0      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b8e:	4b92      	ldr	r3, [pc, #584]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8081 	beq.w	8001caa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ba8:	4b8c      	ldr	r3, [pc, #560]	@ (8001ddc <HAL_RCC_OscConfig+0x770>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a8b      	ldr	r2, [pc, #556]	@ (8001ddc <HAL_RCC_OscConfig+0x770>)
 8001bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bb4:	f7ff f9a4 	bl	8000f00 <HAL_GetTick>
 8001bb8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbc:	f7ff f9a0 	bl	8000f00 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	@ 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e1a0      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bce:	4b83      	ldr	r3, [pc, #524]	@ (8001ddc <HAL_RCC_OscConfig+0x770>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d106      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x584>
 8001be2:	4b7d      	ldr	r3, [pc, #500]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be6:	4a7c      	ldr	r2, [pc, #496]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bee:	e02d      	b.n	8001c4c <HAL_RCC_OscConfig+0x5e0>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10c      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5a6>
 8001bf8:	4b77      	ldr	r3, [pc, #476]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfc:	4a76      	ldr	r2, [pc, #472]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c04:	4b74      	ldr	r3, [pc, #464]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c08:	4a73      	ldr	r2, [pc, #460]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001c0a:	f023 0304 	bic.w	r3, r3, #4
 8001c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c10:	e01c      	b.n	8001c4c <HAL_RCC_OscConfig+0x5e0>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x5c8>
 8001c1a:	4b6f      	ldr	r3, [pc, #444]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1e:	4a6e      	ldr	r2, [pc, #440]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c26:	4b6c      	ldr	r3, [pc, #432]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2a:	4a6b      	ldr	r2, [pc, #428]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c32:	e00b      	b.n	8001c4c <HAL_RCC_OscConfig+0x5e0>
 8001c34:	4b68      	ldr	r3, [pc, #416]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c38:	4a67      	ldr	r2, [pc, #412]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c40:	4b65      	ldr	r3, [pc, #404]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c44:	4a64      	ldr	r2, [pc, #400]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001c46:	f023 0304 	bic.w	r3, r3, #4
 8001c4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d015      	beq.n	8001c80 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff f954 	bl	8000f00 <HAL_GetTick>
 8001c58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7ff f950 	bl	8000f00 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e14e      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c72:	4b59      	ldr	r3, [pc, #356]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0ee      	beq.n	8001c5c <HAL_RCC_OscConfig+0x5f0>
 8001c7e:	e014      	b.n	8001caa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c80:	f7ff f93e 	bl	8000f00 <HAL_GetTick>
 8001c84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c88:	f7ff f93a 	bl	8000f00 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e138      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c9e:	4b4e      	ldr	r3, [pc, #312]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1ee      	bne.n	8001c88 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 812d 	beq.w	8001f0e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001cb4:	4b48      	ldr	r3, [pc, #288]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cbc:	2b18      	cmp	r3, #24
 8001cbe:	f000 80bd 	beq.w	8001e3c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	f040 809e 	bne.w	8001e08 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ccc:	4b42      	ldr	r3, [pc, #264]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a41      	ldr	r2, [pc, #260]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001cd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f912 	bl	8000f00 <HAL_GetTick>
 8001cdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff f90e 	bl	8000f00 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e10e      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cf2:	4b39      	ldr	r3, [pc, #228]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cfe:	4b36      	ldr	r3, [pc, #216]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001d00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d02:	4b37      	ldr	r3, [pc, #220]	@ (8001de0 <HAL_RCC_OscConfig+0x774>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	430a      	orrs	r2, r1
 8001d12:	4931      	ldr	r1, [pc, #196]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	628b      	str	r3, [r1, #40]	@ 0x28
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d26:	3b01      	subs	r3, #1
 8001d28:	025b      	lsls	r3, r3, #9
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d32:	3b01      	subs	r3, #1
 8001d34:	041b      	lsls	r3, r3, #16
 8001d36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d40:	3b01      	subs	r3, #1
 8001d42:	061b      	lsls	r3, r3, #24
 8001d44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001d48:	4923      	ldr	r1, [pc, #140]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001d4e:	4b22      	ldr	r3, [pc, #136]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d52:	4a21      	ldr	r2, [pc, #132]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001d5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d5e:	4b21      	ldr	r3, [pc, #132]	@ (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d66:	00d2      	lsls	r2, r2, #3
 8001d68:	491b      	ldr	r1, [pc, #108]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d72:	f023 020c 	bic.w	r2, r3, #12
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	4917      	ldr	r1, [pc, #92]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d80:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d84:	f023 0202 	bic.w	r2, r3, #2
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8c:	4912      	ldr	r1, [pc, #72]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d92:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d96:	4a10      	ldr	r2, [pc, #64]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da2:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001daa:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001db6:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dba:	4a07      	ldr	r2, [pc, #28]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc2:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a04      	ldr	r2, [pc, #16]	@ (8001dd8 <HAL_RCC_OscConfig+0x76c>)
 8001dc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7ff f897 	bl	8000f00 <HAL_GetTick>
 8001dd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dd4:	e011      	b.n	8001dfa <HAL_RCC_OscConfig+0x78e>
 8001dd6:	bf00      	nop
 8001dd8:	58024400 	.word	0x58024400
 8001ddc:	58024800 	.word	0x58024800
 8001de0:	fffffc0c 	.word	0xfffffc0c
 8001de4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff f88a 	bl	8000f00 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e08a      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dfa:	4b47      	ldr	r3, [pc, #284]	@ (8001f18 <HAL_RCC_OscConfig+0x8ac>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x77c>
 8001e06:	e082      	b.n	8001f0e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e08:	4b43      	ldr	r3, [pc, #268]	@ (8001f18 <HAL_RCC_OscConfig+0x8ac>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a42      	ldr	r2, [pc, #264]	@ (8001f18 <HAL_RCC_OscConfig+0x8ac>)
 8001e0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff f874 	bl	8000f00 <HAL_GetTick>
 8001e18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7ff f870 	bl	8000f00 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e070      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f18 <HAL_RCC_OscConfig+0x8ac>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x7b0>
 8001e3a:	e068      	b.n	8001f0e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e3c:	4b36      	ldr	r3, [pc, #216]	@ (8001f18 <HAL_RCC_OscConfig+0x8ac>)
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e42:	4b35      	ldr	r3, [pc, #212]	@ (8001f18 <HAL_RCC_OscConfig+0x8ac>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d031      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	f003 0203 	and.w	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d12a      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d122      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e78:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d11a      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	0a5b      	lsrs	r3, r3, #9
 8001e82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e8a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d111      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	0c1b      	lsrs	r3, r3, #16
 8001e94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d108      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	0e1b      	lsrs	r3, r3, #24
 8001ea6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e02b      	b.n	8001f10 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001eb8:	4b17      	ldr	r3, [pc, #92]	@ (8001f18 <HAL_RCC_OscConfig+0x8ac>)
 8001eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ebc:	08db      	lsrs	r3, r3, #3
 8001ebe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ec2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d01f      	beq.n	8001f0e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001ece:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <HAL_RCC_OscConfig+0x8ac>)
 8001ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed2:	4a11      	ldr	r2, [pc, #68]	@ (8001f18 <HAL_RCC_OscConfig+0x8ac>)
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eda:	f7ff f811 	bl	8000f00 <HAL_GetTick>
 8001ede:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001ee0:	bf00      	nop
 8001ee2:	f7ff f80d 	bl	8000f00 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d0f9      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001eee:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <HAL_RCC_OscConfig+0x8ac>)
 8001ef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f1c <HAL_RCC_OscConfig+0x8b0>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001efa:	00d2      	lsls	r2, r2, #3
 8001efc:	4906      	ldr	r1, [pc, #24]	@ (8001f18 <HAL_RCC_OscConfig+0x8ac>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001f02:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <HAL_RCC_OscConfig+0x8ac>)
 8001f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f06:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <HAL_RCC_OscConfig+0x8ac>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3730      	adds	r7, #48	@ 0x30
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	58024400 	.word	0x58024400
 8001f1c:	ffff0007 	.word	0xffff0007

08001f20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e19c      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f34:	4b8a      	ldr	r3, [pc, #552]	@ (8002160 <HAL_RCC_ClockConfig+0x240>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d910      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b87      	ldr	r3, [pc, #540]	@ (8002160 <HAL_RCC_ClockConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 020f 	bic.w	r2, r3, #15
 8001f4a:	4985      	ldr	r1, [pc, #532]	@ (8002160 <HAL_RCC_ClockConfig+0x240>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b83      	ldr	r3, [pc, #524]	@ (8002160 <HAL_RCC_ClockConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e184      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d010      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	4b7b      	ldr	r3, [pc, #492]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d908      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f80:	4b78      	ldr	r3, [pc, #480]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	4975      	ldr	r1, [pc, #468]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d010      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	4b70      	ldr	r3, [pc, #448]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d908      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fae:	4b6d      	ldr	r3, [pc, #436]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	496a      	ldr	r1, [pc, #424]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d010      	beq.n	8001fee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699a      	ldr	r2, [r3, #24]
 8001fd0:	4b64      	ldr	r3, [pc, #400]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d908      	bls.n	8001fee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fdc:	4b61      	ldr	r3, [pc, #388]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	495e      	ldr	r1, [pc, #376]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d010      	beq.n	800201c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69da      	ldr	r2, [r3, #28]
 8001ffe:	4b59      	ldr	r3, [pc, #356]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002006:	429a      	cmp	r2, r3
 8002008:	d908      	bls.n	800201c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800200a:	4b56      	ldr	r3, [pc, #344]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4953      	ldr	r1, [pc, #332]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002018:	4313      	orrs	r3, r2
 800201a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d010      	beq.n	800204a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	4b4d      	ldr	r3, [pc, #308]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	429a      	cmp	r2, r3
 8002036:	d908      	bls.n	800204a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b4a      	ldr	r3, [pc, #296]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f023 020f 	bic.w	r2, r3, #15
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4947      	ldr	r1, [pc, #284]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002046:	4313      	orrs	r3, r2
 8002048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d055      	beq.n	8002102 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002056:	4b43      	ldr	r3, [pc, #268]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	4940      	ldr	r1, [pc, #256]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002064:	4313      	orrs	r3, r2
 8002066:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d107      	bne.n	8002080 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002070:	4b3c      	ldr	r3, [pc, #240]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d121      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0f6      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d107      	bne.n	8002098 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002088:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d115      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0ea      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020a0:	4b30      	ldr	r3, [pc, #192]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d109      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0de      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0d6      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020c0:	4b28      	ldr	r3, [pc, #160]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f023 0207 	bic.w	r2, r3, #7
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4925      	ldr	r1, [pc, #148]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020d2:	f7fe ff15 	bl	8000f00 <HAL_GetTick>
 80020d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020da:	f7fe ff11 	bl	8000f00 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e0be      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	429a      	cmp	r2, r3
 8002100:	d1eb      	bne.n	80020da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d010      	beq.n	8002130 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	4b14      	ldr	r3, [pc, #80]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	429a      	cmp	r2, r3
 800211c:	d208      	bcs.n	8002130 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211e:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f023 020f 	bic.w	r2, r3, #15
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	490e      	ldr	r1, [pc, #56]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 800212c:	4313      	orrs	r3, r2
 800212e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002130:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <HAL_RCC_ClockConfig+0x240>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d214      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <HAL_RCC_ClockConfig+0x240>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 020f 	bic.w	r2, r3, #15
 8002146:	4906      	ldr	r1, [pc, #24]	@ (8002160 <HAL_RCC_ClockConfig+0x240>)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214e:	4b04      	ldr	r3, [pc, #16]	@ (8002160 <HAL_RCC_ClockConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d005      	beq.n	8002168 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e086      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
 8002160:	52002000 	.word	0x52002000
 8002164:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d010      	beq.n	8002196 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <HAL_RCC_ClockConfig+0x358>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002180:	429a      	cmp	r2, r3
 8002182:	d208      	bcs.n	8002196 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002184:	4b3c      	ldr	r3, [pc, #240]	@ (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	4939      	ldr	r1, [pc, #228]	@ (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002192:	4313      	orrs	r3, r2
 8002194:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	4b34      	ldr	r3, [pc, #208]	@ (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d208      	bcs.n	80021c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021b2:	4b31      	ldr	r3, [pc, #196]	@ (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	492e      	ldr	r1, [pc, #184]	@ (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d010      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	4b28      	ldr	r3, [pc, #160]	@ (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80021dc:	429a      	cmp	r2, r3
 80021de:	d208      	bcs.n	80021f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021e0:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	4922      	ldr	r1, [pc, #136]	@ (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d010      	beq.n	8002220 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	4b1d      	ldr	r3, [pc, #116]	@ (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800220a:	429a      	cmp	r2, r3
 800220c:	d208      	bcs.n	8002220 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800220e:	4b1a      	ldr	r3, [pc, #104]	@ (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4917      	ldr	r1, [pc, #92]	@ (8002278 <HAL_RCC_ClockConfig+0x358>)
 800221c:	4313      	orrs	r3, r2
 800221e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002220:	f000 f834 	bl	800228c <HAL_RCC_GetSysClockFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	4912      	ldr	r1, [pc, #72]	@ (800227c <HAL_RCC_ClockConfig+0x35c>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
 800223c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800223e:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	4a0d      	ldr	r2, [pc, #52]	@ (800227c <HAL_RCC_ClockConfig+0x35c>)
 8002248:	5cd3      	ldrb	r3, [r2, r3]
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
 8002254:	4a0a      	ldr	r2, [pc, #40]	@ (8002280 <HAL_RCC_ClockConfig+0x360>)
 8002256:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002258:	4a0a      	ldr	r2, [pc, #40]	@ (8002284 <HAL_RCC_ClockConfig+0x364>)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <HAL_RCC_ClockConfig+0x368>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fe02 	bl	8000e6c <HAL_InitTick>
 8002268:	4603      	mov	r3, r0
 800226a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800226c:	7bfb      	ldrb	r3, [r7, #15]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	58024400 	.word	0x58024400
 800227c:	08005d5c 	.word	0x08005d5c
 8002280:	24000010 	.word	0x24000010
 8002284:	2400000c 	.word	0x2400000c
 8002288:	24000014 	.word	0x24000014

0800228c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	@ 0x24
 8002290:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002292:	4bb3      	ldr	r3, [pc, #716]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800229a:	2b18      	cmp	r3, #24
 800229c:	f200 8155 	bhi.w	800254a <HAL_RCC_GetSysClockFreq+0x2be>
 80022a0:	a201      	add	r2, pc, #4	@ (adr r2, 80022a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80022a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a6:	bf00      	nop
 80022a8:	0800230d 	.word	0x0800230d
 80022ac:	0800254b 	.word	0x0800254b
 80022b0:	0800254b 	.word	0x0800254b
 80022b4:	0800254b 	.word	0x0800254b
 80022b8:	0800254b 	.word	0x0800254b
 80022bc:	0800254b 	.word	0x0800254b
 80022c0:	0800254b 	.word	0x0800254b
 80022c4:	0800254b 	.word	0x0800254b
 80022c8:	08002333 	.word	0x08002333
 80022cc:	0800254b 	.word	0x0800254b
 80022d0:	0800254b 	.word	0x0800254b
 80022d4:	0800254b 	.word	0x0800254b
 80022d8:	0800254b 	.word	0x0800254b
 80022dc:	0800254b 	.word	0x0800254b
 80022e0:	0800254b 	.word	0x0800254b
 80022e4:	0800254b 	.word	0x0800254b
 80022e8:	08002339 	.word	0x08002339
 80022ec:	0800254b 	.word	0x0800254b
 80022f0:	0800254b 	.word	0x0800254b
 80022f4:	0800254b 	.word	0x0800254b
 80022f8:	0800254b 	.word	0x0800254b
 80022fc:	0800254b 	.word	0x0800254b
 8002300:	0800254b 	.word	0x0800254b
 8002304:	0800254b 	.word	0x0800254b
 8002308:	0800233f 	.word	0x0800233f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800230c:	4b94      	ldr	r3, [pc, #592]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002318:	4b91      	ldr	r3, [pc, #580]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	08db      	lsrs	r3, r3, #3
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	4a90      	ldr	r2, [pc, #576]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
 8002328:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800232a:	e111      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800232c:	4b8d      	ldr	r3, [pc, #564]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800232e:	61bb      	str	r3, [r7, #24]
      break;
 8002330:	e10e      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002332:	4b8d      	ldr	r3, [pc, #564]	@ (8002568 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002334:	61bb      	str	r3, [r7, #24]
      break;
 8002336:	e10b      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002338:	4b8c      	ldr	r3, [pc, #560]	@ (800256c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800233a:	61bb      	str	r3, [r7, #24]
      break;
 800233c:	e108      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800233e:	4b88      	ldr	r3, [pc, #544]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002348:	4b85      	ldr	r3, [pc, #532]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002352:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002354:	4b82      	ldr	r3, [pc, #520]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800235e:	4b80      	ldr	r3, [pc, #512]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002362:	08db      	lsrs	r3, r3, #3
 8002364:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002376:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80e1 	beq.w	8002544 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b02      	cmp	r3, #2
 8002386:	f000 8083 	beq.w	8002490 <HAL_RCC_GetSysClockFreq+0x204>
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b02      	cmp	r3, #2
 800238e:	f200 80a1 	bhi.w	80024d4 <HAL_RCC_GetSysClockFreq+0x248>
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x114>
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d056      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x1c0>
 800239e:	e099      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d02d      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80023ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	08db      	lsrs	r3, r3, #3
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	4a6b      	ldr	r2, [pc, #428]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
 80023bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	ee07 3a90 	vmov	s15, r3
 80023c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023d6:	4b62      	ldr	r3, [pc, #392]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002402:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002406:	e087      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002412:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002574 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800241a:	4b51      	ldr	r3, [pc, #324]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800242a:	ed97 6a02 	vldr	s12, [r7, #8]
 800242e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002570 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800243a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800243e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002446:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800244a:	e065      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	ee07 3a90 	vmov	s15, r3
 8002452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002456:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002578 <HAL_RCC_GetSysClockFreq+0x2ec>
 800245a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800245e:	4b40      	ldr	r3, [pc, #256]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800246e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002472:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002570 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800247a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800247e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800248e:	e043      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	ee07 3a90 	vmov	s15, r3
 8002496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800257c <HAL_RCC_GetSysClockFreq+0x2f0>
 800249e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80024b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024d2:	e021      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002578 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800250a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800250e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002512:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002516:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251c:	0a5b      	lsrs	r3, r3, #9
 800251e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002522:	3301      	adds	r3, #1
 8002524:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002530:	edd7 6a07 	vldr	s13, [r7, #28]
 8002534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800253c:	ee17 3a90 	vmov	r3, s15
 8002540:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002542:	e005      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
      break;
 8002548:	e002      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800254a:	4b07      	ldr	r3, [pc, #28]	@ (8002568 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800254c:	61bb      	str	r3, [r7, #24]
      break;
 800254e:	bf00      	nop
  }

  return sysclockfreq;
 8002550:	69bb      	ldr	r3, [r7, #24]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3724      	adds	r7, #36	@ 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	58024400 	.word	0x58024400
 8002564:	03d09000 	.word	0x03d09000
 8002568:	003d0900 	.word	0x003d0900
 800256c:	017d7840 	.word	0x017d7840
 8002570:	46000000 	.word	0x46000000
 8002574:	4c742400 	.word	0x4c742400
 8002578:	4a742400 	.word	0x4a742400
 800257c:	4bbebc20 	.word	0x4bbebc20

08002580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002586:	f7ff fe81 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800258a:	4602      	mov	r2, r0
 800258c:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	490f      	ldr	r1, [pc, #60]	@ (80025d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002598:	5ccb      	ldrb	r3, [r1, r3]
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	fa22 f303 	lsr.w	r3, r2, r3
 80025a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025a4:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	4a09      	ldr	r2, [pc, #36]	@ (80025d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ba:	4a07      	ldr	r2, [pc, #28]	@ (80025d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80025bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025be:	4a07      	ldr	r2, [pc, #28]	@ (80025dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80025c4:	4b04      	ldr	r3, [pc, #16]	@ (80025d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	58024400 	.word	0x58024400
 80025d4:	08005d5c 	.word	0x08005d5c
 80025d8:	24000010 	.word	0x24000010
 80025dc:	2400000c 	.word	0x2400000c

080025e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80025e4:	f7ff ffcc 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4904      	ldr	r1, [pc, #16]	@ (8002608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002600:	4618      	mov	r0, r3
 8002602:	bd80      	pop	{r7, pc}
 8002604:	58024400 	.word	0x58024400
 8002608:	08005d5c 	.word	0x08005d5c

0800260c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002610:	f7ff ffb6 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4904      	ldr	r1, [pc, #16]	@ (8002634 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}
 8002630:	58024400 	.word	0x58024400
 8002634:	08005d5c 	.word	0x08005d5c

08002638 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800263c:	b0ca      	sub	sp, #296	@ 0x128
 800263e:	af00      	add	r7, sp, #0
 8002640:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002644:	2300      	movs	r3, #0
 8002646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800264a:	2300      	movs	r3, #0
 800264c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800265c:	2500      	movs	r5, #0
 800265e:	ea54 0305 	orrs.w	r3, r4, r5
 8002662:	d049      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002668:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800266a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800266e:	d02f      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002670:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002674:	d828      	bhi.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002676:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800267a:	d01a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800267c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002680:	d822      	bhi.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002686:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800268a:	d007      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800268c:	e01c      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800268e:	4bb8      	ldr	r3, [pc, #736]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002692:	4ab7      	ldr	r2, [pc, #732]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002698:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800269a:	e01a      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800269c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026a0:	3308      	adds	r3, #8
 80026a2:	2102      	movs	r1, #2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f001 fc8f 	bl	8003fc8 <RCCEx_PLL2_Config>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80026b0:	e00f      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80026b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026b6:	3328      	adds	r3, #40	@ 0x28
 80026b8:	2102      	movs	r1, #2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 fd36 	bl	800412c <RCCEx_PLL3_Config>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80026c6:	e004      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80026ce:	e000      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80026d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80026da:	4ba5      	ldr	r3, [pc, #660]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80026e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026e8:	4aa1      	ldr	r2, [pc, #644]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026ea:	430b      	orrs	r3, r1
 80026ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80026ee:	e003      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002700:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002704:	f04f 0900 	mov.w	r9, #0
 8002708:	ea58 0309 	orrs.w	r3, r8, r9
 800270c:	d047      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800270e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002714:	2b04      	cmp	r3, #4
 8002716:	d82a      	bhi.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002718:	a201      	add	r2, pc, #4	@ (adr r2, 8002720 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800271a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271e:	bf00      	nop
 8002720:	08002735 	.word	0x08002735
 8002724:	08002743 	.word	0x08002743
 8002728:	08002759 	.word	0x08002759
 800272c:	08002777 	.word	0x08002777
 8002730:	08002777 	.word	0x08002777
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002734:	4b8e      	ldr	r3, [pc, #568]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002738:	4a8d      	ldr	r2, [pc, #564]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800273a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800273e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002740:	e01a      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002746:	3308      	adds	r3, #8
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f001 fc3c 	bl	8003fc8 <RCCEx_PLL2_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002756:	e00f      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800275c:	3328      	adds	r3, #40	@ 0x28
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f001 fce3 	bl	800412c <RCCEx_PLL3_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800276c:	e004      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002774:	e000      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10a      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002780:	4b7b      	ldr	r3, [pc, #492]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002784:	f023 0107 	bic.w	r1, r3, #7
 8002788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800278c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278e:	4a78      	ldr	r2, [pc, #480]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002790:	430b      	orrs	r3, r1
 8002792:	6513      	str	r3, [r2, #80]	@ 0x50
 8002794:	e003      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800279a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800279e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80027aa:	f04f 0b00 	mov.w	fp, #0
 80027ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80027b2:	d04c      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80027b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027be:	d030      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80027c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027c4:	d829      	bhi.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80027c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80027c8:	d02d      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80027ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80027cc:	d825      	bhi.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80027ce:	2b80      	cmp	r3, #128	@ 0x80
 80027d0:	d018      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80027d2:	2b80      	cmp	r3, #128	@ 0x80
 80027d4:	d821      	bhi.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80027da:	2b40      	cmp	r3, #64	@ 0x40
 80027dc:	d007      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80027de:	e01c      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027e0:	4b63      	ldr	r3, [pc, #396]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e4:	4a62      	ldr	r2, [pc, #392]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027ec:	e01c      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027f2:	3308      	adds	r3, #8
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f001 fbe6 	bl	8003fc8 <RCCEx_PLL2_Config>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002802:	e011      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002808:	3328      	adds	r3, #40	@ 0x28
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f001 fc8d 	bl	800412c <RCCEx_PLL3_Config>
 8002812:	4603      	mov	r3, r0
 8002814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002818:	e006      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002820:	e002      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002822:	bf00      	nop
 8002824:	e000      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002830:	4b4f      	ldr	r3, [pc, #316]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002834:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800283c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283e:	4a4c      	ldr	r2, [pc, #304]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002840:	430b      	orrs	r3, r1
 8002842:	6513      	str	r3, [r2, #80]	@ 0x50
 8002844:	e003      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800284a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800284e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800285a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800285e:	2300      	movs	r3, #0
 8002860:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002864:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002868:	460b      	mov	r3, r1
 800286a:	4313      	orrs	r3, r2
 800286c:	d053      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800286e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002872:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002876:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800287a:	d035      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800287c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002880:	d82e      	bhi.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002882:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002886:	d031      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002888:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800288c:	d828      	bhi.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800288e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002892:	d01a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002894:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002898:	d822      	bhi.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800289e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028a2:	d007      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80028a4:	e01c      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a6:	4b32      	ldr	r3, [pc, #200]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028aa:	4a31      	ldr	r2, [pc, #196]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028b2:	e01c      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028b8:	3308      	adds	r3, #8
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f001 fb83 	bl	8003fc8 <RCCEx_PLL2_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80028c8:	e011      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ce:	3328      	adds	r3, #40	@ 0x28
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f001 fc2a 	bl	800412c <RCCEx_PLL3_Config>
 80028d8:	4603      	mov	r3, r0
 80028da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028de:	e006      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028e6:	e002      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80028e8:	bf00      	nop
 80028ea:	e000      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80028ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10b      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80028f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80028fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002902:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002906:	4a1a      	ldr	r2, [pc, #104]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002908:	430b      	orrs	r3, r1
 800290a:	6593      	str	r3, [r2, #88]	@ 0x58
 800290c:	e003      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800290e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002922:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800292c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002930:	460b      	mov	r3, r1
 8002932:	4313      	orrs	r3, r2
 8002934:	d056      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800293a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800293e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002942:	d038      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002944:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002948:	d831      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800294a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800294e:	d034      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002950:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002954:	d82b      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002956:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800295a:	d01d      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800295c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002960:	d825      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002962:	2b00      	cmp	r3, #0
 8002964:	d006      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800296c:	e01f      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800296e:	bf00      	nop
 8002970:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002974:	4ba2      	ldr	r3, [pc, #648]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002978:	4aa1      	ldr	r2, [pc, #644]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800297a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800297e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002980:	e01c      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002986:	3308      	adds	r3, #8
 8002988:	2100      	movs	r1, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f001 fb1c 	bl	8003fc8 <RCCEx_PLL2_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002996:	e011      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800299c:	3328      	adds	r3, #40	@ 0x28
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 fbc3 	bl	800412c <RCCEx_PLL3_Config>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029ac:	e006      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029b4:	e002      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80029b6:	bf00      	nop
 80029b8:	e000      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80029ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10b      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80029c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80029cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80029d4:	4a8a      	ldr	r2, [pc, #552]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029d6:	430b      	orrs	r3, r1
 80029d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80029da:	e003      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80029e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80029f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80029fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80029fe:	460b      	mov	r3, r1
 8002a00:	4313      	orrs	r3, r2
 8002a02:	d03a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0a:	2b30      	cmp	r3, #48	@ 0x30
 8002a0c:	d01f      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002a0e:	2b30      	cmp	r3, #48	@ 0x30
 8002a10:	d819      	bhi.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	d00c      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002a16:	2b20      	cmp	r3, #32
 8002a18:	d815      	bhi.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d019      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d111      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a22:	4b77      	ldr	r3, [pc, #476]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a26:	4a76      	ldr	r2, [pc, #472]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002a2e:	e011      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a34:	3308      	adds	r3, #8
 8002a36:	2102      	movs	r1, #2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 fac5 	bl	8003fc8 <RCCEx_PLL2_Config>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002a44:	e006      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a4c:	e002      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002a4e:	bf00      	nop
 8002a50:	e000      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a5c:	4b68      	ldr	r3, [pc, #416]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a60:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6a:	4a65      	ldr	r2, [pc, #404]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a70:	e003      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002a86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002a90:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4313      	orrs	r3, r2
 8002a98:	d051      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002aa4:	d035      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002aa6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002aaa:	d82e      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002aac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ab0:	d031      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002ab2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ab6:	d828      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002abc:	d01a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002abe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ac2:	d822      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002acc:	d007      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002ace:	e01c      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ad0:	4b4b      	ldr	r3, [pc, #300]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	4a4a      	ldr	r2, [pc, #296]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ada:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002adc:	e01c      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f001 fa6e 	bl	8003fc8 <RCCEx_PLL2_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002af2:	e011      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002af8:	3328      	adds	r3, #40	@ 0x28
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f001 fb15 	bl	800412c <RCCEx_PLL3_Config>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b08:	e006      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b10:	e002      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002b12:	bf00      	nop
 8002b14:	e000      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b20:	4b37      	ldr	r3, [pc, #220]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b24:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b2e:	4a34      	ldr	r2, [pc, #208]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b34:	e003      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002b54:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	d056      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b68:	d033      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002b6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b6e:	d82c      	bhi.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b74:	d02f      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002b76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b7a:	d826      	bhi.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b80:	d02b      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002b82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b86:	d820      	bhi.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b8c:	d012      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002b8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b92:	d81a      	bhi.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d022      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b9c:	d115      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 fa0e 	bl	8003fc8 <RCCEx_PLL2_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002bb2:	e015      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb8:	3328      	adds	r3, #40	@ 0x28
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 fab5 	bl	800412c <RCCEx_PLL3_Config>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bd0:	e006      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002bd2:	bf00      	nop
 8002bd4:	e004      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002bd6:	bf00      	nop
 8002bd8:	e002      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002bda:	bf00      	nop
 8002bdc:	e000      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10d      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002be8:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bf6:	4a02      	ldr	r2, [pc, #8]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bfc:	e006      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002bfe:	bf00      	nop
 8002c00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c22:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	d055      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c38:	d033      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c3e:	d82c      	bhi.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c44:	d02f      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c4a:	d826      	bhi.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002c50:	d02b      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002c52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002c56:	d820      	bhi.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c5c:	d012      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002c5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c62:	d81a      	bhi.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d022      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002c68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c6c:	d115      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c72:	3308      	adds	r3, #8
 8002c74:	2101      	movs	r1, #1
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 f9a6 	bl	8003fc8 <RCCEx_PLL2_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c82:	e015      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c88:	3328      	adds	r3, #40	@ 0x28
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f001 fa4d 	bl	800412c <RCCEx_PLL3_Config>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ca0:	e006      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ca2:	bf00      	nop
 8002ca4:	e004      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ca6:	bf00      	nop
 8002ca8:	e002      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002caa:	bf00      	nop
 8002cac:	e000      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10b      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002cb8:	4ba3      	ldr	r3, [pc, #652]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002cc8:	4a9f      	ldr	r2, [pc, #636]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cca:	430b      	orrs	r3, r1
 8002ccc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cce:	e003      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	d037      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d02:	d00e      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002d04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d08:	d816      	bhi.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d018      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002d0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d12:	d111      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d14:	4b8c      	ldr	r3, [pc, #560]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d18:	4a8b      	ldr	r2, [pc, #556]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d20:	e00f      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d26:	3308      	adds	r3, #8
 8002d28:	2101      	movs	r1, #1
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 f94c 	bl	8003fc8 <RCCEx_PLL2_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d36:	e004      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d3e:	e000      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10a      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d4e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d58:	4a7b      	ldr	r2, [pc, #492]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d5e:	e003      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002d74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002d7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4313      	orrs	r3, r2
 8002d86:	d039      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d81c      	bhi.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002d92:	a201      	add	r2, pc, #4	@ (adr r2, 8002d98 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d98:	08002dd5 	.word	0x08002dd5
 8002d9c:	08002da9 	.word	0x08002da9
 8002da0:	08002db7 	.word	0x08002db7
 8002da4:	08002dd5 	.word	0x08002dd5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002da8:	4b67      	ldr	r3, [pc, #412]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dac:	4a66      	ldr	r2, [pc, #408]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002db4:	e00f      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dba:	3308      	adds	r3, #8
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f001 f902 	bl	8003fc8 <RCCEx_PLL2_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002dca:	e004      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10a      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002dde:	4b5a      	ldr	r3, [pc, #360]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de2:	f023 0103 	bic.w	r1, r3, #3
 8002de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dec:	4a56      	ldr	r2, [pc, #344]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dee:	430b      	orrs	r3, r1
 8002df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002df2:	e003      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002df8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e04:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002e08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002e16:	460b      	mov	r3, r1
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f000 809f 	beq.w	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e1e:	4b4b      	ldr	r3, [pc, #300]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a4a      	ldr	r2, [pc, #296]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e2a:	f7fe f869 	bl	8000f00 <HAL_GetTick>
 8002e2e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e32:	e00b      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e34:	f7fe f864 	bl	8000f00 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b64      	cmp	r3, #100	@ 0x64
 8002e42:	d903      	bls.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e4a:	e005      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ed      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002e58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d179      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e60:	4b39      	ldr	r3, [pc, #228]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e6c:	4053      	eors	r3, r2
 8002e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d015      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e76:	4b34      	ldr	r3, [pc, #208]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e7e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e82:	4b31      	ldr	r3, [pc, #196]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e86:	4a30      	ldr	r2, [pc, #192]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e8c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e92:	4a2d      	ldr	r2, [pc, #180]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e98:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e9a:	4a2b      	ldr	r2, [pc, #172]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ea0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eae:	d118      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fe f826 	bl	8000f00 <HAL_GetTick>
 8002eb4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eb8:	e00d      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fe f821 	bl	8000f00 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ec4:	1ad2      	subs	r2, r2, r3
 8002ec6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d903      	bls.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002ed4:	e005      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0eb      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d129      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ef6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002efa:	d10e      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002efc:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f0c:	091a      	lsrs	r2, r3, #4
 8002f0e:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	4a0d      	ldr	r2, [pc, #52]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f14:	430b      	orrs	r3, r1
 8002f16:	6113      	str	r3, [r2, #16]
 8002f18:	e005      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f24:	6113      	str	r3, [r2, #16]
 8002f26:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f28:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f36:	4a04      	ldr	r2, [pc, #16]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f3c:	e00e      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002f46:	e009      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002f48:	58024400 	.word	0x58024400
 8002f4c:	58024800 	.word	0x58024800
 8002f50:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f64:	f002 0301 	and.w	r3, r2, #1
 8002f68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f000 8089 	beq.w	8003090 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f84:	2b28      	cmp	r3, #40	@ 0x28
 8002f86:	d86b      	bhi.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002f88:	a201      	add	r2, pc, #4	@ (adr r2, 8002f90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8e:	bf00      	nop
 8002f90:	08003069 	.word	0x08003069
 8002f94:	08003061 	.word	0x08003061
 8002f98:	08003061 	.word	0x08003061
 8002f9c:	08003061 	.word	0x08003061
 8002fa0:	08003061 	.word	0x08003061
 8002fa4:	08003061 	.word	0x08003061
 8002fa8:	08003061 	.word	0x08003061
 8002fac:	08003061 	.word	0x08003061
 8002fb0:	08003035 	.word	0x08003035
 8002fb4:	08003061 	.word	0x08003061
 8002fb8:	08003061 	.word	0x08003061
 8002fbc:	08003061 	.word	0x08003061
 8002fc0:	08003061 	.word	0x08003061
 8002fc4:	08003061 	.word	0x08003061
 8002fc8:	08003061 	.word	0x08003061
 8002fcc:	08003061 	.word	0x08003061
 8002fd0:	0800304b 	.word	0x0800304b
 8002fd4:	08003061 	.word	0x08003061
 8002fd8:	08003061 	.word	0x08003061
 8002fdc:	08003061 	.word	0x08003061
 8002fe0:	08003061 	.word	0x08003061
 8002fe4:	08003061 	.word	0x08003061
 8002fe8:	08003061 	.word	0x08003061
 8002fec:	08003061 	.word	0x08003061
 8002ff0:	08003069 	.word	0x08003069
 8002ff4:	08003061 	.word	0x08003061
 8002ff8:	08003061 	.word	0x08003061
 8002ffc:	08003061 	.word	0x08003061
 8003000:	08003061 	.word	0x08003061
 8003004:	08003061 	.word	0x08003061
 8003008:	08003061 	.word	0x08003061
 800300c:	08003061 	.word	0x08003061
 8003010:	08003069 	.word	0x08003069
 8003014:	08003061 	.word	0x08003061
 8003018:	08003061 	.word	0x08003061
 800301c:	08003061 	.word	0x08003061
 8003020:	08003061 	.word	0x08003061
 8003024:	08003061 	.word	0x08003061
 8003028:	08003061 	.word	0x08003061
 800302c:	08003061 	.word	0x08003061
 8003030:	08003069 	.word	0x08003069
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003038:	3308      	adds	r3, #8
 800303a:	2101      	movs	r1, #1
 800303c:	4618      	mov	r0, r3
 800303e:	f000 ffc3 	bl	8003fc8 <RCCEx_PLL2_Config>
 8003042:	4603      	mov	r3, r0
 8003044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003048:	e00f      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800304a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304e:	3328      	adds	r3, #40	@ 0x28
 8003050:	2101      	movs	r1, #1
 8003052:	4618      	mov	r0, r3
 8003054:	f001 f86a 	bl	800412c <RCCEx_PLL3_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800305e:	e004      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003066:	e000      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800306a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003072:	4bbf      	ldr	r3, [pc, #764]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003076:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800307a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003080:	4abb      	ldr	r2, [pc, #748]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003082:	430b      	orrs	r3, r1
 8003084:	6553      	str	r3, [r2, #84]	@ 0x54
 8003086:	e003      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800308c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003098:	f002 0302 	and.w	r3, r2, #2
 800309c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80030a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80030aa:	460b      	mov	r3, r1
 80030ac:	4313      	orrs	r3, r2
 80030ae:	d041      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80030b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d824      	bhi.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80030ba:	a201      	add	r2, pc, #4	@ (adr r2, 80030c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	0800310d 	.word	0x0800310d
 80030c4:	080030d9 	.word	0x080030d9
 80030c8:	080030ef 	.word	0x080030ef
 80030cc:	0800310d 	.word	0x0800310d
 80030d0:	0800310d 	.word	0x0800310d
 80030d4:	0800310d 	.word	0x0800310d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030dc:	3308      	adds	r3, #8
 80030de:	2101      	movs	r1, #1
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 ff71 	bl	8003fc8 <RCCEx_PLL2_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80030ec:	e00f      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f2:	3328      	adds	r3, #40	@ 0x28
 80030f4:	2101      	movs	r1, #1
 80030f6:	4618      	mov	r0, r3
 80030f8:	f001 f818 	bl	800412c <RCCEx_PLL3_Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003102:	e004      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800310a:	e000      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800310c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800310e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10a      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003116:	4b96      	ldr	r3, [pc, #600]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311a:	f023 0107 	bic.w	r1, r3, #7
 800311e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003122:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003124:	4a92      	ldr	r2, [pc, #584]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003126:	430b      	orrs	r3, r1
 8003128:	6553      	str	r3, [r2, #84]	@ 0x54
 800312a:	e003      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003130:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f002 0304 	and.w	r3, r2, #4
 8003140:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800314a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800314e:	460b      	mov	r3, r1
 8003150:	4313      	orrs	r3, r2
 8003152:	d044      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003158:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800315c:	2b05      	cmp	r3, #5
 800315e:	d825      	bhi.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003160:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	080031b5 	.word	0x080031b5
 800316c:	08003181 	.word	0x08003181
 8003170:	08003197 	.word	0x08003197
 8003174:	080031b5 	.word	0x080031b5
 8003178:	080031b5 	.word	0x080031b5
 800317c:	080031b5 	.word	0x080031b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003184:	3308      	adds	r3, #8
 8003186:	2101      	movs	r1, #1
 8003188:	4618      	mov	r0, r3
 800318a:	f000 ff1d 	bl	8003fc8 <RCCEx_PLL2_Config>
 800318e:	4603      	mov	r3, r0
 8003190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003194:	e00f      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800319a:	3328      	adds	r3, #40	@ 0x28
 800319c:	2101      	movs	r1, #1
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 ffc4 	bl	800412c <RCCEx_PLL3_Config>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80031aa:	e004      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031b2:	e000      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80031b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10b      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031be:	4b6c      	ldr	r3, [pc, #432]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c2:	f023 0107 	bic.w	r1, r3, #7
 80031c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ce:	4a68      	ldr	r2, [pc, #416]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031d4:	e003      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e6:	f002 0320 	and.w	r3, r2, #32
 80031ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80031f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80031f8:	460b      	mov	r3, r1
 80031fa:	4313      	orrs	r3, r2
 80031fc:	d055      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80031fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003206:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800320a:	d033      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800320c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003210:	d82c      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003216:	d02f      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800321c:	d826      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800321e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003222:	d02b      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003224:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003228:	d820      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800322a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800322e:	d012      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003234:	d81a      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003236:	2b00      	cmp	r3, #0
 8003238:	d022      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800323a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800323e:	d115      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003244:	3308      	adds	r3, #8
 8003246:	2100      	movs	r1, #0
 8003248:	4618      	mov	r0, r3
 800324a:	f000 febd 	bl	8003fc8 <RCCEx_PLL2_Config>
 800324e:	4603      	mov	r3, r0
 8003250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003254:	e015      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800325a:	3328      	adds	r3, #40	@ 0x28
 800325c:	2102      	movs	r1, #2
 800325e:	4618      	mov	r0, r3
 8003260:	f000 ff64 	bl	800412c <RCCEx_PLL3_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800326a:	e00a      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003272:	e006      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003274:	bf00      	nop
 8003276:	e004      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003278:	bf00      	nop
 800327a:	e002      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800327c:	bf00      	nop
 800327e:	e000      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10b      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800328a:	4b39      	ldr	r3, [pc, #228]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800328c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800329a:	4a35      	ldr	r2, [pc, #212]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800329c:	430b      	orrs	r3, r1
 800329e:	6553      	str	r3, [r2, #84]	@ 0x54
 80032a0:	e003      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80032aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80032b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032ba:	2300      	movs	r3, #0
 80032bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80032c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4313      	orrs	r3, r2
 80032c8:	d058      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032d2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80032d6:	d033      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80032d8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80032dc:	d82c      	bhi.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032e2:	d02f      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80032e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032e8:	d826      	bhi.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80032ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032ee:	d02b      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80032f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032f4:	d820      	bhi.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80032f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032fa:	d012      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80032fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003300:	d81a      	bhi.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d022      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800330a:	d115      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800330c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003310:	3308      	adds	r3, #8
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fe57 	bl	8003fc8 <RCCEx_PLL2_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003320:	e015      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003326:	3328      	adds	r3, #40	@ 0x28
 8003328:	2102      	movs	r1, #2
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fefe 	bl	800412c <RCCEx_PLL3_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003336:	e00a      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800333e:	e006      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003340:	bf00      	nop
 8003342:	e004      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003344:	bf00      	nop
 8003346:	e002      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003348:	bf00      	nop
 800334a:	e000      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800334c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10e      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003356:	4b06      	ldr	r3, [pc, #24]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800335e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003362:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003366:	4a02      	ldr	r2, [pc, #8]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003368:	430b      	orrs	r3, r1
 800336a:	6593      	str	r3, [r2, #88]	@ 0x58
 800336c:	e006      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800336e:	bf00      	nop
 8003370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003378:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800337c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003392:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003396:	460b      	mov	r3, r1
 8003398:	4313      	orrs	r3, r2
 800339a:	d055      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800339c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80033a4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80033a8:	d033      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80033aa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80033ae:	d82c      	bhi.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80033b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033b4:	d02f      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80033b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033ba:	d826      	bhi.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80033bc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80033c0:	d02b      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80033c2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80033c6:	d820      	bhi.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80033c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033cc:	d012      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80033ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033d2:	d81a      	bhi.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d022      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80033d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033dc:	d115      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e2:	3308      	adds	r3, #8
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fdee 	bl	8003fc8 <RCCEx_PLL2_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80033f2:	e015      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f8:	3328      	adds	r3, #40	@ 0x28
 80033fa:	2102      	movs	r1, #2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fe95 	bl	800412c <RCCEx_PLL3_Config>
 8003402:	4603      	mov	r3, r0
 8003404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003408:	e00a      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003410:	e006      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003412:	bf00      	nop
 8003414:	e004      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003416:	bf00      	nop
 8003418:	e002      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800341a:	bf00      	nop
 800341c:	e000      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800341e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10b      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003428:	4ba1      	ldr	r3, [pc, #644]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003434:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003438:	4a9d      	ldr	r2, [pc, #628]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800343a:	430b      	orrs	r3, r1
 800343c:	6593      	str	r3, [r2, #88]	@ 0x58
 800343e:	e003      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	f002 0308 	and.w	r3, r2, #8
 8003454:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003458:	2300      	movs	r3, #0
 800345a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800345e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003462:	460b      	mov	r3, r1
 8003464:	4313      	orrs	r3, r2
 8003466:	d01e      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003470:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003474:	d10c      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347a:	3328      	adds	r3, #40	@ 0x28
 800347c:	2102      	movs	r1, #2
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fe54 	bl	800412c <RCCEx_PLL3_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003490:	4b87      	ldr	r3, [pc, #540]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003494:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034a0:	4a83      	ldr	r2, [pc, #524]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034a2:	430b      	orrs	r3, r1
 80034a4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ae:	f002 0310 	and.w	r3, r2, #16
 80034b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80034c0:	460b      	mov	r3, r1
 80034c2:	4313      	orrs	r3, r2
 80034c4:	d01e      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80034c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034d2:	d10c      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d8:	3328      	adds	r3, #40	@ 0x28
 80034da:	2102      	movs	r1, #2
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fe25 	bl	800412c <RCCEx_PLL3_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034ee:	4b70      	ldr	r3, [pc, #448]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80034f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034fe:	4a6c      	ldr	r2, [pc, #432]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003500:	430b      	orrs	r3, r1
 8003502:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003510:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003514:	2300      	movs	r3, #0
 8003516:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800351a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800351e:	460b      	mov	r3, r1
 8003520:	4313      	orrs	r3, r2
 8003522:	d03e      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003528:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800352c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003530:	d022      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003532:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003536:	d81b      	bhi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003540:	d00b      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003542:	e015      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003548:	3308      	adds	r3, #8
 800354a:	2100      	movs	r1, #0
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fd3b 	bl	8003fc8 <RCCEx_PLL2_Config>
 8003552:	4603      	mov	r3, r0
 8003554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003558:	e00f      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800355a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355e:	3328      	adds	r3, #40	@ 0x28
 8003560:	2102      	movs	r1, #2
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fde2 	bl	800412c <RCCEx_PLL3_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800356e:	e004      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003576:	e000      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800357a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10b      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003582:	4b4b      	ldr	r3, [pc, #300]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003586:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003592:	4a47      	ldr	r2, [pc, #284]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003594:	430b      	orrs	r3, r1
 8003596:	6593      	str	r3, [r2, #88]	@ 0x58
 8003598:	e003      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800359e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035aa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80035ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035b0:	2300      	movs	r3, #0
 80035b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80035b8:	460b      	mov	r3, r1
 80035ba:	4313      	orrs	r3, r2
 80035bc:	d03b      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80035be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035ca:	d01f      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80035cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035d0:	d818      	bhi.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80035d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035d6:	d003      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80035d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035dc:	d007      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80035de:	e011      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e0:	4b33      	ldr	r3, [pc, #204]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	4a32      	ldr	r2, [pc, #200]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80035ec:	e00f      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f2:	3328      	adds	r3, #40	@ 0x28
 80035f4:	2101      	movs	r1, #1
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fd98 	bl	800412c <RCCEx_PLL3_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003602:	e004      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800360a:	e000      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800360c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800360e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10b      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003616:	4b26      	ldr	r3, [pc, #152]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003626:	4a22      	ldr	r2, [pc, #136]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003628:	430b      	orrs	r3, r1
 800362a:	6553      	str	r3, [r2, #84]	@ 0x54
 800362c:	e003      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003642:	673b      	str	r3, [r7, #112]	@ 0x70
 8003644:	2300      	movs	r3, #0
 8003646:	677b      	str	r3, [r7, #116]	@ 0x74
 8003648:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800364c:	460b      	mov	r3, r1
 800364e:	4313      	orrs	r3, r2
 8003650:	d034      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800365c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003660:	d007      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003662:	e011      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003664:	4b12      	ldr	r3, [pc, #72]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003668:	4a11      	ldr	r2, [pc, #68]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800366a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800366e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003670:	e00e      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003676:	3308      	adds	r3, #8
 8003678:	2102      	movs	r1, #2
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fca4 	bl	8003fc8 <RCCEx_PLL2_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003686:	e003      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800368e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10d      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003698:	4b05      	ldr	r3, [pc, #20]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800369a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80036a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a6:	4a02      	ldr	r2, [pc, #8]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036a8:	430b      	orrs	r3, r1
 80036aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036ac:	e006      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80036ae:	bf00      	nop
 80036b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80036c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036ca:	2300      	movs	r3, #0
 80036cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80036d2:	460b      	mov	r3, r1
 80036d4:	4313      	orrs	r3, r2
 80036d6:	d00c      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036dc:	3328      	adds	r3, #40	@ 0x28
 80036de:	2102      	movs	r1, #2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fd23 	bl	800412c <RCCEx_PLL3_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80036f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80036fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8003700:	2300      	movs	r3, #0
 8003702:	667b      	str	r3, [r7, #100]	@ 0x64
 8003704:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003708:	460b      	mov	r3, r1
 800370a:	4313      	orrs	r3, r2
 800370c:	d038      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800370e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003716:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800371a:	d018      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800371c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003720:	d811      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003726:	d014      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800372c:	d80b      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d011      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003736:	d106      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003738:	4bc3      	ldr	r3, [pc, #780]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373c:	4ac2      	ldr	r2, [pc, #776]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800373e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003744:	e008      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800374c:	e004      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800374e:	bf00      	nop
 8003750:	e002      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003752:	bf00      	nop
 8003754:	e000      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10b      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003760:	4bb9      	ldr	r3, [pc, #740]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003764:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003770:	4ab5      	ldr	r2, [pc, #724]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003772:	430b      	orrs	r3, r1
 8003774:	6553      	str	r3, [r2, #84]	@ 0x54
 8003776:	e003      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800377c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800378c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800378e:	2300      	movs	r3, #0
 8003790:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003792:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003796:	460b      	mov	r3, r1
 8003798:	4313      	orrs	r3, r2
 800379a:	d009      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800379c:	4baa      	ldr	r3, [pc, #680]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800379e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80037a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037aa:	4aa7      	ldr	r2, [pc, #668]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80037bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80037be:	2300      	movs	r3, #0
 80037c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80037c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80037c6:	460b      	mov	r3, r1
 80037c8:	4313      	orrs	r3, r2
 80037ca:	d00a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80037cc:	4b9e      	ldr	r3, [pc, #632]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80037d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80037dc:	4a9a      	ldr	r2, [pc, #616]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037de:	430b      	orrs	r3, r1
 80037e0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80037ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037f0:	2300      	movs	r3, #0
 80037f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037f4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80037f8:	460b      	mov	r3, r1
 80037fa:	4313      	orrs	r3, r2
 80037fc:	d009      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037fe:	4b92      	ldr	r3, [pc, #584]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003802:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800380c:	4a8e      	ldr	r2, [pc, #568]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800380e:	430b      	orrs	r3, r1
 8003810:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800381e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003820:	2300      	movs	r3, #0
 8003822:	647b      	str	r3, [r7, #68]	@ 0x44
 8003824:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003828:	460b      	mov	r3, r1
 800382a:	4313      	orrs	r3, r2
 800382c:	d00e      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800382e:	4b86      	ldr	r3, [pc, #536]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	4a85      	ldr	r2, [pc, #532]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003834:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003838:	6113      	str	r3, [r2, #16]
 800383a:	4b83      	ldr	r3, [pc, #524]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800383c:	6919      	ldr	r1, [r3, #16]
 800383e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003842:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003846:	4a80      	ldr	r2, [pc, #512]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003848:	430b      	orrs	r3, r1
 800384a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003858:	63bb      	str	r3, [r7, #56]	@ 0x38
 800385a:	2300      	movs	r3, #0
 800385c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800385e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003862:	460b      	mov	r3, r1
 8003864:	4313      	orrs	r3, r2
 8003866:	d009      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003868:	4b77      	ldr	r3, [pc, #476]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800386a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003876:	4a74      	ldr	r2, [pc, #464]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003878:	430b      	orrs	r3, r1
 800387a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800387c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003888:	633b      	str	r3, [r7, #48]	@ 0x30
 800388a:	2300      	movs	r3, #0
 800388c:	637b      	str	r3, [r7, #52]	@ 0x34
 800388e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003892:	460b      	mov	r3, r1
 8003894:	4313      	orrs	r3, r2
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003898:	4b6b      	ldr	r3, [pc, #428]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800389a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80038a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038a8:	4a67      	ldr	r2, [pc, #412]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038aa:	430b      	orrs	r3, r1
 80038ac:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80038ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	2100      	movs	r1, #0
 80038b8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80038c4:	460b      	mov	r3, r1
 80038c6:	4313      	orrs	r3, r2
 80038c8:	d011      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ce:	3308      	adds	r3, #8
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fb78 	bl	8003fc8 <RCCEx_PLL2_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80038de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80038ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f6:	2100      	movs	r1, #0
 80038f8:	6239      	str	r1, [r7, #32]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003900:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003904:	460b      	mov	r3, r1
 8003906:	4313      	orrs	r3, r2
 8003908:	d011      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800390a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390e:	3308      	adds	r3, #8
 8003910:	2101      	movs	r1, #1
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fb58 	bl	8003fc8 <RCCEx_PLL2_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800391e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800392a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	2100      	movs	r1, #0
 8003938:	61b9      	str	r1, [r7, #24]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	61fb      	str	r3, [r7, #28]
 8003940:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003944:	460b      	mov	r3, r1
 8003946:	4313      	orrs	r3, r2
 8003948:	d011      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394e:	3308      	adds	r3, #8
 8003950:	2102      	movs	r1, #2
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fb38 	bl	8003fc8 <RCCEx_PLL2_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800395e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800396a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800396e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003976:	2100      	movs	r1, #0
 8003978:	6139      	str	r1, [r7, #16]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003984:	460b      	mov	r3, r1
 8003986:	4313      	orrs	r3, r2
 8003988:	d011      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800398a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398e:	3328      	adds	r3, #40	@ 0x28
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fbca 	bl	800412c <RCCEx_PLL3_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800399e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80039ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	2100      	movs	r1, #0
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80039c4:	460b      	mov	r3, r1
 80039c6:	4313      	orrs	r3, r2
 80039c8:	d011      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ce:	3328      	adds	r3, #40	@ 0x28
 80039d0:	2101      	movs	r1, #1
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fbaa 	bl	800412c <RCCEx_PLL3_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80039de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	2100      	movs	r1, #0
 80039f8:	6039      	str	r1, [r7, #0]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	607b      	str	r3, [r7, #4]
 8003a00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a04:	460b      	mov	r3, r1
 8003a06:	4313      	orrs	r3, r2
 8003a08:	d011      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0e:	3328      	adds	r3, #40	@ 0x28
 8003a10:	2102      	movs	r1, #2
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fb8a 	bl	800412c <RCCEx_PLL3_Config>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003a2e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e000      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003a42:	46bd      	mov	sp, r7
 8003a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a48:	58024400 	.word	0x58024400

08003a4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003a50:	f7fe fd96 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4904      	ldr	r1, [pc, #16]	@ (8003a74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	58024400 	.word	0x58024400
 8003a74:	08005d5c 	.word	0x08005d5c

08003a78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b089      	sub	sp, #36	@ 0x24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a80:	4ba1      	ldr	r3, [pc, #644]	@ (8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003a8a:	4b9f      	ldr	r3, [pc, #636]	@ (8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8e:	0b1b      	lsrs	r3, r3, #12
 8003a90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003a96:	4b9c      	ldr	r3, [pc, #624]	@ (8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003aa2:	4b99      	ldr	r3, [pc, #612]	@ (8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa6:	08db      	lsrs	r3, r3, #3
 8003aa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8111 	beq.w	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	f000 8083 	beq.w	8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	f200 80a1 	bhi.w	8003c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d056      	beq.n	8003b90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003ae2:	e099      	b.n	8003c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ae4:	4b88      	ldr	r3, [pc, #544]	@ (8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d02d      	beq.n	8003b4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003af0:	4b85      	ldr	r3, [pc, #532]	@ (8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	08db      	lsrs	r3, r3, #3
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	4a84      	ldr	r2, [pc, #528]	@ (8003d0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
 8003b00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	ee07 3a90 	vmov	s15, r3
 8003b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	ee07 3a90 	vmov	s15, r3
 8003b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b1a:	4b7b      	ldr	r3, [pc, #492]	@ (8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003b4a:	e087      	b.n	8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003d14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b8e:	e065      	b.n	8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ba2:	4b59      	ldr	r3, [pc, #356]	@ (8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bb6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bd2:	e043      	b.n	8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bde:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003be6:	4b48      	ldr	r3, [pc, #288]	@ (8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bee:	ee07 3a90 	vmov	s15, r3
 8003bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bfa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c16:	e021      	b.n	8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2a:	4b37      	ldr	r3, [pc, #220]	@ (8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c60:	0a5b      	lsrs	r3, r3, #9
 8003c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c82:	ee17 2a90 	vmov	r2, s15
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8e:	0c1b      	lsrs	r3, r3, #16
 8003c90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c94:	ee07 3a90 	vmov	s15, r3
 8003c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ca0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ca4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cb0:	ee17 2a90 	vmov	r2, s15
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003cb8:	4b13      	ldr	r3, [pc, #76]	@ (8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cbc:	0e1b      	lsrs	r3, r3, #24
 8003cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cde:	ee17 2a90 	vmov	r2, s15
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003ce6:	e008      	b.n	8003cfa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	609a      	str	r2, [r3, #8]
}
 8003cfa:	bf00      	nop
 8003cfc:	3724      	adds	r7, #36	@ 0x24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	58024400 	.word	0x58024400
 8003d0c:	03d09000 	.word	0x03d09000
 8003d10:	46000000 	.word	0x46000000
 8003d14:	4c742400 	.word	0x4c742400
 8003d18:	4a742400 	.word	0x4a742400
 8003d1c:	4bbebc20 	.word	0x4bbebc20

08003d20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b089      	sub	sp, #36	@ 0x24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d28:	4ba1      	ldr	r3, [pc, #644]	@ (8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003d32:	4b9f      	ldr	r3, [pc, #636]	@ (8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d36:	0d1b      	lsrs	r3, r3, #20
 8003d38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d3e:	4b9c      	ldr	r3, [pc, #624]	@ (8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003d4a:	4b99      	ldr	r3, [pc, #612]	@ (8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4e:	08db      	lsrs	r3, r3, #3
 8003d50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8111 	beq.w	8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	f000 8083 	beq.w	8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	f200 80a1 	bhi.w	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d056      	beq.n	8003e38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003d8a:	e099      	b.n	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d8c:	4b88      	ldr	r3, [pc, #544]	@ (8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d02d      	beq.n	8003df4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d98:	4b85      	ldr	r3, [pc, #532]	@ (8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	08db      	lsrs	r3, r3, #3
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	4a84      	ldr	r2, [pc, #528]	@ (8003fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
 8003da8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	ee07 3a90 	vmov	s15, r3
 8003db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc2:	4b7b      	ldr	r3, [pc, #492]	@ (8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dd6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003df2:	e087      	b.n	8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	ee07 3a90 	vmov	s15, r3
 8003dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003fbc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e06:	4b6a      	ldr	r3, [pc, #424]	@ (8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e36:	e065      	b.n	8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	ee07 3a90 	vmov	s15, r3
 8003e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4a:	4b59      	ldr	r3, [pc, #356]	@ (8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e7a:	e043      	b.n	8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	ee07 3a90 	vmov	s15, r3
 8003e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e8e:	4b48      	ldr	r3, [pc, #288]	@ (8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e96:	ee07 3a90 	vmov	s15, r3
 8003e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ea2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ebe:	e021      	b.n	8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed2:	4b37      	ldr	r3, [pc, #220]	@ (8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eda:	ee07 3a90 	vmov	s15, r3
 8003ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ee6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003f04:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f08:	0a5b      	lsrs	r3, r3, #9
 8003f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f2a:	ee17 2a90 	vmov	r2, s15
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003f32:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	0c1b      	lsrs	r3, r3, #16
 8003f38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f3c:	ee07 3a90 	vmov	s15, r3
 8003f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f58:	ee17 2a90 	vmov	r2, s15
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003f60:	4b13      	ldr	r3, [pc, #76]	@ (8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f64:	0e1b      	lsrs	r3, r3, #24
 8003f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f86:	ee17 2a90 	vmov	r2, s15
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	609a      	str	r2, [r3, #8]
}
 8003fa2:	bf00      	nop
 8003fa4:	3724      	adds	r7, #36	@ 0x24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	58024400 	.word	0x58024400
 8003fb4:	03d09000 	.word	0x03d09000
 8003fb8:	46000000 	.word	0x46000000
 8003fbc:	4c742400 	.word	0x4c742400
 8003fc0:	4a742400 	.word	0x4a742400
 8003fc4:	4bbebc20 	.word	0x4bbebc20

08003fc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fd6:	4b53      	ldr	r3, [pc, #332]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d101      	bne.n	8003fe6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e099      	b.n	800411a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003fe6:	4b4f      	ldr	r3, [pc, #316]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a4e      	ldr	r2, [pc, #312]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 8003fec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff2:	f7fc ff85 	bl	8000f00 <HAL_GetTick>
 8003ff6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ff8:	e008      	b.n	800400c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ffa:	f7fc ff81 	bl	8000f00 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e086      	b.n	800411a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800400c:	4b45      	ldr	r3, [pc, #276]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f0      	bne.n	8003ffa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004018:	4b42      	ldr	r3, [pc, #264]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	031b      	lsls	r3, r3, #12
 8004026:	493f      	ldr	r1, [pc, #252]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 8004028:	4313      	orrs	r3, r2
 800402a:	628b      	str	r3, [r1, #40]	@ 0x28
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	3b01      	subs	r3, #1
 8004032:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	3b01      	subs	r3, #1
 800403c:	025b      	lsls	r3, r3, #9
 800403e:	b29b      	uxth	r3, r3
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	3b01      	subs	r3, #1
 8004048:	041b      	lsls	r3, r3, #16
 800404a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	3b01      	subs	r3, #1
 8004056:	061b      	lsls	r3, r3, #24
 8004058:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800405c:	4931      	ldr	r1, [pc, #196]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 800405e:	4313      	orrs	r3, r2
 8004060:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004062:	4b30      	ldr	r3, [pc, #192]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 8004064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004066:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	492d      	ldr	r1, [pc, #180]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 8004070:	4313      	orrs	r3, r2
 8004072:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004074:	4b2b      	ldr	r3, [pc, #172]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 8004076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004078:	f023 0220 	bic.w	r2, r3, #32
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	4928      	ldr	r1, [pc, #160]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 8004082:	4313      	orrs	r3, r2
 8004084:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004086:	4b27      	ldr	r3, [pc, #156]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 8004088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408a:	4a26      	ldr	r2, [pc, #152]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 800408c:	f023 0310 	bic.w	r3, r3, #16
 8004090:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004092:	4b24      	ldr	r3, [pc, #144]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 8004094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004096:	4b24      	ldr	r3, [pc, #144]	@ (8004128 <RCCEx_PLL2_Config+0x160>)
 8004098:	4013      	ands	r3, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	69d2      	ldr	r2, [r2, #28]
 800409e:	00d2      	lsls	r2, r2, #3
 80040a0:	4920      	ldr	r1, [pc, #128]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80040a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 80040a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 80040ac:	f043 0310 	orr.w	r3, r3, #16
 80040b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d106      	bne.n	80040c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80040b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 80040ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040bc:	4a19      	ldr	r2, [pc, #100]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 80040be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80040c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80040c4:	e00f      	b.n	80040e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d106      	bne.n	80040da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80040cc:	4b15      	ldr	r3, [pc, #84]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 80040ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d0:	4a14      	ldr	r2, [pc, #80]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 80040d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80040d8:	e005      	b.n	80040e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80040da:	4b12      	ldr	r3, [pc, #72]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 80040dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040de:	4a11      	ldr	r2, [pc, #68]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 80040e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80040e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80040e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 80040ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f2:	f7fc ff05 	bl	8000f00 <HAL_GetTick>
 80040f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040f8:	e008      	b.n	800410c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80040fa:	f7fc ff01 	bl	8000f00 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e006      	b.n	800411a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800410c:	4b05      	ldr	r3, [pc, #20]	@ (8004124 <RCCEx_PLL2_Config+0x15c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004118:	7bfb      	ldrb	r3, [r7, #15]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	58024400 	.word	0x58024400
 8004128:	ffff0007 	.word	0xffff0007

0800412c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800413a:	4b53      	ldr	r3, [pc, #332]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 800413c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b03      	cmp	r3, #3
 8004144:	d101      	bne.n	800414a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e099      	b.n	800427e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800414a:	4b4f      	ldr	r3, [pc, #316]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a4e      	ldr	r2, [pc, #312]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 8004150:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004156:	f7fc fed3 	bl	8000f00 <HAL_GetTick>
 800415a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800415c:	e008      	b.n	8004170 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800415e:	f7fc fecf 	bl	8000f00 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e086      	b.n	800427e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004170:	4b45      	ldr	r3, [pc, #276]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f0      	bne.n	800415e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800417c:	4b42      	ldr	r3, [pc, #264]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 800417e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004180:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	051b      	lsls	r3, r3, #20
 800418a:	493f      	ldr	r1, [pc, #252]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 800418c:	4313      	orrs	r3, r2
 800418e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	3b01      	subs	r3, #1
 8004196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	3b01      	subs	r3, #1
 80041a0:	025b      	lsls	r3, r3, #9
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	061b      	lsls	r3, r3, #24
 80041bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80041c0:	4931      	ldr	r1, [pc, #196]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80041c6:	4b30      	ldr	r3, [pc, #192]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	492d      	ldr	r1, [pc, #180]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80041d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 80041da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	4928      	ldr	r1, [pc, #160]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80041ea:	4b27      	ldr	r3, [pc, #156]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 80041ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ee:	4a26      	ldr	r2, [pc, #152]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 80041f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80041f6:	4b24      	ldr	r3, [pc, #144]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 80041f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041fa:	4b24      	ldr	r3, [pc, #144]	@ (800428c <RCCEx_PLL3_Config+0x160>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	69d2      	ldr	r2, [r2, #28]
 8004202:	00d2      	lsls	r2, r2, #3
 8004204:	4920      	ldr	r1, [pc, #128]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 8004206:	4313      	orrs	r3, r2
 8004208:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800420a:	4b1f      	ldr	r3, [pc, #124]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	4a1e      	ldr	r2, [pc, #120]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 8004210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004214:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d106      	bne.n	800422a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800421c:	4b1a      	ldr	r3, [pc, #104]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 800421e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004220:	4a19      	ldr	r2, [pc, #100]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 8004222:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004226:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004228:	e00f      	b.n	800424a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d106      	bne.n	800423e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004230:	4b15      	ldr	r3, [pc, #84]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 8004232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004234:	4a14      	ldr	r2, [pc, #80]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 8004236:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800423a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800423c:	e005      	b.n	800424a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800423e:	4b12      	ldr	r3, [pc, #72]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	4a11      	ldr	r2, [pc, #68]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 8004244:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004248:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800424a:	4b0f      	ldr	r3, [pc, #60]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a0e      	ldr	r2, [pc, #56]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 8004250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004256:	f7fc fe53 	bl	8000f00 <HAL_GetTick>
 800425a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800425c:	e008      	b.n	8004270 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800425e:	f7fc fe4f 	bl	8000f00 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e006      	b.n	800427e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004270:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <RCCEx_PLL3_Config+0x15c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	58024400 	.word	0x58024400
 800428c:	ffff0007 	.word	0xffff0007

08004290 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e10f      	b.n	80044c2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a87      	ldr	r2, [pc, #540]	@ (80044cc <HAL_SPI_Init+0x23c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00f      	beq.n	80042d2 <HAL_SPI_Init+0x42>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a86      	ldr	r2, [pc, #536]	@ (80044d0 <HAL_SPI_Init+0x240>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00a      	beq.n	80042d2 <HAL_SPI_Init+0x42>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a84      	ldr	r2, [pc, #528]	@ (80044d4 <HAL_SPI_Init+0x244>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d005      	beq.n	80042d2 <HAL_SPI_Init+0x42>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	2b0f      	cmp	r3, #15
 80042cc:	d901      	bls.n	80042d2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e0f7      	b.n	80044c2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fc12 	bl	8004afc <SPI_GetPacketSize>
 80042d8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a7b      	ldr	r2, [pc, #492]	@ (80044cc <HAL_SPI_Init+0x23c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00c      	beq.n	80042fe <HAL_SPI_Init+0x6e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a79      	ldr	r2, [pc, #484]	@ (80044d0 <HAL_SPI_Init+0x240>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d007      	beq.n	80042fe <HAL_SPI_Init+0x6e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a78      	ldr	r2, [pc, #480]	@ (80044d4 <HAL_SPI_Init+0x244>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d002      	beq.n	80042fe <HAL_SPI_Init+0x6e>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d811      	bhi.n	8004322 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004302:	4a72      	ldr	r2, [pc, #456]	@ (80044cc <HAL_SPI_Init+0x23c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d009      	beq.n	800431c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a70      	ldr	r2, [pc, #448]	@ (80044d0 <HAL_SPI_Init+0x240>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d004      	beq.n	800431c <HAL_SPI_Init+0x8c>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a6f      	ldr	r2, [pc, #444]	@ (80044d4 <HAL_SPI_Init+0x244>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d104      	bne.n	8004326 <HAL_SPI_Init+0x96>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b10      	cmp	r3, #16
 8004320:	d901      	bls.n	8004326 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e0cd      	b.n	80044c2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fc fb5e 	bl	80009fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004362:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800436c:	d119      	bne.n	80043a2 <HAL_SPI_Init+0x112>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004376:	d103      	bne.n	8004380 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10c      	bne.n	80043a2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800438c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004390:	d107      	bne.n	80043a2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00f      	beq.n	80043ce <HAL_SPI_Init+0x13e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2b06      	cmp	r3, #6
 80043b4:	d90b      	bls.n	80043ce <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	e007      	b.n	80043de <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69da      	ldr	r2, [r3, #28]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e6:	431a      	orrs	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f0:	ea42 0103 	orr.w	r1, r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800443e:	ea42 0103 	orr.w	r1, r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d113      	bne.n	800447e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004468:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800447c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0201 	bic.w	r2, r2, #1
 800448c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40013000 	.word	0x40013000
 80044d0:	40003800 	.word	0x40003800
 80044d4:	40003c00 	.word	0x40003c00

080044d8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	4613      	mov	r3, r2
 80044e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ec:	095b      	lsrs	r3, r3, #5
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3301      	adds	r3, #1
 80044f2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3330      	adds	r3, #48	@ 0x30
 80044fa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044fc:	f7fc fd00 	bl	8000f00 <HAL_GetTick>
 8004500:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d001      	beq.n	8004512 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800450e:	2302      	movs	r3, #2
 8004510:	e250      	b.n	80049b4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <HAL_SPI_Receive+0x46>
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e248      	b.n	80049b4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_SPI_Receive+0x58>
 800452c:	2302      	movs	r3, #2
 800452e:	e241      	b.n	80049b4 <HAL_SPI_Receive+0x4dc>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2204      	movs	r2, #4
 800453c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	88fa      	ldrh	r2, [r7, #6]
 8004552:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	88fa      	ldrh	r2, [r7, #6]
 800455a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004588:	d108      	bne.n	800459c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	e009      	b.n	80045b0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80045ae:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	4b95      	ldr	r3, [pc, #596]	@ (800480c <HAL_SPI_Receive+0x334>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	88f9      	ldrh	r1, [r7, #6]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	430b      	orrs	r3, r1
 80045c2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045dc:	d107      	bne.n	80045ee <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	2b0f      	cmp	r3, #15
 80045f4:	d96c      	bls.n	80046d0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80045f6:	e064      	b.n	80046c2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d114      	bne.n	8004638 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004616:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004618:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800461e:	1d1a      	adds	r2, r3, #4
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004636:	e044      	b.n	80046c2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800463e:	b29b      	uxth	r3, r3
 8004640:	8bfa      	ldrh	r2, [r7, #30]
 8004642:	429a      	cmp	r2, r3
 8004644:	d919      	bls.n	800467a <HAL_SPI_Receive+0x1a2>
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d014      	beq.n	800467a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004658:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800465a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004660:	1d1a      	adds	r2, r3, #4
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004678:	e023      	b.n	80046c2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800467a:	f7fc fc41 	bl	8000f00 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d803      	bhi.n	8004692 <HAL_SPI_Receive+0x1ba>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004690:	d102      	bne.n	8004698 <HAL_SPI_Receive+0x1c0>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d114      	bne.n	80046c2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f98f 	bl	80049bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e178      	b.n	80049b4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d194      	bne.n	80045f8 <HAL_SPI_Receive+0x120>
 80046ce:	e15e      	b.n	800498e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	2b07      	cmp	r3, #7
 80046d6:	f240 8153 	bls.w	8004980 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80046da:	e08f      	b.n	80047fc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d114      	bne.n	800471c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	8812      	ldrh	r2, [r2, #0]
 80046fa:	b292      	uxth	r2, r2
 80046fc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004702:	1c9a      	adds	r2, r3, #2
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800471a:	e06f      	b.n	80047fc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004722:	b29b      	uxth	r3, r3
 8004724:	8bfa      	ldrh	r2, [r7, #30]
 8004726:	429a      	cmp	r2, r3
 8004728:	d924      	bls.n	8004774 <HAL_SPI_Receive+0x29c>
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01f      	beq.n	8004774 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	8812      	ldrh	r2, [r2, #0]
 800473c:	b292      	uxth	r2, r2
 800473e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004744:	1c9a      	adds	r2, r3, #2
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	8812      	ldrh	r2, [r2, #0]
 8004752:	b292      	uxth	r2, r2
 8004754:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800475a:	1c9a      	adds	r2, r3, #2
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b02      	subs	r3, #2
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004772:	e043      	b.n	80047fc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	d119      	bne.n	80047b4 <HAL_SPI_Receive+0x2dc>
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d014      	beq.n	80047b4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	8812      	ldrh	r2, [r2, #0]
 8004792:	b292      	uxth	r2, r2
 8004794:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800479a:	1c9a      	adds	r2, r3, #2
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80047b2:	e023      	b.n	80047fc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047b4:	f7fc fba4 	bl	8000f00 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d803      	bhi.n	80047cc <HAL_SPI_Receive+0x2f4>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d102      	bne.n	80047d2 <HAL_SPI_Receive+0x2fa>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d114      	bne.n	80047fc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f8f2 	bl	80049bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e0db      	b.n	80049b4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	f47f af69 	bne.w	80046dc <HAL_SPI_Receive+0x204>
 800480a:	e0c0      	b.n	800498e <HAL_SPI_Receive+0x4b6>
 800480c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b01      	cmp	r3, #1
 8004824:	d117      	bne.n	8004856 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004832:	7812      	ldrb	r2, [r2, #0]
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004854:	e094      	b.n	8004980 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800485c:	b29b      	uxth	r3, r3
 800485e:	8bfa      	ldrh	r2, [r7, #30]
 8004860:	429a      	cmp	r2, r3
 8004862:	d946      	bls.n	80048f2 <HAL_SPI_Receive+0x41a>
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d041      	beq.n	80048f2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800487a:	7812      	ldrb	r2, [r2, #0]
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004896:	7812      	ldrb	r2, [r2, #0]
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048b2:	7812      	ldrb	r2, [r2, #0]
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048ce:	7812      	ldrb	r2, [r2, #0]
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b04      	subs	r3, #4
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80048f0:	e046      	b.n	8004980 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d81c      	bhi.n	8004938 <HAL_SPI_Receive+0x460>
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d017      	beq.n	8004938 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004914:	7812      	ldrb	r2, [r2, #0]
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004936:	e023      	b.n	8004980 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004938:	f7fc fae2 	bl	8000f00 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d803      	bhi.n	8004950 <HAL_SPI_Receive+0x478>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494e:	d102      	bne.n	8004956 <HAL_SPI_Receive+0x47e>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d114      	bne.n	8004980 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f830 	bl	80049bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004962:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e019      	b.n	80049b4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	f47f af41 	bne.w	8004810 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f814 	bl	80049bc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80049b2:	2300      	movs	r3, #0
  }
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3720      	adds	r7, #32
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0208 	orr.w	r2, r2, #8
 80049da:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0210 	orr.w	r2, r2, #16
 80049ea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0201 	bic.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6919      	ldr	r1, [r3, #16]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	4b3c      	ldr	r3, [pc, #240]	@ (8004af8 <SPI_CloseTransfer+0x13c>)
 8004a08:	400b      	ands	r3, r1
 8004a0a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004a1a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d014      	beq.n	8004a52 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00f      	beq.n	8004a52 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a38:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	699a      	ldr	r2, [r3, #24]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0220 	orr.w	r2, r2, #32
 8004a50:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d014      	beq.n	8004a88 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00f      	beq.n	8004a88 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a6e:	f043 0204 	orr.w	r2, r3, #4
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a86:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00f      	beq.n	8004ab2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a98:	f043 0201 	orr.w	r2, r3, #1
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699a      	ldr	r2, [r3, #24]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ab0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00f      	beq.n	8004adc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ac2:	f043 0208 	orr.w	r2, r3, #8
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ada:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8004aec:	bf00      	nop
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	fffffc90 	.word	0xfffffc90

08004afc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	3301      	adds	r3, #1
 8004b14:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	3307      	adds	r3, #7
 8004b1a:	08db      	lsrs	r3, r3, #3
 8004b1c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e042      	b.n	8004bca <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fc f8d8 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2224      	movs	r2, #36	@ 0x24
 8004b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0201 	bic.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fd91 	bl	80056a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f826 	bl	8004bd4 <UART_SetConfig>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e01b      	b.n	8004bca <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ba0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bb0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0201 	orr.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fe10 	bl	80057e8 <UART_CheckIdleState>
 8004bc8:	4603      	mov	r3, r0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd8:	b092      	sub	sp, #72	@ 0x48
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	431a      	orrs	r2, r3
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4bbe      	ldr	r3, [pc, #760]	@ (8004efc <UART_SetConfig+0x328>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4ab3      	ldr	r2, [pc, #716]	@ (8004f00 <UART_SetConfig+0x32c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d004      	beq.n	8004c40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	4baf      	ldr	r3, [pc, #700]	@ (8004f04 <UART_SetConfig+0x330>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5a:	f023 010f 	bic.w	r1, r3, #15
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4aa6      	ldr	r2, [pc, #664]	@ (8004f08 <UART_SetConfig+0x334>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d177      	bne.n	8004d64 <UART_SetConfig+0x190>
 8004c74:	4ba5      	ldr	r3, [pc, #660]	@ (8004f0c <UART_SetConfig+0x338>)
 8004c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c7c:	2b28      	cmp	r3, #40	@ 0x28
 8004c7e:	d86d      	bhi.n	8004d5c <UART_SetConfig+0x188>
 8004c80:	a201      	add	r2, pc, #4	@ (adr r2, 8004c88 <UART_SetConfig+0xb4>)
 8004c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c86:	bf00      	nop
 8004c88:	08004d2d 	.word	0x08004d2d
 8004c8c:	08004d5d 	.word	0x08004d5d
 8004c90:	08004d5d 	.word	0x08004d5d
 8004c94:	08004d5d 	.word	0x08004d5d
 8004c98:	08004d5d 	.word	0x08004d5d
 8004c9c:	08004d5d 	.word	0x08004d5d
 8004ca0:	08004d5d 	.word	0x08004d5d
 8004ca4:	08004d5d 	.word	0x08004d5d
 8004ca8:	08004d35 	.word	0x08004d35
 8004cac:	08004d5d 	.word	0x08004d5d
 8004cb0:	08004d5d 	.word	0x08004d5d
 8004cb4:	08004d5d 	.word	0x08004d5d
 8004cb8:	08004d5d 	.word	0x08004d5d
 8004cbc:	08004d5d 	.word	0x08004d5d
 8004cc0:	08004d5d 	.word	0x08004d5d
 8004cc4:	08004d5d 	.word	0x08004d5d
 8004cc8:	08004d3d 	.word	0x08004d3d
 8004ccc:	08004d5d 	.word	0x08004d5d
 8004cd0:	08004d5d 	.word	0x08004d5d
 8004cd4:	08004d5d 	.word	0x08004d5d
 8004cd8:	08004d5d 	.word	0x08004d5d
 8004cdc:	08004d5d 	.word	0x08004d5d
 8004ce0:	08004d5d 	.word	0x08004d5d
 8004ce4:	08004d5d 	.word	0x08004d5d
 8004ce8:	08004d45 	.word	0x08004d45
 8004cec:	08004d5d 	.word	0x08004d5d
 8004cf0:	08004d5d 	.word	0x08004d5d
 8004cf4:	08004d5d 	.word	0x08004d5d
 8004cf8:	08004d5d 	.word	0x08004d5d
 8004cfc:	08004d5d 	.word	0x08004d5d
 8004d00:	08004d5d 	.word	0x08004d5d
 8004d04:	08004d5d 	.word	0x08004d5d
 8004d08:	08004d4d 	.word	0x08004d4d
 8004d0c:	08004d5d 	.word	0x08004d5d
 8004d10:	08004d5d 	.word	0x08004d5d
 8004d14:	08004d5d 	.word	0x08004d5d
 8004d18:	08004d5d 	.word	0x08004d5d
 8004d1c:	08004d5d 	.word	0x08004d5d
 8004d20:	08004d5d 	.word	0x08004d5d
 8004d24:	08004d5d 	.word	0x08004d5d
 8004d28:	08004d55 	.word	0x08004d55
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d32:	e222      	b.n	800517a <UART_SetConfig+0x5a6>
 8004d34:	2304      	movs	r3, #4
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d3a:	e21e      	b.n	800517a <UART_SetConfig+0x5a6>
 8004d3c:	2308      	movs	r3, #8
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d42:	e21a      	b.n	800517a <UART_SetConfig+0x5a6>
 8004d44:	2310      	movs	r3, #16
 8004d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d4a:	e216      	b.n	800517a <UART_SetConfig+0x5a6>
 8004d4c:	2320      	movs	r3, #32
 8004d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d52:	e212      	b.n	800517a <UART_SetConfig+0x5a6>
 8004d54:	2340      	movs	r3, #64	@ 0x40
 8004d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d5a:	e20e      	b.n	800517a <UART_SetConfig+0x5a6>
 8004d5c:	2380      	movs	r3, #128	@ 0x80
 8004d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d62:	e20a      	b.n	800517a <UART_SetConfig+0x5a6>
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a69      	ldr	r2, [pc, #420]	@ (8004f10 <UART_SetConfig+0x33c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d130      	bne.n	8004dd0 <UART_SetConfig+0x1fc>
 8004d6e:	4b67      	ldr	r3, [pc, #412]	@ (8004f0c <UART_SetConfig+0x338>)
 8004d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	2b05      	cmp	r3, #5
 8004d78:	d826      	bhi.n	8004dc8 <UART_SetConfig+0x1f4>
 8004d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d80 <UART_SetConfig+0x1ac>)
 8004d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d80:	08004d99 	.word	0x08004d99
 8004d84:	08004da1 	.word	0x08004da1
 8004d88:	08004da9 	.word	0x08004da9
 8004d8c:	08004db1 	.word	0x08004db1
 8004d90:	08004db9 	.word	0x08004db9
 8004d94:	08004dc1 	.word	0x08004dc1
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d9e:	e1ec      	b.n	800517a <UART_SetConfig+0x5a6>
 8004da0:	2304      	movs	r3, #4
 8004da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004da6:	e1e8      	b.n	800517a <UART_SetConfig+0x5a6>
 8004da8:	2308      	movs	r3, #8
 8004daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dae:	e1e4      	b.n	800517a <UART_SetConfig+0x5a6>
 8004db0:	2310      	movs	r3, #16
 8004db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004db6:	e1e0      	b.n	800517a <UART_SetConfig+0x5a6>
 8004db8:	2320      	movs	r3, #32
 8004dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dbe:	e1dc      	b.n	800517a <UART_SetConfig+0x5a6>
 8004dc0:	2340      	movs	r3, #64	@ 0x40
 8004dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dc6:	e1d8      	b.n	800517a <UART_SetConfig+0x5a6>
 8004dc8:	2380      	movs	r3, #128	@ 0x80
 8004dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dce:	e1d4      	b.n	800517a <UART_SetConfig+0x5a6>
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a4f      	ldr	r2, [pc, #316]	@ (8004f14 <UART_SetConfig+0x340>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d130      	bne.n	8004e3c <UART_SetConfig+0x268>
 8004dda:	4b4c      	ldr	r3, [pc, #304]	@ (8004f0c <UART_SetConfig+0x338>)
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	2b05      	cmp	r3, #5
 8004de4:	d826      	bhi.n	8004e34 <UART_SetConfig+0x260>
 8004de6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dec <UART_SetConfig+0x218>)
 8004de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dec:	08004e05 	.word	0x08004e05
 8004df0:	08004e0d 	.word	0x08004e0d
 8004df4:	08004e15 	.word	0x08004e15
 8004df8:	08004e1d 	.word	0x08004e1d
 8004dfc:	08004e25 	.word	0x08004e25
 8004e00:	08004e2d 	.word	0x08004e2d
 8004e04:	2300      	movs	r3, #0
 8004e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e0a:	e1b6      	b.n	800517a <UART_SetConfig+0x5a6>
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e12:	e1b2      	b.n	800517a <UART_SetConfig+0x5a6>
 8004e14:	2308      	movs	r3, #8
 8004e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e1a:	e1ae      	b.n	800517a <UART_SetConfig+0x5a6>
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e22:	e1aa      	b.n	800517a <UART_SetConfig+0x5a6>
 8004e24:	2320      	movs	r3, #32
 8004e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e2a:	e1a6      	b.n	800517a <UART_SetConfig+0x5a6>
 8004e2c:	2340      	movs	r3, #64	@ 0x40
 8004e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e32:	e1a2      	b.n	800517a <UART_SetConfig+0x5a6>
 8004e34:	2380      	movs	r3, #128	@ 0x80
 8004e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e3a:	e19e      	b.n	800517a <UART_SetConfig+0x5a6>
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a35      	ldr	r2, [pc, #212]	@ (8004f18 <UART_SetConfig+0x344>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d130      	bne.n	8004ea8 <UART_SetConfig+0x2d4>
 8004e46:	4b31      	ldr	r3, [pc, #196]	@ (8004f0c <UART_SetConfig+0x338>)
 8004e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	2b05      	cmp	r3, #5
 8004e50:	d826      	bhi.n	8004ea0 <UART_SetConfig+0x2cc>
 8004e52:	a201      	add	r2, pc, #4	@ (adr r2, 8004e58 <UART_SetConfig+0x284>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004e71 	.word	0x08004e71
 8004e5c:	08004e79 	.word	0x08004e79
 8004e60:	08004e81 	.word	0x08004e81
 8004e64:	08004e89 	.word	0x08004e89
 8004e68:	08004e91 	.word	0x08004e91
 8004e6c:	08004e99 	.word	0x08004e99
 8004e70:	2300      	movs	r3, #0
 8004e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e76:	e180      	b.n	800517a <UART_SetConfig+0x5a6>
 8004e78:	2304      	movs	r3, #4
 8004e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e7e:	e17c      	b.n	800517a <UART_SetConfig+0x5a6>
 8004e80:	2308      	movs	r3, #8
 8004e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e86:	e178      	b.n	800517a <UART_SetConfig+0x5a6>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e8e:	e174      	b.n	800517a <UART_SetConfig+0x5a6>
 8004e90:	2320      	movs	r3, #32
 8004e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e96:	e170      	b.n	800517a <UART_SetConfig+0x5a6>
 8004e98:	2340      	movs	r3, #64	@ 0x40
 8004e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e9e:	e16c      	b.n	800517a <UART_SetConfig+0x5a6>
 8004ea0:	2380      	movs	r3, #128	@ 0x80
 8004ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ea6:	e168      	b.n	800517a <UART_SetConfig+0x5a6>
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1b      	ldr	r2, [pc, #108]	@ (8004f1c <UART_SetConfig+0x348>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d142      	bne.n	8004f38 <UART_SetConfig+0x364>
 8004eb2:	4b16      	ldr	r3, [pc, #88]	@ (8004f0c <UART_SetConfig+0x338>)
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	2b05      	cmp	r3, #5
 8004ebc:	d838      	bhi.n	8004f30 <UART_SetConfig+0x35c>
 8004ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec4 <UART_SetConfig+0x2f0>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004edd 	.word	0x08004edd
 8004ec8:	08004ee5 	.word	0x08004ee5
 8004ecc:	08004eed 	.word	0x08004eed
 8004ed0:	08004ef5 	.word	0x08004ef5
 8004ed4:	08004f21 	.word	0x08004f21
 8004ed8:	08004f29 	.word	0x08004f29
 8004edc:	2300      	movs	r3, #0
 8004ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ee2:	e14a      	b.n	800517a <UART_SetConfig+0x5a6>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eea:	e146      	b.n	800517a <UART_SetConfig+0x5a6>
 8004eec:	2308      	movs	r3, #8
 8004eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ef2:	e142      	b.n	800517a <UART_SetConfig+0x5a6>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004efa:	e13e      	b.n	800517a <UART_SetConfig+0x5a6>
 8004efc:	cfff69f3 	.word	0xcfff69f3
 8004f00:	58000c00 	.word	0x58000c00
 8004f04:	11fff4ff 	.word	0x11fff4ff
 8004f08:	40011000 	.word	0x40011000
 8004f0c:	58024400 	.word	0x58024400
 8004f10:	40004400 	.word	0x40004400
 8004f14:	40004800 	.word	0x40004800
 8004f18:	40004c00 	.word	0x40004c00
 8004f1c:	40005000 	.word	0x40005000
 8004f20:	2320      	movs	r3, #32
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f26:	e128      	b.n	800517a <UART_SetConfig+0x5a6>
 8004f28:	2340      	movs	r3, #64	@ 0x40
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f2e:	e124      	b.n	800517a <UART_SetConfig+0x5a6>
 8004f30:	2380      	movs	r3, #128	@ 0x80
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f36:	e120      	b.n	800517a <UART_SetConfig+0x5a6>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4acb      	ldr	r2, [pc, #812]	@ (800526c <UART_SetConfig+0x698>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d176      	bne.n	8005030 <UART_SetConfig+0x45c>
 8004f42:	4bcb      	ldr	r3, [pc, #812]	@ (8005270 <UART_SetConfig+0x69c>)
 8004f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f4a:	2b28      	cmp	r3, #40	@ 0x28
 8004f4c:	d86c      	bhi.n	8005028 <UART_SetConfig+0x454>
 8004f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f54 <UART_SetConfig+0x380>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	08004ff9 	.word	0x08004ff9
 8004f58:	08005029 	.word	0x08005029
 8004f5c:	08005029 	.word	0x08005029
 8004f60:	08005029 	.word	0x08005029
 8004f64:	08005029 	.word	0x08005029
 8004f68:	08005029 	.word	0x08005029
 8004f6c:	08005029 	.word	0x08005029
 8004f70:	08005029 	.word	0x08005029
 8004f74:	08005001 	.word	0x08005001
 8004f78:	08005029 	.word	0x08005029
 8004f7c:	08005029 	.word	0x08005029
 8004f80:	08005029 	.word	0x08005029
 8004f84:	08005029 	.word	0x08005029
 8004f88:	08005029 	.word	0x08005029
 8004f8c:	08005029 	.word	0x08005029
 8004f90:	08005029 	.word	0x08005029
 8004f94:	08005009 	.word	0x08005009
 8004f98:	08005029 	.word	0x08005029
 8004f9c:	08005029 	.word	0x08005029
 8004fa0:	08005029 	.word	0x08005029
 8004fa4:	08005029 	.word	0x08005029
 8004fa8:	08005029 	.word	0x08005029
 8004fac:	08005029 	.word	0x08005029
 8004fb0:	08005029 	.word	0x08005029
 8004fb4:	08005011 	.word	0x08005011
 8004fb8:	08005029 	.word	0x08005029
 8004fbc:	08005029 	.word	0x08005029
 8004fc0:	08005029 	.word	0x08005029
 8004fc4:	08005029 	.word	0x08005029
 8004fc8:	08005029 	.word	0x08005029
 8004fcc:	08005029 	.word	0x08005029
 8004fd0:	08005029 	.word	0x08005029
 8004fd4:	08005019 	.word	0x08005019
 8004fd8:	08005029 	.word	0x08005029
 8004fdc:	08005029 	.word	0x08005029
 8004fe0:	08005029 	.word	0x08005029
 8004fe4:	08005029 	.word	0x08005029
 8004fe8:	08005029 	.word	0x08005029
 8004fec:	08005029 	.word	0x08005029
 8004ff0:	08005029 	.word	0x08005029
 8004ff4:	08005021 	.word	0x08005021
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffe:	e0bc      	b.n	800517a <UART_SetConfig+0x5a6>
 8005000:	2304      	movs	r3, #4
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005006:	e0b8      	b.n	800517a <UART_SetConfig+0x5a6>
 8005008:	2308      	movs	r3, #8
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800500e:	e0b4      	b.n	800517a <UART_SetConfig+0x5a6>
 8005010:	2310      	movs	r3, #16
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005016:	e0b0      	b.n	800517a <UART_SetConfig+0x5a6>
 8005018:	2320      	movs	r3, #32
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800501e:	e0ac      	b.n	800517a <UART_SetConfig+0x5a6>
 8005020:	2340      	movs	r3, #64	@ 0x40
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005026:	e0a8      	b.n	800517a <UART_SetConfig+0x5a6>
 8005028:	2380      	movs	r3, #128	@ 0x80
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800502e:	e0a4      	b.n	800517a <UART_SetConfig+0x5a6>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a8f      	ldr	r2, [pc, #572]	@ (8005274 <UART_SetConfig+0x6a0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d130      	bne.n	800509c <UART_SetConfig+0x4c8>
 800503a:	4b8d      	ldr	r3, [pc, #564]	@ (8005270 <UART_SetConfig+0x69c>)
 800503c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	2b05      	cmp	r3, #5
 8005044:	d826      	bhi.n	8005094 <UART_SetConfig+0x4c0>
 8005046:	a201      	add	r2, pc, #4	@ (adr r2, 800504c <UART_SetConfig+0x478>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	08005065 	.word	0x08005065
 8005050:	0800506d 	.word	0x0800506d
 8005054:	08005075 	.word	0x08005075
 8005058:	0800507d 	.word	0x0800507d
 800505c:	08005085 	.word	0x08005085
 8005060:	0800508d 	.word	0x0800508d
 8005064:	2300      	movs	r3, #0
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506a:	e086      	b.n	800517a <UART_SetConfig+0x5a6>
 800506c:	2304      	movs	r3, #4
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005072:	e082      	b.n	800517a <UART_SetConfig+0x5a6>
 8005074:	2308      	movs	r3, #8
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507a:	e07e      	b.n	800517a <UART_SetConfig+0x5a6>
 800507c:	2310      	movs	r3, #16
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005082:	e07a      	b.n	800517a <UART_SetConfig+0x5a6>
 8005084:	2320      	movs	r3, #32
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800508a:	e076      	b.n	800517a <UART_SetConfig+0x5a6>
 800508c:	2340      	movs	r3, #64	@ 0x40
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005092:	e072      	b.n	800517a <UART_SetConfig+0x5a6>
 8005094:	2380      	movs	r3, #128	@ 0x80
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800509a:	e06e      	b.n	800517a <UART_SetConfig+0x5a6>
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a75      	ldr	r2, [pc, #468]	@ (8005278 <UART_SetConfig+0x6a4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d130      	bne.n	8005108 <UART_SetConfig+0x534>
 80050a6:	4b72      	ldr	r3, [pc, #456]	@ (8005270 <UART_SetConfig+0x69c>)
 80050a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	2b05      	cmp	r3, #5
 80050b0:	d826      	bhi.n	8005100 <UART_SetConfig+0x52c>
 80050b2:	a201      	add	r2, pc, #4	@ (adr r2, 80050b8 <UART_SetConfig+0x4e4>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	080050d1 	.word	0x080050d1
 80050bc:	080050d9 	.word	0x080050d9
 80050c0:	080050e1 	.word	0x080050e1
 80050c4:	080050e9 	.word	0x080050e9
 80050c8:	080050f1 	.word	0x080050f1
 80050cc:	080050f9 	.word	0x080050f9
 80050d0:	2300      	movs	r3, #0
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d6:	e050      	b.n	800517a <UART_SetConfig+0x5a6>
 80050d8:	2304      	movs	r3, #4
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050de:	e04c      	b.n	800517a <UART_SetConfig+0x5a6>
 80050e0:	2308      	movs	r3, #8
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e6:	e048      	b.n	800517a <UART_SetConfig+0x5a6>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ee:	e044      	b.n	800517a <UART_SetConfig+0x5a6>
 80050f0:	2320      	movs	r3, #32
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050f6:	e040      	b.n	800517a <UART_SetConfig+0x5a6>
 80050f8:	2340      	movs	r3, #64	@ 0x40
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fe:	e03c      	b.n	800517a <UART_SetConfig+0x5a6>
 8005100:	2380      	movs	r3, #128	@ 0x80
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005106:	e038      	b.n	800517a <UART_SetConfig+0x5a6>
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a5b      	ldr	r2, [pc, #364]	@ (800527c <UART_SetConfig+0x6a8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d130      	bne.n	8005174 <UART_SetConfig+0x5a0>
 8005112:	4b57      	ldr	r3, [pc, #348]	@ (8005270 <UART_SetConfig+0x69c>)
 8005114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	2b05      	cmp	r3, #5
 800511c:	d826      	bhi.n	800516c <UART_SetConfig+0x598>
 800511e:	a201      	add	r2, pc, #4	@ (adr r2, 8005124 <UART_SetConfig+0x550>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	0800513d 	.word	0x0800513d
 8005128:	08005145 	.word	0x08005145
 800512c:	0800514d 	.word	0x0800514d
 8005130:	08005155 	.word	0x08005155
 8005134:	0800515d 	.word	0x0800515d
 8005138:	08005165 	.word	0x08005165
 800513c:	2302      	movs	r3, #2
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005142:	e01a      	b.n	800517a <UART_SetConfig+0x5a6>
 8005144:	2304      	movs	r3, #4
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514a:	e016      	b.n	800517a <UART_SetConfig+0x5a6>
 800514c:	2308      	movs	r3, #8
 800514e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005152:	e012      	b.n	800517a <UART_SetConfig+0x5a6>
 8005154:	2310      	movs	r3, #16
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800515a:	e00e      	b.n	800517a <UART_SetConfig+0x5a6>
 800515c:	2320      	movs	r3, #32
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005162:	e00a      	b.n	800517a <UART_SetConfig+0x5a6>
 8005164:	2340      	movs	r3, #64	@ 0x40
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516a:	e006      	b.n	800517a <UART_SetConfig+0x5a6>
 800516c:	2380      	movs	r3, #128	@ 0x80
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005172:	e002      	b.n	800517a <UART_SetConfig+0x5a6>
 8005174:	2380      	movs	r3, #128	@ 0x80
 8005176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a3f      	ldr	r2, [pc, #252]	@ (800527c <UART_SetConfig+0x6a8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	f040 80f8 	bne.w	8005376 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005186:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800518a:	2b20      	cmp	r3, #32
 800518c:	dc46      	bgt.n	800521c <UART_SetConfig+0x648>
 800518e:	2b02      	cmp	r3, #2
 8005190:	f2c0 8082 	blt.w	8005298 <UART_SetConfig+0x6c4>
 8005194:	3b02      	subs	r3, #2
 8005196:	2b1e      	cmp	r3, #30
 8005198:	d87e      	bhi.n	8005298 <UART_SetConfig+0x6c4>
 800519a:	a201      	add	r2, pc, #4	@ (adr r2, 80051a0 <UART_SetConfig+0x5cc>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	08005223 	.word	0x08005223
 80051a4:	08005299 	.word	0x08005299
 80051a8:	0800522b 	.word	0x0800522b
 80051ac:	08005299 	.word	0x08005299
 80051b0:	08005299 	.word	0x08005299
 80051b4:	08005299 	.word	0x08005299
 80051b8:	0800523b 	.word	0x0800523b
 80051bc:	08005299 	.word	0x08005299
 80051c0:	08005299 	.word	0x08005299
 80051c4:	08005299 	.word	0x08005299
 80051c8:	08005299 	.word	0x08005299
 80051cc:	08005299 	.word	0x08005299
 80051d0:	08005299 	.word	0x08005299
 80051d4:	08005299 	.word	0x08005299
 80051d8:	0800524b 	.word	0x0800524b
 80051dc:	08005299 	.word	0x08005299
 80051e0:	08005299 	.word	0x08005299
 80051e4:	08005299 	.word	0x08005299
 80051e8:	08005299 	.word	0x08005299
 80051ec:	08005299 	.word	0x08005299
 80051f0:	08005299 	.word	0x08005299
 80051f4:	08005299 	.word	0x08005299
 80051f8:	08005299 	.word	0x08005299
 80051fc:	08005299 	.word	0x08005299
 8005200:	08005299 	.word	0x08005299
 8005204:	08005299 	.word	0x08005299
 8005208:	08005299 	.word	0x08005299
 800520c:	08005299 	.word	0x08005299
 8005210:	08005299 	.word	0x08005299
 8005214:	08005299 	.word	0x08005299
 8005218:	0800528b 	.word	0x0800528b
 800521c:	2b40      	cmp	r3, #64	@ 0x40
 800521e:	d037      	beq.n	8005290 <UART_SetConfig+0x6bc>
 8005220:	e03a      	b.n	8005298 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005222:	f7fe fc13 	bl	8003a4c <HAL_RCCEx_GetD3PCLK1Freq>
 8005226:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005228:	e03c      	b.n	80052a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800522a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800522e:	4618      	mov	r0, r3
 8005230:	f7fe fc22 	bl	8003a78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005238:	e034      	b.n	80052a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800523a:	f107 0318 	add.w	r3, r7, #24
 800523e:	4618      	mov	r0, r3
 8005240:	f7fe fd6e 	bl	8003d20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005248:	e02c      	b.n	80052a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800524a:	4b09      	ldr	r3, [pc, #36]	@ (8005270 <UART_SetConfig+0x69c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b00      	cmp	r3, #0
 8005254:	d016      	beq.n	8005284 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005256:	4b06      	ldr	r3, [pc, #24]	@ (8005270 <UART_SetConfig+0x69c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	08db      	lsrs	r3, r3, #3
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	4a07      	ldr	r2, [pc, #28]	@ (8005280 <UART_SetConfig+0x6ac>)
 8005262:	fa22 f303 	lsr.w	r3, r2, r3
 8005266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005268:	e01c      	b.n	80052a4 <UART_SetConfig+0x6d0>
 800526a:	bf00      	nop
 800526c:	40011400 	.word	0x40011400
 8005270:	58024400 	.word	0x58024400
 8005274:	40007800 	.word	0x40007800
 8005278:	40007c00 	.word	0x40007c00
 800527c:	58000c00 	.word	0x58000c00
 8005280:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005284:	4b9d      	ldr	r3, [pc, #628]	@ (80054fc <UART_SetConfig+0x928>)
 8005286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005288:	e00c      	b.n	80052a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800528a:	4b9d      	ldr	r3, [pc, #628]	@ (8005500 <UART_SetConfig+0x92c>)
 800528c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800528e:	e009      	b.n	80052a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005290:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005296:	e005      	b.n	80052a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80052a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 81de 	beq.w	8005668 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	4a94      	ldr	r2, [pc, #592]	@ (8005504 <UART_SetConfig+0x930>)
 80052b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052b6:	461a      	mov	r2, r3
 80052b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80052be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	4413      	add	r3, r2
 80052ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d305      	bcc.n	80052dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052d8:	429a      	cmp	r2, r3
 80052da:	d903      	bls.n	80052e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80052e2:	e1c1      	b.n	8005668 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052e6:	2200      	movs	r2, #0
 80052e8:	60bb      	str	r3, [r7, #8]
 80052ea:	60fa      	str	r2, [r7, #12]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f0:	4a84      	ldr	r2, [pc, #528]	@ (8005504 <UART_SetConfig+0x930>)
 80052f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	2200      	movs	r2, #0
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	607a      	str	r2, [r7, #4]
 80052fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005302:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005306:	f7fa ffe7 	bl	80002d8 <__aeabi_uldivmod>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4610      	mov	r0, r2
 8005310:	4619      	mov	r1, r3
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	020b      	lsls	r3, r1, #8
 800531c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005320:	0202      	lsls	r2, r0, #8
 8005322:	6979      	ldr	r1, [r7, #20]
 8005324:	6849      	ldr	r1, [r1, #4]
 8005326:	0849      	lsrs	r1, r1, #1
 8005328:	2000      	movs	r0, #0
 800532a:	460c      	mov	r4, r1
 800532c:	4605      	mov	r5, r0
 800532e:	eb12 0804 	adds.w	r8, r2, r4
 8005332:	eb43 0905 	adc.w	r9, r3, r5
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	469a      	mov	sl, r3
 800533e:	4693      	mov	fp, r2
 8005340:	4652      	mov	r2, sl
 8005342:	465b      	mov	r3, fp
 8005344:	4640      	mov	r0, r8
 8005346:	4649      	mov	r1, r9
 8005348:	f7fa ffc6 	bl	80002d8 <__aeabi_uldivmod>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4613      	mov	r3, r2
 8005352:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800535a:	d308      	bcc.n	800536e <UART_SetConfig+0x79a>
 800535c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005362:	d204      	bcs.n	800536e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800536a:	60da      	str	r2, [r3, #12]
 800536c:	e17c      	b.n	8005668 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005374:	e178      	b.n	8005668 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800537e:	f040 80c5 	bne.w	800550c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005382:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005386:	2b20      	cmp	r3, #32
 8005388:	dc48      	bgt.n	800541c <UART_SetConfig+0x848>
 800538a:	2b00      	cmp	r3, #0
 800538c:	db7b      	blt.n	8005486 <UART_SetConfig+0x8b2>
 800538e:	2b20      	cmp	r3, #32
 8005390:	d879      	bhi.n	8005486 <UART_SetConfig+0x8b2>
 8005392:	a201      	add	r2, pc, #4	@ (adr r2, 8005398 <UART_SetConfig+0x7c4>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	08005423 	.word	0x08005423
 800539c:	0800542b 	.word	0x0800542b
 80053a0:	08005487 	.word	0x08005487
 80053a4:	08005487 	.word	0x08005487
 80053a8:	08005433 	.word	0x08005433
 80053ac:	08005487 	.word	0x08005487
 80053b0:	08005487 	.word	0x08005487
 80053b4:	08005487 	.word	0x08005487
 80053b8:	08005443 	.word	0x08005443
 80053bc:	08005487 	.word	0x08005487
 80053c0:	08005487 	.word	0x08005487
 80053c4:	08005487 	.word	0x08005487
 80053c8:	08005487 	.word	0x08005487
 80053cc:	08005487 	.word	0x08005487
 80053d0:	08005487 	.word	0x08005487
 80053d4:	08005487 	.word	0x08005487
 80053d8:	08005453 	.word	0x08005453
 80053dc:	08005487 	.word	0x08005487
 80053e0:	08005487 	.word	0x08005487
 80053e4:	08005487 	.word	0x08005487
 80053e8:	08005487 	.word	0x08005487
 80053ec:	08005487 	.word	0x08005487
 80053f0:	08005487 	.word	0x08005487
 80053f4:	08005487 	.word	0x08005487
 80053f8:	08005487 	.word	0x08005487
 80053fc:	08005487 	.word	0x08005487
 8005400:	08005487 	.word	0x08005487
 8005404:	08005487 	.word	0x08005487
 8005408:	08005487 	.word	0x08005487
 800540c:	08005487 	.word	0x08005487
 8005410:	08005487 	.word	0x08005487
 8005414:	08005487 	.word	0x08005487
 8005418:	08005479 	.word	0x08005479
 800541c:	2b40      	cmp	r3, #64	@ 0x40
 800541e:	d02e      	beq.n	800547e <UART_SetConfig+0x8aa>
 8005420:	e031      	b.n	8005486 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005422:	f7fd f8dd 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 8005426:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005428:	e033      	b.n	8005492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800542a:	f7fd f8ef 	bl	800260c <HAL_RCC_GetPCLK2Freq>
 800542e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005430:	e02f      	b.n	8005492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005436:	4618      	mov	r0, r3
 8005438:	f7fe fb1e 	bl	8003a78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005440:	e027      	b.n	8005492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005442:	f107 0318 	add.w	r3, r7, #24
 8005446:	4618      	mov	r0, r3
 8005448:	f7fe fc6a 	bl	8003d20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005450:	e01f      	b.n	8005492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005452:	4b2d      	ldr	r3, [pc, #180]	@ (8005508 <UART_SetConfig+0x934>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	d009      	beq.n	8005472 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800545e:	4b2a      	ldr	r3, [pc, #168]	@ (8005508 <UART_SetConfig+0x934>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	08db      	lsrs	r3, r3, #3
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	4a24      	ldr	r2, [pc, #144]	@ (80054fc <UART_SetConfig+0x928>)
 800546a:	fa22 f303 	lsr.w	r3, r2, r3
 800546e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005470:	e00f      	b.n	8005492 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005472:	4b22      	ldr	r3, [pc, #136]	@ (80054fc <UART_SetConfig+0x928>)
 8005474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005476:	e00c      	b.n	8005492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005478:	4b21      	ldr	r3, [pc, #132]	@ (8005500 <UART_SetConfig+0x92c>)
 800547a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800547c:	e009      	b.n	8005492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800547e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005484:	e005      	b.n	8005492 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 80e7 	beq.w	8005668 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549e:	4a19      	ldr	r2, [pc, #100]	@ (8005504 <UART_SetConfig+0x930>)
 80054a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054a4:	461a      	mov	r2, r3
 80054a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80054ac:	005a      	lsls	r2, r3, #1
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	085b      	lsrs	r3, r3, #1
 80054b4:	441a      	add	r2, r3
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80054be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c2:	2b0f      	cmp	r3, #15
 80054c4:	d916      	bls.n	80054f4 <UART_SetConfig+0x920>
 80054c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054cc:	d212      	bcs.n	80054f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	f023 030f 	bic.w	r3, r3, #15
 80054d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80054e6:	4313      	orrs	r3, r2
 80054e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80054f0:	60da      	str	r2, [r3, #12]
 80054f2:	e0b9      	b.n	8005668 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80054fa:	e0b5      	b.n	8005668 <UART_SetConfig+0xa94>
 80054fc:	03d09000 	.word	0x03d09000
 8005500:	003d0900 	.word	0x003d0900
 8005504:	08005d6c 	.word	0x08005d6c
 8005508:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800550c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005510:	2b20      	cmp	r3, #32
 8005512:	dc49      	bgt.n	80055a8 <UART_SetConfig+0x9d4>
 8005514:	2b00      	cmp	r3, #0
 8005516:	db7c      	blt.n	8005612 <UART_SetConfig+0xa3e>
 8005518:	2b20      	cmp	r3, #32
 800551a:	d87a      	bhi.n	8005612 <UART_SetConfig+0xa3e>
 800551c:	a201      	add	r2, pc, #4	@ (adr r2, 8005524 <UART_SetConfig+0x950>)
 800551e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005522:	bf00      	nop
 8005524:	080055af 	.word	0x080055af
 8005528:	080055b7 	.word	0x080055b7
 800552c:	08005613 	.word	0x08005613
 8005530:	08005613 	.word	0x08005613
 8005534:	080055bf 	.word	0x080055bf
 8005538:	08005613 	.word	0x08005613
 800553c:	08005613 	.word	0x08005613
 8005540:	08005613 	.word	0x08005613
 8005544:	080055cf 	.word	0x080055cf
 8005548:	08005613 	.word	0x08005613
 800554c:	08005613 	.word	0x08005613
 8005550:	08005613 	.word	0x08005613
 8005554:	08005613 	.word	0x08005613
 8005558:	08005613 	.word	0x08005613
 800555c:	08005613 	.word	0x08005613
 8005560:	08005613 	.word	0x08005613
 8005564:	080055df 	.word	0x080055df
 8005568:	08005613 	.word	0x08005613
 800556c:	08005613 	.word	0x08005613
 8005570:	08005613 	.word	0x08005613
 8005574:	08005613 	.word	0x08005613
 8005578:	08005613 	.word	0x08005613
 800557c:	08005613 	.word	0x08005613
 8005580:	08005613 	.word	0x08005613
 8005584:	08005613 	.word	0x08005613
 8005588:	08005613 	.word	0x08005613
 800558c:	08005613 	.word	0x08005613
 8005590:	08005613 	.word	0x08005613
 8005594:	08005613 	.word	0x08005613
 8005598:	08005613 	.word	0x08005613
 800559c:	08005613 	.word	0x08005613
 80055a0:	08005613 	.word	0x08005613
 80055a4:	08005605 	.word	0x08005605
 80055a8:	2b40      	cmp	r3, #64	@ 0x40
 80055aa:	d02e      	beq.n	800560a <UART_SetConfig+0xa36>
 80055ac:	e031      	b.n	8005612 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055ae:	f7fd f817 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 80055b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80055b4:	e033      	b.n	800561e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055b6:	f7fd f829 	bl	800260c <HAL_RCC_GetPCLK2Freq>
 80055ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80055bc:	e02f      	b.n	800561e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fe fa58 	bl	8003a78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055cc:	e027      	b.n	800561e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055ce:	f107 0318 	add.w	r3, r7, #24
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe fba4 	bl	8003d20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055dc:	e01f      	b.n	800561e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055de:	4b2d      	ldr	r3, [pc, #180]	@ (8005694 <UART_SetConfig+0xac0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d009      	beq.n	80055fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005694 <UART_SetConfig+0xac0>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	08db      	lsrs	r3, r3, #3
 80055f0:	f003 0303 	and.w	r3, r3, #3
 80055f4:	4a28      	ldr	r2, [pc, #160]	@ (8005698 <UART_SetConfig+0xac4>)
 80055f6:	fa22 f303 	lsr.w	r3, r2, r3
 80055fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055fc:	e00f      	b.n	800561e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80055fe:	4b26      	ldr	r3, [pc, #152]	@ (8005698 <UART_SetConfig+0xac4>)
 8005600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005602:	e00c      	b.n	800561e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005604:	4b25      	ldr	r3, [pc, #148]	@ (800569c <UART_SetConfig+0xac8>)
 8005606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005608:	e009      	b.n	800561e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800560a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800560e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005610:	e005      	b.n	800561e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800561c:	bf00      	nop
    }

    if (pclk != 0U)
 800561e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005620:	2b00      	cmp	r3, #0
 8005622:	d021      	beq.n	8005668 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005628:	4a1d      	ldr	r2, [pc, #116]	@ (80056a0 <UART_SetConfig+0xacc>)
 800562a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800562e:	461a      	mov	r2, r3
 8005630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005632:	fbb3 f2f2 	udiv	r2, r3, r2
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	085b      	lsrs	r3, r3, #1
 800563c:	441a      	add	r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	fbb2 f3f3 	udiv	r3, r2, r3
 8005646:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564a:	2b0f      	cmp	r3, #15
 800564c:	d909      	bls.n	8005662 <UART_SetConfig+0xa8e>
 800564e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005654:	d205      	bcs.n	8005662 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005658:	b29a      	uxth	r2, r3
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60da      	str	r2, [r3, #12]
 8005660:	e002      	b.n	8005668 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2201      	movs	r2, #1
 800566c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2201      	movs	r2, #1
 8005674:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2200      	movs	r2, #0
 800567c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2200      	movs	r2, #0
 8005682:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005684:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005688:	4618      	mov	r0, r3
 800568a:	3748      	adds	r7, #72	@ 0x48
 800568c:	46bd      	mov	sp, r7
 800568e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005692:	bf00      	nop
 8005694:	58024400 	.word	0x58024400
 8005698:	03d09000 	.word	0x03d09000
 800569c:	003d0900 	.word	0x003d0900
 80056a0:	08005d6c 	.word	0x08005d6c

080056a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01a      	beq.n	80057ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057a2:	d10a      	bne.n	80057ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	605a      	str	r2, [r3, #4]
  }
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b098      	sub	sp, #96	@ 0x60
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057f8:	f7fb fb82 	bl	8000f00 <HAL_GetTick>
 80057fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b08      	cmp	r3, #8
 800580a:	d12f      	bne.n	800586c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800580c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005814:	2200      	movs	r2, #0
 8005816:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f88e 	bl	800593c <UART_WaitOnFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d022      	beq.n	800586c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800583a:	653b      	str	r3, [r7, #80]	@ 0x50
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	461a      	mov	r2, r3
 8005842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005844:	647b      	str	r3, [r7, #68]	@ 0x44
 8005846:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800584a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e6      	bne.n	8005826 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e063      	b.n	8005934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0304 	and.w	r3, r3, #4
 8005876:	2b04      	cmp	r3, #4
 8005878:	d149      	bne.n	800590e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800587a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005882:	2200      	movs	r2, #0
 8005884:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f857 	bl	800593c <UART_WaitOnFlagUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d03c      	beq.n	800590e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	623b      	str	r3, [r7, #32]
   return(result);
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80058b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e6      	bne.n	8005894 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3308      	adds	r3, #8
 80058cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	e853 3f00 	ldrex	r3, [r3]
 80058d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f023 0301 	bic.w	r3, r3, #1
 80058dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3308      	adds	r3, #8
 80058e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058e6:	61fa      	str	r2, [r7, #28]
 80058e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	69b9      	ldr	r1, [r7, #24]
 80058ec:	69fa      	ldr	r2, [r7, #28]
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	617b      	str	r3, [r7, #20]
   return(result);
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1e5      	bne.n	80058c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e012      	b.n	8005934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3758      	adds	r7, #88	@ 0x58
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	603b      	str	r3, [r7, #0]
 8005948:	4613      	mov	r3, r2
 800594a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800594c:	e04f      	b.n	80059ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005954:	d04b      	beq.n	80059ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005956:	f7fb fad3 	bl	8000f00 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	429a      	cmp	r2, r3
 8005964:	d302      	bcc.n	800596c <UART_WaitOnFlagUntilTimeout+0x30>
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e04e      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d037      	beq.n	80059ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2b80      	cmp	r3, #128	@ 0x80
 8005982:	d034      	beq.n	80059ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b40      	cmp	r3, #64	@ 0x40
 8005988:	d031      	beq.n	80059ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b08      	cmp	r3, #8
 8005996:	d110      	bne.n	80059ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2208      	movs	r2, #8
 800599e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 f839 	bl	8005a18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2208      	movs	r2, #8
 80059aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e029      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059c8:	d111      	bne.n	80059ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 f81f 	bl	8005a18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e00f      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4013      	ands	r3, r2
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	bf0c      	ite	eq
 80059fe:	2301      	moveq	r3, #1
 8005a00:	2300      	movne	r3, #0
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	79fb      	ldrb	r3, [r7, #7]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d0a0      	beq.n	800594e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b095      	sub	sp, #84	@ 0x54
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a40:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e6      	bne.n	8005a20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3308      	adds	r3, #8
 8005a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	4b1e      	ldr	r3, [pc, #120]	@ (8005ae0 <UART_EndRxTransfer+0xc8>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e5      	bne.n	8005a52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d118      	bne.n	8005ac0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f023 0310 	bic.w	r3, r3, #16
 8005aa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	6979      	ldr	r1, [r7, #20]
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e6      	bne.n	8005a8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ad4:	bf00      	nop
 8005ad6:	3754      	adds	r7, #84	@ 0x54
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	effffffe 	.word	0xeffffffe

08005ae4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_UARTEx_DisableFifoMode+0x16>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e027      	b.n	8005b4a <HAL_UARTEx_DisableFifoMode+0x66>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2224      	movs	r2, #36	@ 0x24
 8005b06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0201 	bic.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d101      	bne.n	8005b6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	e02d      	b.n	8005bca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2224      	movs	r2, #36	@ 0x24
 8005b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0201 	bic.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f850 	bl	8005c50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e02d      	b.n	8005c46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2224      	movs	r2, #36	@ 0x24
 8005bf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0201 	bic.w	r2, r2, #1
 8005c10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f812 	bl	8005c50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d108      	bne.n	8005c72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c70:	e031      	b.n	8005cd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c72:	2310      	movs	r3, #16
 8005c74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c76:	2310      	movs	r3, #16
 8005c78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	0e5b      	lsrs	r3, r3, #25
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	0f5b      	lsrs	r3, r3, #29
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c9a:	7bbb      	ldrb	r3, [r7, #14]
 8005c9c:	7b3a      	ldrb	r2, [r7, #12]
 8005c9e:	4911      	ldr	r1, [pc, #68]	@ (8005ce4 <UARTEx_SetNbDataToProcess+0x94>)
 8005ca0:	5c8a      	ldrb	r2, [r1, r2]
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ca6:	7b3a      	ldrb	r2, [r7, #12]
 8005ca8:	490f      	ldr	r1, [pc, #60]	@ (8005ce8 <UARTEx_SetNbDataToProcess+0x98>)
 8005caa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cac:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
 8005cba:	7b7a      	ldrb	r2, [r7, #13]
 8005cbc:	4909      	ldr	r1, [pc, #36]	@ (8005ce4 <UARTEx_SetNbDataToProcess+0x94>)
 8005cbe:	5c8a      	ldrb	r2, [r1, r2]
 8005cc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cc4:	7b7a      	ldrb	r2, [r7, #13]
 8005cc6:	4908      	ldr	r1, [pc, #32]	@ (8005ce8 <UARTEx_SetNbDataToProcess+0x98>)
 8005cc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cca:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005cd6:	bf00      	nop
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	08005d84 	.word	0x08005d84
 8005ce8:	08005d8c 	.word	0x08005d8c

08005cec <memset>:
 8005cec:	4402      	add	r2, r0
 8005cee:	4603      	mov	r3, r0
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d100      	bne.n	8005cf6 <memset+0xa>
 8005cf4:	4770      	bx	lr
 8005cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cfa:	e7f9      	b.n	8005cf0 <memset+0x4>

08005cfc <__libc_init_array>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	4d0d      	ldr	r5, [pc, #52]	@ (8005d34 <__libc_init_array+0x38>)
 8005d00:	4c0d      	ldr	r4, [pc, #52]	@ (8005d38 <__libc_init_array+0x3c>)
 8005d02:	1b64      	subs	r4, r4, r5
 8005d04:	10a4      	asrs	r4, r4, #2
 8005d06:	2600      	movs	r6, #0
 8005d08:	42a6      	cmp	r6, r4
 8005d0a:	d109      	bne.n	8005d20 <__libc_init_array+0x24>
 8005d0c:	4d0b      	ldr	r5, [pc, #44]	@ (8005d3c <__libc_init_array+0x40>)
 8005d0e:	4c0c      	ldr	r4, [pc, #48]	@ (8005d40 <__libc_init_array+0x44>)
 8005d10:	f000 f818 	bl	8005d44 <_init>
 8005d14:	1b64      	subs	r4, r4, r5
 8005d16:	10a4      	asrs	r4, r4, #2
 8005d18:	2600      	movs	r6, #0
 8005d1a:	42a6      	cmp	r6, r4
 8005d1c:	d105      	bne.n	8005d2a <__libc_init_array+0x2e>
 8005d1e:	bd70      	pop	{r4, r5, r6, pc}
 8005d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d24:	4798      	blx	r3
 8005d26:	3601      	adds	r6, #1
 8005d28:	e7ee      	b.n	8005d08 <__libc_init_array+0xc>
 8005d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d2e:	4798      	blx	r3
 8005d30:	3601      	adds	r6, #1
 8005d32:	e7f2      	b.n	8005d1a <__libc_init_array+0x1e>
 8005d34:	08005d9c 	.word	0x08005d9c
 8005d38:	08005d9c 	.word	0x08005d9c
 8005d3c:	08005d9c 	.word	0x08005d9c
 8005d40:	08005da0 	.word	0x08005da0

08005d44 <_init>:
 8005d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d46:	bf00      	nop
 8005d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4a:	bc08      	pop	{r3}
 8005d4c:	469e      	mov	lr, r3
 8005d4e:	4770      	bx	lr

08005d50 <_fini>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	bf00      	nop
 8005d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d56:	bc08      	pop	{r3}
 8005d58:	469e      	mov	lr, r3
 8005d5a:	4770      	bx	lr
