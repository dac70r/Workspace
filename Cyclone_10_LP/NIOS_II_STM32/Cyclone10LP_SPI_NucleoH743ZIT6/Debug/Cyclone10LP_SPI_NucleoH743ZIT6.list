
Cyclone10LP_SPI_NucleoH743ZIT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006718  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080069b0  080069b0  000079b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080069e8  080069e8  000079e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080069f0  080069f0  000079f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080069f4  080069f4  000079f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000028  24000000  080069f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000013c  24000028  08006a20  00008028  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000164  08006a20  00008164  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001370d  00000000  00000000  00008056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002726  00000000  00000000  0001b763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000cd8  00000000  00000000  0001de90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009dc  00000000  00000000  0001eb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036a2b  00000000  00000000  0001f544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000149d7  00000000  00000000  00055f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a147  00000000  00000000  0006a946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c4a8d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003490  00000000  00000000  001c4ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000aa  00000000  00000000  001c7f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000028 	.word	0x24000028
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006998 	.word	0x08006998

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400002c 	.word	0x2400002c
 80002d4:	08006998 	.word	0x08006998

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08c      	sub	sp, #48	@ 0x30
 80005cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	4b55      	ldr	r3, [pc, #340]	@ (8000734 <MX_GPIO_Init+0x16c>)
 80005e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e4:	4a53      	ldr	r2, [pc, #332]	@ (8000734 <MX_GPIO_Init+0x16c>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ee:	4b51      	ldr	r3, [pc, #324]	@ (8000734 <MX_GPIO_Init+0x16c>)
 80005f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	61bb      	str	r3, [r7, #24]
 80005fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fc:	4b4d      	ldr	r3, [pc, #308]	@ (8000734 <MX_GPIO_Init+0x16c>)
 80005fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000602:	4a4c      	ldr	r2, [pc, #304]	@ (8000734 <MX_GPIO_Init+0x16c>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800060c:	4b49      	ldr	r3, [pc, #292]	@ (8000734 <MX_GPIO_Init+0x16c>)
 800060e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b46      	ldr	r3, [pc, #280]	@ (8000734 <MX_GPIO_Init+0x16c>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000620:	4a44      	ldr	r2, [pc, #272]	@ (8000734 <MX_GPIO_Init+0x16c>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800062a:	4b42      	ldr	r3, [pc, #264]	@ (8000734 <MX_GPIO_Init+0x16c>)
 800062c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000638:	4b3e      	ldr	r3, [pc, #248]	@ (8000734 <MX_GPIO_Init+0x16c>)
 800063a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800063e:	4a3d      	ldr	r2, [pc, #244]	@ (8000734 <MX_GPIO_Init+0x16c>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000648:	4b3a      	ldr	r3, [pc, #232]	@ (8000734 <MX_GPIO_Init+0x16c>)
 800064a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000656:	4b37      	ldr	r3, [pc, #220]	@ (8000734 <MX_GPIO_Init+0x16c>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800065c:	4a35      	ldr	r2, [pc, #212]	@ (8000734 <MX_GPIO_Init+0x16c>)
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000666:	4b33      	ldr	r3, [pc, #204]	@ (8000734 <MX_GPIO_Init+0x16c>)
 8000668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800066c:	f003 0308 	and.w	r3, r3, #8
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000674:	4b2f      	ldr	r3, [pc, #188]	@ (8000734 <MX_GPIO_Init+0x16c>)
 8000676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800067a:	4a2e      	ldr	r2, [pc, #184]	@ (8000734 <MX_GPIO_Init+0x16c>)
 800067c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000684:	4b2b      	ldr	r3, [pc, #172]	@ (8000734 <MX_GPIO_Init+0x16c>)
 8000686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800068a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000692:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <MX_GPIO_Init+0x16c>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000698:	4a26      	ldr	r2, [pc, #152]	@ (8000734 <MX_GPIO_Init+0x16c>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a2:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <MX_GPIO_Init+0x16c>)
 80006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a8:	f003 0310 	and.w	r3, r3, #16
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006b6:	4820      	ldr	r0, [pc, #128]	@ (8000738 <MX_GPIO_Init+0x170>)
 80006b8:	f001 fa20 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80006c2:	481e      	ldr	r0, [pc, #120]	@ (800073c <MX_GPIO_Init+0x174>)
 80006c4:	f001 fa1a 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2102      	movs	r1, #2
 80006cc:	481c      	ldr	r0, [pc, #112]	@ (8000740 <MX_GPIO_Init+0x178>)
 80006ce:	f001 fa15 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80006d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4813      	ldr	r0, [pc, #76]	@ (8000738 <MX_GPIO_Init+0x170>)
 80006ec:	f001 f856 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 80006f0:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <MX_GPIO_Init+0x174>)
 800070a:	f001 f847 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800070e:	2302      	movs	r3, #2
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	4806      	ldr	r0, [pc, #24]	@ (8000740 <MX_GPIO_Init+0x178>)
 8000726:	f001 f839 	bl	800179c <HAL_GPIO_Init>

}
 800072a:	bf00      	nop
 800072c:	3730      	adds	r7, #48	@ 0x30
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	58024400 	.word	0x58024400
 8000738:	58020400 	.word	0x58020400
 800073c:	58021800 	.word	0x58021800
 8000740:	58021000 	.word	0x58021000

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000748:	f000 f906 	bl	8000958 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 fb96 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f81e 	bl	8000790 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000754:	f000 f88e 	bl	8000874 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f7ff ff36 	bl	80005c8 <MX_GPIO_Init>
  MX_SPI6_Init();
 800075c:	f000 f92e 	bl	80009bc <MX_SPI6_Init>
  MX_USART3_UART_Init();
 8000760:	f000 facc 	bl	8000cfc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Receive_IT(&hspi6, rx_data, 4U);
 8000764:	2204      	movs	r2, #4
 8000766:	4907      	ldr	r1, [pc, #28]	@ (8000784 <main+0x40>)
 8000768:	4807      	ldr	r0, [pc, #28]	@ (8000788 <main+0x44>)
 800076a:	f004 fb59 	bl	8004e20 <HAL_SPI_Receive_IT>

    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);							// Pulls the SPI line down low
	  //HAL_SPI_Receive_IT(&hspi6, rx_data, 4U);											// Single SPI Receive in Regular Mode
	  //HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);								// Pulls the SPI line back high
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); 											// Toggle LED to show the system is running
 800076e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000772:	4806      	ldr	r0, [pc, #24]	@ (800078c <main+0x48>)
 8000774:	f001 f9db 	bl	8001b2e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000778:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800077c:	f000 fc10 	bl	8000fa0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); 											// Toggle LED to show the system is running
 8000780:	bf00      	nop
 8000782:	e7f4      	b.n	800076e <main+0x2a>
 8000784:	24000000 	.word	0x24000000
 8000788:	24000044 	.word	0x24000044
 800078c:	58020400 	.word	0x58020400

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b09c      	sub	sp, #112	@ 0x70
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079a:	224c      	movs	r2, #76	@ 0x4c
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f006 f8ce 	bl	8006940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2220      	movs	r2, #32
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f006 f8c8 	bl	8006940 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007b0:	2002      	movs	r0, #2
 80007b2:	f001 f9d7 	bl	8001b64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000868 <SystemClock_Config+0xd8>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007be:	4a2a      	ldr	r2, [pc, #168]	@ (8000868 <SystemClock_Config+0xd8>)
 80007c0:	f023 0301 	bic.w	r3, r3, #1
 80007c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007c6:	4b28      	ldr	r3, [pc, #160]	@ (8000868 <SystemClock_Config+0xd8>)
 80007c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	4b26      	ldr	r3, [pc, #152]	@ (800086c <SystemClock_Config+0xdc>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007d8:	4a24      	ldr	r2, [pc, #144]	@ (800086c <SystemClock_Config+0xdc>)
 80007da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b22      	ldr	r3, [pc, #136]	@ (800086c <SystemClock_Config+0xdc>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ec:	bf00      	nop
 80007ee:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <SystemClock_Config+0xdc>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007fa:	d1f8      	bne.n	80007ee <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80007fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <SystemClock_Config+0xe0>)
 80007fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000800:	4a1b      	ldr	r2, [pc, #108]	@ (8000870 <SystemClock_Config+0xe0>)
 8000802:	f023 0303 	bic.w	r3, r3, #3
 8000806:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800080c:	2301      	movs	r3, #1
 800080e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2340      	movs	r3, #64	@ 0x40
 8000812:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000814:	2300      	movs	r3, #0
 8000816:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081c:	4618      	mov	r0, r3
 800081e:	f001 f9db 	bl	8001bd8 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000828:	f000 f8c2 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	233f      	movs	r3, #63	@ 0x3f
 800082e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2101      	movs	r1, #1
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fe1b 	bl	800248c <HAL_RCC_ClockConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800085c:	f000 f8a8 	bl	80009b0 <Error_Handler>
  }
}
 8000860:	bf00      	nop
 8000862:	3770      	adds	r7, #112	@ 0x70
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	58000400 	.word	0x58000400
 800086c:	58024800 	.word	0x58024800
 8000870:	58024400 	.word	0x58024400

08000874 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b0b0      	sub	sp, #192	@ 0xc0
 8000878:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800087a:	463b      	mov	r3, r7
 800087c:	22c0      	movs	r2, #192	@ 0xc0
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f006 f85d 	bl	8006940 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6|RCC_PERIPHCLK_USART3;
 8000886:	f244 0202 	movw	r2, #16386	@ 0x4002
 800088a:	f04f 0300 	mov.w	r3, #0
 800088e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000892:	2320      	movs	r3, #32
 8000894:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000896:	2381      	movs	r3, #129	@ 0x81
 8000898:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 6;
 800089e:	2306      	movs	r3, #6
 80008a0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80008a6:	2340      	movs	r3, #64	@ 0x40
 80008a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 80008b2:	2301      	movs	r3, #1
 80008b4:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL2;
 80008b6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80008ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 f96f 	bl	8002ba4 <HAL_RCCEx_PeriphCLKConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80008cc:	f000 f870 	bl	80009b0 <Error_Handler>
  }
}
 80008d0:	bf00      	nop
 80008d2:	37c0      	adds	r7, #192	@ 0xc0
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
// SPI Receive Complete Callback
// This function is called everytime the SPI Receive is completed.
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI6) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a05      	ldr	r2, [pc, #20]	@ (80008fc <HAL_SPI_TxCpltCallback+0x24>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d103      	bne.n	80008f2 <HAL_SPI_TxCpltCallback+0x1a>
        // Data reception complete, print in serial terminal
    	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80008ea:	2102      	movs	r1, #2
 80008ec:	4804      	ldr	r0, [pc, #16]	@ (8000900 <HAL_SPI_TxCpltCallback+0x28>)
 80008ee:	f001 f91e 	bl	8001b2e <HAL_GPIO_TogglePin>
    	 if (HAL_SPI_Receive_IT(&hspi6, (uint8_t*)rx_data, sizeof(4U)) != HAL_OK) {
    	  		// Reception Error
    	  		Error_Handler();
    	 }*/
    }
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	58001400 	.word	0x58001400
 8000900:	58021000 	.word	0x58021000

08000904 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI6) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0c      	ldr	r2, [pc, #48]	@ (8000944 <HAL_SPI_RxCpltCallback+0x40>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d111      	bne.n	800093a <HAL_SPI_RxCpltCallback+0x36>
        // Data reception complete, print in serial terminal
    	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
    	HAL_UART_Transmit(&huart3, (uint8_t *)rx_data, sizeof(4U), 100);
 8000916:	2364      	movs	r3, #100	@ 0x64
 8000918:	2204      	movs	r2, #4
 800091a:	490b      	ldr	r1, [pc, #44]	@ (8000948 <HAL_SPI_RxCpltCallback+0x44>)
 800091c:	480b      	ldr	r0, [pc, #44]	@ (800094c <HAL_SPI_RxCpltCallback+0x48>)
 800091e:	f004 fef4 	bl	800570a <HAL_UART_Transmit>
    	HAL_SPI_Transmit(&hspi6, (uint8_t*)tx_data, sizeof(4U), 10000);
 8000922:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000926:	2204      	movs	r2, #4
 8000928:	4909      	ldr	r1, [pc, #36]	@ (8000950 <HAL_SPI_RxCpltCallback+0x4c>)
 800092a:	480a      	ldr	r0, [pc, #40]	@ (8000954 <HAL_SPI_RxCpltCallback+0x50>)
 800092c:	f004 f88a 	bl	8004a44 <HAL_SPI_Transmit>
    	HAL_SPI_Receive_IT(&hspi6, (uint8_t*)rx_data, sizeof(4U));
 8000930:	2204      	movs	r2, #4
 8000932:	4905      	ldr	r1, [pc, #20]	@ (8000948 <HAL_SPI_RxCpltCallback+0x44>)
 8000934:	4807      	ldr	r0, [pc, #28]	@ (8000954 <HAL_SPI_RxCpltCallback+0x50>)
 8000936:	f004 fa73 	bl	8004e20 <HAL_SPI_Receive_IT>
    	 if (HAL_SPI_Receive_IT(&hspi6, (uint8_t*)rx_data, sizeof(4U)) != HAL_OK) {
    	  		// Reception Error
    	  		Error_Handler();
    	 }*/
    }
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	58001400 	.word	0x58001400
 8000948:	24000000 	.word	0x24000000
 800094c:	240000cc 	.word	0x240000cc
 8000950:	2400000c 	.word	0x2400000c
 8000954:	24000044 	.word	0x24000044

08000958 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800095e:	463b      	mov	r3, r7
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800096a:	f000 fc59 	bl	8001220 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800096e:	2301      	movs	r3, #1
 8000970:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000972:	2300      	movs	r3, #0
 8000974:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800097a:	231f      	movs	r3, #31
 800097c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800097e:	2387      	movs	r3, #135	@ 0x87
 8000980:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000982:	2300      	movs	r3, #0
 8000984:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000986:	2300      	movs	r3, #0
 8000988:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800098a:	2301      	movs	r3, #1
 800098c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800098e:	2301      	movs	r3, #1
 8000990:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800099a:	463b      	mov	r3, r7
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fc77 	bl	8001290 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009a2:	2004      	movs	r0, #4
 80009a4:	f000 fc54 	bl	8001250 <HAL_MPU_Enable>

}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <Error_Handler+0x8>

080009bc <MX_SPI6_Init>:

SPI_HandleTypeDef hspi6;

/* SPI6 init function */
void MX_SPI6_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 80009c0:	4b25      	ldr	r3, [pc, #148]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 80009c2:	4a26      	ldr	r2, [pc, #152]	@ (8000a5c <MX_SPI6_Init+0xa0>)
 80009c4:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_SLAVE;
 80009c6:	4b24      	ldr	r3, [pc, #144]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009cc:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 80009ce:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009d2:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d4:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 80009d6:	2207      	movs	r2, #7
 80009d8:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 80009e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80009e6:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_SPI6_Init+0x9c>)
 8000a44:	f003 feda 	bl	80047fc <HAL_SPI_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_SPI6_Init+0x96>
  {
    Error_Handler();
 8000a4e:	f7ff ffaf 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	24000044 	.word	0x24000044
 8000a5c:	58001400 	.word	0x58001400

08000a60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	@ 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI6)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a2d      	ldr	r2, [pc, #180]	@ (8000b34 <HAL_SPI_MspInit+0xd4>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d154      	bne.n	8000b2c <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI6_MspInit 0 */

  /* USER CODE END SPI6_MspInit 0 */
    /* SPI6 clock enable */
    __HAL_RCC_SPI6_CLK_ENABLE();
 8000a82:	4b2d      	ldr	r3, [pc, #180]	@ (8000b38 <HAL_SPI_MspInit+0xd8>)
 8000a84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a88:	4a2b      	ldr	r2, [pc, #172]	@ (8000b38 <HAL_SPI_MspInit+0xd8>)
 8000a8a:	f043 0320 	orr.w	r3, r3, #32
 8000a8e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a92:	4b29      	ldr	r3, [pc, #164]	@ (8000b38 <HAL_SPI_MspInit+0xd8>)
 8000a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a98:	f003 0320 	and.w	r3, r3, #32
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b25      	ldr	r3, [pc, #148]	@ (8000b38 <HAL_SPI_MspInit+0xd8>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa6:	4a24      	ldr	r2, [pc, #144]	@ (8000b38 <HAL_SPI_MspInit+0xd8>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab0:	4b21      	ldr	r3, [pc, #132]	@ (8000b38 <HAL_SPI_MspInit+0xd8>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <HAL_SPI_MspInit+0xd8>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8000b38 <HAL_SPI_MspInit+0xd8>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ace:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <HAL_SPI_MspInit+0xd8>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI6_NSS
    PB3 (JTDO/TRACESWO)     ------> SPI6_SCK
    PB4 (NJTRST)     ------> SPI6_MISO
    PB5     ------> SPI6_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000adc:	2310      	movs	r3, #16
 8000ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8000aec:	2308      	movs	r3, #8
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4811      	ldr	r0, [pc, #68]	@ (8000b3c <HAL_SPI_MspInit+0xdc>)
 8000af8:	f000 fe50 	bl	800179c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000afc:	2338      	movs	r3, #56	@ 0x38
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	480a      	ldr	r0, [pc, #40]	@ (8000b40 <HAL_SPI_MspInit+0xe0>)
 8000b18:	f000 fe40 	bl	800179c <HAL_GPIO_Init>

    /* SPI6 interrupt Init */
    HAL_NVIC_SetPriority(SPI6_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2056      	movs	r0, #86	@ 0x56
 8000b22:	f000 fb48 	bl	80011b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8000b26:	2056      	movs	r0, #86	@ 0x56
 8000b28:	f000 fb5f 	bl	80011ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	@ 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	58001400 	.word	0x58001400
 8000b38:	58024400 	.word	0x58024400
 8000b3c:	58020000 	.word	0x58020000
 8000b40:	58020400 	.word	0x58020400

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <HAL_MspInit+0x30>)
 8000b4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b50:	4a08      	ldr	r2, [pc, #32]	@ (8000b74 <HAL_MspInit+0x30>)
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_MspInit+0x30>)
 8000b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	58024400 	.word	0x58024400

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bce:	f000 f9c7 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8000bdc:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <SPI6_IRQHandler+0x10>)
 8000bde:	f004 f9c9 	bl	8004f74 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	24000044 	.word	0x24000044

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b37      	ldr	r3, [pc, #220]	@ (8000cd0 <SystemInit+0xe4>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bf6:	4a36      	ldr	r2, [pc, #216]	@ (8000cd0 <SystemInit+0xe4>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c00:	4b34      	ldr	r3, [pc, #208]	@ (8000cd4 <SystemInit+0xe8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 030f 	and.w	r3, r3, #15
 8000c08:	2b06      	cmp	r3, #6
 8000c0a:	d807      	bhi.n	8000c1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c0c:	4b31      	ldr	r3, [pc, #196]	@ (8000cd4 <SystemInit+0xe8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f023 030f 	bic.w	r3, r3, #15
 8000c14:	4a2f      	ldr	r2, [pc, #188]	@ (8000cd4 <SystemInit+0xe8>)
 8000c16:	f043 0307 	orr.w	r3, r3, #7
 8000c1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd8 <SystemInit+0xec>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a2d      	ldr	r2, [pc, #180]	@ (8000cd8 <SystemInit+0xec>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c28:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd8 <SystemInit+0xec>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd8 <SystemInit+0xec>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4929      	ldr	r1, [pc, #164]	@ (8000cd8 <SystemInit+0xec>)
 8000c34:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <SystemInit+0xf0>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c3a:	4b26      	ldr	r3, [pc, #152]	@ (8000cd4 <SystemInit+0xe8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d007      	beq.n	8000c56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c46:	4b23      	ldr	r3, [pc, #140]	@ (8000cd4 <SystemInit+0xe8>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f023 030f 	bic.w	r3, r3, #15
 8000c4e:	4a21      	ldr	r2, [pc, #132]	@ (8000cd4 <SystemInit+0xe8>)
 8000c50:	f043 0307 	orr.w	r3, r3, #7
 8000c54:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c56:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <SystemInit+0xec>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd8 <SystemInit+0xec>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd8 <SystemInit+0xec>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <SystemInit+0xec>)
 8000c6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce0 <SystemInit+0xf4>)
 8000c6c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <SystemInit+0xec>)
 8000c70:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce4 <SystemInit+0xf8>)
 8000c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c74:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <SystemInit+0xec>)
 8000c76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce8 <SystemInit+0xfc>)
 8000c78:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <SystemInit+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c80:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <SystemInit+0xec>)
 8000c82:	4a19      	ldr	r2, [pc, #100]	@ (8000ce8 <SystemInit+0xfc>)
 8000c84:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c86:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <SystemInit+0xec>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <SystemInit+0xec>)
 8000c8e:	4a16      	ldr	r2, [pc, #88]	@ (8000ce8 <SystemInit+0xfc>)
 8000c90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c92:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <SystemInit+0xec>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <SystemInit+0xec>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd8 <SystemInit+0xec>)
 8000c9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ca2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <SystemInit+0xec>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000caa:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <SystemInit+0x100>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <SystemInit+0x104>)
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000cb6:	d202      	bcs.n	8000cbe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <SystemInit+0x108>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <SystemInit+0x10c>)
 8000cc0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000cc4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00
 8000cd4:	52002000 	.word	0x52002000
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ce0:	02020200 	.word	0x02020200
 8000ce4:	01ff0000 	.word	0x01ff0000
 8000ce8:	01010280 	.word	0x01010280
 8000cec:	5c001000 	.word	0x5c001000
 8000cf0:	ffff0000 	.word	0xffff0000
 8000cf4:	51008108 	.word	0x51008108
 8000cf8:	52004000 	.word	0x52004000

08000cfc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d00:	4b22      	ldr	r3, [pc, #136]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d02:	4a23      	ldr	r2, [pc, #140]	@ (8000d90 <MX_USART3_UART_Init+0x94>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d06:	4b21      	ldr	r3, [pc, #132]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d32:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d38:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d44:	4811      	ldr	r0, [pc, #68]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d46:	f004 fc90 	bl	800566a <HAL_UART_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d50:	f7ff fe2e 	bl	80009b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d54:	2100      	movs	r1, #0
 8000d56:	480d      	ldr	r0, [pc, #52]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d58:	f005 fd27 	bl	80067aa <HAL_UARTEx_SetTxFifoThreshold>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d62:	f7ff fe25 	bl	80009b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d66:	2100      	movs	r1, #0
 8000d68:	4808      	ldr	r0, [pc, #32]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d6a:	f005 fd5c 	bl	8006826 <HAL_UARTEx_SetRxFifoThreshold>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d74:	f7ff fe1c 	bl	80009b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d78:	4804      	ldr	r0, [pc, #16]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d7a:	f005 fcdd 	bl	8006738 <HAL_UARTEx_DisableFifoMode>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d84:	f7ff fe14 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	240000cc 	.word	0x240000cc
 8000d90:	40004800 	.word	0x40004800

08000d94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	@ 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e1c <HAL_UART_MspInit+0x88>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d12e      	bne.n	8000e14 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <HAL_UART_MspInit+0x8c>)
 8000db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dbc:	4a18      	ldr	r2, [pc, #96]	@ (8000e20 <HAL_UART_MspInit+0x8c>)
 8000dbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dc2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000dc6:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <HAL_UART_MspInit+0x8c>)
 8000dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd4:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <HAL_UART_MspInit+0x8c>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	4a11      	ldr	r2, [pc, #68]	@ (8000e20 <HAL_UART_MspInit+0x8c>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <HAL_UART_MspInit+0x8c>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	f003 0308 	and.w	r3, r3, #8
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000df2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e04:	2307      	movs	r3, #7
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <HAL_UART_MspInit+0x90>)
 8000e10:	f000 fcc4 	bl	800179c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e14:	bf00      	nop
 8000e16:	3728      	adds	r7, #40	@ 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40004800 	.word	0x40004800
 8000e20:	58024400 	.word	0x58024400
 8000e24:	58020c00 	.word	0x58020c00

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e2c:	f7ff fede 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	@ (8000e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	@ (8000e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f005 fd7b 	bl	8006950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fc73 	bl	8000744 <main>
  bx  lr
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e60:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e68:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8000e6c:	080069f8 	.word	0x080069f8
  ldr r2, =_sbss
 8000e70:	24000028 	.word	0x24000028
  ldr r4, =_ebss
 8000e74:	24000164 	.word	0x24000164

08000e78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC3_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e82:	2003      	movs	r0, #3
 8000e84:	f000 f98c 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e88:	f001 fcb6 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_Init+0x68>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	0a1b      	lsrs	r3, r3, #8
 8000e94:	f003 030f 	and.w	r3, r3, #15
 8000e98:	4913      	ldr	r1, [pc, #76]	@ (8000ee8 <HAL_Init+0x6c>)
 8000e9a:	5ccb      	ldrb	r3, [r1, r3]
 8000e9c:	f003 031f 	and.w	r3, r3, #31
 8000ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <HAL_Init+0x68>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee8 <HAL_Init+0x6c>)
 8000eb0:	5cd3      	ldrb	r3, [r2, r3]
 8000eb2:	f003 031f 	and.w	r3, r3, #31
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8000eec <HAL_Init+0x70>)
 8000ebe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef0 <HAL_Init+0x74>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f000 f814 	bl	8000ef4 <HAL_InitTick>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e002      	b.n	8000edc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed6:	f7ff fe35 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	58024400 	.word	0x58024400
 8000ee8:	080069b0 	.word	0x080069b0
 8000eec:	2400001c 	.word	0x2400001c
 8000ef0:	24000018 	.word	0x24000018

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000efc:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <HAL_InitTick+0x60>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e021      	b.n	8000f4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f08:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <HAL_InitTick+0x64>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <HAL_InitTick+0x60>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f971 	bl	8001206 <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f000 f93b 	bl	80011b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <HAL_InitTick+0x68>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	24000024 	.word	0x24000024
 8000f58:	24000018 	.word	0x24000018
 8000f5c:	24000020 	.word	0x24000020

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	24000024 	.word	0x24000024
 8000f84:	24000160 	.word	0x24000160

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	24000160 	.word	0x24000160

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	24000024 	.word	0x24000024

08000fe8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fec:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <HAL_GetREVID+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	0c1b      	lsrs	r3, r3, #16
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	5c001000 	.word	0x5c001000

08001000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <__NVIC_SetPriorityGrouping+0x40>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	4313      	orrs	r3, r2
 800102c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102e:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <__NVIC_SetPriorityGrouping+0x40>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	60d3      	str	r3, [r2, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00
 8001044:	05fa0000 	.word	0x05fa0000

08001048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800106e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db0b      	blt.n	800108e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	f003 021f 	and.w	r2, r3, #31
 800107c:	4907      	ldr	r1, [pc, #28]	@ (800109c <__NVIC_EnableIRQ+0x38>)
 800107e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	2001      	movs	r0, #1
 8001086:	fa00 f202 	lsl.w	r2, r0, r2
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	@ (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	@ (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	@ 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800116c:	d301      	bcc.n	8001172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116e:	2301      	movs	r3, #1
 8001170:	e00f      	b.n	8001192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <SysTick_Config+0x40>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117a:	210f      	movs	r1, #15
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f7ff ff8e 	bl	80010a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <SysTick_Config+0x40>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	4b04      	ldr	r3, [pc, #16]	@ (800119c <SysTick_Config+0x40>)
 800118c:	2207      	movs	r2, #7
 800118e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff29 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c4:	f7ff ff40 	bl	8001048 <__NVIC_GetPriorityGrouping>
 80011c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	6978      	ldr	r0, [r7, #20]
 80011d0:	f7ff ff90 	bl	80010f4 <NVIC_EncodePriority>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff5f 	bl	80010a0 <__NVIC_SetPriority>
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff33 	bl	8001064 <__NVIC_EnableIRQ>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ffa4 	bl	800115c <SysTick_Config>
 8001214:	4603      	mov	r3, r0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001224:	f3bf 8f5f 	dmb	sy
}
 8001228:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800122a:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <HAL_MPU_Disable+0x28>)
 800122c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122e:	4a06      	ldr	r2, [pc, #24]	@ (8001248 <HAL_MPU_Disable+0x28>)
 8001230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001234:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001236:	4b05      	ldr	r3, [pc, #20]	@ (800124c <HAL_MPU_Disable+0x2c>)
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00
 800124c:	e000ed90 	.word	0xe000ed90

08001250 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001258:	4a0b      	ldr	r2, [pc, #44]	@ (8001288 <HAL_MPU_Enable+0x38>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001262:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <HAL_MPU_Enable+0x3c>)
 8001264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001266:	4a09      	ldr	r2, [pc, #36]	@ (800128c <HAL_MPU_Enable+0x3c>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800126c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800126e:	f3bf 8f4f 	dsb	sy
}
 8001272:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001274:	f3bf 8f6f 	isb	sy
}
 8001278:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed90 	.word	0xe000ed90
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	785a      	ldrb	r2, [r3, #1]
 800129c:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <HAL_MPU_ConfigRegion+0x7c>)
 800129e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80012a0:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <HAL_MPU_ConfigRegion+0x7c>)
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	4a19      	ldr	r2, [pc, #100]	@ (800130c <HAL_MPU_ConfigRegion+0x7c>)
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80012ac:	4a17      	ldr	r2, [pc, #92]	@ (800130c <HAL_MPU_ConfigRegion+0x7c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	7b1b      	ldrb	r3, [r3, #12]
 80012b8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7adb      	ldrb	r3, [r3, #11]
 80012be:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7a9b      	ldrb	r3, [r3, #10]
 80012c6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7b5b      	ldrb	r3, [r3, #13]
 80012ce:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7b9b      	ldrb	r3, [r3, #14]
 80012d6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7bdb      	ldrb	r3, [r3, #15]
 80012de:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7a5b      	ldrb	r3, [r3, #9]
 80012e6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7a1b      	ldrb	r3, [r3, #8]
 80012ee:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012f0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	7812      	ldrb	r2, [r2, #0]
 80012f6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012f8:	4a04      	ldr	r2, [pc, #16]	@ (800130c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012fa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012fc:	6113      	str	r3, [r2, #16]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed90 	.word	0xe000ed90

08001310 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e237      	b.n	8001792 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d004      	beq.n	8001338 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2280      	movs	r2, #128	@ 0x80
 8001332:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e22c      	b.n	8001792 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a5c      	ldr	r2, [pc, #368]	@ (80014b0 <HAL_DMA_Abort_IT+0x1a0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d04a      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a5b      	ldr	r2, [pc, #364]	@ (80014b4 <HAL_DMA_Abort_IT+0x1a4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d045      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a59      	ldr	r2, [pc, #356]	@ (80014b8 <HAL_DMA_Abort_IT+0x1a8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d040      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a58      	ldr	r2, [pc, #352]	@ (80014bc <HAL_DMA_Abort_IT+0x1ac>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d03b      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a56      	ldr	r2, [pc, #344]	@ (80014c0 <HAL_DMA_Abort_IT+0x1b0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d036      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a55      	ldr	r2, [pc, #340]	@ (80014c4 <HAL_DMA_Abort_IT+0x1b4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d031      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a53      	ldr	r2, [pc, #332]	@ (80014c8 <HAL_DMA_Abort_IT+0x1b8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d02c      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a52      	ldr	r2, [pc, #328]	@ (80014cc <HAL_DMA_Abort_IT+0x1bc>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d027      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a50      	ldr	r2, [pc, #320]	@ (80014d0 <HAL_DMA_Abort_IT+0x1c0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d022      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a4f      	ldr	r2, [pc, #316]	@ (80014d4 <HAL_DMA_Abort_IT+0x1c4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d01d      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a4d      	ldr	r2, [pc, #308]	@ (80014d8 <HAL_DMA_Abort_IT+0x1c8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d018      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a4c      	ldr	r2, [pc, #304]	@ (80014dc <HAL_DMA_Abort_IT+0x1cc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d013      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a4a      	ldr	r2, [pc, #296]	@ (80014e0 <HAL_DMA_Abort_IT+0x1d0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d00e      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a49      	ldr	r2, [pc, #292]	@ (80014e4 <HAL_DMA_Abort_IT+0x1d4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d009      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a47      	ldr	r2, [pc, #284]	@ (80014e8 <HAL_DMA_Abort_IT+0x1d8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d004      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a46      	ldr	r2, [pc, #280]	@ (80014ec <HAL_DMA_Abort_IT+0x1dc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d101      	bne.n	80013dc <HAL_DMA_Abort_IT+0xcc>
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <HAL_DMA_Abort_IT+0xce>
 80013dc:	2300      	movs	r3, #0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 8086 	beq.w	80014f0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2204      	movs	r2, #4
 80013e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a2f      	ldr	r2, [pc, #188]	@ (80014b0 <HAL_DMA_Abort_IT+0x1a0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d04a      	beq.n	800148c <HAL_DMA_Abort_IT+0x17c>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a2e      	ldr	r2, [pc, #184]	@ (80014b4 <HAL_DMA_Abort_IT+0x1a4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d045      	beq.n	800148c <HAL_DMA_Abort_IT+0x17c>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a2c      	ldr	r2, [pc, #176]	@ (80014b8 <HAL_DMA_Abort_IT+0x1a8>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d040      	beq.n	800148c <HAL_DMA_Abort_IT+0x17c>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a2b      	ldr	r2, [pc, #172]	@ (80014bc <HAL_DMA_Abort_IT+0x1ac>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d03b      	beq.n	800148c <HAL_DMA_Abort_IT+0x17c>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a29      	ldr	r2, [pc, #164]	@ (80014c0 <HAL_DMA_Abort_IT+0x1b0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d036      	beq.n	800148c <HAL_DMA_Abort_IT+0x17c>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a28      	ldr	r2, [pc, #160]	@ (80014c4 <HAL_DMA_Abort_IT+0x1b4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d031      	beq.n	800148c <HAL_DMA_Abort_IT+0x17c>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a26      	ldr	r2, [pc, #152]	@ (80014c8 <HAL_DMA_Abort_IT+0x1b8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d02c      	beq.n	800148c <HAL_DMA_Abort_IT+0x17c>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a25      	ldr	r2, [pc, #148]	@ (80014cc <HAL_DMA_Abort_IT+0x1bc>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d027      	beq.n	800148c <HAL_DMA_Abort_IT+0x17c>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a23      	ldr	r2, [pc, #140]	@ (80014d0 <HAL_DMA_Abort_IT+0x1c0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d022      	beq.n	800148c <HAL_DMA_Abort_IT+0x17c>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a22      	ldr	r2, [pc, #136]	@ (80014d4 <HAL_DMA_Abort_IT+0x1c4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d01d      	beq.n	800148c <HAL_DMA_Abort_IT+0x17c>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a20      	ldr	r2, [pc, #128]	@ (80014d8 <HAL_DMA_Abort_IT+0x1c8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d018      	beq.n	800148c <HAL_DMA_Abort_IT+0x17c>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a1f      	ldr	r2, [pc, #124]	@ (80014dc <HAL_DMA_Abort_IT+0x1cc>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d013      	beq.n	800148c <HAL_DMA_Abort_IT+0x17c>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a1d      	ldr	r2, [pc, #116]	@ (80014e0 <HAL_DMA_Abort_IT+0x1d0>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d00e      	beq.n	800148c <HAL_DMA_Abort_IT+0x17c>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a1c      	ldr	r2, [pc, #112]	@ (80014e4 <HAL_DMA_Abort_IT+0x1d4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d009      	beq.n	800148c <HAL_DMA_Abort_IT+0x17c>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a1a      	ldr	r2, [pc, #104]	@ (80014e8 <HAL_DMA_Abort_IT+0x1d8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d004      	beq.n	800148c <HAL_DMA_Abort_IT+0x17c>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a19      	ldr	r2, [pc, #100]	@ (80014ec <HAL_DMA_Abort_IT+0x1dc>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d108      	bne.n	800149e <HAL_DMA_Abort_IT+0x18e>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0201 	bic.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e178      	b.n	8001790 <HAL_DMA_Abort_IT+0x480>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0201 	bic.w	r2, r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	e16f      	b.n	8001790 <HAL_DMA_Abort_IT+0x480>
 80014b0:	40020010 	.word	0x40020010
 80014b4:	40020028 	.word	0x40020028
 80014b8:	40020040 	.word	0x40020040
 80014bc:	40020058 	.word	0x40020058
 80014c0:	40020070 	.word	0x40020070
 80014c4:	40020088 	.word	0x40020088
 80014c8:	400200a0 	.word	0x400200a0
 80014cc:	400200b8 	.word	0x400200b8
 80014d0:	40020410 	.word	0x40020410
 80014d4:	40020428 	.word	0x40020428
 80014d8:	40020440 	.word	0x40020440
 80014dc:	40020458 	.word	0x40020458
 80014e0:	40020470 	.word	0x40020470
 80014e4:	40020488 	.word	0x40020488
 80014e8:	400204a0 	.word	0x400204a0
 80014ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 020e 	bic.w	r2, r2, #14
 80014fe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a6c      	ldr	r2, [pc, #432]	@ (80016b8 <HAL_DMA_Abort_IT+0x3a8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d04a      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x290>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a6b      	ldr	r2, [pc, #428]	@ (80016bc <HAL_DMA_Abort_IT+0x3ac>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d045      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x290>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a69      	ldr	r2, [pc, #420]	@ (80016c0 <HAL_DMA_Abort_IT+0x3b0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d040      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x290>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a68      	ldr	r2, [pc, #416]	@ (80016c4 <HAL_DMA_Abort_IT+0x3b4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d03b      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x290>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a66      	ldr	r2, [pc, #408]	@ (80016c8 <HAL_DMA_Abort_IT+0x3b8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d036      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x290>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a65      	ldr	r2, [pc, #404]	@ (80016cc <HAL_DMA_Abort_IT+0x3bc>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d031      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x290>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a63      	ldr	r2, [pc, #396]	@ (80016d0 <HAL_DMA_Abort_IT+0x3c0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d02c      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x290>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a62      	ldr	r2, [pc, #392]	@ (80016d4 <HAL_DMA_Abort_IT+0x3c4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d027      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x290>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a60      	ldr	r2, [pc, #384]	@ (80016d8 <HAL_DMA_Abort_IT+0x3c8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d022      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x290>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a5f      	ldr	r2, [pc, #380]	@ (80016dc <HAL_DMA_Abort_IT+0x3cc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d01d      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x290>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a5d      	ldr	r2, [pc, #372]	@ (80016e0 <HAL_DMA_Abort_IT+0x3d0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d018      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x290>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a5c      	ldr	r2, [pc, #368]	@ (80016e4 <HAL_DMA_Abort_IT+0x3d4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d013      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x290>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a5a      	ldr	r2, [pc, #360]	@ (80016e8 <HAL_DMA_Abort_IT+0x3d8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00e      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x290>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a59      	ldr	r2, [pc, #356]	@ (80016ec <HAL_DMA_Abort_IT+0x3dc>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d009      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x290>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a57      	ldr	r2, [pc, #348]	@ (80016f0 <HAL_DMA_Abort_IT+0x3e0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d004      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x290>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a56      	ldr	r2, [pc, #344]	@ (80016f4 <HAL_DMA_Abort_IT+0x3e4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d108      	bne.n	80015b2 <HAL_DMA_Abort_IT+0x2a2>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e007      	b.n	80015c2 <HAL_DMA_Abort_IT+0x2b2>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0201 	bic.w	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a3c      	ldr	r2, [pc, #240]	@ (80016b8 <HAL_DMA_Abort_IT+0x3a8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d072      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a3a      	ldr	r2, [pc, #232]	@ (80016bc <HAL_DMA_Abort_IT+0x3ac>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d06d      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a39      	ldr	r2, [pc, #228]	@ (80016c0 <HAL_DMA_Abort_IT+0x3b0>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d068      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a37      	ldr	r2, [pc, #220]	@ (80016c4 <HAL_DMA_Abort_IT+0x3b4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d063      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a36      	ldr	r2, [pc, #216]	@ (80016c8 <HAL_DMA_Abort_IT+0x3b8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d05e      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a34      	ldr	r2, [pc, #208]	@ (80016cc <HAL_DMA_Abort_IT+0x3bc>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d059      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a33      	ldr	r2, [pc, #204]	@ (80016d0 <HAL_DMA_Abort_IT+0x3c0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d054      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a31      	ldr	r2, [pc, #196]	@ (80016d4 <HAL_DMA_Abort_IT+0x3c4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d04f      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a30      	ldr	r2, [pc, #192]	@ (80016d8 <HAL_DMA_Abort_IT+0x3c8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d04a      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a2e      	ldr	r2, [pc, #184]	@ (80016dc <HAL_DMA_Abort_IT+0x3cc>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d045      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a2d      	ldr	r2, [pc, #180]	@ (80016e0 <HAL_DMA_Abort_IT+0x3d0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d040      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a2b      	ldr	r2, [pc, #172]	@ (80016e4 <HAL_DMA_Abort_IT+0x3d4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d03b      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a2a      	ldr	r2, [pc, #168]	@ (80016e8 <HAL_DMA_Abort_IT+0x3d8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d036      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a28      	ldr	r2, [pc, #160]	@ (80016ec <HAL_DMA_Abort_IT+0x3dc>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d031      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a27      	ldr	r2, [pc, #156]	@ (80016f0 <HAL_DMA_Abort_IT+0x3e0>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d02c      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a25      	ldr	r2, [pc, #148]	@ (80016f4 <HAL_DMA_Abort_IT+0x3e4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d027      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a24      	ldr	r2, [pc, #144]	@ (80016f8 <HAL_DMA_Abort_IT+0x3e8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d022      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a22      	ldr	r2, [pc, #136]	@ (80016fc <HAL_DMA_Abort_IT+0x3ec>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d01d      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a21      	ldr	r2, [pc, #132]	@ (8001700 <HAL_DMA_Abort_IT+0x3f0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d018      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a1f      	ldr	r2, [pc, #124]	@ (8001704 <HAL_DMA_Abort_IT+0x3f4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d013      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a1e      	ldr	r2, [pc, #120]	@ (8001708 <HAL_DMA_Abort_IT+0x3f8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d00e      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1c      	ldr	r2, [pc, #112]	@ (800170c <HAL_DMA_Abort_IT+0x3fc>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d009      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001710 <HAL_DMA_Abort_IT+0x400>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d004      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x3a2>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a19      	ldr	r2, [pc, #100]	@ (8001714 <HAL_DMA_Abort_IT+0x404>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d132      	bne.n	8001718 <HAL_DMA_Abort_IT+0x408>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e031      	b.n	800171a <HAL_DMA_Abort_IT+0x40a>
 80016b6:	bf00      	nop
 80016b8:	40020010 	.word	0x40020010
 80016bc:	40020028 	.word	0x40020028
 80016c0:	40020040 	.word	0x40020040
 80016c4:	40020058 	.word	0x40020058
 80016c8:	40020070 	.word	0x40020070
 80016cc:	40020088 	.word	0x40020088
 80016d0:	400200a0 	.word	0x400200a0
 80016d4:	400200b8 	.word	0x400200b8
 80016d8:	40020410 	.word	0x40020410
 80016dc:	40020428 	.word	0x40020428
 80016e0:	40020440 	.word	0x40020440
 80016e4:	40020458 	.word	0x40020458
 80016e8:	40020470 	.word	0x40020470
 80016ec:	40020488 	.word	0x40020488
 80016f0:	400204a0 	.word	0x400204a0
 80016f4:	400204b8 	.word	0x400204b8
 80016f8:	58025408 	.word	0x58025408
 80016fc:	5802541c 	.word	0x5802541c
 8001700:	58025430 	.word	0x58025430
 8001704:	58025444 	.word	0x58025444
 8001708:	58025458 	.word	0x58025458
 800170c:	5802546c 	.word	0x5802546c
 8001710:	58025480 	.word	0x58025480
 8001714:	58025494 	.word	0x58025494
 8001718:	2300      	movs	r3, #0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d028      	beq.n	8001770 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001728:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800172c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001732:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001738:	f003 031f 	and.w	r3, r3, #31
 800173c:	2201      	movs	r2, #1
 800173e:	409a      	lsls	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800174c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00c      	beq.n	8001770 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001760:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001764:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800176e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop

0800179c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017aa:	4b89      	ldr	r3, [pc, #548]	@ (80019d0 <HAL_GPIO_Init+0x234>)
 80017ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017ae:	e194      	b.n	8001ada <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2101      	movs	r1, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8186 	beq.w	8001ad4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d005      	beq.n	80017e0 <HAL_GPIO_Init+0x44>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d130      	bne.n	8001842 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001816:	2201      	movs	r2, #1
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	f003 0201 	and.w	r2, r3, #1
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b03      	cmp	r3, #3
 800184c:	d017      	beq.n	800187e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d123      	bne.n	80018d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	220f      	movs	r2, #15
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	08da      	lsrs	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	69b9      	ldr	r1, [r7, #24]
 80018ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0203 	and.w	r2, r3, #3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 80e0 	beq.w	8001ad4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001914:	4b2f      	ldr	r3, [pc, #188]	@ (80019d4 <HAL_GPIO_Init+0x238>)
 8001916:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800191a:	4a2e      	ldr	r2, [pc, #184]	@ (80019d4 <HAL_GPIO_Init+0x238>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001924:	4b2b      	ldr	r3, [pc, #172]	@ (80019d4 <HAL_GPIO_Init+0x238>)
 8001926:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001932:	4a29      	ldr	r2, [pc, #164]	@ (80019d8 <HAL_GPIO_Init+0x23c>)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	220f      	movs	r2, #15
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a20      	ldr	r2, [pc, #128]	@ (80019dc <HAL_GPIO_Init+0x240>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d052      	beq.n	8001a04 <HAL_GPIO_Init+0x268>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a1f      	ldr	r2, [pc, #124]	@ (80019e0 <HAL_GPIO_Init+0x244>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <HAL_GPIO_Init+0x22e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a1e      	ldr	r2, [pc, #120]	@ (80019e4 <HAL_GPIO_Init+0x248>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d02b      	beq.n	80019c6 <HAL_GPIO_Init+0x22a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a1d      	ldr	r2, [pc, #116]	@ (80019e8 <HAL_GPIO_Init+0x24c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d025      	beq.n	80019c2 <HAL_GPIO_Init+0x226>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a1c      	ldr	r2, [pc, #112]	@ (80019ec <HAL_GPIO_Init+0x250>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d01f      	beq.n	80019be <HAL_GPIO_Init+0x222>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a1b      	ldr	r2, [pc, #108]	@ (80019f0 <HAL_GPIO_Init+0x254>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d019      	beq.n	80019ba <HAL_GPIO_Init+0x21e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a1a      	ldr	r2, [pc, #104]	@ (80019f4 <HAL_GPIO_Init+0x258>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0x21a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a19      	ldr	r2, [pc, #100]	@ (80019f8 <HAL_GPIO_Init+0x25c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00d      	beq.n	80019b2 <HAL_GPIO_Init+0x216>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a18      	ldr	r2, [pc, #96]	@ (80019fc <HAL_GPIO_Init+0x260>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d007      	beq.n	80019ae <HAL_GPIO_Init+0x212>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a17      	ldr	r2, [pc, #92]	@ (8001a00 <HAL_GPIO_Init+0x264>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_GPIO_Init+0x20e>
 80019a6:	2309      	movs	r3, #9
 80019a8:	e02d      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019aa:	230a      	movs	r3, #10
 80019ac:	e02b      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019ae:	2308      	movs	r3, #8
 80019b0:	e029      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019b2:	2307      	movs	r3, #7
 80019b4:	e027      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019b6:	2306      	movs	r3, #6
 80019b8:	e025      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019ba:	2305      	movs	r3, #5
 80019bc:	e023      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019be:	2304      	movs	r3, #4
 80019c0:	e021      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019c2:	2303      	movs	r3, #3
 80019c4:	e01f      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e01d      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e01b      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019ce:	bf00      	nop
 80019d0:	58000080 	.word	0x58000080
 80019d4:	58024400 	.word	0x58024400
 80019d8:	58000400 	.word	0x58000400
 80019dc:	58020000 	.word	0x58020000
 80019e0:	58020400 	.word	0x58020400
 80019e4:	58020800 	.word	0x58020800
 80019e8:	58020c00 	.word	0x58020c00
 80019ec:	58021000 	.word	0x58021000
 80019f0:	58021400 	.word	0x58021400
 80019f4:	58021800 	.word	0x58021800
 80019f8:	58021c00 	.word	0x58021c00
 80019fc:	58022000 	.word	0x58022000
 8001a00:	58022400 	.word	0x58022400
 8001a04:	2300      	movs	r3, #0
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	f002 0203 	and.w	r2, r2, #3
 8001a0c:	0092      	lsls	r2, r2, #2
 8001a0e:	4093      	lsls	r3, r2
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a16:	4938      	ldr	r1, [pc, #224]	@ (8001af8 <HAL_GPIO_Init+0x35c>)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f47f ae63 	bne.w	80017b0 <HAL_GPIO_Init+0x14>
  }
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	3724      	adds	r7, #36	@ 0x24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	58000400 	.word	0x58000400

08001afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b0c:	787b      	ldrb	r3, [r7, #1]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b18:	e003      	b.n	8001b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b1a:	887b      	ldrh	r3, [r7, #2]
 8001b1c:	041a      	lsls	r2, r3, #16
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	619a      	str	r2, [r3, #24]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b085      	sub	sp, #20
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	460b      	mov	r3, r1
 8001b38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b40:	887a      	ldrh	r2, [r7, #2]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4013      	ands	r3, r2
 8001b46:	041a      	lsls	r2, r3, #16
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	400b      	ands	r3, r1
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	619a      	str	r2, [r3, #24]
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001b6c:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <HAL_PWREx_ConfigSupply+0x70>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d00a      	beq.n	8001b8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b78:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <HAL_PWREx_ConfigSupply+0x70>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d001      	beq.n	8001b8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e01f      	b.n	8001bca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e01d      	b.n	8001bca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b8e:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <HAL_PWREx_ConfigSupply+0x70>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f023 0207 	bic.w	r2, r3, #7
 8001b96:	490f      	ldr	r1, [pc, #60]	@ (8001bd4 <HAL_PWREx_ConfigSupply+0x70>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b9e:	f7ff f9f3 	bl	8000f88 <HAL_GetTick>
 8001ba2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ba4:	e009      	b.n	8001bba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ba6:	f7ff f9ef 	bl	8000f88 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bb4:	d901      	bls.n	8001bba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e007      	b.n	8001bca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <HAL_PWREx_ConfigSupply+0x70>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bc6:	d1ee      	bne.n	8001ba6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	58024800 	.word	0x58024800

08001bd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	@ 0x30
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	f000 bc48 	b.w	800247c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 8088 	beq.w	8001d0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bfa:	4b99      	ldr	r3, [pc, #612]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c04:	4b96      	ldr	r3, [pc, #600]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c08:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c0c:	2b10      	cmp	r3, #16
 8001c0e:	d007      	beq.n	8001c20 <HAL_RCC_OscConfig+0x48>
 8001c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c12:	2b18      	cmp	r3, #24
 8001c14:	d111      	bne.n	8001c3a <HAL_RCC_OscConfig+0x62>
 8001c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d10c      	bne.n	8001c3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c20:	4b8f      	ldr	r3, [pc, #572]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d06d      	beq.n	8001d08 <HAL_RCC_OscConfig+0x130>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d169      	bne.n	8001d08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	f000 bc21 	b.w	800247c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x7a>
 8001c44:	4b86      	ldr	r3, [pc, #536]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a85      	ldr	r2, [pc, #532]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	e02e      	b.n	8001cb0 <HAL_RCC_OscConfig+0xd8>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x9c>
 8001c5a:	4b81      	ldr	r3, [pc, #516]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a80      	ldr	r2, [pc, #512]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b7e      	ldr	r3, [pc, #504]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a7d      	ldr	r2, [pc, #500]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001c6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e01d      	b.n	8001cb0 <HAL_RCC_OscConfig+0xd8>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0xc0>
 8001c7e:	4b78      	ldr	r3, [pc, #480]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a77      	ldr	r2, [pc, #476]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b75      	ldr	r3, [pc, #468]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a74      	ldr	r2, [pc, #464]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0xd8>
 8001c98:	4b71      	ldr	r3, [pc, #452]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a70      	ldr	r2, [pc, #448]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b6e      	ldr	r3, [pc, #440]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a6d      	ldr	r2, [pc, #436]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f966 	bl	8000f88 <HAL_GetTick>
 8001cbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff f962 	bl	8000f88 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	@ 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e3d4      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cd2:	4b63      	ldr	r3, [pc, #396]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xe8>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f952 	bl	8000f88 <HAL_GetTick>
 8001ce4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f94e 	bl	8000f88 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	@ 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e3c0      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cfa:	4b59      	ldr	r3, [pc, #356]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x110>
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80ca 	beq.w	8001eac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d18:	4b51      	ldr	r3, [pc, #324]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d22:	4b4f      	ldr	r3, [pc, #316]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d26:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d007      	beq.n	8001d3e <HAL_RCC_OscConfig+0x166>
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	2b18      	cmp	r3, #24
 8001d32:	d156      	bne.n	8001de2 <HAL_RCC_OscConfig+0x20a>
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d151      	bne.n	8001de2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d3e:	4b48      	ldr	r3, [pc, #288]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_RCC_OscConfig+0x17e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e392      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d56:	4b42      	ldr	r3, [pc, #264]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 0219 	bic.w	r2, r3, #25
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	493f      	ldr	r1, [pc, #252]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff f90e 	bl	8000f88 <HAL_GetTick>
 8001d6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d70:	f7ff f90a 	bl	8000f88 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e37c      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d82:	4b37      	ldr	r3, [pc, #220]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8e:	f7ff f92b 	bl	8000fe8 <HAL_GetREVID>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d817      	bhi.n	8001dcc <HAL_RCC_OscConfig+0x1f4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2b40      	cmp	r3, #64	@ 0x40
 8001da2:	d108      	bne.n	8001db6 <HAL_RCC_OscConfig+0x1de>
 8001da4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001dac:	4a2c      	ldr	r2, [pc, #176]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db4:	e07a      	b.n	8001eac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	031b      	lsls	r3, r3, #12
 8001dc4:	4926      	ldr	r1, [pc, #152]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dca:	e06f      	b.n	8001eac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dcc:	4b24      	ldr	r3, [pc, #144]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	061b      	lsls	r3, r3, #24
 8001dda:	4921      	ldr	r1, [pc, #132]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de0:	e064      	b.n	8001eac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d047      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dea:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 0219 	bic.w	r2, r3, #25
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	491a      	ldr	r1, [pc, #104]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff f8c4 	bl	8000f88 <HAL_GetTick>
 8001e00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e04:	f7ff f8c0 	bl	8000f88 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e332      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e16:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e22:	f7ff f8e1 	bl	8000fe8 <HAL_GetREVID>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d819      	bhi.n	8001e64 <HAL_RCC_OscConfig+0x28c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	2b40      	cmp	r3, #64	@ 0x40
 8001e36:	d108      	bne.n	8001e4a <HAL_RCC_OscConfig+0x272>
 8001e38:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001e40:	4a07      	ldr	r2, [pc, #28]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001e42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e46:	6053      	str	r3, [r2, #4]
 8001e48:	e030      	b.n	8001eac <HAL_RCC_OscConfig+0x2d4>
 8001e4a:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	031b      	lsls	r3, r3, #12
 8001e58:	4901      	ldr	r1, [pc, #4]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	604b      	str	r3, [r1, #4]
 8001e5e:	e025      	b.n	8001eac <HAL_RCC_OscConfig+0x2d4>
 8001e60:	58024400 	.word	0x58024400
 8001e64:	4b9a      	ldr	r3, [pc, #616]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	061b      	lsls	r3, r3, #24
 8001e72:	4997      	ldr	r1, [pc, #604]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
 8001e78:	e018      	b.n	8001eac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7a:	4b95      	ldr	r3, [pc, #596]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a94      	ldr	r2, [pc, #592]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7ff f87f 	bl	8000f88 <HAL_GetTick>
 8001e8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f87b 	bl	8000f88 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e2ed      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ea0:	4b8b      	ldr	r3, [pc, #556]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f0      	bne.n	8001e8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80a9 	beq.w	800200c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eba:	4b85      	ldr	r3, [pc, #532]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ec2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ec4:	4b82      	ldr	r3, [pc, #520]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d007      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x308>
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2b18      	cmp	r3, #24
 8001ed4:	d13a      	bne.n	8001f4c <HAL_RCC_OscConfig+0x374>
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d135      	bne.n	8001f4c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ee0:	4b7b      	ldr	r3, [pc, #492]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x320>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2b80      	cmp	r3, #128	@ 0x80
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e2c1      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ef8:	f7ff f876 	bl	8000fe8 <HAL_GetREVID>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d817      	bhi.n	8001f36 <HAL_RCC_OscConfig+0x35e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	2b20      	cmp	r3, #32
 8001f0c:	d108      	bne.n	8001f20 <HAL_RCC_OscConfig+0x348>
 8001f0e:	4b70      	ldr	r3, [pc, #448]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f16:	4a6e      	ldr	r2, [pc, #440]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001f18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f1c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f1e:	e075      	b.n	800200c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f20:	4b6b      	ldr	r3, [pc, #428]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	069b      	lsls	r3, r3, #26
 8001f2e:	4968      	ldr	r1, [pc, #416]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f34:	e06a      	b.n	800200c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f36:	4b66      	ldr	r3, [pc, #408]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	061b      	lsls	r3, r3, #24
 8001f44:	4962      	ldr	r1, [pc, #392]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f4a:	e05f      	b.n	800200c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d042      	beq.n	8001fda <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f54:	4b5e      	ldr	r3, [pc, #376]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a5d      	ldr	r2, [pc, #372]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff f812 	bl	8000f88 <HAL_GetTick>
 8001f64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f68:	f7ff f80e 	bl	8000f88 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e280      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f7a:	4b55      	ldr	r3, [pc, #340]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f86:	f7ff f82f 	bl	8000fe8 <HAL_GetREVID>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d817      	bhi.n	8001fc4 <HAL_RCC_OscConfig+0x3ec>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d108      	bne.n	8001fae <HAL_RCC_OscConfig+0x3d6>
 8001f9c:	4b4c      	ldr	r3, [pc, #304]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001fa4:	4a4a      	ldr	r2, [pc, #296]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001fa6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001faa:	6053      	str	r3, [r2, #4]
 8001fac:	e02e      	b.n	800200c <HAL_RCC_OscConfig+0x434>
 8001fae:	4b48      	ldr	r3, [pc, #288]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	069b      	lsls	r3, r3, #26
 8001fbc:	4944      	ldr	r1, [pc, #272]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
 8001fc2:	e023      	b.n	800200c <HAL_RCC_OscConfig+0x434>
 8001fc4:	4b42      	ldr	r3, [pc, #264]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	493f      	ldr	r1, [pc, #252]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60cb      	str	r3, [r1, #12]
 8001fd8:	e018      	b.n	800200c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001fda:	4b3d      	ldr	r3, [pc, #244]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a3c      	ldr	r2, [pc, #240]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8001fe0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7fe ffcf 	bl	8000f88 <HAL_GetTick>
 8001fea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001fee:	f7fe ffcb 	bl	8000f88 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e23d      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002000:	4b33      	ldr	r3, [pc, #204]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d036      	beq.n	8002086 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d019      	beq.n	8002054 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002020:	4b2b      	ldr	r3, [pc, #172]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8002022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002024:	4a2a      	ldr	r2, [pc, #168]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202c:	f7fe ffac 	bl	8000f88 <HAL_GetTick>
 8002030:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002034:	f7fe ffa8 	bl	8000f88 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e21a      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002046:	4b22      	ldr	r3, [pc, #136]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8002048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x45c>
 8002052:	e018      	b.n	8002086 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002054:	4b1e      	ldr	r3, [pc, #120]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 8002056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002058:	4a1d      	ldr	r2, [pc, #116]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002060:	f7fe ff92 	bl	8000f88 <HAL_GetTick>
 8002064:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002068:	f7fe ff8e 	bl	8000f88 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e200      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800207a:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 800207c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	2b00      	cmp	r3, #0
 8002090:	d039      	beq.n	8002106 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d01c      	beq.n	80020d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800209a:	4b0d      	ldr	r3, [pc, #52]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a0c      	ldr	r2, [pc, #48]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020a6:	f7fe ff6f 	bl	8000f88 <HAL_GetTick>
 80020aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ae:	f7fe ff6b 	bl	8000f88 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e1dd      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020c0:	4b03      	ldr	r3, [pc, #12]	@ (80020d0 <HAL_RCC_OscConfig+0x4f8>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x4d6>
 80020cc:	e01b      	b.n	8002106 <HAL_RCC_OscConfig+0x52e>
 80020ce:	bf00      	nop
 80020d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020d4:	4b9b      	ldr	r3, [pc, #620]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a9a      	ldr	r2, [pc, #616]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80020da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020e0:	f7fe ff52 	bl	8000f88 <HAL_GetTick>
 80020e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020e8:	f7fe ff4e 	bl	8000f88 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e1c0      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020fa:	4b92      	ldr	r3, [pc, #584]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8081 	beq.w	8002216 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002114:	4b8c      	ldr	r3, [pc, #560]	@ (8002348 <HAL_RCC_OscConfig+0x770>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a8b      	ldr	r2, [pc, #556]	@ (8002348 <HAL_RCC_OscConfig+0x770>)
 800211a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800211e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002120:	f7fe ff32 	bl	8000f88 <HAL_GetTick>
 8002124:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002128:	f7fe ff2e 	bl	8000f88 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	@ 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e1a0      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800213a:	4b83      	ldr	r3, [pc, #524]	@ (8002348 <HAL_RCC_OscConfig+0x770>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d106      	bne.n	800215c <HAL_RCC_OscConfig+0x584>
 800214e:	4b7d      	ldr	r3, [pc, #500]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002152:	4a7c      	ldr	r2, [pc, #496]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6713      	str	r3, [r2, #112]	@ 0x70
 800215a:	e02d      	b.n	80021b8 <HAL_RCC_OscConfig+0x5e0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10c      	bne.n	800217e <HAL_RCC_OscConfig+0x5a6>
 8002164:	4b77      	ldr	r3, [pc, #476]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002168:	4a76      	ldr	r2, [pc, #472]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002170:	4b74      	ldr	r3, [pc, #464]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002174:	4a73      	ldr	r2, [pc, #460]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002176:	f023 0304 	bic.w	r3, r3, #4
 800217a:	6713      	str	r3, [r2, #112]	@ 0x70
 800217c:	e01c      	b.n	80021b8 <HAL_RCC_OscConfig+0x5e0>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b05      	cmp	r3, #5
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x5c8>
 8002186:	4b6f      	ldr	r3, [pc, #444]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218a:	4a6e      	ldr	r2, [pc, #440]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 800218c:	f043 0304 	orr.w	r3, r3, #4
 8002190:	6713      	str	r3, [r2, #112]	@ 0x70
 8002192:	4b6c      	ldr	r3, [pc, #432]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002196:	4a6b      	ldr	r2, [pc, #428]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6713      	str	r3, [r2, #112]	@ 0x70
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0x5e0>
 80021a0:	4b68      	ldr	r3, [pc, #416]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a4:	4a67      	ldr	r2, [pc, #412]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80021a6:	f023 0301 	bic.w	r3, r3, #1
 80021aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ac:	4b65      	ldr	r3, [pc, #404]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b0:	4a64      	ldr	r2, [pc, #400]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80021b2:	f023 0304 	bic.w	r3, r3, #4
 80021b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d015      	beq.n	80021ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c0:	f7fe fee2 	bl	8000f88 <HAL_GetTick>
 80021c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021c6:	e00a      	b.n	80021de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c8:	f7fe fede 	bl	8000f88 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e14e      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021de:	4b59      	ldr	r3, [pc, #356]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0ee      	beq.n	80021c8 <HAL_RCC_OscConfig+0x5f0>
 80021ea:	e014      	b.n	8002216 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ec:	f7fe fecc 	bl	8000f88 <HAL_GetTick>
 80021f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021f2:	e00a      	b.n	800220a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f7fe fec8 	bl	8000f88 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e138      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800220a:	4b4e      	ldr	r3, [pc, #312]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1ee      	bne.n	80021f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 812d 	beq.w	800247a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002220:	4b48      	ldr	r3, [pc, #288]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002228:	2b18      	cmp	r3, #24
 800222a:	f000 80bd 	beq.w	80023a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002232:	2b02      	cmp	r3, #2
 8002234:	f040 809e 	bne.w	8002374 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002238:	4b42      	ldr	r3, [pc, #264]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a41      	ldr	r2, [pc, #260]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 800223e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe fea0 	bl	8000f88 <HAL_GetTick>
 8002248:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7fe fe9c 	bl	8000f88 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e10e      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800225e:	4b39      	ldr	r3, [pc, #228]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800226a:	4b36      	ldr	r3, [pc, #216]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 800226c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800226e:	4b37      	ldr	r3, [pc, #220]	@ (800234c <HAL_RCC_OscConfig+0x774>)
 8002270:	4013      	ands	r3, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800227a:	0112      	lsls	r2, r2, #4
 800227c:	430a      	orrs	r2, r1
 800227e:	4931      	ldr	r1, [pc, #196]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002280:	4313      	orrs	r3, r2
 8002282:	628b      	str	r3, [r1, #40]	@ 0x28
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002288:	3b01      	subs	r3, #1
 800228a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002292:	3b01      	subs	r3, #1
 8002294:	025b      	lsls	r3, r3, #9
 8002296:	b29b      	uxth	r3, r3
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229e:	3b01      	subs	r3, #1
 80022a0:	041b      	lsls	r3, r3, #16
 80022a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ac:	3b01      	subs	r3, #1
 80022ae:	061b      	lsls	r3, r3, #24
 80022b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80022b4:	4923      	ldr	r1, [pc, #140]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80022ba:	4b22      	ldr	r3, [pc, #136]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80022bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022be:	4a21      	ldr	r2, [pc, #132]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80022c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022ca:	4b21      	ldr	r3, [pc, #132]	@ (8002350 <HAL_RCC_OscConfig+0x778>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022d2:	00d2      	lsls	r2, r2, #3
 80022d4:	491b      	ldr	r1, [pc, #108]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022da:	4b1a      	ldr	r3, [pc, #104]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80022dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022de:	f023 020c 	bic.w	r2, r3, #12
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	4917      	ldr	r1, [pc, #92]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80022ec:	4b15      	ldr	r3, [pc, #84]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80022ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f0:	f023 0202 	bic.w	r2, r3, #2
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f8:	4912      	ldr	r1, [pc, #72]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022fe:	4b11      	ldr	r3, [pc, #68]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002302:	4a10      	ldr	r2, [pc, #64]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002308:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800230a:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 800230c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230e:	4a0d      	ldr	r2, [pc, #52]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002314:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002316:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231a:	4a0a      	ldr	r2, [pc, #40]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002320:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002322:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002326:	4a07      	ldr	r2, [pc, #28]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800232e:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <HAL_RCC_OscConfig+0x76c>)
 8002334:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233a:	f7fe fe25 	bl	8000f88 <HAL_GetTick>
 800233e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002340:	e011      	b.n	8002366 <HAL_RCC_OscConfig+0x78e>
 8002342:	bf00      	nop
 8002344:	58024400 	.word	0x58024400
 8002348:	58024800 	.word	0x58024800
 800234c:	fffffc0c 	.word	0xfffffc0c
 8002350:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002354:	f7fe fe18 	bl	8000f88 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e08a      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002366:	4b47      	ldr	r3, [pc, #284]	@ (8002484 <HAL_RCC_OscConfig+0x8ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x77c>
 8002372:	e082      	b.n	800247a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002374:	4b43      	ldr	r3, [pc, #268]	@ (8002484 <HAL_RCC_OscConfig+0x8ac>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a42      	ldr	r2, [pc, #264]	@ (8002484 <HAL_RCC_OscConfig+0x8ac>)
 800237a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800237e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7fe fe02 	bl	8000f88 <HAL_GetTick>
 8002384:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002388:	f7fe fdfe 	bl	8000f88 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e070      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800239a:	4b3a      	ldr	r3, [pc, #232]	@ (8002484 <HAL_RCC_OscConfig+0x8ac>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x7b0>
 80023a6:	e068      	b.n	800247a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80023a8:	4b36      	ldr	r3, [pc, #216]	@ (8002484 <HAL_RCC_OscConfig+0x8ac>)
 80023aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80023ae:	4b35      	ldr	r3, [pc, #212]	@ (8002484 <HAL_RCC_OscConfig+0x8ac>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d031      	beq.n	8002420 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f003 0203 	and.w	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d12a      	bne.n	8002420 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d122      	bne.n	8002420 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d11a      	bne.n	8002420 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	0a5b      	lsrs	r3, r3, #9
 80023ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d111      	bne.n	8002420 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	0c1b      	lsrs	r3, r3, #16
 8002400:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002408:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d108      	bne.n	8002420 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	0e1b      	lsrs	r3, r3, #24
 8002412:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e02b      	b.n	800247c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002424:	4b17      	ldr	r3, [pc, #92]	@ (8002484 <HAL_RCC_OscConfig+0x8ac>)
 8002426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002428:	08db      	lsrs	r3, r3, #3
 800242a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800242e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	429a      	cmp	r2, r3
 8002438:	d01f      	beq.n	800247a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800243a:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <HAL_RCC_OscConfig+0x8ac>)
 800243c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243e:	4a11      	ldr	r2, [pc, #68]	@ (8002484 <HAL_RCC_OscConfig+0x8ac>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002446:	f7fe fd9f 	bl	8000f88 <HAL_GetTick>
 800244a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800244c:	bf00      	nop
 800244e:	f7fe fd9b 	bl	8000f88 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	4293      	cmp	r3, r2
 8002458:	d0f9      	beq.n	800244e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800245a:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <HAL_RCC_OscConfig+0x8ac>)
 800245c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800245e:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <HAL_RCC_OscConfig+0x8b0>)
 8002460:	4013      	ands	r3, r2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002466:	00d2      	lsls	r2, r2, #3
 8002468:	4906      	ldr	r1, [pc, #24]	@ (8002484 <HAL_RCC_OscConfig+0x8ac>)
 800246a:	4313      	orrs	r3, r2
 800246c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800246e:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <HAL_RCC_OscConfig+0x8ac>)
 8002470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002472:	4a04      	ldr	r2, [pc, #16]	@ (8002484 <HAL_RCC_OscConfig+0x8ac>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3730      	adds	r7, #48	@ 0x30
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	58024400 	.word	0x58024400
 8002488:	ffff0007 	.word	0xffff0007

0800248c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e19c      	b.n	80027da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a0:	4b8a      	ldr	r3, [pc, #552]	@ (80026cc <HAL_RCC_ClockConfig+0x240>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d910      	bls.n	80024d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b87      	ldr	r3, [pc, #540]	@ (80026cc <HAL_RCC_ClockConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 020f 	bic.w	r2, r3, #15
 80024b6:	4985      	ldr	r1, [pc, #532]	@ (80026cc <HAL_RCC_ClockConfig+0x240>)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b83      	ldr	r3, [pc, #524]	@ (80026cc <HAL_RCC_ClockConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e184      	b.n	80027da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d010      	beq.n	80024fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	4b7b      	ldr	r3, [pc, #492]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d908      	bls.n	80024fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024ec:	4b78      	ldr	r3, [pc, #480]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	4975      	ldr	r1, [pc, #468]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d010      	beq.n	800252c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	4b70      	ldr	r3, [pc, #448]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002516:	429a      	cmp	r2, r3
 8002518:	d908      	bls.n	800252c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800251a:	4b6d      	ldr	r3, [pc, #436]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	496a      	ldr	r1, [pc, #424]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 8002528:	4313      	orrs	r3, r2
 800252a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b00      	cmp	r3, #0
 8002536:	d010      	beq.n	800255a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699a      	ldr	r2, [r3, #24]
 800253c:	4b64      	ldr	r3, [pc, #400]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002544:	429a      	cmp	r2, r3
 8002546:	d908      	bls.n	800255a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002548:	4b61      	ldr	r3, [pc, #388]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	495e      	ldr	r1, [pc, #376]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 8002556:	4313      	orrs	r3, r2
 8002558:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b00      	cmp	r3, #0
 8002564:	d010      	beq.n	8002588 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69da      	ldr	r2, [r3, #28]
 800256a:	4b59      	ldr	r3, [pc, #356]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002572:	429a      	cmp	r2, r3
 8002574:	d908      	bls.n	8002588 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002576:	4b56      	ldr	r3, [pc, #344]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	4953      	ldr	r1, [pc, #332]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 8002584:	4313      	orrs	r3, r2
 8002586:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d010      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	4b4d      	ldr	r3, [pc, #308]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d908      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a4:	4b4a      	ldr	r3, [pc, #296]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f023 020f 	bic.w	r2, r3, #15
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4947      	ldr	r1, [pc, #284]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d055      	beq.n	800266e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80025c2:	4b43      	ldr	r3, [pc, #268]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	4940      	ldr	r1, [pc, #256]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d107      	bne.n	80025ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025dc:	4b3c      	ldr	r3, [pc, #240]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d121      	bne.n	800262c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0f6      	b.n	80027da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d107      	bne.n	8002604 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025f4:	4b36      	ldr	r3, [pc, #216]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d115      	bne.n	800262c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0ea      	b.n	80027da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d107      	bne.n	800261c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800260c:	4b30      	ldr	r3, [pc, #192]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0de      	b.n	80027da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800261c:	4b2c      	ldr	r3, [pc, #176]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0d6      	b.n	80027da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800262c:	4b28      	ldr	r3, [pc, #160]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f023 0207 	bic.w	r2, r3, #7
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4925      	ldr	r1, [pc, #148]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 800263a:	4313      	orrs	r3, r2
 800263c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800263e:	f7fe fca3 	bl	8000f88 <HAL_GetTick>
 8002642:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002644:	e00a      	b.n	800265c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002646:	f7fe fc9f 	bl	8000f88 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e0be      	b.n	80027da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265c:	4b1c      	ldr	r3, [pc, #112]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	429a      	cmp	r2, r3
 800266c:	d1eb      	bne.n	8002646 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d010      	beq.n	800269c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	429a      	cmp	r2, r3
 8002688:	d208      	bcs.n	800269c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268a:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f023 020f 	bic.w	r2, r3, #15
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	490e      	ldr	r1, [pc, #56]	@ (80026d0 <HAL_RCC_ClockConfig+0x244>)
 8002698:	4313      	orrs	r3, r2
 800269a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800269c:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <HAL_RCC_ClockConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d214      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <HAL_RCC_ClockConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 020f 	bic.w	r2, r3, #15
 80026b2:	4906      	ldr	r1, [pc, #24]	@ (80026cc <HAL_RCC_ClockConfig+0x240>)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b04      	ldr	r3, [pc, #16]	@ (80026cc <HAL_RCC_ClockConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e086      	b.n	80027da <HAL_RCC_ClockConfig+0x34e>
 80026cc:	52002000 	.word	0x52002000
 80026d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d010      	beq.n	8002702 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	4b3f      	ldr	r3, [pc, #252]	@ (80027e4 <HAL_RCC_ClockConfig+0x358>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d208      	bcs.n	8002702 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026f0:	4b3c      	ldr	r3, [pc, #240]	@ (80027e4 <HAL_RCC_ClockConfig+0x358>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	4939      	ldr	r1, [pc, #228]	@ (80027e4 <HAL_RCC_ClockConfig+0x358>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d010      	beq.n	8002730 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	4b34      	ldr	r3, [pc, #208]	@ (80027e4 <HAL_RCC_ClockConfig+0x358>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800271a:	429a      	cmp	r2, r3
 800271c:	d208      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800271e:	4b31      	ldr	r3, [pc, #196]	@ (80027e4 <HAL_RCC_ClockConfig+0x358>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	492e      	ldr	r1, [pc, #184]	@ (80027e4 <HAL_RCC_ClockConfig+0x358>)
 800272c:	4313      	orrs	r3, r2
 800272e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	d010      	beq.n	800275e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	4b28      	ldr	r3, [pc, #160]	@ (80027e4 <HAL_RCC_ClockConfig+0x358>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002748:	429a      	cmp	r2, r3
 800274a:	d208      	bcs.n	800275e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800274c:	4b25      	ldr	r3, [pc, #148]	@ (80027e4 <HAL_RCC_ClockConfig+0x358>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	4922      	ldr	r1, [pc, #136]	@ (80027e4 <HAL_RCC_ClockConfig+0x358>)
 800275a:	4313      	orrs	r3, r2
 800275c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	2b00      	cmp	r3, #0
 8002768:	d010      	beq.n	800278c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69da      	ldr	r2, [r3, #28]
 800276e:	4b1d      	ldr	r3, [pc, #116]	@ (80027e4 <HAL_RCC_ClockConfig+0x358>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002776:	429a      	cmp	r2, r3
 8002778:	d208      	bcs.n	800278c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800277a:	4b1a      	ldr	r3, [pc, #104]	@ (80027e4 <HAL_RCC_ClockConfig+0x358>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4917      	ldr	r1, [pc, #92]	@ (80027e4 <HAL_RCC_ClockConfig+0x358>)
 8002788:	4313      	orrs	r3, r2
 800278a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800278c:	f000 f834 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <HAL_RCC_ClockConfig+0x358>)
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	0a1b      	lsrs	r3, r3, #8
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	4912      	ldr	r1, [pc, #72]	@ (80027e8 <HAL_RCC_ClockConfig+0x35c>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
 80027a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027aa:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <HAL_RCC_ClockConfig+0x358>)
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	4a0d      	ldr	r2, [pc, #52]	@ (80027e8 <HAL_RCC_ClockConfig+0x35c>)
 80027b4:	5cd3      	ldrb	r3, [r2, r3]
 80027b6:	f003 031f 	and.w	r3, r3, #31
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
 80027c0:	4a0a      	ldr	r2, [pc, #40]	@ (80027ec <HAL_RCC_ClockConfig+0x360>)
 80027c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027c4:	4a0a      	ldr	r2, [pc, #40]	@ (80027f0 <HAL_RCC_ClockConfig+0x364>)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80027ca:	4b0a      	ldr	r3, [pc, #40]	@ (80027f4 <HAL_RCC_ClockConfig+0x368>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fb90 	bl	8000ef4 <HAL_InitTick>
 80027d4:	4603      	mov	r3, r0
 80027d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	58024400 	.word	0x58024400
 80027e8:	080069b0 	.word	0x080069b0
 80027ec:	2400001c 	.word	0x2400001c
 80027f0:	24000018 	.word	0x24000018
 80027f4:	24000020 	.word	0x24000020

080027f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	@ 0x24
 80027fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027fe:	4bb3      	ldr	r3, [pc, #716]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002806:	2b18      	cmp	r3, #24
 8002808:	f200 8155 	bhi.w	8002ab6 <HAL_RCC_GetSysClockFreq+0x2be>
 800280c:	a201      	add	r2, pc, #4	@ (adr r2, 8002814 <HAL_RCC_GetSysClockFreq+0x1c>)
 800280e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002812:	bf00      	nop
 8002814:	08002879 	.word	0x08002879
 8002818:	08002ab7 	.word	0x08002ab7
 800281c:	08002ab7 	.word	0x08002ab7
 8002820:	08002ab7 	.word	0x08002ab7
 8002824:	08002ab7 	.word	0x08002ab7
 8002828:	08002ab7 	.word	0x08002ab7
 800282c:	08002ab7 	.word	0x08002ab7
 8002830:	08002ab7 	.word	0x08002ab7
 8002834:	0800289f 	.word	0x0800289f
 8002838:	08002ab7 	.word	0x08002ab7
 800283c:	08002ab7 	.word	0x08002ab7
 8002840:	08002ab7 	.word	0x08002ab7
 8002844:	08002ab7 	.word	0x08002ab7
 8002848:	08002ab7 	.word	0x08002ab7
 800284c:	08002ab7 	.word	0x08002ab7
 8002850:	08002ab7 	.word	0x08002ab7
 8002854:	080028a5 	.word	0x080028a5
 8002858:	08002ab7 	.word	0x08002ab7
 800285c:	08002ab7 	.word	0x08002ab7
 8002860:	08002ab7 	.word	0x08002ab7
 8002864:	08002ab7 	.word	0x08002ab7
 8002868:	08002ab7 	.word	0x08002ab7
 800286c:	08002ab7 	.word	0x08002ab7
 8002870:	08002ab7 	.word	0x08002ab7
 8002874:	080028ab 	.word	0x080028ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002878:	4b94      	ldr	r3, [pc, #592]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b00      	cmp	r3, #0
 8002882:	d009      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002884:	4b91      	ldr	r3, [pc, #580]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	08db      	lsrs	r3, r3, #3
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	4a90      	ldr	r2, [pc, #576]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
 8002894:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002896:	e111      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002898:	4b8d      	ldr	r3, [pc, #564]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800289a:	61bb      	str	r3, [r7, #24]
      break;
 800289c:	e10e      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800289e:	4b8d      	ldr	r3, [pc, #564]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028a0:	61bb      	str	r3, [r7, #24]
      break;
 80028a2:	e10b      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80028a4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80028a6:	61bb      	str	r3, [r7, #24]
      break;
 80028a8:	e108      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028aa:	4b88      	ldr	r3, [pc, #544]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80028b4:	4b85      	ldr	r3, [pc, #532]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028c0:	4b82      	ldr	r3, [pc, #520]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80028ca:	4b80      	ldr	r3, [pc, #512]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ce:	08db      	lsrs	r3, r3, #3
 80028d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	ee07 3a90 	vmov	s15, r3
 80028de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80e1 	beq.w	8002ab0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	f000 8083 	beq.w	80029fc <HAL_RCC_GetSysClockFreq+0x204>
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	f200 80a1 	bhi.w	8002a40 <HAL_RCC_GetSysClockFreq+0x248>
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x114>
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d056      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800290a:	e099      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800290c:	4b6f      	ldr	r3, [pc, #444]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d02d      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002918:	4b6c      	ldr	r3, [pc, #432]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	08db      	lsrs	r3, r3, #3
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	4a6b      	ldr	r2, [pc, #428]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002924:	fa22 f303 	lsr.w	r3, r2, r3
 8002928:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	ee07 3a90 	vmov	s15, r3
 8002930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	ee07 3a90 	vmov	s15, r3
 800293a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800293e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002942:	4b62      	ldr	r3, [pc, #392]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294a:	ee07 3a90 	vmov	s15, r3
 800294e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002952:	ed97 6a02 	vldr	s12, [r7, #8]
 8002956:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002adc <HAL_RCC_GetSysClockFreq+0x2e4>
 800295a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800295e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800296a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002972:	e087      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002ae0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002986:	4b51      	ldr	r3, [pc, #324]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002996:	ed97 6a02 	vldr	s12, [r7, #8]
 800299a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002adc <HAL_RCC_GetSysClockFreq+0x2e4>
 800299e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029b6:	e065      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	ee07 3a90 	vmov	s15, r3
 80029be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002ae4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ca:	4b40      	ldr	r3, [pc, #256]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d2:	ee07 3a90 	vmov	s15, r3
 80029d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029da:	ed97 6a02 	vldr	s12, [r7, #8]
 80029de:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002adc <HAL_RCC_GetSysClockFreq+0x2e4>
 80029e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029fa:	e043      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	ee07 3a90 	vmov	s15, r3
 8002a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a06:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002ae8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a16:	ee07 3a90 	vmov	s15, r3
 8002a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a22:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002adc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a3e:	e021      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002ae4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a52:	4b1e      	ldr	r3, [pc, #120]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5a:	ee07 3a90 	vmov	s15, r3
 8002a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a66:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002adc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a84:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a88:	0a5b      	lsrs	r3, r3, #9
 8002a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a8e:	3301      	adds	r3, #1
 8002a90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	ee07 3a90 	vmov	s15, r3
 8002a98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aa8:	ee17 3a90 	vmov	r3, s15
 8002aac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002aae:	e005      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]
      break;
 8002ab4:	e002      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002ab6:	4b07      	ldr	r3, [pc, #28]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ab8:	61bb      	str	r3, [r7, #24]
      break;
 8002aba:	bf00      	nop
  }

  return sysclockfreq;
 8002abc:	69bb      	ldr	r3, [r7, #24]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3724      	adds	r7, #36	@ 0x24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	58024400 	.word	0x58024400
 8002ad0:	03d09000 	.word	0x03d09000
 8002ad4:	003d0900 	.word	0x003d0900
 8002ad8:	017d7840 	.word	0x017d7840
 8002adc:	46000000 	.word	0x46000000
 8002ae0:	4c742400 	.word	0x4c742400
 8002ae4:	4a742400 	.word	0x4a742400
 8002ae8:	4bbebc20 	.word	0x4bbebc20

08002aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002af2:	f7ff fe81 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 8002af6:	4602      	mov	r2, r0
 8002af8:	4b10      	ldr	r3, [pc, #64]	@ (8002b3c <HAL_RCC_GetHCLKFreq+0x50>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	490f      	ldr	r1, [pc, #60]	@ (8002b40 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b04:	5ccb      	ldrb	r3, [r1, r3]
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b10:	4b0a      	ldr	r3, [pc, #40]	@ (8002b3c <HAL_RCC_GetHCLKFreq+0x50>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	4a09      	ldr	r2, [pc, #36]	@ (8002b40 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b1a:	5cd3      	ldrb	r3, [r2, r3]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	4a07      	ldr	r2, [pc, #28]	@ (8002b44 <HAL_RCC_GetHCLKFreq+0x58>)
 8002b28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b2a:	4a07      	ldr	r2, [pc, #28]	@ (8002b48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002b30:	4b04      	ldr	r3, [pc, #16]	@ (8002b44 <HAL_RCC_GetHCLKFreq+0x58>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	58024400 	.word	0x58024400
 8002b40:	080069b0 	.word	0x080069b0
 8002b44:	2400001c 	.word	0x2400001c
 8002b48:	24000018 	.word	0x24000018

08002b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002b50:	f7ff ffcc 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4904      	ldr	r1, [pc, #16]	@ (8002b74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	58024400 	.word	0x58024400
 8002b74:	080069b0 	.word	0x080069b0

08002b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002b7c:	f7ff ffb6 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4904      	ldr	r1, [pc, #16]	@ (8002ba0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	f003 031f 	and.w	r3, r3, #31
 8002b94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	58024400 	.word	0x58024400
 8002ba0:	080069b0 	.word	0x080069b0

08002ba4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba8:	b0ca      	sub	sp, #296	@ 0x128
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002bc8:	2500      	movs	r5, #0
 8002bca:	ea54 0305 	orrs.w	r3, r4, r5
 8002bce:	d049      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bd6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002bda:	d02f      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002bdc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002be0:	d828      	bhi.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002be2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002be6:	d01a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002be8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bec:	d822      	bhi.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002bf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bf6:	d007      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bf8:	e01c      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bfa:	4bb8      	ldr	r3, [pc, #736]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	4ab7      	ldr	r2, [pc, #732]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c06:	e01a      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c0c:	3308      	adds	r3, #8
 8002c0e:	2102      	movs	r1, #2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 fc8f 	bl	8004534 <RCCEx_PLL2_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c1c:	e00f      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c22:	3328      	adds	r3, #40	@ 0x28
 8002c24:	2102      	movs	r1, #2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 fd36 	bl	8004698 <RCCEx_PLL3_Config>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c32:	e004      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c3a:	e000      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10a      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002c46:	4ba5      	ldr	r3, [pc, #660]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c54:	4aa1      	ldr	r2, [pc, #644]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c56:	430b      	orrs	r3, r1
 8002c58:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c5a:	e003      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002c70:	f04f 0900 	mov.w	r9, #0
 8002c74:	ea58 0309 	orrs.w	r3, r8, r9
 8002c78:	d047      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d82a      	bhi.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002c84:	a201      	add	r2, pc, #4	@ (adr r2, 8002c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8a:	bf00      	nop
 8002c8c:	08002ca1 	.word	0x08002ca1
 8002c90:	08002caf 	.word	0x08002caf
 8002c94:	08002cc5 	.word	0x08002cc5
 8002c98:	08002ce3 	.word	0x08002ce3
 8002c9c:	08002ce3 	.word	0x08002ce3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca0:	4b8e      	ldr	r3, [pc, #568]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca4:	4a8d      	ldr	r2, [pc, #564]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002caa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cac:	e01a      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb2:	3308      	adds	r3, #8
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 fc3c 	bl	8004534 <RCCEx_PLL2_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cc2:	e00f      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc8:	3328      	adds	r3, #40	@ 0x28
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 fce3 	bl	8004698 <RCCEx_PLL3_Config>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cd8:	e004      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ce0:	e000      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10a      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cec:	4b7b      	ldr	r3, [pc, #492]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf0:	f023 0107 	bic.w	r1, r3, #7
 8002cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfa:	4a78      	ldr	r2, [pc, #480]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d00:	e003      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d12:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002d16:	f04f 0b00 	mov.w	fp, #0
 8002d1a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d1e:	d04c      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d2a:	d030      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d30:	d829      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d32:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d34:	d02d      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d36:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d38:	d825      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d3a:	2b80      	cmp	r3, #128	@ 0x80
 8002d3c:	d018      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002d3e:	2b80      	cmp	r3, #128	@ 0x80
 8002d40:	d821      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002d46:	2b40      	cmp	r3, #64	@ 0x40
 8002d48:	d007      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002d4a:	e01c      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d4c:	4b63      	ldr	r3, [pc, #396]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d50:	4a62      	ldr	r2, [pc, #392]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d58:	e01c      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d5e:	3308      	adds	r3, #8
 8002d60:	2100      	movs	r1, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f001 fbe6 	bl	8004534 <RCCEx_PLL2_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d6e:	e011      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d74:	3328      	adds	r3, #40	@ 0x28
 8002d76:	2100      	movs	r1, #0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 fc8d 	bl	8004698 <RCCEx_PLL3_Config>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d84:	e006      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d8c:	e002      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d8e:	bf00      	nop
 8002d90:	e000      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002d9c:	4b4f      	ldr	r3, [pc, #316]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002da0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002daa:	4a4c      	ldr	r2, [pc, #304]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dac:	430b      	orrs	r3, r1
 8002dae:	6513      	str	r3, [r2, #80]	@ 0x50
 8002db0:	e003      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002db6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002dc6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002dd0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	d053      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002de2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002de6:	d035      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002de8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dec:	d82e      	bhi.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002dee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002df2:	d031      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002df4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002df8:	d828      	bhi.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002dfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dfe:	d01a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002e00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e04:	d822      	bhi.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002e0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e0e:	d007      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002e10:	e01c      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e12:	4b32      	ldr	r3, [pc, #200]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e16:	4a31      	ldr	r2, [pc, #196]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e1e:	e01c      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e24:	3308      	adds	r3, #8
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f001 fb83 	bl	8004534 <RCCEx_PLL2_Config>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e34:	e011      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3a:	3328      	adds	r3, #40	@ 0x28
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 fc2a 	bl	8004698 <RCCEx_PLL3_Config>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e4a:	e006      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e52:	e002      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002e54:	bf00      	nop
 8002e56:	e000      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10b      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002e62:	4b1e      	ldr	r3, [pc, #120]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e66:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e72:	4a1a      	ldr	r2, [pc, #104]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e74:	430b      	orrs	r3, r1
 8002e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e78:	e003      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002e8e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002e92:	2300      	movs	r3, #0
 8002e94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002e98:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	d056      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002eaa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002eae:	d038      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002eb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002eb4:	d831      	bhi.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002eb6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002eba:	d034      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002ebc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ec0:	d82b      	bhi.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ec2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ec6:	d01d      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002ec8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ecc:	d825      	bhi.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002ed2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002ed8:	e01f      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002eda:	bf00      	nop
 8002edc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ee0:	4ba2      	ldr	r3, [pc, #648]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee4:	4aa1      	ldr	r2, [pc, #644]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002eec:	e01c      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef2:	3308      	adds	r3, #8
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 fb1c 	bl	8004534 <RCCEx_PLL2_Config>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f02:	e011      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f08:	3328      	adds	r3, #40	@ 0x28
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f001 fbc3 	bl	8004698 <RCCEx_PLL3_Config>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f18:	e006      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f20:	e002      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f22:	bf00      	nop
 8002f24:	e000      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10b      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f30:	4b8e      	ldr	r3, [pc, #568]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f34:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002f40:	4a8a      	ldr	r2, [pc, #552]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f42:	430b      	orrs	r3, r1
 8002f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f46:	e003      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f58:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002f5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002f60:	2300      	movs	r3, #0
 8002f62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002f66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	d03a      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f76:	2b30      	cmp	r3, #48	@ 0x30
 8002f78:	d01f      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002f7a:	2b30      	cmp	r3, #48	@ 0x30
 8002f7c:	d819      	bhi.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d00c      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d815      	bhi.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d019      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	d111      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f8e:	4b77      	ldr	r3, [pc, #476]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f92:	4a76      	ldr	r2, [pc, #472]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f9a:	e011      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f001 fac5 	bl	8004534 <RCCEx_PLL2_Config>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002fb0:	e006      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fb8:	e002      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002fc8:	4b68      	ldr	r3, [pc, #416]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fcc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd6:	4a65      	ldr	r2, [pc, #404]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fdc:	e003      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002ff2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002ffc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003000:	460b      	mov	r3, r1
 8003002:	4313      	orrs	r3, r2
 8003004:	d051      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003010:	d035      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003012:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003016:	d82e      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003018:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800301c:	d031      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800301e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003022:	d828      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003028:	d01a      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800302a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800302e:	d822      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003038:	d007      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800303a:	e01c      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800303c:	4b4b      	ldr	r3, [pc, #300]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800303e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003040:	4a4a      	ldr	r2, [pc, #296]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003048:	e01c      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800304a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304e:	3308      	adds	r3, #8
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f001 fa6e 	bl	8004534 <RCCEx_PLL2_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800305e:	e011      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003064:	3328      	adds	r3, #40	@ 0x28
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f001 fb15 	bl	8004698 <RCCEx_PLL3_Config>
 800306e:	4603      	mov	r3, r0
 8003070:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003074:	e006      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800307c:	e002      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800307e:	bf00      	nop
 8003080:	e000      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10a      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800308c:	4b37      	ldr	r3, [pc, #220]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800308e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003090:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800309a:	4a34      	ldr	r2, [pc, #208]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800309c:	430b      	orrs	r3, r1
 800309e:	6513      	str	r3, [r2, #80]	@ 0x50
 80030a0:	e003      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80030aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80030b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80030c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80030c4:	460b      	mov	r3, r1
 80030c6:	4313      	orrs	r3, r2
 80030c8:	d056      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80030ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030d4:	d033      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80030d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030da:	d82c      	bhi.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030e0:	d02f      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80030e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030e6:	d826      	bhi.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030ec:	d02b      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80030ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030f2:	d820      	bhi.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030f8:	d012      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80030fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030fe:	d81a      	bhi.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d022      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003108:	d115      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800310a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310e:	3308      	adds	r3, #8
 8003110:	2101      	movs	r1, #1
 8003112:	4618      	mov	r0, r3
 8003114:	f001 fa0e 	bl	8004534 <RCCEx_PLL2_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800311e:	e015      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003124:	3328      	adds	r3, #40	@ 0x28
 8003126:	2101      	movs	r1, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f001 fab5 	bl	8004698 <RCCEx_PLL3_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003134:	e00a      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800313c:	e006      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800313e:	bf00      	nop
 8003140:	e004      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003142:	bf00      	nop
 8003144:	e002      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003146:	bf00      	nop
 8003148:	e000      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800314a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800314c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10d      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003154:	4b05      	ldr	r3, [pc, #20]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003158:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800315c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003160:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003162:	4a02      	ldr	r2, [pc, #8]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003164:	430b      	orrs	r3, r1
 8003166:	6513      	str	r3, [r2, #80]	@ 0x50
 8003168:	e006      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800316a:	bf00      	nop
 800316c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003174:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003184:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003188:	2300      	movs	r3, #0
 800318a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800318e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003192:	460b      	mov	r3, r1
 8003194:	4313      	orrs	r3, r2
 8003196:	d055      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800319c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031a4:	d033      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80031a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031aa:	d82c      	bhi.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b0:	d02f      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80031b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b6:	d826      	bhi.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031bc:	d02b      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80031be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031c2:	d820      	bhi.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031c8:	d012      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80031ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031ce:	d81a      	bhi.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d022      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80031d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031d8:	d115      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031de:	3308      	adds	r3, #8
 80031e0:	2101      	movs	r1, #1
 80031e2:	4618      	mov	r0, r3
 80031e4:	f001 f9a6 	bl	8004534 <RCCEx_PLL2_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031ee:	e015      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f4:	3328      	adds	r3, #40	@ 0x28
 80031f6:	2101      	movs	r1, #1
 80031f8:	4618      	mov	r0, r3
 80031fa:	f001 fa4d 	bl	8004698 <RCCEx_PLL3_Config>
 80031fe:	4603      	mov	r3, r0
 8003200:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003204:	e00a      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800320c:	e006      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800320e:	bf00      	nop
 8003210:	e004      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003212:	bf00      	nop
 8003214:	e002      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003216:	bf00      	nop
 8003218:	e000      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800321a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800321c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003224:	4ba3      	ldr	r3, [pc, #652]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003228:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800322c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003230:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003234:	4a9f      	ldr	r2, [pc, #636]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003236:	430b      	orrs	r3, r1
 8003238:	6593      	str	r3, [r2, #88]	@ 0x58
 800323a:	e003      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003240:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003250:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003254:	2300      	movs	r3, #0
 8003256:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800325a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800325e:	460b      	mov	r3, r1
 8003260:	4313      	orrs	r3, r2
 8003262:	d037      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800326e:	d00e      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003274:	d816      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d018      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800327a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800327e:	d111      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003280:	4b8c      	ldr	r3, [pc, #560]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003284:	4a8b      	ldr	r2, [pc, #556]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800328a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800328c:	e00f      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800328e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003292:	3308      	adds	r3, #8
 8003294:	2101      	movs	r1, #1
 8003296:	4618      	mov	r0, r3
 8003298:	f001 f94c 	bl	8004534 <RCCEx_PLL2_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032a2:	e004      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032aa:	e000      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80032ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032b6:	4b7f      	ldr	r3, [pc, #508]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80032be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c4:	4a7b      	ldr	r2, [pc, #492]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032c6:	430b      	orrs	r3, r1
 80032c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80032ca:	e003      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80032d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80032e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032e4:	2300      	movs	r3, #0
 80032e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80032ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4313      	orrs	r3, r2
 80032f2:	d039      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80032f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d81c      	bhi.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80032fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003304 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003341 	.word	0x08003341
 8003308:	08003315 	.word	0x08003315
 800330c:	08003323 	.word	0x08003323
 8003310:	08003341 	.word	0x08003341
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003314:	4b67      	ldr	r3, [pc, #412]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	4a66      	ldr	r2, [pc, #408]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800331a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800331e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003320:	e00f      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003326:	3308      	adds	r3, #8
 8003328:	2102      	movs	r1, #2
 800332a:	4618      	mov	r0, r3
 800332c:	f001 f902 	bl	8004534 <RCCEx_PLL2_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003336:	e004      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800333e:	e000      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10a      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800334a:	4b5a      	ldr	r3, [pc, #360]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800334c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334e:	f023 0103 	bic.w	r1, r3, #3
 8003352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003358:	4a56      	ldr	r2, [pc, #344]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800335a:	430b      	orrs	r3, r1
 800335c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800335e:	e003      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003364:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003370:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003374:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003378:	2300      	movs	r3, #0
 800337a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800337e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003382:	460b      	mov	r3, r1
 8003384:	4313      	orrs	r3, r2
 8003386:	f000 809f 	beq.w	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800338a:	4b4b      	ldr	r3, [pc, #300]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a4a      	ldr	r2, [pc, #296]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003394:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003396:	f7fd fdf7 	bl	8000f88 <HAL_GetTick>
 800339a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800339e:	e00b      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a0:	f7fd fdf2 	bl	8000f88 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b64      	cmp	r3, #100	@ 0x64
 80033ae:	d903      	bls.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033b6:	e005      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033b8:	4b3f      	ldr	r3, [pc, #252]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ed      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80033c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d179      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80033cc:	4b39      	ldr	r3, [pc, #228]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033d8:	4053      	eors	r3, r2
 80033da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d015      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033e2:	4b34      	ldr	r3, [pc, #208]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033ee:	4b31      	ldr	r3, [pc, #196]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f2:	4a30      	ldr	r2, [pc, #192]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033fa:	4b2e      	ldr	r3, [pc, #184]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fe:	4a2d      	ldr	r2, [pc, #180]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003404:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003406:	4a2b      	ldr	r2, [pc, #172]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003408:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800340c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003412:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800341a:	d118      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fd fdb4 	bl	8000f88 <HAL_GetTick>
 8003420:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003424:	e00d      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f7fd fdaf 	bl	8000f88 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003430:	1ad2      	subs	r2, r2, r3
 8003432:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003436:	429a      	cmp	r2, r3
 8003438:	d903      	bls.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003440:	e005      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003442:	4b1c      	ldr	r3, [pc, #112]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0eb      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800344e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003452:	2b00      	cmp	r3, #0
 8003454:	d129      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800345e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003462:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003466:	d10e      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003468:	4b12      	ldr	r3, [pc, #72]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003474:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003478:	091a      	lsrs	r2, r3, #4
 800347a:	4b10      	ldr	r3, [pc, #64]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800347c:	4013      	ands	r3, r2
 800347e:	4a0d      	ldr	r2, [pc, #52]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003480:	430b      	orrs	r3, r1
 8003482:	6113      	str	r3, [r2, #16]
 8003484:	e005      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003486:	4b0b      	ldr	r3, [pc, #44]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	4a0a      	ldr	r2, [pc, #40]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800348c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003490:	6113      	str	r3, [r2, #16]
 8003492:	4b08      	ldr	r3, [pc, #32]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003494:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800349e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a2:	4a04      	ldr	r2, [pc, #16]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034a4:	430b      	orrs	r3, r1
 80034a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a8:	e00e      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80034b2:	e009      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80034b4:	58024400 	.word	0x58024400
 80034b8:	58024800 	.word	0x58024800
 80034bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80034c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	f002 0301 	and.w	r3, r2, #1
 80034d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034d8:	2300      	movs	r3, #0
 80034da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f000 8089 	beq.w	80035fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034f0:	2b28      	cmp	r3, #40	@ 0x28
 80034f2:	d86b      	bhi.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80034f4:	a201      	add	r2, pc, #4	@ (adr r2, 80034fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	080035d5 	.word	0x080035d5
 8003500:	080035cd 	.word	0x080035cd
 8003504:	080035cd 	.word	0x080035cd
 8003508:	080035cd 	.word	0x080035cd
 800350c:	080035cd 	.word	0x080035cd
 8003510:	080035cd 	.word	0x080035cd
 8003514:	080035cd 	.word	0x080035cd
 8003518:	080035cd 	.word	0x080035cd
 800351c:	080035a1 	.word	0x080035a1
 8003520:	080035cd 	.word	0x080035cd
 8003524:	080035cd 	.word	0x080035cd
 8003528:	080035cd 	.word	0x080035cd
 800352c:	080035cd 	.word	0x080035cd
 8003530:	080035cd 	.word	0x080035cd
 8003534:	080035cd 	.word	0x080035cd
 8003538:	080035cd 	.word	0x080035cd
 800353c:	080035b7 	.word	0x080035b7
 8003540:	080035cd 	.word	0x080035cd
 8003544:	080035cd 	.word	0x080035cd
 8003548:	080035cd 	.word	0x080035cd
 800354c:	080035cd 	.word	0x080035cd
 8003550:	080035cd 	.word	0x080035cd
 8003554:	080035cd 	.word	0x080035cd
 8003558:	080035cd 	.word	0x080035cd
 800355c:	080035d5 	.word	0x080035d5
 8003560:	080035cd 	.word	0x080035cd
 8003564:	080035cd 	.word	0x080035cd
 8003568:	080035cd 	.word	0x080035cd
 800356c:	080035cd 	.word	0x080035cd
 8003570:	080035cd 	.word	0x080035cd
 8003574:	080035cd 	.word	0x080035cd
 8003578:	080035cd 	.word	0x080035cd
 800357c:	080035d5 	.word	0x080035d5
 8003580:	080035cd 	.word	0x080035cd
 8003584:	080035cd 	.word	0x080035cd
 8003588:	080035cd 	.word	0x080035cd
 800358c:	080035cd 	.word	0x080035cd
 8003590:	080035cd 	.word	0x080035cd
 8003594:	080035cd 	.word	0x080035cd
 8003598:	080035cd 	.word	0x080035cd
 800359c:	080035d5 	.word	0x080035d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a4:	3308      	adds	r3, #8
 80035a6:	2101      	movs	r1, #1
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 ffc3 	bl	8004534 <RCCEx_PLL2_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80035b4:	e00f      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ba:	3328      	adds	r3, #40	@ 0x28
 80035bc:	2101      	movs	r1, #1
 80035be:	4618      	mov	r0, r3
 80035c0:	f001 f86a 	bl	8004698 <RCCEx_PLL3_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80035ca:	e004      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035d2:	e000      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80035d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10a      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80035de:	4bbf      	ldr	r3, [pc, #764]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80035e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035ec:	4abb      	ldr	r2, [pc, #748]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035ee:	430b      	orrs	r3, r1
 80035f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80035f2:	e003      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	f002 0302 	and.w	r3, r2, #2
 8003608:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800360c:	2300      	movs	r3, #0
 800360e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003612:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003616:	460b      	mov	r3, r1
 8003618:	4313      	orrs	r3, r2
 800361a:	d041      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800361c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003620:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003622:	2b05      	cmp	r3, #5
 8003624:	d824      	bhi.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003626:	a201      	add	r2, pc, #4	@ (adr r2, 800362c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362c:	08003679 	.word	0x08003679
 8003630:	08003645 	.word	0x08003645
 8003634:	0800365b 	.word	0x0800365b
 8003638:	08003679 	.word	0x08003679
 800363c:	08003679 	.word	0x08003679
 8003640:	08003679 	.word	0x08003679
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003648:	3308      	adds	r3, #8
 800364a:	2101      	movs	r1, #1
 800364c:	4618      	mov	r0, r3
 800364e:	f000 ff71 	bl	8004534 <RCCEx_PLL2_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003658:	e00f      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800365a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365e:	3328      	adds	r3, #40	@ 0x28
 8003660:	2101      	movs	r1, #1
 8003662:	4618      	mov	r0, r3
 8003664:	f001 f818 	bl	8004698 <RCCEx_PLL3_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800366e:	e004      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003676:	e000      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800367a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003682:	4b96      	ldr	r3, [pc, #600]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003686:	f023 0107 	bic.w	r1, r3, #7
 800368a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003690:	4a92      	ldr	r2, [pc, #584]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003692:	430b      	orrs	r3, r1
 8003694:	6553      	str	r3, [r2, #84]	@ 0x54
 8003696:	e003      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003698:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800369c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f002 0304 	and.w	r3, r2, #4
 80036ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4313      	orrs	r3, r2
 80036be:	d044      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036c8:	2b05      	cmp	r3, #5
 80036ca:	d825      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80036cc:	a201      	add	r2, pc, #4	@ (adr r2, 80036d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80036ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d2:	bf00      	nop
 80036d4:	08003721 	.word	0x08003721
 80036d8:	080036ed 	.word	0x080036ed
 80036dc:	08003703 	.word	0x08003703
 80036e0:	08003721 	.word	0x08003721
 80036e4:	08003721 	.word	0x08003721
 80036e8:	08003721 	.word	0x08003721
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f0:	3308      	adds	r3, #8
 80036f2:	2101      	movs	r1, #1
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 ff1d 	bl	8004534 <RCCEx_PLL2_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003700:	e00f      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003706:	3328      	adds	r3, #40	@ 0x28
 8003708:	2101      	movs	r1, #1
 800370a:	4618      	mov	r0, r3
 800370c:	f000 ffc4 	bl	8004698 <RCCEx_PLL3_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003716:	e004      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800371e:	e000      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800372a:	4b6c      	ldr	r3, [pc, #432]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800372c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372e:	f023 0107 	bic.w	r1, r3, #7
 8003732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800373a:	4a68      	ldr	r2, [pc, #416]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800373c:	430b      	orrs	r3, r1
 800373e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003740:	e003      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003746:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800374a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f002 0320 	and.w	r3, r2, #32
 8003756:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800375a:	2300      	movs	r3, #0
 800375c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003760:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003764:	460b      	mov	r3, r1
 8003766:	4313      	orrs	r3, r2
 8003768:	d055      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003772:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003776:	d033      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003778:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800377c:	d82c      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800377e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003782:	d02f      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003788:	d826      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800378a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800378e:	d02b      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003790:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003794:	d820      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003796:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800379a:	d012      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800379c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037a0:	d81a      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d022      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80037a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037aa:	d115      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b0:	3308      	adds	r3, #8
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 febd 	bl	8004534 <RCCEx_PLL2_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037c0:	e015      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c6:	3328      	adds	r3, #40	@ 0x28
 80037c8:	2102      	movs	r1, #2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 ff64 	bl	8004698 <RCCEx_PLL3_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037d6:	e00a      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037de:	e006      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037e0:	bf00      	nop
 80037e2:	e004      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037e4:	bf00      	nop
 80037e6:	e002      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037e8:	bf00      	nop
 80037ea:	e000      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10b      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037f6:	4b39      	ldr	r3, [pc, #228]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80037fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003806:	4a35      	ldr	r2, [pc, #212]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003808:	430b      	orrs	r3, r1
 800380a:	6553      	str	r3, [r2, #84]	@ 0x54
 800380c:	e003      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003826:	2300      	movs	r3, #0
 8003828:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800382c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003830:	460b      	mov	r3, r1
 8003832:	4313      	orrs	r3, r2
 8003834:	d058      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800383e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003842:	d033      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003844:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003848:	d82c      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800384a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800384e:	d02f      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003854:	d826      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003856:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800385a:	d02b      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800385c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003860:	d820      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003862:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003866:	d012      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800386c:	d81a      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d022      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003876:	d115      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387c:	3308      	adds	r3, #8
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fe57 	bl	8004534 <RCCEx_PLL2_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800388c:	e015      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800388e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003892:	3328      	adds	r3, #40	@ 0x28
 8003894:	2102      	movs	r1, #2
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fefe 	bl	8004698 <RCCEx_PLL3_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038a2:	e00a      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038aa:	e006      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80038ac:	bf00      	nop
 80038ae:	e004      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80038b0:	bf00      	nop
 80038b2:	e002      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80038b4:	bf00      	nop
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80038b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10e      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038c2:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80038ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038d2:	4a02      	ldr	r2, [pc, #8]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80038d8:	e006      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80038da:	bf00      	nop
 80038dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80038f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80038f8:	2300      	movs	r3, #0
 80038fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80038fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003902:	460b      	mov	r3, r1
 8003904:	4313      	orrs	r3, r2
 8003906:	d055      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003910:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003914:	d033      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003916:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800391a:	d82c      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800391c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003920:	d02f      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003926:	d826      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003928:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800392c:	d02b      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800392e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003932:	d820      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003938:	d012      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800393a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800393e:	d81a      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003940:	2b00      	cmp	r3, #0
 8003942:	d022      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003948:	d115      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394e:	3308      	adds	r3, #8
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fdee 	bl	8004534 <RCCEx_PLL2_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800395e:	e015      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003964:	3328      	adds	r3, #40	@ 0x28
 8003966:	2102      	movs	r1, #2
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fe95 	bl	8004698 <RCCEx_PLL3_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003974:	e00a      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800397c:	e006      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800397e:	bf00      	nop
 8003980:	e004      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003982:	bf00      	nop
 8003984:	e002      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003986:	bf00      	nop
 8003988:	e000      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800398a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800398c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10b      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003994:	4ba1      	ldr	r3, [pc, #644]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003998:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80039a4:	4a9d      	ldr	r2, [pc, #628]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039a6:	430b      	orrs	r3, r1
 80039a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80039aa:	e003      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f002 0308 	and.w	r3, r2, #8
 80039c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039c4:	2300      	movs	r3, #0
 80039c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80039ce:	460b      	mov	r3, r1
 80039d0:	4313      	orrs	r3, r2
 80039d2:	d01e      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80039d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039e0:	d10c      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e6:	3328      	adds	r3, #40	@ 0x28
 80039e8:	2102      	movs	r1, #2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fe54 	bl	8004698 <RCCEx_PLL3_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80039fc:	4b87      	ldr	r3, [pc, #540]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a00:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a0c:	4a83      	ldr	r2, [pc, #524]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	f002 0310 	and.w	r3, r2, #16
 8003a1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a22:	2300      	movs	r3, #0
 8003a24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a28:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	d01e      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a3e:	d10c      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a44:	3328      	adds	r3, #40	@ 0x28
 8003a46:	2102      	movs	r1, #2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fe25 	bl	8004698 <RCCEx_PLL3_Config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a5a:	4b70      	ldr	r3, [pc, #448]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a6a:	4a6c      	ldr	r2, [pc, #432]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003a7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a86:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	d03e      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a9c:	d022      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003a9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aa2:	d81b      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aac:	d00b      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003aae:	e015      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fd3b 	bl	8004534 <RCCEx_PLL2_Config>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ac4:	e00f      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aca:	3328      	adds	r3, #40	@ 0x28
 8003acc:	2102      	movs	r1, #2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fde2 	bl	8004698 <RCCEx_PLL3_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ada:	e004      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10b      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aee:	4b4b      	ldr	r3, [pc, #300]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003afe:	4a47      	ldr	r2, [pc, #284]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b00:	430b      	orrs	r3, r1
 8003b02:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b04:	e003      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003b1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003b24:	460b      	mov	r3, r1
 8003b26:	4313      	orrs	r3, r2
 8003b28:	d03b      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b36:	d01f      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003b38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b3c:	d818      	bhi.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b42:	d003      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003b44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b48:	d007      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003b4a:	e011      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b4c:	4b33      	ldr	r3, [pc, #204]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b50:	4a32      	ldr	r2, [pc, #200]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b58:	e00f      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5e:	3328      	adds	r3, #40	@ 0x28
 8003b60:	2101      	movs	r1, #1
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fd98 	bl	8004698 <RCCEx_PLL3_Config>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b6e:	e004      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b76:	e000      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10b      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b82:	4b26      	ldr	r3, [pc, #152]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b92:	4a22      	ldr	r2, [pc, #136]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b94:	430b      	orrs	r3, r1
 8003b96:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b98:	e003      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003baa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003bae:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003bb4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	d034      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bcc:	d007      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003bce:	e011      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd0:	4b12      	ldr	r3, [pc, #72]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	4a11      	ldr	r2, [pc, #68]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003bdc:	e00e      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be2:	3308      	adds	r3, #8
 8003be4:	2102      	movs	r1, #2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fca4 	bl	8004534 <RCCEx_PLL2_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003bf2:	e003      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10d      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003c04:	4b05      	ldr	r3, [pc, #20]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c08:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c12:	4a02      	ldr	r2, [pc, #8]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c14:	430b      	orrs	r3, r1
 8003c16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c18:	e006      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003c1a:	bf00      	nop
 8003c1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003c34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c36:	2300      	movs	r3, #0
 8003c38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c3a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4313      	orrs	r3, r2
 8003c42:	d00c      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c48:	3328      	adds	r3, #40	@ 0x28
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fd23 	bl	8004698 <RCCEx_PLL3_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003c6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c70:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003c74:	460b      	mov	r3, r1
 8003c76:	4313      	orrs	r3, r2
 8003c78:	d038      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c86:	d018      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c8c:	d811      	bhi.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003c8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c92:	d014      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c98:	d80b      	bhi.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d011      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003c9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ca2:	d106      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca4:	4bc3      	ldr	r3, [pc, #780]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca8:	4ac2      	ldr	r2, [pc, #776]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cb8:	e004      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003cba:	bf00      	nop
 8003cbc:	e002      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003cbe:	bf00      	nop
 8003cc0:	e000      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003cc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10b      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ccc:	4bb9      	ldr	r3, [pc, #740]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cdc:	4ab5      	ldr	r2, [pc, #724]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ce2:	e003      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003cf8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cfe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003d02:	460b      	mov	r3, r1
 8003d04:	4313      	orrs	r3, r2
 8003d06:	d009      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d08:	4baa      	ldr	r3, [pc, #680]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d16:	4aa7      	ldr	r2, [pc, #668]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003d28:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003d32:	460b      	mov	r3, r1
 8003d34:	4313      	orrs	r3, r2
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003d38:	4b9e      	ldr	r3, [pc, #632]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003d48:	4a9a      	ldr	r2, [pc, #616]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d60:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003d64:	460b      	mov	r3, r1
 8003d66:	4313      	orrs	r3, r2
 8003d68:	d009      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d6a:	4b92      	ldr	r3, [pc, #584]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d6e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d78:	4a8e      	ldr	r2, [pc, #568]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003d8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003d94:	460b      	mov	r3, r1
 8003d96:	4313      	orrs	r3, r2
 8003d98:	d00e      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d9a:	4b86      	ldr	r3, [pc, #536]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	4a85      	ldr	r2, [pc, #532]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003da0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003da4:	6113      	str	r3, [r2, #16]
 8003da6:	4b83      	ldr	r3, [pc, #524]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003da8:	6919      	ldr	r1, [r3, #16]
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003db2:	4a80      	ldr	r2, [pc, #512]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003db4:	430b      	orrs	r3, r1
 8003db6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	d009      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003dd4:	4b77      	ldr	r3, [pc, #476]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de2:	4a74      	ldr	r2, [pc, #464]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003de4:	430b      	orrs	r3, r1
 8003de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003df6:	2300      	movs	r3, #0
 8003df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dfa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4313      	orrs	r3, r2
 8003e02:	d00a      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e04:	4b6b      	ldr	r3, [pc, #428]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e08:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e14:	4a67      	ldr	r2, [pc, #412]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e16:	430b      	orrs	r3, r1
 8003e18:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e22:	2100      	movs	r1, #0
 8003e24:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e2c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003e30:	460b      	mov	r3, r1
 8003e32:	4313      	orrs	r3, r2
 8003e34:	d011      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fb78 	bl	8004534 <RCCEx_PLL2_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	2100      	movs	r1, #0
 8003e64:	6239      	str	r1, [r7, #32]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e6c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e70:	460b      	mov	r3, r1
 8003e72:	4313      	orrs	r3, r2
 8003e74:	d011      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fb58 	bl	8004534 <RCCEx_PLL2_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	61b9      	str	r1, [r7, #24]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	d011      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eba:	3308      	adds	r3, #8
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fb38 	bl	8004534 <RCCEx_PLL2_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	6139      	str	r1, [r7, #16]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	d011      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efa:	3328      	adds	r3, #40	@ 0x28
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fbca 	bl	8004698 <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f22:	2100      	movs	r1, #0
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f30:	460b      	mov	r3, r1
 8003f32:	4313      	orrs	r3, r2
 8003f34:	d011      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3a:	3328      	adds	r3, #40	@ 0x28
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fbaa 	bl	8004698 <RCCEx_PLL3_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f62:	2100      	movs	r1, #0
 8003f64:	6039      	str	r1, [r7, #0]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	607b      	str	r3, [r7, #4]
 8003f6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f70:	460b      	mov	r3, r1
 8003f72:	4313      	orrs	r3, r2
 8003f74:	d011      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7a:	3328      	adds	r3, #40	@ 0x28
 8003f7c:	2102      	movs	r1, #2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fb8a 	bl	8004698 <RCCEx_PLL3_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003f9a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fb4:	58024400 	.word	0x58024400

08003fb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003fbc:	f7fe fd96 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	4904      	ldr	r1, [pc, #16]	@ (8003fe0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003fce:	5ccb      	ldrb	r3, [r1, r3]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	58024400 	.word	0x58024400
 8003fe0:	080069b0 	.word	0x080069b0

08003fe4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b089      	sub	sp, #36	@ 0x24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fec:	4ba1      	ldr	r3, [pc, #644]	@ (8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff0:	f003 0303 	and.w	r3, r3, #3
 8003ff4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003ff6:	4b9f      	ldr	r3, [pc, #636]	@ (8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffa:	0b1b      	lsrs	r3, r3, #12
 8003ffc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004000:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004002:	4b9c      	ldr	r3, [pc, #624]	@ (8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800400e:	4b99      	ldr	r3, [pc, #612]	@ (8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004012:	08db      	lsrs	r3, r3, #3
 8004014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	fb02 f303 	mul.w	r3, r2, r3
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004026:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8111 	beq.w	8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b02      	cmp	r3, #2
 8004036:	f000 8083 	beq.w	8004140 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	2b02      	cmp	r3, #2
 800403e:	f200 80a1 	bhi.w	8004184 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d056      	beq.n	80040fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800404e:	e099      	b.n	8004184 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004050:	4b88      	ldr	r3, [pc, #544]	@ (8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02d      	beq.n	80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800405c:	4b85      	ldr	r3, [pc, #532]	@ (8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	08db      	lsrs	r3, r3, #3
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	4a84      	ldr	r2, [pc, #528]	@ (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
 800406c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	ee07 3a90 	vmov	s15, r3
 8004074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004086:	4b7b      	ldr	r3, [pc, #492]	@ (8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004096:	ed97 6a03 	vldr	s12, [r7, #12]
 800409a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800427c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800409e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80040b6:	e087      	b.n	80041c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004280 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80040c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d2:	ee07 3a90 	vmov	s15, r3
 80040d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040da:	ed97 6a03 	vldr	s12, [r7, #12]
 80040de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800427c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040fa:	e065      	b.n	80041c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004106:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800410a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800410e:	4b59      	ldr	r3, [pc, #356]	@ (8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800411e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004122:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800427c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800412a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800412e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800413e:	e043      	b.n	80041c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800414e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004152:	4b48      	ldr	r3, [pc, #288]	@ (8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800415a:	ee07 3a90 	vmov	s15, r3
 800415e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004162:	ed97 6a03 	vldr	s12, [r7, #12]
 8004166:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800427c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800416a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800416e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800417a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800417e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004182:	e021      	b.n	80041c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800418e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004196:	4b37      	ldr	r3, [pc, #220]	@ (8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800427c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80041c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041cc:	0a5b      	lsrs	r3, r3, #9
 80041ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80041e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ee:	ee17 2a90 	vmov	r2, s15
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80041f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fa:	0c1b      	lsrs	r3, r3, #16
 80041fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004200:	ee07 3a90 	vmov	s15, r3
 8004204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004208:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800420c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004210:	edd7 6a07 	vldr	s13, [r7, #28]
 8004214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800421c:	ee17 2a90 	vmov	r2, s15
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004224:	4b13      	ldr	r3, [pc, #76]	@ (8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004228:	0e1b      	lsrs	r3, r3, #24
 800422a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800422e:	ee07 3a90 	vmov	s15, r3
 8004232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004236:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800423a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800423e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800424a:	ee17 2a90 	vmov	r2, s15
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004252:	e008      	b.n	8004266 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
}
 8004266:	bf00      	nop
 8004268:	3724      	adds	r7, #36	@ 0x24
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	58024400 	.word	0x58024400
 8004278:	03d09000 	.word	0x03d09000
 800427c:	46000000 	.word	0x46000000
 8004280:	4c742400 	.word	0x4c742400
 8004284:	4a742400 	.word	0x4a742400
 8004288:	4bbebc20 	.word	0x4bbebc20

0800428c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800428c:	b480      	push	{r7}
 800428e:	b089      	sub	sp, #36	@ 0x24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004294:	4ba1      	ldr	r3, [pc, #644]	@ (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800429e:	4b9f      	ldr	r3, [pc, #636]	@ (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a2:	0d1b      	lsrs	r3, r3, #20
 80042a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80042aa:	4b9c      	ldr	r3, [pc, #624]	@ (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80042b6:	4b99      	ldr	r3, [pc, #612]	@ (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	08db      	lsrs	r3, r3, #3
 80042bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 8111 	beq.w	80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	f000 8083 	beq.w	80043e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	f200 80a1 	bhi.w	800442c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d056      	beq.n	80043a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80042f6:	e099      	b.n	800442c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042f8:	4b88      	ldr	r3, [pc, #544]	@ (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d02d      	beq.n	8004360 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004304:	4b85      	ldr	r3, [pc, #532]	@ (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	08db      	lsrs	r3, r3, #3
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	4a84      	ldr	r2, [pc, #528]	@ (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
 8004314:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	ee07 3a90 	vmov	s15, r3
 800431c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800432e:	4b7b      	ldr	r3, [pc, #492]	@ (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004342:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800434a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800435e:	e087      	b.n	8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004528 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800436e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004372:	4b6a      	ldr	r3, [pc, #424]	@ (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004382:	ed97 6a03 	vldr	s12, [r7, #12]
 8004386:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800438a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800438e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800439a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043a2:	e065      	b.n	8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800452c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043b6:	4b59      	ldr	r3, [pc, #356]	@ (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043e6:	e043      	b.n	8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80043f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fa:	4b48      	ldr	r3, [pc, #288]	@ (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440a:	ed97 6a03 	vldr	s12, [r7, #12]
 800440e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800441a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800441e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800442a:	e021      	b.n	8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004436:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800452c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800443a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800443e:	4b37      	ldr	r3, [pc, #220]	@ (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800444e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004452:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800445e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800446e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004470:	4b2a      	ldr	r3, [pc, #168]	@ (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	0a5b      	lsrs	r3, r3, #9
 8004476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004482:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800448a:	edd7 6a07 	vldr	s13, [r7, #28]
 800448e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004496:	ee17 2a90 	vmov	r2, s15
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800449e:	4b1f      	ldr	r3, [pc, #124]	@ (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a2:	0c1b      	lsrs	r3, r3, #16
 80044a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044a8:	ee07 3a90 	vmov	s15, r3
 80044ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80044bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044c4:	ee17 2a90 	vmov	r2, s15
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80044cc:	4b13      	ldr	r3, [pc, #76]	@ (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d0:	0e1b      	lsrs	r3, r3, #24
 80044d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80044ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f2:	ee17 2a90 	vmov	r2, s15
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80044fa:	e008      	b.n	800450e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	609a      	str	r2, [r3, #8]
}
 800450e:	bf00      	nop
 8004510:	3724      	adds	r7, #36	@ 0x24
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	58024400 	.word	0x58024400
 8004520:	03d09000 	.word	0x03d09000
 8004524:	46000000 	.word	0x46000000
 8004528:	4c742400 	.word	0x4c742400
 800452c:	4a742400 	.word	0x4a742400
 8004530:	4bbebc20 	.word	0x4bbebc20

08004534 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004542:	4b53      	ldr	r3, [pc, #332]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 8004544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b03      	cmp	r3, #3
 800454c:	d101      	bne.n	8004552 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e099      	b.n	8004686 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004552:	4b4f      	ldr	r3, [pc, #316]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a4e      	ldr	r2, [pc, #312]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 8004558:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800455c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800455e:	f7fc fd13 	bl	8000f88 <HAL_GetTick>
 8004562:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004564:	e008      	b.n	8004578 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004566:	f7fc fd0f 	bl	8000f88 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e086      	b.n	8004686 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004578:	4b45      	ldr	r3, [pc, #276]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f0      	bne.n	8004566 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004584:	4b42      	ldr	r3, [pc, #264]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 8004586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004588:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	031b      	lsls	r3, r3, #12
 8004592:	493f      	ldr	r1, [pc, #252]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 8004594:	4313      	orrs	r3, r2
 8004596:	628b      	str	r3, [r1, #40]	@ 0x28
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	3b01      	subs	r3, #1
 800459e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	025b      	lsls	r3, r3, #9
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	041b      	lsls	r3, r3, #16
 80045b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	061b      	lsls	r3, r3, #24
 80045c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80045c8:	4931      	ldr	r1, [pc, #196]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80045ce:	4b30      	ldr	r3, [pc, #192]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 80045d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	492d      	ldr	r1, [pc, #180]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80045e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 80045e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e4:	f023 0220 	bic.w	r2, r3, #32
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	4928      	ldr	r1, [pc, #160]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80045f2:	4b27      	ldr	r3, [pc, #156]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 80045f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f6:	4a26      	ldr	r2, [pc, #152]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 80045f8:	f023 0310 	bic.w	r3, r3, #16
 80045fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80045fe:	4b24      	ldr	r3, [pc, #144]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 8004600:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004602:	4b24      	ldr	r3, [pc, #144]	@ (8004694 <RCCEx_PLL2_Config+0x160>)
 8004604:	4013      	ands	r3, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	69d2      	ldr	r2, [r2, #28]
 800460a:	00d2      	lsls	r2, r2, #3
 800460c:	4920      	ldr	r1, [pc, #128]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 800460e:	4313      	orrs	r3, r2
 8004610:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004612:	4b1f      	ldr	r3, [pc, #124]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 8004614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004616:	4a1e      	ldr	r2, [pc, #120]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 8004618:	f043 0310 	orr.w	r3, r3, #16
 800461c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004624:	4b1a      	ldr	r3, [pc, #104]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 8004626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004628:	4a19      	ldr	r2, [pc, #100]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 800462a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800462e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004630:	e00f      	b.n	8004652 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d106      	bne.n	8004646 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004638:	4b15      	ldr	r3, [pc, #84]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 800463a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463c:	4a14      	ldr	r2, [pc, #80]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 800463e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004642:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004644:	e005      	b.n	8004652 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004646:	4b12      	ldr	r3, [pc, #72]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 8004648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464a:	4a11      	ldr	r2, [pc, #68]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 800464c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004650:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004652:	4b0f      	ldr	r3, [pc, #60]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a0e      	ldr	r2, [pc, #56]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 8004658:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800465c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800465e:	f7fc fc93 	bl	8000f88 <HAL_GetTick>
 8004662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004664:	e008      	b.n	8004678 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004666:	f7fc fc8f 	bl	8000f88 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e006      	b.n	8004686 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004678:	4b05      	ldr	r3, [pc, #20]	@ (8004690 <RCCEx_PLL2_Config+0x15c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	58024400 	.word	0x58024400
 8004694:	ffff0007 	.word	0xffff0007

08004698 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046a6:	4b53      	ldr	r3, [pc, #332]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 80046a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d101      	bne.n	80046b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e099      	b.n	80047ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80046b6:	4b4f      	ldr	r3, [pc, #316]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a4e      	ldr	r2, [pc, #312]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 80046bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c2:	f7fc fc61 	bl	8000f88 <HAL_GetTick>
 80046c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046c8:	e008      	b.n	80046dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046ca:	f7fc fc5d 	bl	8000f88 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e086      	b.n	80047ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046dc:	4b45      	ldr	r3, [pc, #276]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f0      	bne.n	80046ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80046e8:	4b42      	ldr	r3, [pc, #264]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 80046ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	051b      	lsls	r3, r3, #20
 80046f6:	493f      	ldr	r1, [pc, #252]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	3b01      	subs	r3, #1
 8004702:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	3b01      	subs	r3, #1
 800470c:	025b      	lsls	r3, r3, #9
 800470e:	b29b      	uxth	r3, r3
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	3b01      	subs	r3, #1
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	3b01      	subs	r3, #1
 8004726:	061b      	lsls	r3, r3, #24
 8004728:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800472c:	4931      	ldr	r1, [pc, #196]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 800472e:	4313      	orrs	r3, r2
 8004730:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004732:	4b30      	ldr	r3, [pc, #192]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 8004734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004736:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	492d      	ldr	r1, [pc, #180]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 8004740:	4313      	orrs	r3, r2
 8004742:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004744:	4b2b      	ldr	r3, [pc, #172]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 8004746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004748:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	4928      	ldr	r1, [pc, #160]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 8004752:	4313      	orrs	r3, r2
 8004754:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004756:	4b27      	ldr	r3, [pc, #156]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 8004758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475a:	4a26      	ldr	r2, [pc, #152]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 800475c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004760:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004762:	4b24      	ldr	r3, [pc, #144]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 8004764:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004766:	4b24      	ldr	r3, [pc, #144]	@ (80047f8 <RCCEx_PLL3_Config+0x160>)
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	69d2      	ldr	r2, [r2, #28]
 800476e:	00d2      	lsls	r2, r2, #3
 8004770:	4920      	ldr	r1, [pc, #128]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 8004772:	4313      	orrs	r3, r2
 8004774:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004776:	4b1f      	ldr	r3, [pc, #124]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 8004778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477a:	4a1e      	ldr	r2, [pc, #120]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 800477c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004780:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d106      	bne.n	8004796 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004788:	4b1a      	ldr	r3, [pc, #104]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 800478a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478c:	4a19      	ldr	r2, [pc, #100]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 800478e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004792:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004794:	e00f      	b.n	80047b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d106      	bne.n	80047aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800479c:	4b15      	ldr	r3, [pc, #84]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 800479e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a0:	4a14      	ldr	r2, [pc, #80]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 80047a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047a8:	e005      	b.n	80047b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80047aa:	4b12      	ldr	r3, [pc, #72]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 80047ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ae:	4a11      	ldr	r2, [pc, #68]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 80047b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80047b6:	4b0f      	ldr	r3, [pc, #60]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a0e      	ldr	r2, [pc, #56]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 80047bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c2:	f7fc fbe1 	bl	8000f88 <HAL_GetTick>
 80047c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047c8:	e008      	b.n	80047dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047ca:	f7fc fbdd 	bl	8000f88 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e006      	b.n	80047ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047dc:	4b05      	ldr	r3, [pc, #20]	@ (80047f4 <RCCEx_PLL3_Config+0x15c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	58024400 	.word	0x58024400
 80047f8:	ffff0007 	.word	0xffff0007

080047fc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e10f      	b.n	8004a2e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a87      	ldr	r2, [pc, #540]	@ (8004a38 <HAL_SPI_Init+0x23c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00f      	beq.n	800483e <HAL_SPI_Init+0x42>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a86      	ldr	r2, [pc, #536]	@ (8004a3c <HAL_SPI_Init+0x240>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00a      	beq.n	800483e <HAL_SPI_Init+0x42>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a84      	ldr	r2, [pc, #528]	@ (8004a40 <HAL_SPI_Init+0x244>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d005      	beq.n	800483e <HAL_SPI_Init+0x42>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	2b0f      	cmp	r3, #15
 8004838:	d901      	bls.n	800483e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e0f7      	b.n	8004a2e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fef8 	bl	8005634 <SPI_GetPacketSize>
 8004844:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a7b      	ldr	r2, [pc, #492]	@ (8004a38 <HAL_SPI_Init+0x23c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00c      	beq.n	800486a <HAL_SPI_Init+0x6e>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a79      	ldr	r2, [pc, #484]	@ (8004a3c <HAL_SPI_Init+0x240>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d007      	beq.n	800486a <HAL_SPI_Init+0x6e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a78      	ldr	r2, [pc, #480]	@ (8004a40 <HAL_SPI_Init+0x244>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d002      	beq.n	800486a <HAL_SPI_Init+0x6e>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b08      	cmp	r3, #8
 8004868:	d811      	bhi.n	800488e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800486e:	4a72      	ldr	r2, [pc, #456]	@ (8004a38 <HAL_SPI_Init+0x23c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d009      	beq.n	8004888 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a70      	ldr	r2, [pc, #448]	@ (8004a3c <HAL_SPI_Init+0x240>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d004      	beq.n	8004888 <HAL_SPI_Init+0x8c>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a6f      	ldr	r2, [pc, #444]	@ (8004a40 <HAL_SPI_Init+0x244>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d104      	bne.n	8004892 <HAL_SPI_Init+0x96>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b10      	cmp	r3, #16
 800488c:	d901      	bls.n	8004892 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e0cd      	b.n	8004a2e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fc f8da 	bl	8000a60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0201 	bic.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80048ce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048d8:	d119      	bne.n	800490e <HAL_SPI_Init+0x112>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048e2:	d103      	bne.n	80048ec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10c      	bne.n	800490e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80048f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048fc:	d107      	bne.n	800490e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800490c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00f      	beq.n	800493a <HAL_SPI_Init+0x13e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	2b06      	cmp	r3, #6
 8004920:	d90b      	bls.n	800493a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	e007      	b.n	800494a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004948:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69da      	ldr	r2, [r3, #28]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004952:	431a      	orrs	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800495c:	ea42 0103 	orr.w	r1, r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049aa:	ea42 0103 	orr.w	r1, r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d113      	bne.n	80049ea <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049d4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049e8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0201 	bic.w	r2, r2, #1
 80049f8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40013000 	.word	0x40013000
 8004a3c:	40003800 	.word	0x40003800
 8004a40:	40003c00 	.word	0x40003c00

08004a44 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	603b      	str	r3, [r7, #0]
 8004a50:	4613      	mov	r3, r2
 8004a52:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3320      	adds	r3, #32
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a5c:	f7fc fa94 	bl	8000f88 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d001      	beq.n	8004a72 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e1d1      	b.n	8004e16 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_SPI_Transmit+0x3a>
 8004a78:	88fb      	ldrh	r3, [r7, #6]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e1c9      	b.n	8004e16 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_SPI_Transmit+0x4c>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e1c2      	b.n	8004e16 <HAL_SPI_Transmit+0x3d2>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	88fa      	ldrh	r2, [r7, #6]
 8004ab2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	88fa      	ldrh	r2, [r7, #6]
 8004aba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004ae8:	d108      	bne.n	8004afc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	e009      	b.n	8004b10 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004b0e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	4b96      	ldr	r3, [pc, #600]	@ (8004d70 <HAL_SPI_Transmit+0x32c>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	88f9      	ldrh	r1, [r7, #6]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	430b      	orrs	r3, r1
 8004b22:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b3c:	d107      	bne.n	8004b4e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	2b0f      	cmp	r3, #15
 8004b54:	d947      	bls.n	8004be6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004b56:	e03f      	b.n	8004bd8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d114      	bne.n	8004b90 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b76:	1d1a      	adds	r2, r3, #4
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004b8e:	e023      	b.n	8004bd8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b90:	f7fc f9fa 	bl	8000f88 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d803      	bhi.n	8004ba8 <HAL_SPI_Transmit+0x164>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba6:	d102      	bne.n	8004bae <HAL_SPI_Transmit+0x16a>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d114      	bne.n	8004bd8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 fc72 	bl	8005498 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e11e      	b.n	8004e16 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1b9      	bne.n	8004b58 <HAL_SPI_Transmit+0x114>
 8004be4:	e0f1      	b.n	8004dca <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	2b07      	cmp	r3, #7
 8004bec:	f240 80e6 	bls.w	8004dbc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004bf0:	e05d      	b.n	8004cae <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d132      	bne.n	8004c66 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d918      	bls.n	8004c3e <HAL_SPI_Transmit+0x1fa>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d014      	beq.n	8004c3e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c24:	1d1a      	adds	r2, r3, #4
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b02      	subs	r3, #2
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004c3c:	e037      	b.n	8004cae <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c42:	881a      	ldrh	r2, [r3, #0]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4c:	1c9a      	adds	r2, r3, #2
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004c64:	e023      	b.n	8004cae <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c66:	f7fc f98f 	bl	8000f88 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d803      	bhi.n	8004c7e <HAL_SPI_Transmit+0x23a>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7c:	d102      	bne.n	8004c84 <HAL_SPI_Transmit+0x240>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d114      	bne.n	8004cae <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fc07 	bl	8005498 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e0b3      	b.n	8004e16 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d19b      	bne.n	8004bf2 <HAL_SPI_Transmit+0x1ae>
 8004cba:	e086      	b.n	8004dca <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d154      	bne.n	8004d74 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d918      	bls.n	8004d08 <HAL_SPI_Transmit+0x2c4>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cda:	2b40      	cmp	r3, #64	@ 0x40
 8004cdc:	d914      	bls.n	8004d08 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cee:	1d1a      	adds	r2, r3, #4
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b04      	subs	r3, #4
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004d06:	e059      	b.n	8004dbc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d917      	bls.n	8004d44 <HAL_SPI_Transmit+0x300>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d013      	beq.n	8004d44 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d20:	881a      	ldrh	r2, [r3, #0]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d2a:	1c9a      	adds	r2, r3, #2
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b02      	subs	r3, #2
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004d42:	e03b      	b.n	8004dbc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3320      	adds	r3, #32
 8004d4e:	7812      	ldrb	r2, [r2, #0]
 8004d50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004d6e:	e025      	b.n	8004dbc <HAL_SPI_Transmit+0x378>
 8004d70:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d74:	f7fc f908 	bl	8000f88 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d803      	bhi.n	8004d8c <HAL_SPI_Transmit+0x348>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8a:	d102      	bne.n	8004d92 <HAL_SPI_Transmit+0x34e>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d114      	bne.n	8004dbc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 fb80 	bl	8005498 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e02c      	b.n	8004e16 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f47f af79 	bne.w	8004cbc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2108      	movs	r1, #8
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fbff 	bl	80055d8 <SPI_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004de6:	f043 0220 	orr.w	r2, r3, #32
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fb51 	bl	8005498 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8004e14:	2300      	movs	r3, #0
  }
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop

08004e20 <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d001      	beq.n	8004e3e <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e08b      	b.n	8004f56 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <HAL_SPI_Receive_IT+0x2a>
 8004e44:	88fb      	ldrh	r3, [r7, #6]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e083      	b.n	8004f56 <HAL_SPI_Receive_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_SPI_Receive_IT+0x3c>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e07c      	b.n	8004f56 <HAL_SPI_Receive_IT+0x136>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2204      	movs	r2, #4
 8004e68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	88fa      	ldrh	r2, [r7, #6]
 8004e7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	88fa      	ldrh	r2, [r7, #6]
 8004e86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxISR       = NULL;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->Reload.pRxBuffPtr  = NULL;
  hspi->Reload.RxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	2b0f      	cmp	r3, #15
 8004eac:	d903      	bls.n	8004eb6 <HAL_SPI_Receive_IT+0x96>
  {
    hspi->RxISR = SPI_RxISR_32BIT;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8004f64 <HAL_SPI_Receive_IT+0x144>)
 8004eb2:	671a      	str	r2, [r3, #112]	@ 0x70
 8004eb4:	e00a      	b.n	8004ecc <HAL_SPI_Receive_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	2b07      	cmp	r3, #7
 8004ebc:	d903      	bls.n	8004ec6 <HAL_SPI_Receive_IT+0xa6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4a29      	ldr	r2, [pc, #164]	@ (8004f68 <HAL_SPI_Receive_IT+0x148>)
 8004ec2:	671a      	str	r2, [r3, #112]	@ 0x70
 8004ec4:	e002      	b.n	8004ecc <HAL_SPI_Receive_IT+0xac>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4a28      	ldr	r2, [pc, #160]	@ (8004f6c <HAL_SPI_Receive_IT+0x14c>)
 8004eca:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004ed4:	d108      	bne.n	8004ee8 <HAL_SPI_Receive_IT+0xc8>
  {
    SPI_1LINE_RX(hspi);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	e009      	b.n	8004efc <HAL_SPI_Receive_IT+0xdc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004efa:	60da      	str	r2, [r3, #12]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	4b1b      	ldr	r3, [pc, #108]	@ (8004f70 <HAL_SPI_Receive_IT+0x150>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	88f9      	ldrh	r1, [r7, #6]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, RXP, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6919      	ldr	r1, [r3, #16]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	f240 7349 	movw	r3, #1865	@ 0x749
 8004f36:	430b      	orrs	r3, r1
 8004f38:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f42:	d107      	bne.n	8004f54 <HAL_SPI_Receive_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	0800543f 	.word	0x0800543f
 8004f68:	080053df 	.word	0x080053df
 8004f6c:	08005381 	.word	0x08005381
 8004f70:	ffff0000 	.word	0xffff0000

08004f74 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	@ 0x28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8004f8c:	6a3a      	ldr	r2, [r7, #32]
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4013      	ands	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004fa6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3330      	adds	r3, #48	@ 0x30
 8004fae:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d010      	beq.n	8004fdc <HAL_SPI_IRQHandler+0x68>
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00b      	beq.n	8004fdc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fd2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f9af 	bl	8005338 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8004fda:	e192      	b.n	8005302 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d113      	bne.n	800500e <HAL_SPI_IRQHandler+0x9a>
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10e      	bne.n	800500e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d009      	beq.n	800500e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	4798      	blx	r3
    handled = 1UL;
 800500a:	2301      	movs	r3, #1
 800500c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10f      	bne.n	8005038 <HAL_SPI_IRQHandler+0xc4>
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005028:	2b00      	cmp	r3, #0
 800502a:	d105      	bne.n	8005038 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	4798      	blx	r3
    handled = 1UL;
 8005034:	2301      	movs	r3, #1
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10f      	bne.n	8005062 <HAL_SPI_IRQHandler+0xee>
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005052:	2b00      	cmp	r3, #0
 8005054:	d105      	bne.n	8005062 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	4798      	blx	r3
    handled = 1UL;
 800505e:	2301      	movs	r3, #1
 8005060:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	2b00      	cmp	r3, #0
 8005066:	f040 8147 	bne.w	80052f8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 808b 	beq.w	800518c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699a      	ldr	r2, [r3, #24]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0208 	orr.w	r2, r2, #8
 8005084:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699a      	ldr	r2, [r3, #24]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0210 	orr.w	r2, r2, #16
 8005094:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699a      	ldr	r2, [r3, #24]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050a4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0208 	bic.w	r2, r2, #8
 80050b4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d13d      	bne.n	8005140 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80050c4:	e036      	b.n	8005134 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	d90b      	bls.n	80050e6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80050d8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050de:	1d1a      	adds	r2, r3, #4
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	665a      	str	r2, [r3, #100]	@ 0x64
 80050e4:	e01d      	b.n	8005122 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	2b07      	cmp	r3, #7
 80050ec:	d90b      	bls.n	8005106 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	8812      	ldrh	r2, [r2, #0]
 80050f6:	b292      	uxth	r2, r2
 80050f8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050fe:	1c9a      	adds	r2, r3, #2
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	665a      	str	r2, [r3, #100]	@ 0x64
 8005104:	e00d      	b.n	8005122 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005112:	7812      	ldrb	r2, [r2, #0]
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1c2      	bne.n	80050c6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f9a9 	bl	8005498 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f8e3 	bl	8005324 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800515e:	e0d0      	b.n	8005302 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005160:	7cfb      	ldrb	r3, [r7, #19]
 8005162:	2b05      	cmp	r3, #5
 8005164:	d103      	bne.n	800516e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f8d2 	bl	8005310 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800516c:	e0c6      	b.n	80052fc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800516e:	7cfb      	ldrb	r3, [r7, #19]
 8005170:	2b04      	cmp	r3, #4
 8005172:	d103      	bne.n	800517c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fb fbc5 	bl	8000904 <HAL_SPI_RxCpltCallback>
    return;
 800517a:	e0bf      	b.n	80052fc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800517c:	7cfb      	ldrb	r3, [r7, #19]
 800517e:	2b03      	cmp	r3, #3
 8005180:	f040 80bc 	bne.w	80052fc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7fb fba7 	bl	80008d8 <HAL_SPI_TxCpltCallback>
    return;
 800518a:	e0b7      	b.n	80052fc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 80b5 	beq.w	8005302 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00f      	beq.n	80051c2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051a8:	f043 0204 	orr.w	r2, r3, #4
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051c0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00f      	beq.n	80051ec <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051d2:	f043 0201 	orr.w	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051ea:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00f      	beq.n	8005216 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051fc:	f043 0208 	orr.w	r2, r3, #8
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699a      	ldr	r2, [r3, #24]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005214:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f003 0320 	and.w	r3, r3, #32
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00f      	beq.n	8005240 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005226:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0220 	orr.w	r2, r2, #32
 800523e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005246:	2b00      	cmp	r3, #0
 8005248:	d05a      	beq.n	8005300 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0201 	bic.w	r2, r2, #1
 8005258:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6919      	ldr	r1, [r3, #16]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4b28      	ldr	r3, [pc, #160]	@ (8005308 <HAL_SPI_IRQHandler+0x394>)
 8005266:	400b      	ands	r3, r1
 8005268:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005270:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005274:	d138      	bne.n	80052e8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005284:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800528a:	2b00      	cmp	r3, #0
 800528c:	d013      	beq.n	80052b6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005292:	4a1e      	ldr	r2, [pc, #120]	@ (800530c <HAL_SPI_IRQHandler+0x398>)
 8005294:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800529a:	4618      	mov	r0, r3
 800529c:	f7fc f838 	bl	8001310 <HAL_DMA_Abort_IT>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d007      	beq.n	80052b6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d020      	beq.n	8005300 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052c2:	4a12      	ldr	r2, [pc, #72]	@ (800530c <HAL_SPI_IRQHandler+0x398>)
 80052c4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fc f820 	bl	8001310 <HAL_DMA_Abort_IT>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d014      	beq.n	8005300 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80052e6:	e00b      	b.n	8005300 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f817 	bl	8005324 <HAL_SPI_ErrorCallback>
    return;
 80052f6:	e003      	b.n	8005300 <HAL_SPI_IRQHandler+0x38c>
    return;
 80052f8:	bf00      	nop
 80052fa:	e002      	b.n	8005302 <HAL_SPI_IRQHandler+0x38e>
    return;
 80052fc:	bf00      	nop
 80052fe:	e000      	b.n	8005302 <HAL_SPI_IRQHandler+0x38e>
    return;
 8005300:	bf00      	nop
  }
}
 8005302:	3728      	adds	r7, #40	@ 0x28
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	fffffc94 	.word	0xfffffc94
 800530c:	0800534d 	.word	0x0800534d

08005310 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005358:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f7ff ffd6 	bl	8005324 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005378:	bf00      	nop
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005394:	7812      	ldrb	r2, [r2, #0]
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d107      	bne.n	80053d2 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0201 	bic.w	r2, r2, #1
 80053d0:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3330      	adds	r3, #48	@ 0x30
 80053ec:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	8812      	ldrh	r2, [r2, #0]
 80053f6:	b292      	uxth	r2, r2
 80053f8:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053fe:	1c9a      	adds	r2, r3, #2
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d107      	bne.n	8005432 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8005432:	bf00      	nop
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800544e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005450:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005456:	1d1a      	adds	r2, r3, #4
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005474:	b29b      	uxth	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d107      	bne.n	800548a <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0201 	bic.w	r2, r2, #1
 8005488:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0208 	orr.w	r2, r2, #8
 80054b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0210 	orr.w	r2, r2, #16
 80054c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0201 	bic.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6919      	ldr	r1, [r3, #16]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4b3c      	ldr	r3, [pc, #240]	@ (80055d4 <SPI_CloseTransfer+0x13c>)
 80054e4:	400b      	ands	r3, r1
 80054e6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80054f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b04      	cmp	r3, #4
 8005502:	d014      	beq.n	800552e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00f      	beq.n	800552e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005514:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	699a      	ldr	r2, [r3, #24]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0220 	orr.w	r2, r2, #32
 800552c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b03      	cmp	r3, #3
 8005538:	d014      	beq.n	8005564 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00f      	beq.n	8005564 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800554a:	f043 0204 	orr.w	r2, r3, #4
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005562:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00f      	beq.n	800558e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005574:	f043 0201 	orr.w	r2, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	699a      	ldr	r2, [r3, #24]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800558c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00f      	beq.n	80055b8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800559e:	f043 0208 	orr.w	r2, r3, #8
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80055c8:	bf00      	nop
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	fffffc90 	.word	0xfffffc90

080055d8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80055e8:	e010      	b.n	800560c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055ea:	f7fb fccd 	bl	8000f88 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d803      	bhi.n	8005602 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d102      	bne.n	8005608 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e00f      	b.n	800562c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695a      	ldr	r2, [r3, #20]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4013      	ands	r3, r2
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	429a      	cmp	r2, r3
 800561a:	bf0c      	ite	eq
 800561c:	2301      	moveq	r3, #1
 800561e:	2300      	movne	r3, #0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	461a      	mov	r2, r3
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	429a      	cmp	r2, r3
 8005628:	d0df      	beq.n	80055ea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005640:	095b      	lsrs	r3, r3, #5
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	3301      	adds	r3, #1
 800564c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	3307      	adds	r3, #7
 8005652:	08db      	lsrs	r3, r3, #3
 8005654:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	fb02 f303 	mul.w	r3, r2, r3
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e042      	b.n	8005702 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fb fb80 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2224      	movs	r2, #36	@ 0x24
 8005698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0201 	bic.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fe1f 	bl	80062f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f8b4 	bl	8005828 <UART_SetConfig>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e01b      	b.n	8005702 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0201 	orr.w	r2, r2, #1
 80056f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fe9e 	bl	800643c <UART_CheckIdleState>
 8005700:	4603      	mov	r3, r0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b08a      	sub	sp, #40	@ 0x28
 800570e:	af02      	add	r7, sp, #8
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	603b      	str	r3, [r7, #0]
 8005716:	4613      	mov	r3, r2
 8005718:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005720:	2b20      	cmp	r3, #32
 8005722:	d17b      	bne.n	800581c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <HAL_UART_Transmit+0x26>
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e074      	b.n	800581e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2221      	movs	r2, #33	@ 0x21
 8005740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005744:	f7fb fc20 	bl	8000f88 <HAL_GetTick>
 8005748:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	88fa      	ldrh	r2, [r7, #6]
 800574e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	88fa      	ldrh	r2, [r7, #6]
 8005756:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005762:	d108      	bne.n	8005776 <HAL_UART_Transmit+0x6c>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d104      	bne.n	8005776 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800576c:	2300      	movs	r3, #0
 800576e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	e003      	b.n	800577e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800577a:	2300      	movs	r3, #0
 800577c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800577e:	e030      	b.n	80057e2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	2200      	movs	r2, #0
 8005788:	2180      	movs	r1, #128	@ 0x80
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 ff00 	bl	8006590 <UART_WaitOnFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e03d      	b.n	800581e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10b      	bne.n	80057c0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	3302      	adds	r3, #2
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	e007      	b.n	80057d0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	781a      	ldrb	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	3301      	adds	r3, #1
 80057ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1c8      	bne.n	8005780 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2200      	movs	r2, #0
 80057f6:	2140      	movs	r1, #64	@ 0x40
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 fec9 	bl	8006590 <UART_WaitOnFlagUntilTimeout>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e006      	b.n	800581e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	e000      	b.n	800581e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800581c:	2302      	movs	r3, #2
  }
}
 800581e:	4618      	mov	r0, r3
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800582c:	b092      	sub	sp, #72	@ 0x48
 800582e:	af00      	add	r7, sp, #0
 8005830:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	431a      	orrs	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	431a      	orrs	r2, r3
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	4313      	orrs	r3, r2
 800584e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4bbe      	ldr	r3, [pc, #760]	@ (8005b50 <UART_SetConfig+0x328>)
 8005858:	4013      	ands	r3, r2
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005860:	430b      	orrs	r3, r1
 8005862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4ab3      	ldr	r2, [pc, #716]	@ (8005b54 <UART_SetConfig+0x32c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d004      	beq.n	8005894 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005890:	4313      	orrs	r3, r2
 8005892:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689a      	ldr	r2, [r3, #8]
 800589a:	4baf      	ldr	r3, [pc, #700]	@ (8005b58 <UART_SetConfig+0x330>)
 800589c:	4013      	ands	r3, r2
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	6812      	ldr	r2, [r2, #0]
 80058a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058a4:	430b      	orrs	r3, r1
 80058a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ae:	f023 010f 	bic.w	r1, r3, #15
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4aa6      	ldr	r2, [pc, #664]	@ (8005b5c <UART_SetConfig+0x334>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d177      	bne.n	80059b8 <UART_SetConfig+0x190>
 80058c8:	4ba5      	ldr	r3, [pc, #660]	@ (8005b60 <UART_SetConfig+0x338>)
 80058ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058d0:	2b28      	cmp	r3, #40	@ 0x28
 80058d2:	d86d      	bhi.n	80059b0 <UART_SetConfig+0x188>
 80058d4:	a201      	add	r2, pc, #4	@ (adr r2, 80058dc <UART_SetConfig+0xb4>)
 80058d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058da:	bf00      	nop
 80058dc:	08005981 	.word	0x08005981
 80058e0:	080059b1 	.word	0x080059b1
 80058e4:	080059b1 	.word	0x080059b1
 80058e8:	080059b1 	.word	0x080059b1
 80058ec:	080059b1 	.word	0x080059b1
 80058f0:	080059b1 	.word	0x080059b1
 80058f4:	080059b1 	.word	0x080059b1
 80058f8:	080059b1 	.word	0x080059b1
 80058fc:	08005989 	.word	0x08005989
 8005900:	080059b1 	.word	0x080059b1
 8005904:	080059b1 	.word	0x080059b1
 8005908:	080059b1 	.word	0x080059b1
 800590c:	080059b1 	.word	0x080059b1
 8005910:	080059b1 	.word	0x080059b1
 8005914:	080059b1 	.word	0x080059b1
 8005918:	080059b1 	.word	0x080059b1
 800591c:	08005991 	.word	0x08005991
 8005920:	080059b1 	.word	0x080059b1
 8005924:	080059b1 	.word	0x080059b1
 8005928:	080059b1 	.word	0x080059b1
 800592c:	080059b1 	.word	0x080059b1
 8005930:	080059b1 	.word	0x080059b1
 8005934:	080059b1 	.word	0x080059b1
 8005938:	080059b1 	.word	0x080059b1
 800593c:	08005999 	.word	0x08005999
 8005940:	080059b1 	.word	0x080059b1
 8005944:	080059b1 	.word	0x080059b1
 8005948:	080059b1 	.word	0x080059b1
 800594c:	080059b1 	.word	0x080059b1
 8005950:	080059b1 	.word	0x080059b1
 8005954:	080059b1 	.word	0x080059b1
 8005958:	080059b1 	.word	0x080059b1
 800595c:	080059a1 	.word	0x080059a1
 8005960:	080059b1 	.word	0x080059b1
 8005964:	080059b1 	.word	0x080059b1
 8005968:	080059b1 	.word	0x080059b1
 800596c:	080059b1 	.word	0x080059b1
 8005970:	080059b1 	.word	0x080059b1
 8005974:	080059b1 	.word	0x080059b1
 8005978:	080059b1 	.word	0x080059b1
 800597c:	080059a9 	.word	0x080059a9
 8005980:	2301      	movs	r3, #1
 8005982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005986:	e222      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005988:	2304      	movs	r3, #4
 800598a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598e:	e21e      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005990:	2308      	movs	r3, #8
 8005992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005996:	e21a      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005998:	2310      	movs	r3, #16
 800599a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800599e:	e216      	b.n	8005dce <UART_SetConfig+0x5a6>
 80059a0:	2320      	movs	r3, #32
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059a6:	e212      	b.n	8005dce <UART_SetConfig+0x5a6>
 80059a8:	2340      	movs	r3, #64	@ 0x40
 80059aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ae:	e20e      	b.n	8005dce <UART_SetConfig+0x5a6>
 80059b0:	2380      	movs	r3, #128	@ 0x80
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b6:	e20a      	b.n	8005dce <UART_SetConfig+0x5a6>
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a69      	ldr	r2, [pc, #420]	@ (8005b64 <UART_SetConfig+0x33c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d130      	bne.n	8005a24 <UART_SetConfig+0x1fc>
 80059c2:	4b67      	ldr	r3, [pc, #412]	@ (8005b60 <UART_SetConfig+0x338>)
 80059c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	2b05      	cmp	r3, #5
 80059cc:	d826      	bhi.n	8005a1c <UART_SetConfig+0x1f4>
 80059ce:	a201      	add	r2, pc, #4	@ (adr r2, 80059d4 <UART_SetConfig+0x1ac>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	080059ed 	.word	0x080059ed
 80059d8:	080059f5 	.word	0x080059f5
 80059dc:	080059fd 	.word	0x080059fd
 80059e0:	08005a05 	.word	0x08005a05
 80059e4:	08005a0d 	.word	0x08005a0d
 80059e8:	08005a15 	.word	0x08005a15
 80059ec:	2300      	movs	r3, #0
 80059ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f2:	e1ec      	b.n	8005dce <UART_SetConfig+0x5a6>
 80059f4:	2304      	movs	r3, #4
 80059f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fa:	e1e8      	b.n	8005dce <UART_SetConfig+0x5a6>
 80059fc:	2308      	movs	r3, #8
 80059fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a02:	e1e4      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005a04:	2310      	movs	r3, #16
 8005a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a0a:	e1e0      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005a0c:	2320      	movs	r3, #32
 8005a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a12:	e1dc      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005a14:	2340      	movs	r3, #64	@ 0x40
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1a:	e1d8      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005a1c:	2380      	movs	r3, #128	@ 0x80
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a22:	e1d4      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a4f      	ldr	r2, [pc, #316]	@ (8005b68 <UART_SetConfig+0x340>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d130      	bne.n	8005a90 <UART_SetConfig+0x268>
 8005a2e:	4b4c      	ldr	r3, [pc, #304]	@ (8005b60 <UART_SetConfig+0x338>)
 8005a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	2b05      	cmp	r3, #5
 8005a38:	d826      	bhi.n	8005a88 <UART_SetConfig+0x260>
 8005a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a40 <UART_SetConfig+0x218>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005a59 	.word	0x08005a59
 8005a44:	08005a61 	.word	0x08005a61
 8005a48:	08005a69 	.word	0x08005a69
 8005a4c:	08005a71 	.word	0x08005a71
 8005a50:	08005a79 	.word	0x08005a79
 8005a54:	08005a81 	.word	0x08005a81
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5e:	e1b6      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005a60:	2304      	movs	r3, #4
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a66:	e1b2      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005a68:	2308      	movs	r3, #8
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6e:	e1ae      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005a70:	2310      	movs	r3, #16
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a76:	e1aa      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005a78:	2320      	movs	r3, #32
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7e:	e1a6      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005a80:	2340      	movs	r3, #64	@ 0x40
 8005a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a86:	e1a2      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005a88:	2380      	movs	r3, #128	@ 0x80
 8005a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a8e:	e19e      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a35      	ldr	r2, [pc, #212]	@ (8005b6c <UART_SetConfig+0x344>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d130      	bne.n	8005afc <UART_SetConfig+0x2d4>
 8005a9a:	4b31      	ldr	r3, [pc, #196]	@ (8005b60 <UART_SetConfig+0x338>)
 8005a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	2b05      	cmp	r3, #5
 8005aa4:	d826      	bhi.n	8005af4 <UART_SetConfig+0x2cc>
 8005aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8005aac <UART_SetConfig+0x284>)
 8005aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aac:	08005ac5 	.word	0x08005ac5
 8005ab0:	08005acd 	.word	0x08005acd
 8005ab4:	08005ad5 	.word	0x08005ad5
 8005ab8:	08005add 	.word	0x08005add
 8005abc:	08005ae5 	.word	0x08005ae5
 8005ac0:	08005aed 	.word	0x08005aed
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aca:	e180      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005acc:	2304      	movs	r3, #4
 8005ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad2:	e17c      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005ad4:	2308      	movs	r3, #8
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ada:	e178      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005adc:	2310      	movs	r3, #16
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae2:	e174      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005ae4:	2320      	movs	r3, #32
 8005ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aea:	e170      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005aec:	2340      	movs	r3, #64	@ 0x40
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005af2:	e16c      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005af4:	2380      	movs	r3, #128	@ 0x80
 8005af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005afa:	e168      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a1b      	ldr	r2, [pc, #108]	@ (8005b70 <UART_SetConfig+0x348>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d142      	bne.n	8005b8c <UART_SetConfig+0x364>
 8005b06:	4b16      	ldr	r3, [pc, #88]	@ (8005b60 <UART_SetConfig+0x338>)
 8005b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	2b05      	cmp	r3, #5
 8005b10:	d838      	bhi.n	8005b84 <UART_SetConfig+0x35c>
 8005b12:	a201      	add	r2, pc, #4	@ (adr r2, 8005b18 <UART_SetConfig+0x2f0>)
 8005b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b18:	08005b31 	.word	0x08005b31
 8005b1c:	08005b39 	.word	0x08005b39
 8005b20:	08005b41 	.word	0x08005b41
 8005b24:	08005b49 	.word	0x08005b49
 8005b28:	08005b75 	.word	0x08005b75
 8005b2c:	08005b7d 	.word	0x08005b7d
 8005b30:	2300      	movs	r3, #0
 8005b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b36:	e14a      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005b38:	2304      	movs	r3, #4
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3e:	e146      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005b40:	2308      	movs	r3, #8
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b46:	e142      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005b48:	2310      	movs	r3, #16
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4e:	e13e      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005b50:	cfff69f3 	.word	0xcfff69f3
 8005b54:	58000c00 	.word	0x58000c00
 8005b58:	11fff4ff 	.word	0x11fff4ff
 8005b5c:	40011000 	.word	0x40011000
 8005b60:	58024400 	.word	0x58024400
 8005b64:	40004400 	.word	0x40004400
 8005b68:	40004800 	.word	0x40004800
 8005b6c:	40004c00 	.word	0x40004c00
 8005b70:	40005000 	.word	0x40005000
 8005b74:	2320      	movs	r3, #32
 8005b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b7a:	e128      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005b7c:	2340      	movs	r3, #64	@ 0x40
 8005b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b82:	e124      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005b84:	2380      	movs	r3, #128	@ 0x80
 8005b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8a:	e120      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4acb      	ldr	r2, [pc, #812]	@ (8005ec0 <UART_SetConfig+0x698>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d176      	bne.n	8005c84 <UART_SetConfig+0x45c>
 8005b96:	4bcb      	ldr	r3, [pc, #812]	@ (8005ec4 <UART_SetConfig+0x69c>)
 8005b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b9e:	2b28      	cmp	r3, #40	@ 0x28
 8005ba0:	d86c      	bhi.n	8005c7c <UART_SetConfig+0x454>
 8005ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba8 <UART_SetConfig+0x380>)
 8005ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba8:	08005c4d 	.word	0x08005c4d
 8005bac:	08005c7d 	.word	0x08005c7d
 8005bb0:	08005c7d 	.word	0x08005c7d
 8005bb4:	08005c7d 	.word	0x08005c7d
 8005bb8:	08005c7d 	.word	0x08005c7d
 8005bbc:	08005c7d 	.word	0x08005c7d
 8005bc0:	08005c7d 	.word	0x08005c7d
 8005bc4:	08005c7d 	.word	0x08005c7d
 8005bc8:	08005c55 	.word	0x08005c55
 8005bcc:	08005c7d 	.word	0x08005c7d
 8005bd0:	08005c7d 	.word	0x08005c7d
 8005bd4:	08005c7d 	.word	0x08005c7d
 8005bd8:	08005c7d 	.word	0x08005c7d
 8005bdc:	08005c7d 	.word	0x08005c7d
 8005be0:	08005c7d 	.word	0x08005c7d
 8005be4:	08005c7d 	.word	0x08005c7d
 8005be8:	08005c5d 	.word	0x08005c5d
 8005bec:	08005c7d 	.word	0x08005c7d
 8005bf0:	08005c7d 	.word	0x08005c7d
 8005bf4:	08005c7d 	.word	0x08005c7d
 8005bf8:	08005c7d 	.word	0x08005c7d
 8005bfc:	08005c7d 	.word	0x08005c7d
 8005c00:	08005c7d 	.word	0x08005c7d
 8005c04:	08005c7d 	.word	0x08005c7d
 8005c08:	08005c65 	.word	0x08005c65
 8005c0c:	08005c7d 	.word	0x08005c7d
 8005c10:	08005c7d 	.word	0x08005c7d
 8005c14:	08005c7d 	.word	0x08005c7d
 8005c18:	08005c7d 	.word	0x08005c7d
 8005c1c:	08005c7d 	.word	0x08005c7d
 8005c20:	08005c7d 	.word	0x08005c7d
 8005c24:	08005c7d 	.word	0x08005c7d
 8005c28:	08005c6d 	.word	0x08005c6d
 8005c2c:	08005c7d 	.word	0x08005c7d
 8005c30:	08005c7d 	.word	0x08005c7d
 8005c34:	08005c7d 	.word	0x08005c7d
 8005c38:	08005c7d 	.word	0x08005c7d
 8005c3c:	08005c7d 	.word	0x08005c7d
 8005c40:	08005c7d 	.word	0x08005c7d
 8005c44:	08005c7d 	.word	0x08005c7d
 8005c48:	08005c75 	.word	0x08005c75
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c52:	e0bc      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005c54:	2304      	movs	r3, #4
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5a:	e0b8      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005c5c:	2308      	movs	r3, #8
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c62:	e0b4      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005c64:	2310      	movs	r3, #16
 8005c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6a:	e0b0      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005c6c:	2320      	movs	r3, #32
 8005c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c72:	e0ac      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005c74:	2340      	movs	r3, #64	@ 0x40
 8005c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7a:	e0a8      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005c7c:	2380      	movs	r3, #128	@ 0x80
 8005c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c82:	e0a4      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a8f      	ldr	r2, [pc, #572]	@ (8005ec8 <UART_SetConfig+0x6a0>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d130      	bne.n	8005cf0 <UART_SetConfig+0x4c8>
 8005c8e:	4b8d      	ldr	r3, [pc, #564]	@ (8005ec4 <UART_SetConfig+0x69c>)
 8005c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	2b05      	cmp	r3, #5
 8005c98:	d826      	bhi.n	8005ce8 <UART_SetConfig+0x4c0>
 8005c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca0 <UART_SetConfig+0x478>)
 8005c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca0:	08005cb9 	.word	0x08005cb9
 8005ca4:	08005cc1 	.word	0x08005cc1
 8005ca8:	08005cc9 	.word	0x08005cc9
 8005cac:	08005cd1 	.word	0x08005cd1
 8005cb0:	08005cd9 	.word	0x08005cd9
 8005cb4:	08005ce1 	.word	0x08005ce1
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cbe:	e086      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005cc0:	2304      	movs	r3, #4
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc6:	e082      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005cc8:	2308      	movs	r3, #8
 8005cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cce:	e07e      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005cd0:	2310      	movs	r3, #16
 8005cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd6:	e07a      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005cd8:	2320      	movs	r3, #32
 8005cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cde:	e076      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005ce0:	2340      	movs	r3, #64	@ 0x40
 8005ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce6:	e072      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005ce8:	2380      	movs	r3, #128	@ 0x80
 8005cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cee:	e06e      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a75      	ldr	r2, [pc, #468]	@ (8005ecc <UART_SetConfig+0x6a4>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d130      	bne.n	8005d5c <UART_SetConfig+0x534>
 8005cfa:	4b72      	ldr	r3, [pc, #456]	@ (8005ec4 <UART_SetConfig+0x69c>)
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	2b05      	cmp	r3, #5
 8005d04:	d826      	bhi.n	8005d54 <UART_SetConfig+0x52c>
 8005d06:	a201      	add	r2, pc, #4	@ (adr r2, 8005d0c <UART_SetConfig+0x4e4>)
 8005d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0c:	08005d25 	.word	0x08005d25
 8005d10:	08005d2d 	.word	0x08005d2d
 8005d14:	08005d35 	.word	0x08005d35
 8005d18:	08005d3d 	.word	0x08005d3d
 8005d1c:	08005d45 	.word	0x08005d45
 8005d20:	08005d4d 	.word	0x08005d4d
 8005d24:	2300      	movs	r3, #0
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2a:	e050      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005d2c:	2304      	movs	r3, #4
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e04c      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005d34:	2308      	movs	r3, #8
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3a:	e048      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005d3c:	2310      	movs	r3, #16
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d42:	e044      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005d44:	2320      	movs	r3, #32
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4a:	e040      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005d4c:	2340      	movs	r3, #64	@ 0x40
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d52:	e03c      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005d54:	2380      	movs	r3, #128	@ 0x80
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5a:	e038      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a5b      	ldr	r2, [pc, #364]	@ (8005ed0 <UART_SetConfig+0x6a8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d130      	bne.n	8005dc8 <UART_SetConfig+0x5a0>
 8005d66:	4b57      	ldr	r3, [pc, #348]	@ (8005ec4 <UART_SetConfig+0x69c>)
 8005d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	2b05      	cmp	r3, #5
 8005d70:	d826      	bhi.n	8005dc0 <UART_SetConfig+0x598>
 8005d72:	a201      	add	r2, pc, #4	@ (adr r2, 8005d78 <UART_SetConfig+0x550>)
 8005d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d78:	08005d91 	.word	0x08005d91
 8005d7c:	08005d99 	.word	0x08005d99
 8005d80:	08005da1 	.word	0x08005da1
 8005d84:	08005da9 	.word	0x08005da9
 8005d88:	08005db1 	.word	0x08005db1
 8005d8c:	08005db9 	.word	0x08005db9
 8005d90:	2302      	movs	r3, #2
 8005d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d96:	e01a      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005d98:	2304      	movs	r3, #4
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9e:	e016      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005da0:	2308      	movs	r3, #8
 8005da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da6:	e012      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005da8:	2310      	movs	r3, #16
 8005daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dae:	e00e      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005db0:	2320      	movs	r3, #32
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db6:	e00a      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005db8:	2340      	movs	r3, #64	@ 0x40
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dbe:	e006      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005dc0:	2380      	movs	r3, #128	@ 0x80
 8005dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc6:	e002      	b.n	8005dce <UART_SetConfig+0x5a6>
 8005dc8:	2380      	movs	r3, #128	@ 0x80
 8005dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a3f      	ldr	r2, [pc, #252]	@ (8005ed0 <UART_SetConfig+0x6a8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	f040 80f8 	bne.w	8005fca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	dc46      	bgt.n	8005e70 <UART_SetConfig+0x648>
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	f2c0 8082 	blt.w	8005eec <UART_SetConfig+0x6c4>
 8005de8:	3b02      	subs	r3, #2
 8005dea:	2b1e      	cmp	r3, #30
 8005dec:	d87e      	bhi.n	8005eec <UART_SetConfig+0x6c4>
 8005dee:	a201      	add	r2, pc, #4	@ (adr r2, 8005df4 <UART_SetConfig+0x5cc>)
 8005df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df4:	08005e77 	.word	0x08005e77
 8005df8:	08005eed 	.word	0x08005eed
 8005dfc:	08005e7f 	.word	0x08005e7f
 8005e00:	08005eed 	.word	0x08005eed
 8005e04:	08005eed 	.word	0x08005eed
 8005e08:	08005eed 	.word	0x08005eed
 8005e0c:	08005e8f 	.word	0x08005e8f
 8005e10:	08005eed 	.word	0x08005eed
 8005e14:	08005eed 	.word	0x08005eed
 8005e18:	08005eed 	.word	0x08005eed
 8005e1c:	08005eed 	.word	0x08005eed
 8005e20:	08005eed 	.word	0x08005eed
 8005e24:	08005eed 	.word	0x08005eed
 8005e28:	08005eed 	.word	0x08005eed
 8005e2c:	08005e9f 	.word	0x08005e9f
 8005e30:	08005eed 	.word	0x08005eed
 8005e34:	08005eed 	.word	0x08005eed
 8005e38:	08005eed 	.word	0x08005eed
 8005e3c:	08005eed 	.word	0x08005eed
 8005e40:	08005eed 	.word	0x08005eed
 8005e44:	08005eed 	.word	0x08005eed
 8005e48:	08005eed 	.word	0x08005eed
 8005e4c:	08005eed 	.word	0x08005eed
 8005e50:	08005eed 	.word	0x08005eed
 8005e54:	08005eed 	.word	0x08005eed
 8005e58:	08005eed 	.word	0x08005eed
 8005e5c:	08005eed 	.word	0x08005eed
 8005e60:	08005eed 	.word	0x08005eed
 8005e64:	08005eed 	.word	0x08005eed
 8005e68:	08005eed 	.word	0x08005eed
 8005e6c:	08005edf 	.word	0x08005edf
 8005e70:	2b40      	cmp	r3, #64	@ 0x40
 8005e72:	d037      	beq.n	8005ee4 <UART_SetConfig+0x6bc>
 8005e74:	e03a      	b.n	8005eec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005e76:	f7fe f89f 	bl	8003fb8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e7c:	e03c      	b.n	8005ef8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe f8ae 	bl	8003fe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e8c:	e034      	b.n	8005ef8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e8e:	f107 0318 	add.w	r3, r7, #24
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fe f9fa 	bl	800428c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e9c:	e02c      	b.n	8005ef8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e9e:	4b09      	ldr	r3, [pc, #36]	@ (8005ec4 <UART_SetConfig+0x69c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d016      	beq.n	8005ed8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005eaa:	4b06      	ldr	r3, [pc, #24]	@ (8005ec4 <UART_SetConfig+0x69c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	08db      	lsrs	r3, r3, #3
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	4a07      	ldr	r2, [pc, #28]	@ (8005ed4 <UART_SetConfig+0x6ac>)
 8005eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ebc:	e01c      	b.n	8005ef8 <UART_SetConfig+0x6d0>
 8005ebe:	bf00      	nop
 8005ec0:	40011400 	.word	0x40011400
 8005ec4:	58024400 	.word	0x58024400
 8005ec8:	40007800 	.word	0x40007800
 8005ecc:	40007c00 	.word	0x40007c00
 8005ed0:	58000c00 	.word	0x58000c00
 8005ed4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005ed8:	4b9d      	ldr	r3, [pc, #628]	@ (8006150 <UART_SetConfig+0x928>)
 8005eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005edc:	e00c      	b.n	8005ef8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ede:	4b9d      	ldr	r3, [pc, #628]	@ (8006154 <UART_SetConfig+0x92c>)
 8005ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ee2:	e009      	b.n	8005ef8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eea:	e005      	b.n	8005ef8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ef6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 81de 	beq.w	80062bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f04:	4a94      	ldr	r2, [pc, #592]	@ (8006158 <UART_SetConfig+0x930>)
 8005f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f12:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	4413      	add	r3, r2
 8005f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d305      	bcc.n	8005f30 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d903      	bls.n	8005f38 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005f36:	e1c1      	b.n	80062bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	60bb      	str	r3, [r7, #8]
 8005f3e:	60fa      	str	r2, [r7, #12]
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f44:	4a84      	ldr	r2, [pc, #528]	@ (8006158 <UART_SetConfig+0x930>)
 8005f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f5a:	f7fa f9bd 	bl	80002d8 <__aeabi_uldivmod>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4610      	mov	r0, r2
 8005f64:	4619      	mov	r1, r3
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	020b      	lsls	r3, r1, #8
 8005f70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f74:	0202      	lsls	r2, r0, #8
 8005f76:	6979      	ldr	r1, [r7, #20]
 8005f78:	6849      	ldr	r1, [r1, #4]
 8005f7a:	0849      	lsrs	r1, r1, #1
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	460c      	mov	r4, r1
 8005f80:	4605      	mov	r5, r0
 8005f82:	eb12 0804 	adds.w	r8, r2, r4
 8005f86:	eb43 0905 	adc.w	r9, r3, r5
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	469a      	mov	sl, r3
 8005f92:	4693      	mov	fp, r2
 8005f94:	4652      	mov	r2, sl
 8005f96:	465b      	mov	r3, fp
 8005f98:	4640      	mov	r0, r8
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	f7fa f99c 	bl	80002d8 <__aeabi_uldivmod>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005faa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fae:	d308      	bcc.n	8005fc2 <UART_SetConfig+0x79a>
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fb6:	d204      	bcs.n	8005fc2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005fbe:	60da      	str	r2, [r3, #12]
 8005fc0:	e17c      	b.n	80062bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005fc8:	e178      	b.n	80062bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fd2:	f040 80c5 	bne.w	8006160 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005fd6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	dc48      	bgt.n	8006070 <UART_SetConfig+0x848>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	db7b      	blt.n	80060da <UART_SetConfig+0x8b2>
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	d879      	bhi.n	80060da <UART_SetConfig+0x8b2>
 8005fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fec <UART_SetConfig+0x7c4>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	08006077 	.word	0x08006077
 8005ff0:	0800607f 	.word	0x0800607f
 8005ff4:	080060db 	.word	0x080060db
 8005ff8:	080060db 	.word	0x080060db
 8005ffc:	08006087 	.word	0x08006087
 8006000:	080060db 	.word	0x080060db
 8006004:	080060db 	.word	0x080060db
 8006008:	080060db 	.word	0x080060db
 800600c:	08006097 	.word	0x08006097
 8006010:	080060db 	.word	0x080060db
 8006014:	080060db 	.word	0x080060db
 8006018:	080060db 	.word	0x080060db
 800601c:	080060db 	.word	0x080060db
 8006020:	080060db 	.word	0x080060db
 8006024:	080060db 	.word	0x080060db
 8006028:	080060db 	.word	0x080060db
 800602c:	080060a7 	.word	0x080060a7
 8006030:	080060db 	.word	0x080060db
 8006034:	080060db 	.word	0x080060db
 8006038:	080060db 	.word	0x080060db
 800603c:	080060db 	.word	0x080060db
 8006040:	080060db 	.word	0x080060db
 8006044:	080060db 	.word	0x080060db
 8006048:	080060db 	.word	0x080060db
 800604c:	080060db 	.word	0x080060db
 8006050:	080060db 	.word	0x080060db
 8006054:	080060db 	.word	0x080060db
 8006058:	080060db 	.word	0x080060db
 800605c:	080060db 	.word	0x080060db
 8006060:	080060db 	.word	0x080060db
 8006064:	080060db 	.word	0x080060db
 8006068:	080060db 	.word	0x080060db
 800606c:	080060cd 	.word	0x080060cd
 8006070:	2b40      	cmp	r3, #64	@ 0x40
 8006072:	d02e      	beq.n	80060d2 <UART_SetConfig+0x8aa>
 8006074:	e031      	b.n	80060da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006076:	f7fc fd69 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 800607a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800607c:	e033      	b.n	80060e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800607e:	f7fc fd7b 	bl	8002b78 <HAL_RCC_GetPCLK2Freq>
 8006082:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006084:	e02f      	b.n	80060e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800608a:	4618      	mov	r0, r3
 800608c:	f7fd ffaa 	bl	8003fe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006094:	e027      	b.n	80060e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006096:	f107 0318 	add.w	r3, r7, #24
 800609a:	4618      	mov	r0, r3
 800609c:	f7fe f8f6 	bl	800428c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060a4:	e01f      	b.n	80060e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060a6:	4b2d      	ldr	r3, [pc, #180]	@ (800615c <UART_SetConfig+0x934>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d009      	beq.n	80060c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060b2:	4b2a      	ldr	r3, [pc, #168]	@ (800615c <UART_SetConfig+0x934>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	08db      	lsrs	r3, r3, #3
 80060b8:	f003 0303 	and.w	r3, r3, #3
 80060bc:	4a24      	ldr	r2, [pc, #144]	@ (8006150 <UART_SetConfig+0x928>)
 80060be:	fa22 f303 	lsr.w	r3, r2, r3
 80060c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060c4:	e00f      	b.n	80060e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80060c6:	4b22      	ldr	r3, [pc, #136]	@ (8006150 <UART_SetConfig+0x928>)
 80060c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ca:	e00c      	b.n	80060e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060cc:	4b21      	ldr	r3, [pc, #132]	@ (8006154 <UART_SetConfig+0x92c>)
 80060ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060d0:	e009      	b.n	80060e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060d8:	e005      	b.n	80060e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80060e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 80e7 	beq.w	80062bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f2:	4a19      	ldr	r2, [pc, #100]	@ (8006158 <UART_SetConfig+0x930>)
 80060f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060f8:	461a      	mov	r2, r3
 80060fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006100:	005a      	lsls	r2, r3, #1
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	085b      	lsrs	r3, r3, #1
 8006108:	441a      	add	r2, r3
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006112:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006116:	2b0f      	cmp	r3, #15
 8006118:	d916      	bls.n	8006148 <UART_SetConfig+0x920>
 800611a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006120:	d212      	bcs.n	8006148 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006124:	b29b      	uxth	r3, r3
 8006126:	f023 030f 	bic.w	r3, r3, #15
 800612a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800612c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612e:	085b      	lsrs	r3, r3, #1
 8006130:	b29b      	uxth	r3, r3
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	b29a      	uxth	r2, r3
 8006138:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800613a:	4313      	orrs	r3, r2
 800613c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006144:	60da      	str	r2, [r3, #12]
 8006146:	e0b9      	b.n	80062bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800614e:	e0b5      	b.n	80062bc <UART_SetConfig+0xa94>
 8006150:	03d09000 	.word	0x03d09000
 8006154:	003d0900 	.word	0x003d0900
 8006158:	080069c0 	.word	0x080069c0
 800615c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006160:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006164:	2b20      	cmp	r3, #32
 8006166:	dc49      	bgt.n	80061fc <UART_SetConfig+0x9d4>
 8006168:	2b00      	cmp	r3, #0
 800616a:	db7c      	blt.n	8006266 <UART_SetConfig+0xa3e>
 800616c:	2b20      	cmp	r3, #32
 800616e:	d87a      	bhi.n	8006266 <UART_SetConfig+0xa3e>
 8006170:	a201      	add	r2, pc, #4	@ (adr r2, 8006178 <UART_SetConfig+0x950>)
 8006172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006176:	bf00      	nop
 8006178:	08006203 	.word	0x08006203
 800617c:	0800620b 	.word	0x0800620b
 8006180:	08006267 	.word	0x08006267
 8006184:	08006267 	.word	0x08006267
 8006188:	08006213 	.word	0x08006213
 800618c:	08006267 	.word	0x08006267
 8006190:	08006267 	.word	0x08006267
 8006194:	08006267 	.word	0x08006267
 8006198:	08006223 	.word	0x08006223
 800619c:	08006267 	.word	0x08006267
 80061a0:	08006267 	.word	0x08006267
 80061a4:	08006267 	.word	0x08006267
 80061a8:	08006267 	.word	0x08006267
 80061ac:	08006267 	.word	0x08006267
 80061b0:	08006267 	.word	0x08006267
 80061b4:	08006267 	.word	0x08006267
 80061b8:	08006233 	.word	0x08006233
 80061bc:	08006267 	.word	0x08006267
 80061c0:	08006267 	.word	0x08006267
 80061c4:	08006267 	.word	0x08006267
 80061c8:	08006267 	.word	0x08006267
 80061cc:	08006267 	.word	0x08006267
 80061d0:	08006267 	.word	0x08006267
 80061d4:	08006267 	.word	0x08006267
 80061d8:	08006267 	.word	0x08006267
 80061dc:	08006267 	.word	0x08006267
 80061e0:	08006267 	.word	0x08006267
 80061e4:	08006267 	.word	0x08006267
 80061e8:	08006267 	.word	0x08006267
 80061ec:	08006267 	.word	0x08006267
 80061f0:	08006267 	.word	0x08006267
 80061f4:	08006267 	.word	0x08006267
 80061f8:	08006259 	.word	0x08006259
 80061fc:	2b40      	cmp	r3, #64	@ 0x40
 80061fe:	d02e      	beq.n	800625e <UART_SetConfig+0xa36>
 8006200:	e031      	b.n	8006266 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006202:	f7fc fca3 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 8006206:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006208:	e033      	b.n	8006272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800620a:	f7fc fcb5 	bl	8002b78 <HAL_RCC_GetPCLK2Freq>
 800620e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006210:	e02f      	b.n	8006272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006216:	4618      	mov	r0, r3
 8006218:	f7fd fee4 	bl	8003fe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800621c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006220:	e027      	b.n	8006272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006222:	f107 0318 	add.w	r3, r7, #24
 8006226:	4618      	mov	r0, r3
 8006228:	f7fe f830 	bl	800428c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006230:	e01f      	b.n	8006272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006232:	4b2d      	ldr	r3, [pc, #180]	@ (80062e8 <UART_SetConfig+0xac0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0320 	and.w	r3, r3, #32
 800623a:	2b00      	cmp	r3, #0
 800623c:	d009      	beq.n	8006252 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800623e:	4b2a      	ldr	r3, [pc, #168]	@ (80062e8 <UART_SetConfig+0xac0>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	08db      	lsrs	r3, r3, #3
 8006244:	f003 0303 	and.w	r3, r3, #3
 8006248:	4a28      	ldr	r2, [pc, #160]	@ (80062ec <UART_SetConfig+0xac4>)
 800624a:	fa22 f303 	lsr.w	r3, r2, r3
 800624e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006250:	e00f      	b.n	8006272 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006252:	4b26      	ldr	r3, [pc, #152]	@ (80062ec <UART_SetConfig+0xac4>)
 8006254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006256:	e00c      	b.n	8006272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006258:	4b25      	ldr	r3, [pc, #148]	@ (80062f0 <UART_SetConfig+0xac8>)
 800625a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800625c:	e009      	b.n	8006272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800625e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006264:	e005      	b.n	8006272 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006270:	bf00      	nop
    }

    if (pclk != 0U)
 8006272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d021      	beq.n	80062bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627c:	4a1d      	ldr	r2, [pc, #116]	@ (80062f4 <UART_SetConfig+0xacc>)
 800627e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006282:	461a      	mov	r2, r3
 8006284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006286:	fbb3 f2f2 	udiv	r2, r3, r2
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	085b      	lsrs	r3, r3, #1
 8006290:	441a      	add	r2, r3
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	fbb2 f3f3 	udiv	r3, r2, r3
 800629a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800629c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629e:	2b0f      	cmp	r3, #15
 80062a0:	d909      	bls.n	80062b6 <UART_SetConfig+0xa8e>
 80062a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062a8:	d205      	bcs.n	80062b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60da      	str	r2, [r3, #12]
 80062b4:	e002      	b.n	80062bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2201      	movs	r2, #1
 80062c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2200      	movs	r2, #0
 80062d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2200      	movs	r2, #0
 80062d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80062d8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3748      	adds	r7, #72	@ 0x48
 80062e0:	46bd      	mov	sp, r7
 80062e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062e6:	bf00      	nop
 80062e8:	58024400 	.word	0x58024400
 80062ec:	03d09000 	.word	0x03d09000
 80062f0:	003d0900 	.word	0x003d0900
 80062f4:	080069c0 	.word	0x080069c0

080062f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006304:	f003 0308 	and.w	r3, r3, #8
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800638c:	f003 0310 	and.w	r3, r3, #16
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00a      	beq.n	80063aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ae:	f003 0320 	and.w	r3, r3, #32
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d01a      	beq.n	800640e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063f6:	d10a      	bne.n	800640e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	605a      	str	r2, [r3, #4]
  }
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b098      	sub	sp, #96	@ 0x60
 8006440:	af02      	add	r7, sp, #8
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800644c:	f7fa fd9c 	bl	8000f88 <HAL_GetTick>
 8006450:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b08      	cmp	r3, #8
 800645e:	d12f      	bne.n	80064c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006460:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006468:	2200      	movs	r2, #0
 800646a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f88e 	bl	8006590 <UART_WaitOnFlagUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d022      	beq.n	80064c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006482:	e853 3f00 	ldrex	r3, [r3]
 8006486:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800648a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800648e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	461a      	mov	r2, r3
 8006496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006498:	647b      	str	r3, [r7, #68]	@ 0x44
 800649a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800649e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064a0:	e841 2300 	strex	r3, r2, [r1]
 80064a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1e6      	bne.n	800647a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e063      	b.n	8006588 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d149      	bne.n	8006562 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064d6:	2200      	movs	r2, #0
 80064d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f857 	bl	8006590 <UART_WaitOnFlagUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d03c      	beq.n	8006562 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	623b      	str	r3, [r7, #32]
   return(result);
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006506:	633b      	str	r3, [r7, #48]	@ 0x30
 8006508:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800650c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e6      	bne.n	80064e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3308      	adds	r3, #8
 8006520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	60fb      	str	r3, [r7, #12]
   return(result);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f023 0301 	bic.w	r3, r3, #1
 8006530:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3308      	adds	r3, #8
 8006538:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800653a:	61fa      	str	r2, [r7, #28]
 800653c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	69b9      	ldr	r1, [r7, #24]
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	617b      	str	r3, [r7, #20]
   return(result);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1e5      	bne.n	800651a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e012      	b.n	8006588 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2220      	movs	r2, #32
 8006566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3758      	adds	r7, #88	@ 0x58
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	4613      	mov	r3, r2
 800659e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a0:	e04f      	b.n	8006642 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a8:	d04b      	beq.n	8006642 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065aa:	f7fa fced 	bl	8000f88 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d302      	bcc.n	80065c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e04e      	b.n	8006662 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0304 	and.w	r3, r3, #4
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d037      	beq.n	8006642 <UART_WaitOnFlagUntilTimeout+0xb2>
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b80      	cmp	r3, #128	@ 0x80
 80065d6:	d034      	beq.n	8006642 <UART_WaitOnFlagUntilTimeout+0xb2>
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b40      	cmp	r3, #64	@ 0x40
 80065dc:	d031      	beq.n	8006642 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	f003 0308 	and.w	r3, r3, #8
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	d110      	bne.n	800660e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2208      	movs	r2, #8
 80065f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f839 	bl	800666c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2208      	movs	r2, #8
 80065fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e029      	b.n	8006662 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800661c:	d111      	bne.n	8006642 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f81f 	bl	800666c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e00f      	b.n	8006662 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4013      	ands	r3, r2
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	429a      	cmp	r2, r3
 8006650:	bf0c      	ite	eq
 8006652:	2301      	moveq	r3, #1
 8006654:	2300      	movne	r3, #0
 8006656:	b2db      	uxtb	r3, r3
 8006658:	461a      	mov	r2, r3
 800665a:	79fb      	ldrb	r3, [r7, #7]
 800665c:	429a      	cmp	r2, r3
 800665e:	d0a0      	beq.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b095      	sub	sp, #84	@ 0x54
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006684:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006688:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006692:	643b      	str	r3, [r7, #64]	@ 0x40
 8006694:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006698:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e6      	bne.n	8006674 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3308      	adds	r3, #8
 80066ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006734 <UART_EndRxTransfer+0xc8>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3308      	adds	r3, #8
 80066c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066ce:	e841 2300 	strex	r3, r2, [r1]
 80066d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1e5      	bne.n	80066a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d118      	bne.n	8006714 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f023 0310 	bic.w	r3, r3, #16
 80066f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	461a      	mov	r2, r3
 80066fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	6979      	ldr	r1, [r7, #20]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	613b      	str	r3, [r7, #16]
   return(result);
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e6      	bne.n	80066e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2220      	movs	r2, #32
 8006718:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006728:	bf00      	nop
 800672a:	3754      	adds	r7, #84	@ 0x54
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	effffffe 	.word	0xeffffffe

08006738 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <HAL_UARTEx_DisableFifoMode+0x16>
 800674a:	2302      	movs	r3, #2
 800674c:	e027      	b.n	800679e <HAL_UARTEx_DisableFifoMode+0x66>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2224      	movs	r2, #36	@ 0x24
 800675a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0201 	bic.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800677c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2220      	movs	r2, #32
 8006790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067be:	2302      	movs	r3, #2
 80067c0:	e02d      	b.n	800681e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2224      	movs	r2, #36	@ 0x24
 80067ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0201 	bic.w	r2, r2, #1
 80067e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f850 	bl	80068a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2220      	movs	r2, #32
 8006810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800683a:	2302      	movs	r3, #2
 800683c:	e02d      	b.n	800689a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2224      	movs	r2, #36	@ 0x24
 800684a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0201 	bic.w	r2, r2, #1
 8006864:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f812 	bl	80068a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
	...

080068a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d108      	bne.n	80068c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068c4:	e031      	b.n	800692a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068c6:	2310      	movs	r3, #16
 80068c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068ca:	2310      	movs	r3, #16
 80068cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	0e5b      	lsrs	r3, r3, #25
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	0f5b      	lsrs	r3, r3, #29
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068ee:	7bbb      	ldrb	r3, [r7, #14]
 80068f0:	7b3a      	ldrb	r2, [r7, #12]
 80068f2:	4911      	ldr	r1, [pc, #68]	@ (8006938 <UARTEx_SetNbDataToProcess+0x94>)
 80068f4:	5c8a      	ldrb	r2, [r1, r2]
 80068f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80068fa:	7b3a      	ldrb	r2, [r7, #12]
 80068fc:	490f      	ldr	r1, [pc, #60]	@ (800693c <UARTEx_SetNbDataToProcess+0x98>)
 80068fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006900:	fb93 f3f2 	sdiv	r3, r3, r2
 8006904:	b29a      	uxth	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	7b7a      	ldrb	r2, [r7, #13]
 8006910:	4909      	ldr	r1, [pc, #36]	@ (8006938 <UARTEx_SetNbDataToProcess+0x94>)
 8006912:	5c8a      	ldrb	r2, [r1, r2]
 8006914:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006918:	7b7a      	ldrb	r2, [r7, #13]
 800691a:	4908      	ldr	r1, [pc, #32]	@ (800693c <UARTEx_SetNbDataToProcess+0x98>)
 800691c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800691e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006922:	b29a      	uxth	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800692a:	bf00      	nop
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	080069d8 	.word	0x080069d8
 800693c:	080069e0 	.word	0x080069e0

08006940 <memset>:
 8006940:	4402      	add	r2, r0
 8006942:	4603      	mov	r3, r0
 8006944:	4293      	cmp	r3, r2
 8006946:	d100      	bne.n	800694a <memset+0xa>
 8006948:	4770      	bx	lr
 800694a:	f803 1b01 	strb.w	r1, [r3], #1
 800694e:	e7f9      	b.n	8006944 <memset+0x4>

08006950 <__libc_init_array>:
 8006950:	b570      	push	{r4, r5, r6, lr}
 8006952:	4d0d      	ldr	r5, [pc, #52]	@ (8006988 <__libc_init_array+0x38>)
 8006954:	4c0d      	ldr	r4, [pc, #52]	@ (800698c <__libc_init_array+0x3c>)
 8006956:	1b64      	subs	r4, r4, r5
 8006958:	10a4      	asrs	r4, r4, #2
 800695a:	2600      	movs	r6, #0
 800695c:	42a6      	cmp	r6, r4
 800695e:	d109      	bne.n	8006974 <__libc_init_array+0x24>
 8006960:	4d0b      	ldr	r5, [pc, #44]	@ (8006990 <__libc_init_array+0x40>)
 8006962:	4c0c      	ldr	r4, [pc, #48]	@ (8006994 <__libc_init_array+0x44>)
 8006964:	f000 f818 	bl	8006998 <_init>
 8006968:	1b64      	subs	r4, r4, r5
 800696a:	10a4      	asrs	r4, r4, #2
 800696c:	2600      	movs	r6, #0
 800696e:	42a6      	cmp	r6, r4
 8006970:	d105      	bne.n	800697e <__libc_init_array+0x2e>
 8006972:	bd70      	pop	{r4, r5, r6, pc}
 8006974:	f855 3b04 	ldr.w	r3, [r5], #4
 8006978:	4798      	blx	r3
 800697a:	3601      	adds	r6, #1
 800697c:	e7ee      	b.n	800695c <__libc_init_array+0xc>
 800697e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006982:	4798      	blx	r3
 8006984:	3601      	adds	r6, #1
 8006986:	e7f2      	b.n	800696e <__libc_init_array+0x1e>
 8006988:	080069f0 	.word	0x080069f0
 800698c:	080069f0 	.word	0x080069f0
 8006990:	080069f0 	.word	0x080069f0
 8006994:	080069f4 	.word	0x080069f4

08006998 <_init>:
 8006998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699a:	bf00      	nop
 800699c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699e:	bc08      	pop	{r3}
 80069a0:	469e      	mov	lr, r3
 80069a2:	4770      	bx	lr

080069a4 <_fini>:
 80069a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a6:	bf00      	nop
 80069a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069aa:	bc08      	pop	{r3}
 80069ac:	469e      	mov	lr, r3
 80069ae:	4770      	bx	lr
