
Cyclone10LP_SPI_NucleoH743ZIT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005970  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005c08  08005c08  00006c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005c40  08005c40  00006c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005c48  08005c48  00006c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005c4c  08005c4c  00006c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000001c  24000000  08005c50  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000013c  2400001c  08005c6c  0000701c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000158  08005c6c  00007158  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011bf8  00000000  00000000  0000704a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000023b0  00000000  00000000  00018c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c28  00000000  00000000  0001aff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000094e  00000000  00000000  0001bc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003672a  00000000  00000000  0001c56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000121a5  00000000  00000000  00052c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159926  00000000  00000000  00064e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001be763  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000319c  00000000  00000000  001be7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000aa  00000000  00000000  001c1944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400001c 	.word	0x2400001c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005bf0 	.word	0x08005bf0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000020 	.word	0x24000020
 80002d4:	08005bf0 	.word	0x08005bf0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08c      	sub	sp, #48	@ 0x30
 80005cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	4b4d      	ldr	r3, [pc, #308]	@ (8000714 <MX_GPIO_Init+0x14c>)
 80005e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e4:	4a4b      	ldr	r2, [pc, #300]	@ (8000714 <MX_GPIO_Init+0x14c>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ee:	4b49      	ldr	r3, [pc, #292]	@ (8000714 <MX_GPIO_Init+0x14c>)
 80005f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	61bb      	str	r3, [r7, #24]
 80005fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fc:	4b45      	ldr	r3, [pc, #276]	@ (8000714 <MX_GPIO_Init+0x14c>)
 80005fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000602:	4a44      	ldr	r2, [pc, #272]	@ (8000714 <MX_GPIO_Init+0x14c>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800060c:	4b41      	ldr	r3, [pc, #260]	@ (8000714 <MX_GPIO_Init+0x14c>)
 800060e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4b3e      	ldr	r3, [pc, #248]	@ (8000714 <MX_GPIO_Init+0x14c>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000620:	4a3c      	ldr	r2, [pc, #240]	@ (8000714 <MX_GPIO_Init+0x14c>)
 8000622:	f043 0302 	orr.w	r3, r3, #2
 8000626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800062a:	4b3a      	ldr	r3, [pc, #232]	@ (8000714 <MX_GPIO_Init+0x14c>)
 800062c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000630:	f003 0302 	and.w	r3, r3, #2
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000638:	4b36      	ldr	r3, [pc, #216]	@ (8000714 <MX_GPIO_Init+0x14c>)
 800063a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800063e:	4a35      	ldr	r2, [pc, #212]	@ (8000714 <MX_GPIO_Init+0x14c>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000648:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <MX_GPIO_Init+0x14c>)
 800064a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000656:	4b2f      	ldr	r3, [pc, #188]	@ (8000714 <MX_GPIO_Init+0x14c>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800065c:	4a2d      	ldr	r2, [pc, #180]	@ (8000714 <MX_GPIO_Init+0x14c>)
 800065e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000662:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000666:	4b2b      	ldr	r3, [pc, #172]	@ (8000714 <MX_GPIO_Init+0x14c>)
 8000668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800066c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000674:	4b27      	ldr	r3, [pc, #156]	@ (8000714 <MX_GPIO_Init+0x14c>)
 8000676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800067a:	4a26      	ldr	r2, [pc, #152]	@ (8000714 <MX_GPIO_Init+0x14c>)
 800067c:	f043 0310 	orr.w	r3, r3, #16
 8000680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000684:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <MX_GPIO_Init+0x14c>)
 8000686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800068a:	f003 0310 	and.w	r3, r3, #16
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000698:	481f      	ldr	r0, [pc, #124]	@ (8000718 <MX_GPIO_Init+0x150>)
 800069a:	f000 ff25 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80006a4:	481d      	ldr	r0, [pc, #116]	@ (800071c <MX_GPIO_Init+0x154>)
 80006a6:	f000 ff1f 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2102      	movs	r1, #2
 80006ae:	481c      	ldr	r0, [pc, #112]	@ (8000720 <MX_GPIO_Init+0x158>)
 80006b0:	f000 ff1a 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80006b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	4619      	mov	r1, r3
 80006cc:	4812      	ldr	r0, [pc, #72]	@ (8000718 <MX_GPIO_Init+0x150>)
 80006ce:	f000 fd5b 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 80006d2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	480c      	ldr	r0, [pc, #48]	@ (800071c <MX_GPIO_Init+0x154>)
 80006ec:	f000 fd4c 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4806      	ldr	r0, [pc, #24]	@ (8000720 <MX_GPIO_Init+0x158>)
 8000708:	f000 fd3e 	bl	8001188 <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3730      	adds	r7, #48	@ 0x30
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	58024400 	.word	0x58024400
 8000718:	58020400 	.word	0x58020400
 800071c:	58021800 	.word	0x58021800
 8000720:	58021000 	.word	0x58021000

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000728:	f000 f8d0 	bl	80008cc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072c:	f000 fb32 	bl	8000d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000730:	f000 f828 	bl	8000784 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000734:	f000 f898 	bl	8000868 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000738:	f7ff ff46 	bl	80005c8 <MX_GPIO_Init>
  MX_SPI6_Init();
 800073c:	f000 f8f8 	bl	8000930 <MX_SPI6_Init>
  MX_USART3_UART_Init();
 8000740:	f000 fa68 	bl	8000c14 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);							// Pulls the SPI line down low
 8000744:	2200      	movs	r2, #0
 8000746:	2108      	movs	r1, #8
 8000748:	480a      	ldr	r0, [pc, #40]	@ (8000774 <main+0x50>)
 800074a:	f000 fecd 	bl	80014e8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi6, rx_data, 8U, 1000);									// Single SPI Receive in Regular Mode
 800074e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000752:	2208      	movs	r2, #8
 8000754:	4908      	ldr	r1, [pc, #32]	@ (8000778 <main+0x54>)
 8000756:	4809      	ldr	r0, [pc, #36]	@ (800077c <main+0x58>)
 8000758:	f003 fe6a 	bl	8004430 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);							// Pulls the SPI line back high
 800075c:	2201      	movs	r2, #1
 800075e:	2108      	movs	r1, #8
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <main+0x50>)
 8000762:	f000 fec1 	bl	80014e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); 										// Toggle LED to show the system is running
 8000766:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <main+0x5c>)
 800076c:	f000 fed5 	bl	800151a <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);							// Pulls the SPI line down low
 8000770:	bf00      	nop
 8000772:	e7e7      	b.n	8000744 <main+0x20>
 8000774:	58021800 	.word	0x58021800
 8000778:	24000000 	.word	0x24000000
 800077c:	24000038 	.word	0x24000038
 8000780:	58020400 	.word	0x58020400

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b09c      	sub	sp, #112	@ 0x70
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078e:	224c      	movs	r2, #76	@ 0x4c
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f005 fa00 	bl	8005b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2220      	movs	r2, #32
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f005 f9fa 	bl	8005b98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007a4:	2002      	movs	r0, #2
 80007a6:	f000 fed3 	bl	8001550 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b2b      	ldr	r3, [pc, #172]	@ (800085c <SystemClock_Config+0xd8>)
 80007b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007b2:	4a2a      	ldr	r2, [pc, #168]	@ (800085c <SystemClock_Config+0xd8>)
 80007b4:	f023 0301 	bic.w	r3, r3, #1
 80007b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007ba:	4b28      	ldr	r3, [pc, #160]	@ (800085c <SystemClock_Config+0xd8>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	4b26      	ldr	r3, [pc, #152]	@ (8000860 <SystemClock_Config+0xdc>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007cc:	4a24      	ldr	r2, [pc, #144]	@ (8000860 <SystemClock_Config+0xdc>)
 80007ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b22      	ldr	r3, [pc, #136]	@ (8000860 <SystemClock_Config+0xdc>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007e0:	bf00      	nop
 80007e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <SystemClock_Config+0xdc>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007ee:	d1f8      	bne.n	80007e2 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80007f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <SystemClock_Config+0xe0>)
 80007f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000864 <SystemClock_Config+0xe0>)
 80007f6:	f023 0303 	bic.w	r3, r3, #3
 80007fa:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000800:	2301      	movs	r3, #1
 8000802:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	2340      	movs	r3, #64	@ 0x40
 8000806:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000808:	2300      	movs	r3, #0
 800080a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fed7 	bl	80015c4 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800081c:	f000 f882 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	233f      	movs	r3, #63	@ 0x3f
 8000822:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2101      	movs	r1, #1
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fb17 	bl	8001e78 <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000850:	f000 f868 	bl	8000924 <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	3770      	adds	r7, #112	@ 0x70
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	58000400 	.word	0x58000400
 8000860:	58024800 	.word	0x58024800
 8000864:	58024400 	.word	0x58024400

08000868 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b0b0      	sub	sp, #192	@ 0xc0
 800086c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	22c0      	movs	r2, #192	@ 0xc0
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f005 f98f 	bl	8005b98 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6|RCC_PERIPHCLK_USART3;
 800087a:	f244 0202 	movw	r2, #16386	@ 0x4002
 800087e:	f04f 0300 	mov.w	r3, #0
 8000882:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000886:	2320      	movs	r3, #32
 8000888:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 800088a:	2381      	movs	r3, #129	@ 0x81
 800088c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800088e:	2302      	movs	r3, #2
 8000890:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 6;
 8000892:	2306      	movs	r3, #6
 8000894:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800089a:	2340      	movs	r3, #64	@ 0x40
 800089c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 80008a6:	2301      	movs	r3, #1
 80008a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL2;
 80008aa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80008ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 fe6b 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80008c0:	f000 f830 	bl	8000924 <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	37c0      	adds	r7, #192	@ 0xc0
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008d2:	463b      	mov	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008de:	f000 fbdb 	bl	8001098 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008e2:	2301      	movs	r3, #1
 80008e4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008ee:	231f      	movs	r3, #31
 80008f0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008f2:	2387      	movs	r3, #135	@ 0x87
 80008f4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008fa:	2300      	movs	r3, #0
 80008fc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008fe:	2301      	movs	r3, #1
 8000900:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000902:	2301      	movs	r3, #1
 8000904:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800090e:	463b      	mov	r3, r7
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fbf9 	bl	8001108 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000916:	2004      	movs	r0, #4
 8000918:	f000 fbd6 	bl	80010c8 <HAL_MPU_Enable>

}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <MX_SPI6_Init>:

SPI_HandleTypeDef hspi6;

/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8000934:	4b27      	ldr	r3, [pc, #156]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 8000936:	4a28      	ldr	r2, [pc, #160]	@ (80009d8 <MX_SPI6_Init+0xa8>)
 8000938:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800093a:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 800093c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000940:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000942:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8000948:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 800094a:	2207      	movs	r2, #7
 800094c:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094e:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000954:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 800095a:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 800095c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000960:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000962:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 8000964:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000968:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000976:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 800097c:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 800097e:	2200      	movs	r2, #0
 8000980:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000982:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 8000984:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000988:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800098a:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 800098c:	2200      	movs	r2, #0
 800098e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000990:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 8000992:	2200      	movs	r2, #0
 8000994:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000996:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 8000998:	2200      	movs	r2, #0
 800099a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800099c:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_SPI6_Init+0xa4>)
 80009c2:	f003 fc11 	bl	80041e8 <HAL_SPI_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_SPI6_Init+0xa0>
  {
    Error_Handler();
 80009cc:	f7ff ffaa 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	24000038 	.word	0x24000038
 80009d8:	58001400 	.word	0x58001400

080009dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI6)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a64 <HAL_SPI_MspInit+0x88>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d12d      	bne.n	8000a5a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI6_MspInit 0 */

  /* USER CODE END SPI6_MspInit 0 */
    /* SPI6 clock enable */
    __HAL_RCC_SPI6_CLK_ENABLE();
 80009fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <HAL_SPI_MspInit+0x8c>)
 8000a00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a04:	4a18      	ldr	r2, [pc, #96]	@ (8000a68 <HAL_SPI_MspInit+0x8c>)
 8000a06:	f043 0320 	orr.w	r3, r3, #32
 8000a0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <HAL_SPI_MspInit+0x8c>)
 8000a10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a14:	f003 0320 	and.w	r3, r3, #32
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_SPI_MspInit+0x8c>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a22:	4a11      	ldr	r2, [pc, #68]	@ (8000a68 <HAL_SPI_MspInit+0x8c>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <HAL_SPI_MspInit+0x8c>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**SPI6 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI6_SCK
    PB4 (NJTRST)     ------> SPI6_MISO
    PB5     ------> SPI6_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a3a:	2338      	movs	r3, #56	@ 0x38
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <HAL_SPI_MspInit+0x90>)
 8000a56:	f000 fb97 	bl	8001188 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	@ 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	58001400 	.word	0x58001400
 8000a68:	58024400 	.word	0x58024400
 8000a6c:	58020400 	.word	0x58020400

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <HAL_MspInit+0x30>)
 8000a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a7c:	4a08      	ldr	r2, [pc, #32]	@ (8000aa0 <HAL_MspInit+0x30>)
 8000a7e:	f043 0302 	orr.w	r3, r3, #2
 8000a82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_MspInit+0x30>)
 8000a88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	58024400 	.word	0x58024400

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <NMI_Handler+0x4>

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <MemManage_Handler+0x4>

08000abc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afa:	f000 f9bd 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b08:	4b37      	ldr	r3, [pc, #220]	@ (8000be8 <SystemInit+0xe4>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b0e:	4a36      	ldr	r2, [pc, #216]	@ (8000be8 <SystemInit+0xe4>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b18:	4b34      	ldr	r3, [pc, #208]	@ (8000bec <SystemInit+0xe8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	2b06      	cmp	r3, #6
 8000b22:	d807      	bhi.n	8000b34 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b24:	4b31      	ldr	r3, [pc, #196]	@ (8000bec <SystemInit+0xe8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f023 030f 	bic.w	r3, r3, #15
 8000b2c:	4a2f      	ldr	r2, [pc, #188]	@ (8000bec <SystemInit+0xe8>)
 8000b2e:	f043 0307 	orr.w	r3, r3, #7
 8000b32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b34:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf0 <SystemInit+0xec>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a2d      	ldr	r2, [pc, #180]	@ (8000bf0 <SystemInit+0xec>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b40:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf0 <SystemInit+0xec>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b46:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf0 <SystemInit+0xec>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4929      	ldr	r1, [pc, #164]	@ (8000bf0 <SystemInit+0xec>)
 8000b4c:	4b29      	ldr	r3, [pc, #164]	@ (8000bf4 <SystemInit+0xf0>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b52:	4b26      	ldr	r3, [pc, #152]	@ (8000bec <SystemInit+0xe8>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d007      	beq.n	8000b6e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b5e:	4b23      	ldr	r3, [pc, #140]	@ (8000bec <SystemInit+0xe8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f023 030f 	bic.w	r3, r3, #15
 8000b66:	4a21      	ldr	r2, [pc, #132]	@ (8000bec <SystemInit+0xe8>)
 8000b68:	f043 0307 	orr.w	r3, r3, #7
 8000b6c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <SystemInit+0xec>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b74:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf0 <SystemInit+0xec>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <SystemInit+0xec>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <SystemInit+0xec>)
 8000b82:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf8 <SystemInit+0xf4>)
 8000b84:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b86:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <SystemInit+0xec>)
 8000b88:	4a1c      	ldr	r2, [pc, #112]	@ (8000bfc <SystemInit+0xf8>)
 8000b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <SystemInit+0xec>)
 8000b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c00 <SystemInit+0xfc>)
 8000b90:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b92:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <SystemInit+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b98:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <SystemInit+0xec>)
 8000b9a:	4a19      	ldr	r2, [pc, #100]	@ (8000c00 <SystemInit+0xfc>)
 8000b9c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <SystemInit+0xec>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <SystemInit+0xec>)
 8000ba6:	4a16      	ldr	r2, [pc, #88]	@ (8000c00 <SystemInit+0xfc>)
 8000ba8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <SystemInit+0xec>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <SystemInit+0xec>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf0 <SystemInit+0xec>)
 8000bb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <SystemInit+0xec>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <SystemInit+0x100>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <SystemInit+0x104>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000bce:	d202      	bcs.n	8000bd6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <SystemInit+0x108>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <SystemInit+0x10c>)
 8000bd8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000bdc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00
 8000bec:	52002000 	.word	0x52002000
 8000bf0:	58024400 	.word	0x58024400
 8000bf4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bf8:	02020200 	.word	0x02020200
 8000bfc:	01ff0000 	.word	0x01ff0000
 8000c00:	01010280 	.word	0x01010280
 8000c04:	5c001000 	.word	0x5c001000
 8000c08:	ffff0000 	.word	0xffff0000
 8000c0c:	51008108 	.word	0x51008108
 8000c10:	52004000 	.word	0x52004000

08000c14 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c18:	4b22      	ldr	r3, [pc, #136]	@ (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ca8 <MX_USART3_UART_Init+0x94>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c5c:	4811      	ldr	r0, [pc, #68]	@ (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c5e:	f003 febe 	bl	80049de <HAL_UART_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c68:	f7ff fe5c 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c70:	f004 fec7 	bl	8005a02 <HAL_UARTEx_SetTxFifoThreshold>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c7a:	f7ff fe53 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4808      	ldr	r0, [pc, #32]	@ (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c82:	f004 fefc 	bl	8005a7e <HAL_UARTEx_SetRxFifoThreshold>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c8c:	f7ff fe4a 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c92:	f004 fe7d 	bl	8005990 <HAL_UARTEx_DisableFifoMode>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c9c:	f7ff fe42 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	240000c0 	.word	0x240000c0
 8000ca8:	40004800 	.word	0x40004800

08000cac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	@ 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8000d34 <HAL_UART_MspInit+0x88>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12e      	bne.n	8000d2c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cce:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <HAL_UART_MspInit+0x8c>)
 8000cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cd4:	4a18      	ldr	r2, [pc, #96]	@ (8000d38 <HAL_UART_MspInit+0x8c>)
 8000cd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cde:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <HAL_UART_MspInit+0x8c>)
 8000ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ce4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <HAL_UART_MspInit+0x8c>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	4a11      	ldr	r2, [pc, #68]	@ (8000d38 <HAL_UART_MspInit+0x8c>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <HAL_UART_MspInit+0x8c>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <HAL_UART_MspInit+0x90>)
 8000d28:	f000 fa2e 	bl	8001188 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	3728      	adds	r7, #40	@ 0x28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40004800 	.word	0x40004800
 8000d38:	58024400 	.word	0x58024400
 8000d3c:	58020c00 	.word	0x58020c00

08000d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d44:	f7ff fede 	bl	8000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d48:	480c      	ldr	r0, [pc, #48]	@ (8000d7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4a:	490d      	ldr	r1, [pc, #52]	@ (8000d80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d60:	4c0a      	ldr	r4, [pc, #40]	@ (8000d8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f004 ff1b 	bl	8005ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d72:	f7ff fcd7 	bl	8000724 <main>
  bx  lr
 8000d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d80:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 8000d84:	08005c50 	.word	0x08005c50
  ldr r2, =_sbss
 8000d88:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 8000d8c:	24000158 	.word	0x24000158

08000d90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC3_IRQHandler>
	...

08000d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	f000 f94a 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000da0:	f001 fa20 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 8000da4:	4602      	mov	r2, r0
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <HAL_Init+0x68>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	0a1b      	lsrs	r3, r3, #8
 8000dac:	f003 030f 	and.w	r3, r3, #15
 8000db0:	4913      	ldr	r1, [pc, #76]	@ (8000e00 <HAL_Init+0x6c>)
 8000db2:	5ccb      	ldrb	r3, [r1, r3]
 8000db4:	f003 031f 	and.w	r3, r3, #31
 8000db8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dbc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <HAL_Init+0x68>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e00 <HAL_Init+0x6c>)
 8000dc8:	5cd3      	ldrb	r3, [r2, r3]
 8000dca:	f003 031f 	and.w	r3, r3, #31
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e04 <HAL_Init+0x70>)
 8000dd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e08 <HAL_Init+0x74>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dde:	200f      	movs	r0, #15
 8000de0:	f000 f814 	bl	8000e0c <HAL_InitTick>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e002      	b.n	8000df4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dee:	f7ff fe3f 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	58024400 	.word	0x58024400
 8000e00:	08005c08 	.word	0x08005c08
 8000e04:	24000010 	.word	0x24000010
 8000e08:	2400000c 	.word	0x2400000c

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e14:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <HAL_InitTick+0x60>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d101      	bne.n	8000e20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e021      	b.n	8000e64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <HAL_InitTick+0x64>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <HAL_InitTick+0x60>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f921 	bl	800107e <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00e      	b.n	8000e64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d80a      	bhi.n	8000e62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f000 f8f9 	bl	800104a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e58:	4a06      	ldr	r2, [pc, #24]	@ (8000e74 <HAL_InitTick+0x68>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	24000018 	.word	0x24000018
 8000e70:	2400000c 	.word	0x2400000c
 8000e74:	24000014 	.word	0x24000014

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	24000018 	.word	0x24000018
 8000e9c:	24000154 	.word	0x24000154

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	24000154 	.word	0x24000154

08000eb8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	@ (8000ecc <HAL_GetREVID+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	0c1b      	lsrs	r3, r3, #16
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	5c001000 	.word	0x5c001000

08000ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <__NVIC_SetPriorityGrouping+0x40>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efe:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <__NVIC_SetPriorityGrouping+0x40>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	60d3      	str	r3, [r2, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00
 8000f14:	05fa0000 	.word	0x05fa0000

08000f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	@ (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	@ (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	@ (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	@ 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
         );
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	@ 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001000:	d301      	bcc.n	8001006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e00f      	b.n	8001026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <SysTick_Config+0x40>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	210f      	movs	r1, #15
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f7ff ff8e 	bl	8000f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <SysTick_Config+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101e:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <SysTick_Config+0x40>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff47 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001058:	f7ff ff5e 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 800105c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	6978      	ldr	r0, [r7, #20]
 8001064:	f7ff ff90 	bl	8000f88 <NVIC_EncodePriority>
 8001068:	4602      	mov	r2, r0
 800106a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff5f 	bl	8000f34 <__NVIC_SetPriority>
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffb2 	bl	8000ff0 <SysTick_Config>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800109c:	f3bf 8f5f 	dmb	sy
}
 80010a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80010a2:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <HAL_MPU_Disable+0x28>)
 80010a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a6:	4a06      	ldr	r2, [pc, #24]	@ (80010c0 <HAL_MPU_Disable+0x28>)
 80010a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010ac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80010ae:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <HAL_MPU_Disable+0x2c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	605a      	str	r2, [r3, #4]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00
 80010c4:	e000ed90 	.word	0xe000ed90

080010c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80010d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001100 <HAL_MPU_Enable+0x38>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80010da:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <HAL_MPU_Enable+0x3c>)
 80010dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010de:	4a09      	ldr	r2, [pc, #36]	@ (8001104 <HAL_MPU_Enable+0x3c>)
 80010e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010e4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80010e6:	f3bf 8f4f 	dsb	sy
}
 80010ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010ec:	f3bf 8f6f 	isb	sy
}
 80010f0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed90 	.word	0xe000ed90
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	785a      	ldrb	r2, [r3, #1]
 8001114:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <HAL_MPU_ConfigRegion+0x7c>)
 8001116:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001118:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <HAL_MPU_ConfigRegion+0x7c>)
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	4a19      	ldr	r2, [pc, #100]	@ (8001184 <HAL_MPU_ConfigRegion+0x7c>)
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001124:	4a17      	ldr	r2, [pc, #92]	@ (8001184 <HAL_MPU_ConfigRegion+0x7c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7b1b      	ldrb	r3, [r3, #12]
 8001130:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7adb      	ldrb	r3, [r3, #11]
 8001136:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001138:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7a9b      	ldrb	r3, [r3, #10]
 800113e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001140:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7b5b      	ldrb	r3, [r3, #13]
 8001146:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001148:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7b9b      	ldrb	r3, [r3, #14]
 800114e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001150:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7bdb      	ldrb	r3, [r3, #15]
 8001156:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001158:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7a5b      	ldrb	r3, [r3, #9]
 800115e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001160:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7a1b      	ldrb	r3, [r3, #8]
 8001166:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001168:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001172:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001174:	6113      	str	r3, [r2, #16]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed90 	.word	0xe000ed90

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	@ 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001196:	4b89      	ldr	r3, [pc, #548]	@ (80013bc <HAL_GPIO_Init+0x234>)
 8001198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800119a:	e194      	b.n	80014c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	2101      	movs	r1, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8186 	beq.w	80014c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d005      	beq.n	80011cc <HAL_GPIO_Init+0x44>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d130      	bne.n	800122e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001202:	2201      	movs	r2, #1
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	091b      	lsrs	r3, r3, #4
 8001218:	f003 0201 	and.w	r2, r3, #1
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b03      	cmp	r3, #3
 8001238:	d017      	beq.n	800126a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d123      	bne.n	80012be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	220f      	movs	r2, #15
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	08da      	lsrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	69b9      	ldr	r1, [r7, #24]
 80012ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0203 	and.w	r2, r3, #3
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80e0 	beq.w	80014c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001300:	4b2f      	ldr	r3, [pc, #188]	@ (80013c0 <HAL_GPIO_Init+0x238>)
 8001302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001306:	4a2e      	ldr	r2, [pc, #184]	@ (80013c0 <HAL_GPIO_Init+0x238>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001310:	4b2b      	ldr	r3, [pc, #172]	@ (80013c0 <HAL_GPIO_Init+0x238>)
 8001312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800131e:	4a29      	ldr	r2, [pc, #164]	@ (80013c4 <HAL_GPIO_Init+0x23c>)
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3302      	adds	r3, #2
 8001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a20      	ldr	r2, [pc, #128]	@ (80013c8 <HAL_GPIO_Init+0x240>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d052      	beq.n	80013f0 <HAL_GPIO_Init+0x268>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a1f      	ldr	r2, [pc, #124]	@ (80013cc <HAL_GPIO_Init+0x244>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d031      	beq.n	80013b6 <HAL_GPIO_Init+0x22e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a1e      	ldr	r2, [pc, #120]	@ (80013d0 <HAL_GPIO_Init+0x248>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d02b      	beq.n	80013b2 <HAL_GPIO_Init+0x22a>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a1d      	ldr	r2, [pc, #116]	@ (80013d4 <HAL_GPIO_Init+0x24c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d025      	beq.n	80013ae <HAL_GPIO_Init+0x226>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a1c      	ldr	r2, [pc, #112]	@ (80013d8 <HAL_GPIO_Init+0x250>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01f      	beq.n	80013aa <HAL_GPIO_Init+0x222>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a1b      	ldr	r2, [pc, #108]	@ (80013dc <HAL_GPIO_Init+0x254>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x21e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a1a      	ldr	r2, [pc, #104]	@ (80013e0 <HAL_GPIO_Init+0x258>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x21a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a19      	ldr	r2, [pc, #100]	@ (80013e4 <HAL_GPIO_Init+0x25c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x216>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a18      	ldr	r2, [pc, #96]	@ (80013e8 <HAL_GPIO_Init+0x260>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x212>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a17      	ldr	r2, [pc, #92]	@ (80013ec <HAL_GPIO_Init+0x264>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x20e>
 8001392:	2309      	movs	r3, #9
 8001394:	e02d      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 8001396:	230a      	movs	r3, #10
 8001398:	e02b      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 800139a:	2308      	movs	r3, #8
 800139c:	e029      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 800139e:	2307      	movs	r3, #7
 80013a0:	e027      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 80013a2:	2306      	movs	r3, #6
 80013a4:	e025      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 80013a6:	2305      	movs	r3, #5
 80013a8:	e023      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e021      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e01f      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e01d      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e01b      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 80013ba:	bf00      	nop
 80013bc:	58000080 	.word	0x58000080
 80013c0:	58024400 	.word	0x58024400
 80013c4:	58000400 	.word	0x58000400
 80013c8:	58020000 	.word	0x58020000
 80013cc:	58020400 	.word	0x58020400
 80013d0:	58020800 	.word	0x58020800
 80013d4:	58020c00 	.word	0x58020c00
 80013d8:	58021000 	.word	0x58021000
 80013dc:	58021400 	.word	0x58021400
 80013e0:	58021800 	.word	0x58021800
 80013e4:	58021c00 	.word	0x58021c00
 80013e8:	58022000 	.word	0x58022000
 80013ec:	58022400 	.word	0x58022400
 80013f0:	2300      	movs	r3, #0
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	f002 0203 	and.w	r2, r2, #3
 80013f8:	0092      	lsls	r2, r2, #2
 80013fa:	4093      	lsls	r3, r2
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001402:	4938      	ldr	r1, [pc, #224]	@ (80014e4 <HAL_GPIO_Init+0x35c>)
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001436:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800143e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001464:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	3301      	adds	r3, #1
 80014c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fa22 f303 	lsr.w	r3, r2, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f47f ae63 	bne.w	800119c <HAL_GPIO_Init+0x14>
  }
}
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
 80014da:	3724      	adds	r7, #36	@ 0x24
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	58000400 	.word	0x58000400

080014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	041a      	lsls	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800151a:	b480      	push	{r7}
 800151c:	b085      	sub	sp, #20
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800152c:	887a      	ldrh	r2, [r7, #2]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4013      	ands	r3, r2
 8001532:	041a      	lsls	r2, r3, #16
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43d9      	mvns	r1, r3
 8001538:	887b      	ldrh	r3, [r7, #2]
 800153a:	400b      	ands	r3, r1
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	619a      	str	r2, [r3, #24]
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001558:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <HAL_PWREx_ConfigSupply+0x70>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b04      	cmp	r3, #4
 8001562:	d00a      	beq.n	800157a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <HAL_PWREx_ConfigSupply+0x70>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	d001      	beq.n	8001576 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e01f      	b.n	80015b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e01d      	b.n	80015b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <HAL_PWREx_ConfigSupply+0x70>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f023 0207 	bic.w	r2, r3, #7
 8001582:	490f      	ldr	r1, [pc, #60]	@ (80015c0 <HAL_PWREx_ConfigSupply+0x70>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4313      	orrs	r3, r2
 8001588:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800158a:	f7ff fc89 	bl	8000ea0 <HAL_GetTick>
 800158e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001590:	e009      	b.n	80015a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001592:	f7ff fc85 	bl	8000ea0 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015a0:	d901      	bls.n	80015a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e007      	b.n	80015b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015a6:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_PWREx_ConfigSupply+0x70>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015b2:	d1ee      	bne.n	8001592 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	58024800 	.word	0x58024800

080015c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	@ 0x30
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	f000 bc48 	b.w	8001e68 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 8088 	beq.w	80016f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e6:	4b99      	ldr	r3, [pc, #612]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015f0:	4b96      	ldr	r3, [pc, #600]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 80015f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f8:	2b10      	cmp	r3, #16
 80015fa:	d007      	beq.n	800160c <HAL_RCC_OscConfig+0x48>
 80015fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015fe:	2b18      	cmp	r3, #24
 8001600:	d111      	bne.n	8001626 <HAL_RCC_OscConfig+0x62>
 8001602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d10c      	bne.n	8001626 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	4b8f      	ldr	r3, [pc, #572]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d06d      	beq.n	80016f4 <HAL_RCC_OscConfig+0x130>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d169      	bne.n	80016f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	f000 bc21 	b.w	8001e68 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800162e:	d106      	bne.n	800163e <HAL_RCC_OscConfig+0x7a>
 8001630:	4b86      	ldr	r3, [pc, #536]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a85      	ldr	r2, [pc, #532]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	e02e      	b.n	800169c <HAL_RCC_OscConfig+0xd8>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10c      	bne.n	8001660 <HAL_RCC_OscConfig+0x9c>
 8001646:	4b81      	ldr	r3, [pc, #516]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a80      	ldr	r2, [pc, #512]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 800164c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b7e      	ldr	r3, [pc, #504]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a7d      	ldr	r2, [pc, #500]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001658:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e01d      	b.n	800169c <HAL_RCC_OscConfig+0xd8>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0xc0>
 800166a:	4b78      	ldr	r3, [pc, #480]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a77      	ldr	r2, [pc, #476]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b75      	ldr	r3, [pc, #468]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a74      	ldr	r2, [pc, #464]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e00b      	b.n	800169c <HAL_RCC_OscConfig+0xd8>
 8001684:	4b71      	ldr	r3, [pc, #452]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a70      	ldr	r2, [pc, #448]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 800168a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b6e      	ldr	r3, [pc, #440]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a6d      	ldr	r2, [pc, #436]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800169a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fbfc 	bl	8000ea0 <HAL_GetTick>
 80016a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fbf8 	bl	8000ea0 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	@ 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e3d4      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016be:	4b63      	ldr	r3, [pc, #396]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0xe8>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fbe8 	bl	8000ea0 <HAL_GetTick>
 80016d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fbe4 	bl	8000ea0 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	@ 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e3c0      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016e6:	4b59      	ldr	r3, [pc, #356]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x110>
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 80ca 	beq.w	8001898 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001704:	4b51      	ldr	r3, [pc, #324]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800170c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800170e:	4b4f      	ldr	r3, [pc, #316]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001712:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001714:	6a3b      	ldr	r3, [r7, #32]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d007      	beq.n	800172a <HAL_RCC_OscConfig+0x166>
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	2b18      	cmp	r3, #24
 800171e:	d156      	bne.n	80017ce <HAL_RCC_OscConfig+0x20a>
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d151      	bne.n	80017ce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800172a:	4b48      	ldr	r3, [pc, #288]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <HAL_RCC_OscConfig+0x17e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e392      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001742:	4b42      	ldr	r3, [pc, #264]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 0219 	bic.w	r2, r3, #25
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	493f      	ldr	r1, [pc, #252]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001750:	4313      	orrs	r3, r2
 8001752:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fba4 	bl	8000ea0 <HAL_GetTick>
 8001758:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175c:	f7ff fba0 	bl	8000ea0 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e37c      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800176e:	4b37      	ldr	r3, [pc, #220]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177a:	f7ff fb9d 	bl	8000eb8 <HAL_GetREVID>
 800177e:	4603      	mov	r3, r0
 8001780:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001784:	4293      	cmp	r3, r2
 8001786:	d817      	bhi.n	80017b8 <HAL_RCC_OscConfig+0x1f4>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	2b40      	cmp	r3, #64	@ 0x40
 800178e:	d108      	bne.n	80017a2 <HAL_RCC_OscConfig+0x1de>
 8001790:	4b2e      	ldr	r3, [pc, #184]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001798:	4a2c      	ldr	r2, [pc, #176]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 800179a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a0:	e07a      	b.n	8001898 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a2:	4b2a      	ldr	r3, [pc, #168]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	031b      	lsls	r3, r3, #12
 80017b0:	4926      	ldr	r1, [pc, #152]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b6:	e06f      	b.n	8001898 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b8:	4b24      	ldr	r3, [pc, #144]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	061b      	lsls	r3, r3, #24
 80017c6:	4921      	ldr	r1, [pc, #132]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017cc:	e064      	b.n	8001898 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d047      	beq.n	8001866 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017d6:	4b1d      	ldr	r3, [pc, #116]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 0219 	bic.w	r2, r3, #25
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	491a      	ldr	r1, [pc, #104]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff fb5a 	bl	8000ea0 <HAL_GetTick>
 80017ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f0:	f7ff fb56 	bl	8000ea0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e332      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001802:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180e:	f7ff fb53 	bl	8000eb8 <HAL_GetREVID>
 8001812:	4603      	mov	r3, r0
 8001814:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001818:	4293      	cmp	r3, r2
 800181a:	d819      	bhi.n	8001850 <HAL_RCC_OscConfig+0x28c>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	2b40      	cmp	r3, #64	@ 0x40
 8001822:	d108      	bne.n	8001836 <HAL_RCC_OscConfig+0x272>
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800182c:	4a07      	ldr	r2, [pc, #28]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 800182e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001832:	6053      	str	r3, [r2, #4]
 8001834:	e030      	b.n	8001898 <HAL_RCC_OscConfig+0x2d4>
 8001836:	4b05      	ldr	r3, [pc, #20]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	031b      	lsls	r3, r3, #12
 8001844:	4901      	ldr	r1, [pc, #4]	@ (800184c <HAL_RCC_OscConfig+0x288>)
 8001846:	4313      	orrs	r3, r2
 8001848:	604b      	str	r3, [r1, #4]
 800184a:	e025      	b.n	8001898 <HAL_RCC_OscConfig+0x2d4>
 800184c:	58024400 	.word	0x58024400
 8001850:	4b9a      	ldr	r3, [pc, #616]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	061b      	lsls	r3, r3, #24
 800185e:	4997      	ldr	r1, [pc, #604]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
 8001864:	e018      	b.n	8001898 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001866:	4b95      	ldr	r3, [pc, #596]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a94      	ldr	r2, [pc, #592]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001872:	f7ff fb15 	bl	8000ea0 <HAL_GetTick>
 8001876:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187a:	f7ff fb11 	bl	8000ea0 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e2ed      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800188c:	4b8b      	ldr	r3, [pc, #556]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f0      	bne.n	800187a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80a9 	beq.w	80019f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a6:	4b85      	ldr	r3, [pc, #532]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018b0:	4b82      	ldr	r3, [pc, #520]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 80018b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d007      	beq.n	80018cc <HAL_RCC_OscConfig+0x308>
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2b18      	cmp	r3, #24
 80018c0:	d13a      	bne.n	8001938 <HAL_RCC_OscConfig+0x374>
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d135      	bne.n	8001938 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018cc:	4b7b      	ldr	r3, [pc, #492]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_OscConfig+0x320>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	2b80      	cmp	r3, #128	@ 0x80
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e2c1      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018e4:	f7ff fae8 	bl	8000eb8 <HAL_GetREVID>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d817      	bhi.n	8001922 <HAL_RCC_OscConfig+0x35e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	2b20      	cmp	r3, #32
 80018f8:	d108      	bne.n	800190c <HAL_RCC_OscConfig+0x348>
 80018fa:	4b70      	ldr	r3, [pc, #448]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001902:	4a6e      	ldr	r2, [pc, #440]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001904:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001908:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800190a:	e075      	b.n	80019f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800190c:	4b6b      	ldr	r3, [pc, #428]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	069b      	lsls	r3, r3, #26
 800191a:	4968      	ldr	r1, [pc, #416]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001920:	e06a      	b.n	80019f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001922:	4b66      	ldr	r3, [pc, #408]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	061b      	lsls	r3, r3, #24
 8001930:	4962      	ldr	r1, [pc, #392]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001932:	4313      	orrs	r3, r2
 8001934:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001936:	e05f      	b.n	80019f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d042      	beq.n	80019c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001940:	4b5e      	ldr	r3, [pc, #376]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a5d      	ldr	r2, [pc, #372]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800194a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff faa8 	bl	8000ea0 <HAL_GetTick>
 8001950:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001954:	f7ff faa4 	bl	8000ea0 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e280      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001966:	4b55      	ldr	r3, [pc, #340]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001972:	f7ff faa1 	bl	8000eb8 <HAL_GetREVID>
 8001976:	4603      	mov	r3, r0
 8001978:	f241 0203 	movw	r2, #4099	@ 0x1003
 800197c:	4293      	cmp	r3, r2
 800197e:	d817      	bhi.n	80019b0 <HAL_RCC_OscConfig+0x3ec>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	2b20      	cmp	r3, #32
 8001986:	d108      	bne.n	800199a <HAL_RCC_OscConfig+0x3d6>
 8001988:	4b4c      	ldr	r3, [pc, #304]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001990:	4a4a      	ldr	r2, [pc, #296]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001992:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001996:	6053      	str	r3, [r2, #4]
 8001998:	e02e      	b.n	80019f8 <HAL_RCC_OscConfig+0x434>
 800199a:	4b48      	ldr	r3, [pc, #288]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	069b      	lsls	r3, r3, #26
 80019a8:	4944      	ldr	r1, [pc, #272]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	604b      	str	r3, [r1, #4]
 80019ae:	e023      	b.n	80019f8 <HAL_RCC_OscConfig+0x434>
 80019b0:	4b42      	ldr	r3, [pc, #264]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	061b      	lsls	r3, r3, #24
 80019be:	493f      	ldr	r1, [pc, #252]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60cb      	str	r3, [r1, #12]
 80019c4:	e018      	b.n	80019f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80019c6:	4b3d      	ldr	r3, [pc, #244]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a3c      	ldr	r2, [pc, #240]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 80019cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7ff fa65 	bl	8000ea0 <HAL_GetTick>
 80019d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80019da:	f7ff fa61 	bl	8000ea0 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e23d      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019ec:	4b33      	ldr	r3, [pc, #204]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f0      	bne.n	80019da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d036      	beq.n	8001a72 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d019      	beq.n	8001a40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a10:	4a2a      	ldr	r2, [pc, #168]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff fa42 	bl	8000ea0 <HAL_GetTick>
 8001a1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a20:	f7ff fa3e 	bl	8000ea0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e21a      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a32:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x45c>
 8001a3e:	e018      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a40:	4b1e      	ldr	r3, [pc, #120]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a44:	4a1d      	ldr	r2, [pc, #116]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fa28 	bl	8000ea0 <HAL_GetTick>
 8001a50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff fa24 	bl	8000ea0 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e200      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0320 	and.w	r3, r3, #32
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d039      	beq.n	8001af2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d01c      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a86:	4b0d      	ldr	r3, [pc, #52]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001a8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a92:	f7ff fa05 	bl	8000ea0 <HAL_GetTick>
 8001a96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a9a:	f7ff fa01 	bl	8000ea0 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e1dd      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001aac:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x4d6>
 8001ab8:	e01b      	b.n	8001af2 <HAL_RCC_OscConfig+0x52e>
 8001aba:	bf00      	nop
 8001abc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ac0:	4b9b      	ldr	r3, [pc, #620]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a9a      	ldr	r2, [pc, #616]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001ac6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001aca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001acc:	f7ff f9e8 	bl	8000ea0 <HAL_GetTick>
 8001ad0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ad4:	f7ff f9e4 	bl	8000ea0 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e1c0      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ae6:	4b92      	ldr	r3, [pc, #584]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8081 	beq.w	8001c02 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b00:	4b8c      	ldr	r3, [pc, #560]	@ (8001d34 <HAL_RCC_OscConfig+0x770>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a8b      	ldr	r2, [pc, #556]	@ (8001d34 <HAL_RCC_OscConfig+0x770>)
 8001b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b0c:	f7ff f9c8 	bl	8000ea0 <HAL_GetTick>
 8001b10:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b14:	f7ff f9c4 	bl	8000ea0 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	@ 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e1a0      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b26:	4b83      	ldr	r3, [pc, #524]	@ (8001d34 <HAL_RCC_OscConfig+0x770>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d106      	bne.n	8001b48 <HAL_RCC_OscConfig+0x584>
 8001b3a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b3e:	4a7c      	ldr	r2, [pc, #496]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b46:	e02d      	b.n	8001ba4 <HAL_RCC_OscConfig+0x5e0>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10c      	bne.n	8001b6a <HAL_RCC_OscConfig+0x5a6>
 8001b50:	4b77      	ldr	r3, [pc, #476]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b54:	4a76      	ldr	r2, [pc, #472]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001b56:	f023 0301 	bic.w	r3, r3, #1
 8001b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b5c:	4b74      	ldr	r3, [pc, #464]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b60:	4a73      	ldr	r2, [pc, #460]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001b62:	f023 0304 	bic.w	r3, r3, #4
 8001b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b68:	e01c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x5e0>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b05      	cmp	r3, #5
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x5c8>
 8001b72:	4b6f      	ldr	r3, [pc, #444]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b76:	4a6e      	ldr	r2, [pc, #440]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b7e:	4b6c      	ldr	r3, [pc, #432]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b82:	4a6b      	ldr	r2, [pc, #428]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b8a:	e00b      	b.n	8001ba4 <HAL_RCC_OscConfig+0x5e0>
 8001b8c:	4b68      	ldr	r3, [pc, #416]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b90:	4a67      	ldr	r2, [pc, #412]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b98:	4b65      	ldr	r3, [pc, #404]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9c:	4a64      	ldr	r2, [pc, #400]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001b9e:	f023 0304 	bic.w	r3, r3, #4
 8001ba2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d015      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff f978 	bl	8000ea0 <HAL_GetTick>
 8001bb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb4:	f7ff f974 	bl	8000ea0 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e14e      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bca:	4b59      	ldr	r3, [pc, #356]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0ee      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x5f0>
 8001bd6:	e014      	b.n	8001c02 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd8:	f7ff f962 	bl	8000ea0 <HAL_GetTick>
 8001bdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f7ff f95e 	bl	8000ea0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e138      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bf6:	4b4e      	ldr	r3, [pc, #312]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1ee      	bne.n	8001be0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 812d 	beq.w	8001e66 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c0c:	4b48      	ldr	r3, [pc, #288]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c14:	2b18      	cmp	r3, #24
 8001c16:	f000 80bd 	beq.w	8001d94 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	f040 809e 	bne.w	8001d60 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c24:	4b42      	ldr	r3, [pc, #264]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a41      	ldr	r2, [pc, #260]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001c2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff f936 	bl	8000ea0 <HAL_GetTick>
 8001c34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff f932 	bl	8000ea0 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e10e      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c4a:	4b39      	ldr	r3, [pc, #228]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c56:	4b36      	ldr	r3, [pc, #216]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001c58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c5a:	4b37      	ldr	r3, [pc, #220]	@ (8001d38 <HAL_RCC_OscConfig+0x774>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	4931      	ldr	r1, [pc, #196]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c74:	3b01      	subs	r3, #1
 8001c76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	025b      	lsls	r3, r3, #9
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	041b      	lsls	r3, r3, #16
 8001c8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	061b      	lsls	r3, r3, #24
 8001c9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001ca0:	4923      	ldr	r1, [pc, #140]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001ca6:	4b22      	ldr	r3, [pc, #136]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001caa:	4a21      	ldr	r2, [pc, #132]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cb6:	4b21      	ldr	r3, [pc, #132]	@ (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001cbe:	00d2      	lsls	r2, r2, #3
 8001cc0:	491b      	ldr	r1, [pc, #108]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cca:	f023 020c 	bic.w	r2, r3, #12
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	4917      	ldr	r1, [pc, #92]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001cd8:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cdc:	f023 0202 	bic.w	r2, r3, #2
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce4:	4912      	ldr	r1, [pc, #72]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001cea:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cee:	4a10      	ldr	r2, [pc, #64]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d02:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d06:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d0e:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d12:	4a07      	ldr	r2, [pc, #28]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d1a:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a04      	ldr	r2, [pc, #16]	@ (8001d30 <HAL_RCC_OscConfig+0x76c>)
 8001d20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7ff f8bb 	bl	8000ea0 <HAL_GetTick>
 8001d2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d2c:	e011      	b.n	8001d52 <HAL_RCC_OscConfig+0x78e>
 8001d2e:	bf00      	nop
 8001d30:	58024400 	.word	0x58024400
 8001d34:	58024800 	.word	0x58024800
 8001d38:	fffffc0c 	.word	0xfffffc0c
 8001d3c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff f8ae 	bl	8000ea0 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e08a      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d52:	4b47      	ldr	r3, [pc, #284]	@ (8001e70 <HAL_RCC_OscConfig+0x8ac>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x77c>
 8001d5e:	e082      	b.n	8001e66 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d60:	4b43      	ldr	r3, [pc, #268]	@ (8001e70 <HAL_RCC_OscConfig+0x8ac>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a42      	ldr	r2, [pc, #264]	@ (8001e70 <HAL_RCC_OscConfig+0x8ac>)
 8001d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f898 	bl	8000ea0 <HAL_GetTick>
 8001d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff f894 	bl	8000ea0 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e070      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d86:	4b3a      	ldr	r3, [pc, #232]	@ (8001e70 <HAL_RCC_OscConfig+0x8ac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x7b0>
 8001d92:	e068      	b.n	8001e66 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d94:	4b36      	ldr	r3, [pc, #216]	@ (8001e70 <HAL_RCC_OscConfig+0x8ac>)
 8001d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d9a:	4b35      	ldr	r3, [pc, #212]	@ (8001e70 <HAL_RCC_OscConfig+0x8ac>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d031      	beq.n	8001e0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f003 0203 	and.w	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d12a      	bne.n	8001e0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d122      	bne.n	8001e0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d11a      	bne.n	8001e0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	0a5b      	lsrs	r3, r3, #9
 8001dda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001de2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d111      	bne.n	8001e0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	0c1b      	lsrs	r3, r3, #16
 8001dec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d108      	bne.n	8001e0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	0e1b      	lsrs	r3, r3, #24
 8001dfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e02b      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e10:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <HAL_RCC_OscConfig+0x8ac>)
 8001e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e14:	08db      	lsrs	r3, r3, #3
 8001e16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e1a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d01f      	beq.n	8001e66 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001e26:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <HAL_RCC_OscConfig+0x8ac>)
 8001e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2a:	4a11      	ldr	r2, [pc, #68]	@ (8001e70 <HAL_RCC_OscConfig+0x8ac>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e32:	f7ff f835 	bl	8000ea0 <HAL_GetTick>
 8001e36:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001e38:	bf00      	nop
 8001e3a:	f7ff f831 	bl	8000ea0 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d0f9      	beq.n	8001e3a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e46:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <HAL_RCC_OscConfig+0x8ac>)
 8001e48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <HAL_RCC_OscConfig+0x8b0>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e52:	00d2      	lsls	r2, r2, #3
 8001e54:	4906      	ldr	r1, [pc, #24]	@ (8001e70 <HAL_RCC_OscConfig+0x8ac>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001e5a:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <HAL_RCC_OscConfig+0x8ac>)
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	4a04      	ldr	r2, [pc, #16]	@ (8001e70 <HAL_RCC_OscConfig+0x8ac>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3730      	adds	r7, #48	@ 0x30
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	58024400 	.word	0x58024400
 8001e74:	ffff0007 	.word	0xffff0007

08001e78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e19c      	b.n	80021c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b8a      	ldr	r3, [pc, #552]	@ (80020b8 <HAL_RCC_ClockConfig+0x240>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d910      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b87      	ldr	r3, [pc, #540]	@ (80020b8 <HAL_RCC_ClockConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 020f 	bic.w	r2, r3, #15
 8001ea2:	4985      	ldr	r1, [pc, #532]	@ (80020b8 <HAL_RCC_ClockConfig+0x240>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b83      	ldr	r3, [pc, #524]	@ (80020b8 <HAL_RCC_ClockConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e184      	b.n	80021c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d010      	beq.n	8001eea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	4b7b      	ldr	r3, [pc, #492]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d908      	bls.n	8001eea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ed8:	4b78      	ldr	r3, [pc, #480]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	4975      	ldr	r1, [pc, #468]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d010      	beq.n	8001f18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	4b70      	ldr	r3, [pc, #448]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d908      	bls.n	8001f18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f06:	4b6d      	ldr	r3, [pc, #436]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	496a      	ldr	r1, [pc, #424]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d010      	beq.n	8001f46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	4b64      	ldr	r3, [pc, #400]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d908      	bls.n	8001f46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f34:	4b61      	ldr	r3, [pc, #388]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	495e      	ldr	r1, [pc, #376]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d010      	beq.n	8001f74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	4b59      	ldr	r3, [pc, #356]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d908      	bls.n	8001f74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f62:	4b56      	ldr	r3, [pc, #344]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4953      	ldr	r1, [pc, #332]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d010      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	4b4d      	ldr	r3, [pc, #308]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d908      	bls.n	8001fa2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f90:	4b4a      	ldr	r3, [pc, #296]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f023 020f 	bic.w	r2, r3, #15
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4947      	ldr	r1, [pc, #284]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d055      	beq.n	800205a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001fae:	4b43      	ldr	r3, [pc, #268]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	4940      	ldr	r1, [pc, #256]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fc8:	4b3c      	ldr	r3, [pc, #240]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d121      	bne.n	8002018 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0f6      	b.n	80021c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d107      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fe0:	4b36      	ldr	r3, [pc, #216]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d115      	bne.n	8002018 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0ea      	b.n	80021c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ff8:	4b30      	ldr	r3, [pc, #192]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d109      	bne.n	8002018 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0de      	b.n	80021c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002008:	4b2c      	ldr	r3, [pc, #176]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0d6      	b.n	80021c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002018:	4b28      	ldr	r3, [pc, #160]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f023 0207 	bic.w	r2, r3, #7
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4925      	ldr	r1, [pc, #148]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8002026:	4313      	orrs	r3, r2
 8002028:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800202a:	f7fe ff39 	bl	8000ea0 <HAL_GetTick>
 800202e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002030:	e00a      	b.n	8002048 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002032:	f7fe ff35 	bl	8000ea0 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e0be      	b.n	80021c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002048:	4b1c      	ldr	r3, [pc, #112]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	429a      	cmp	r2, r3
 8002058:	d1eb      	bne.n	8002032 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d010      	beq.n	8002088 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	429a      	cmp	r2, r3
 8002074:	d208      	bcs.n	8002088 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002076:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f023 020f 	bic.w	r2, r3, #15
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	490e      	ldr	r1, [pc, #56]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8002084:	4313      	orrs	r3, r2
 8002086:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <HAL_RCC_ClockConfig+0x240>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d214      	bcs.n	80020c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <HAL_RCC_ClockConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 020f 	bic.w	r2, r3, #15
 800209e:	4906      	ldr	r1, [pc, #24]	@ (80020b8 <HAL_RCC_ClockConfig+0x240>)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b04      	ldr	r3, [pc, #16]	@ (80020b8 <HAL_RCC_ClockConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e086      	b.n	80021c6 <HAL_RCC_ClockConfig+0x34e>
 80020b8:	52002000 	.word	0x52002000
 80020bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d010      	beq.n	80020ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	4b3f      	ldr	r3, [pc, #252]	@ (80021d0 <HAL_RCC_ClockConfig+0x358>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020d8:	429a      	cmp	r2, r3
 80020da:	d208      	bcs.n	80020ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020dc:	4b3c      	ldr	r3, [pc, #240]	@ (80021d0 <HAL_RCC_ClockConfig+0x358>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	4939      	ldr	r1, [pc, #228]	@ (80021d0 <HAL_RCC_ClockConfig+0x358>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d010      	beq.n	800211c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695a      	ldr	r2, [r3, #20]
 80020fe:	4b34      	ldr	r3, [pc, #208]	@ (80021d0 <HAL_RCC_ClockConfig+0x358>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002106:	429a      	cmp	r2, r3
 8002108:	d208      	bcs.n	800211c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800210a:	4b31      	ldr	r3, [pc, #196]	@ (80021d0 <HAL_RCC_ClockConfig+0x358>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	492e      	ldr	r1, [pc, #184]	@ (80021d0 <HAL_RCC_ClockConfig+0x358>)
 8002118:	4313      	orrs	r3, r2
 800211a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	d010      	beq.n	800214a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699a      	ldr	r2, [r3, #24]
 800212c:	4b28      	ldr	r3, [pc, #160]	@ (80021d0 <HAL_RCC_ClockConfig+0x358>)
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002134:	429a      	cmp	r2, r3
 8002136:	d208      	bcs.n	800214a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002138:	4b25      	ldr	r3, [pc, #148]	@ (80021d0 <HAL_RCC_ClockConfig+0x358>)
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	4922      	ldr	r1, [pc, #136]	@ (80021d0 <HAL_RCC_ClockConfig+0x358>)
 8002146:	4313      	orrs	r3, r2
 8002148:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b00      	cmp	r3, #0
 8002154:	d010      	beq.n	8002178 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69da      	ldr	r2, [r3, #28]
 800215a:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <HAL_RCC_ClockConfig+0x358>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002162:	429a      	cmp	r2, r3
 8002164:	d208      	bcs.n	8002178 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002166:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <HAL_RCC_ClockConfig+0x358>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4917      	ldr	r1, [pc, #92]	@ (80021d0 <HAL_RCC_ClockConfig+0x358>)
 8002174:	4313      	orrs	r3, r2
 8002176:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002178:	f000 f834 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b14      	ldr	r3, [pc, #80]	@ (80021d0 <HAL_RCC_ClockConfig+0x358>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	4912      	ldr	r1, [pc, #72]	@ (80021d4 <HAL_RCC_ClockConfig+0x35c>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
 8002194:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002196:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <HAL_RCC_ClockConfig+0x358>)
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	4a0d      	ldr	r2, [pc, #52]	@ (80021d4 <HAL_RCC_ClockConfig+0x35c>)
 80021a0:	5cd3      	ldrb	r3, [r2, r3]
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ac:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <HAL_RCC_ClockConfig+0x360>)
 80021ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021b0:	4a0a      	ldr	r2, [pc, #40]	@ (80021dc <HAL_RCC_ClockConfig+0x364>)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80021b6:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <HAL_RCC_ClockConfig+0x368>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fe26 	bl	8000e0c <HAL_InitTick>
 80021c0:	4603      	mov	r3, r0
 80021c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	58024400 	.word	0x58024400
 80021d4:	08005c08 	.word	0x08005c08
 80021d8:	24000010 	.word	0x24000010
 80021dc:	2400000c 	.word	0x2400000c
 80021e0:	24000014 	.word	0x24000014

080021e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	@ 0x24
 80021e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ea:	4bb3      	ldr	r3, [pc, #716]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021f2:	2b18      	cmp	r3, #24
 80021f4:	f200 8155 	bhi.w	80024a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80021f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002200 <HAL_RCC_GetSysClockFreq+0x1c>)
 80021fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fe:	bf00      	nop
 8002200:	08002265 	.word	0x08002265
 8002204:	080024a3 	.word	0x080024a3
 8002208:	080024a3 	.word	0x080024a3
 800220c:	080024a3 	.word	0x080024a3
 8002210:	080024a3 	.word	0x080024a3
 8002214:	080024a3 	.word	0x080024a3
 8002218:	080024a3 	.word	0x080024a3
 800221c:	080024a3 	.word	0x080024a3
 8002220:	0800228b 	.word	0x0800228b
 8002224:	080024a3 	.word	0x080024a3
 8002228:	080024a3 	.word	0x080024a3
 800222c:	080024a3 	.word	0x080024a3
 8002230:	080024a3 	.word	0x080024a3
 8002234:	080024a3 	.word	0x080024a3
 8002238:	080024a3 	.word	0x080024a3
 800223c:	080024a3 	.word	0x080024a3
 8002240:	08002291 	.word	0x08002291
 8002244:	080024a3 	.word	0x080024a3
 8002248:	080024a3 	.word	0x080024a3
 800224c:	080024a3 	.word	0x080024a3
 8002250:	080024a3 	.word	0x080024a3
 8002254:	080024a3 	.word	0x080024a3
 8002258:	080024a3 	.word	0x080024a3
 800225c:	080024a3 	.word	0x080024a3
 8002260:	08002297 	.word	0x08002297
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002264:	4b94      	ldr	r3, [pc, #592]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0320 	and.w	r3, r3, #32
 800226c:	2b00      	cmp	r3, #0
 800226e:	d009      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002270:	4b91      	ldr	r3, [pc, #580]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	08db      	lsrs	r3, r3, #3
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	4a90      	ldr	r2, [pc, #576]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
 8002280:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002282:	e111      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002284:	4b8d      	ldr	r3, [pc, #564]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002286:	61bb      	str	r3, [r7, #24]
      break;
 8002288:	e10e      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800228a:	4b8d      	ldr	r3, [pc, #564]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800228c:	61bb      	str	r3, [r7, #24]
      break;
 800228e:	e10b      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002290:	4b8c      	ldr	r3, [pc, #560]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002292:	61bb      	str	r3, [r7, #24]
      break;
 8002294:	e108      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002296:	4b88      	ldr	r3, [pc, #544]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80022a0:	4b85      	ldr	r3, [pc, #532]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80022ac:	4b82      	ldr	r3, [pc, #520]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80022b6:	4b80      	ldr	r3, [pc, #512]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ba:	08db      	lsrs	r3, r3, #3
 80022bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80e1 	beq.w	800249c <HAL_RCC_GetSysClockFreq+0x2b8>
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	f000 8083 	beq.w	80023e8 <HAL_RCC_GetSysClockFreq+0x204>
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	f200 80a1 	bhi.w	800242c <HAL_RCC_GetSysClockFreq+0x248>
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x114>
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d056      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80022f6:	e099      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022f8:	4b6f      	ldr	r3, [pc, #444]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b00      	cmp	r3, #0
 8002302:	d02d      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002304:	4b6c      	ldr	r3, [pc, #432]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	08db      	lsrs	r3, r3, #3
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	4a6b      	ldr	r2, [pc, #428]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
 8002314:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	ee07 3a90 	vmov	s15, r3
 800231c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800232a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800232e:	4b62      	ldr	r3, [pc, #392]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800233e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002342:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80024c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800234a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800234e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800235e:	e087      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	ee07 3a90 	vmov	s15, r3
 8002366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800236a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80024cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800236e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002372:	4b51      	ldr	r3, [pc, #324]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800237a:	ee07 3a90 	vmov	s15, r3
 800237e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002382:	ed97 6a02 	vldr	s12, [r7, #8]
 8002386:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80024c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800238a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800238e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800239a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023a2:	e065      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80024d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023b6:	4b40      	ldr	r3, [pc, #256]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023be:	ee07 3a90 	vmov	s15, r3
 80023c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80024c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023e6:	e043      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	ee07 3a90 	vmov	s15, r3
 80023ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80024d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80023f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023fa:	4b2f      	ldr	r3, [pc, #188]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002402:	ee07 3a90 	vmov	s15, r3
 8002406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800240a:	ed97 6a02 	vldr	s12, [r7, #8]
 800240e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80024c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800241a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800241e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002426:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800242a:	e021      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002436:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80024d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800243a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800243e:	4b1e      	ldr	r3, [pc, #120]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002446:	ee07 3a90 	vmov	s15, r3
 800244a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800244e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002452:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80024c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800245a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800245e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800246e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002470:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002474:	0a5b      	lsrs	r3, r3, #9
 8002476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800247a:	3301      	adds	r3, #1
 800247c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002488:	edd7 6a07 	vldr	s13, [r7, #28]
 800248c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002494:	ee17 3a90 	vmov	r3, s15
 8002498:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800249a:	e005      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]
      break;
 80024a0:	e002      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80024a2:	4b07      	ldr	r3, [pc, #28]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024a4:	61bb      	str	r3, [r7, #24]
      break;
 80024a6:	bf00      	nop
  }

  return sysclockfreq;
 80024a8:	69bb      	ldr	r3, [r7, #24]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3724      	adds	r7, #36	@ 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	58024400 	.word	0x58024400
 80024bc:	03d09000 	.word	0x03d09000
 80024c0:	003d0900 	.word	0x003d0900
 80024c4:	017d7840 	.word	0x017d7840
 80024c8:	46000000 	.word	0x46000000
 80024cc:	4c742400 	.word	0x4c742400
 80024d0:	4a742400 	.word	0x4a742400
 80024d4:	4bbebc20 	.word	0x4bbebc20

080024d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80024de:	f7ff fe81 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 80024e2:	4602      	mov	r2, r0
 80024e4:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <HAL_RCC_GetHCLKFreq+0x50>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	490f      	ldr	r1, [pc, #60]	@ (800252c <HAL_RCC_GetHCLKFreq+0x54>)
 80024f0:	5ccb      	ldrb	r3, [r1, r3]
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	fa22 f303 	lsr.w	r3, r2, r3
 80024fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <HAL_RCC_GetHCLKFreq+0x50>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	4a09      	ldr	r2, [pc, #36]	@ (800252c <HAL_RCC_GetHCLKFreq+0x54>)
 8002506:	5cd3      	ldrb	r3, [r2, r3]
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	fa22 f303 	lsr.w	r3, r2, r3
 8002512:	4a07      	ldr	r2, [pc, #28]	@ (8002530 <HAL_RCC_GetHCLKFreq+0x58>)
 8002514:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002516:	4a07      	ldr	r2, [pc, #28]	@ (8002534 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800251c:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <HAL_RCC_GetHCLKFreq+0x58>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	58024400 	.word	0x58024400
 800252c:	08005c08 	.word	0x08005c08
 8002530:	24000010 	.word	0x24000010
 8002534:	2400000c 	.word	0x2400000c

08002538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800253c:	f7ff ffcc 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4904      	ldr	r1, [pc, #16]	@ (8002560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800254e:	5ccb      	ldrb	r3, [r1, r3]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	58024400 	.word	0x58024400
 8002560:	08005c08 	.word	0x08005c08

08002564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002568:	f7ff ffb6 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4904      	ldr	r1, [pc, #16]	@ (800258c <HAL_RCC_GetPCLK2Freq+0x28>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	58024400 	.word	0x58024400
 800258c:	08005c08 	.word	0x08005c08

08002590 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002594:	b0ca      	sub	sp, #296	@ 0x128
 8002596:	af00      	add	r7, sp, #0
 8002598:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800259c:	2300      	movs	r3, #0
 800259e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025a2:	2300      	movs	r3, #0
 80025a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80025b4:	2500      	movs	r5, #0
 80025b6:	ea54 0305 	orrs.w	r3, r4, r5
 80025ba:	d049      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80025bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80025c6:	d02f      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80025c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80025cc:	d828      	bhi.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80025ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025d2:	d01a      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80025d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025d8:	d822      	bhi.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025e2:	d007      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025e4:	e01c      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025e6:	4bb8      	ldr	r3, [pc, #736]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ea:	4ab7      	ldr	r2, [pc, #732]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025f2:	e01a      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80025f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025f8:	3308      	adds	r3, #8
 80025fa:	2102      	movs	r1, #2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f001 fc8f 	bl	8003f20 <RCCEx_PLL2_Config>
 8002602:	4603      	mov	r3, r0
 8002604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002608:	e00f      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800260a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800260e:	3328      	adds	r3, #40	@ 0x28
 8002610:	2102      	movs	r1, #2
 8002612:	4618      	mov	r0, r3
 8002614:	f001 fd36 	bl	8004084 <RCCEx_PLL3_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800261e:	e004      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002626:	e000      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800262a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10a      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002632:	4ba5      	ldr	r3, [pc, #660]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002636:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800263a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800263e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002640:	4aa1      	ldr	r2, [pc, #644]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002642:	430b      	orrs	r3, r1
 8002644:	6513      	str	r3, [r2, #80]	@ 0x50
 8002646:	e003      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800264c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800265c:	f04f 0900 	mov.w	r9, #0
 8002660:	ea58 0309 	orrs.w	r3, r8, r9
 8002664:	d047      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800266a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266c:	2b04      	cmp	r3, #4
 800266e:	d82a      	bhi.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002670:	a201      	add	r2, pc, #4	@ (adr r2, 8002678 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002676:	bf00      	nop
 8002678:	0800268d 	.word	0x0800268d
 800267c:	0800269b 	.word	0x0800269b
 8002680:	080026b1 	.word	0x080026b1
 8002684:	080026cf 	.word	0x080026cf
 8002688:	080026cf 	.word	0x080026cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800268c:	4b8e      	ldr	r3, [pc, #568]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800268e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002690:	4a8d      	ldr	r2, [pc, #564]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002696:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002698:	e01a      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800269a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800269e:	3308      	adds	r3, #8
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f001 fc3c 	bl	8003f20 <RCCEx_PLL2_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026ae:	e00f      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026b4:	3328      	adds	r3, #40	@ 0x28
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f001 fce3 	bl	8004084 <RCCEx_PLL3_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026c4:	e004      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80026cc:	e000      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80026ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10a      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026d8:	4b7b      	ldr	r3, [pc, #492]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026dc:	f023 0107 	bic.w	r1, r3, #7
 80026e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e6:	4a78      	ldr	r2, [pc, #480]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80026ec:	e003      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80026f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002702:	f04f 0b00 	mov.w	fp, #0
 8002706:	ea5a 030b 	orrs.w	r3, sl, fp
 800270a:	d04c      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800270c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002716:	d030      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002718:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800271c:	d829      	bhi.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800271e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002720:	d02d      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002722:	2bc0      	cmp	r3, #192	@ 0xc0
 8002724:	d825      	bhi.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002726:	2b80      	cmp	r3, #128	@ 0x80
 8002728:	d018      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800272a:	2b80      	cmp	r3, #128	@ 0x80
 800272c:	d821      	bhi.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002732:	2b40      	cmp	r3, #64	@ 0x40
 8002734:	d007      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002736:	e01c      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002738:	4b63      	ldr	r3, [pc, #396]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800273a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273c:	4a62      	ldr	r2, [pc, #392]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800273e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002744:	e01c      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800274a:	3308      	adds	r3, #8
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f001 fbe6 	bl	8003f20 <RCCEx_PLL2_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800275a:	e011      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800275c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002760:	3328      	adds	r3, #40	@ 0x28
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f001 fc8d 	bl	8004084 <RCCEx_PLL3_Config>
 800276a:	4603      	mov	r3, r0
 800276c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002770:	e006      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002778:	e002      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800277a:	bf00      	nop
 800277c:	e000      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800277e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10a      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002788:	4b4f      	ldr	r3, [pc, #316]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800278a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800278c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002796:	4a4c      	ldr	r2, [pc, #304]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002798:	430b      	orrs	r3, r1
 800279a:	6513      	str	r3, [r2, #80]	@ 0x50
 800279c:	e003      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800279e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80027a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ae:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80027b2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80027bc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80027c0:	460b      	mov	r3, r1
 80027c2:	4313      	orrs	r3, r2
 80027c4:	d053      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80027c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80027ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027d2:	d035      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80027d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027d8:	d82e      	bhi.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027da:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80027de:	d031      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80027e0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80027e4:	d828      	bhi.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027ea:	d01a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80027ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027f0:	d822      	bhi.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80027f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027fa:	d007      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80027fc:	e01c      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027fe:	4b32      	ldr	r3, [pc, #200]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002802:	4a31      	ldr	r2, [pc, #196]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002808:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800280a:	e01c      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800280c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002810:	3308      	adds	r3, #8
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f001 fb83 	bl	8003f20 <RCCEx_PLL2_Config>
 800281a:	4603      	mov	r3, r0
 800281c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002820:	e011      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002826:	3328      	adds	r3, #40	@ 0x28
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f001 fc2a 	bl	8004084 <RCCEx_PLL3_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002836:	e006      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800283e:	e002      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002840:	bf00      	nop
 8002842:	e000      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10b      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800284e:	4b1e      	ldr	r3, [pc, #120]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002852:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800285a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800285e:	4a1a      	ldr	r2, [pc, #104]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002860:	430b      	orrs	r3, r1
 8002862:	6593      	str	r3, [r2, #88]	@ 0x58
 8002864:	e003      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800286a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800286e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800287a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800287e:	2300      	movs	r3, #0
 8002880:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002884:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002888:	460b      	mov	r3, r1
 800288a:	4313      	orrs	r3, r2
 800288c:	d056      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800288e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002892:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002896:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800289a:	d038      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800289c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028a0:	d831      	bhi.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028a6:	d034      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80028a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028ac:	d82b      	bhi.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028b2:	d01d      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80028b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028b8:	d825      	bhi.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d006      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80028be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80028c4:	e01f      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028c6:	bf00      	nop
 80028c8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028cc:	4ba2      	ldr	r3, [pc, #648]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	4aa1      	ldr	r2, [pc, #644]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028d8:	e01c      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028de:	3308      	adds	r3, #8
 80028e0:	2100      	movs	r1, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f001 fb1c 	bl	8003f20 <RCCEx_PLL2_Config>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80028ee:	e011      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028f4:	3328      	adds	r3, #40	@ 0x28
 80028f6:	2100      	movs	r1, #0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f001 fbc3 	bl	8004084 <RCCEx_PLL3_Config>
 80028fe:	4603      	mov	r3, r0
 8002900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002904:	e006      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800290c:	e002      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800290e:	bf00      	nop
 8002910:	e000      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10b      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800291c:	4b8e      	ldr	r3, [pc, #568]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002920:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002928:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800292c:	4a8a      	ldr	r2, [pc, #552]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800292e:	430b      	orrs	r3, r1
 8002930:	6593      	str	r3, [r2, #88]	@ 0x58
 8002932:	e003      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002938:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800293c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002944:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002948:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800294c:	2300      	movs	r3, #0
 800294e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002952:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002956:	460b      	mov	r3, r1
 8002958:	4313      	orrs	r3, r2
 800295a:	d03a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800295c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002962:	2b30      	cmp	r3, #48	@ 0x30
 8002964:	d01f      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002966:	2b30      	cmp	r3, #48	@ 0x30
 8002968:	d819      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800296a:	2b20      	cmp	r3, #32
 800296c:	d00c      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800296e:	2b20      	cmp	r3, #32
 8002970:	d815      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002972:	2b00      	cmp	r3, #0
 8002974:	d019      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002976:	2b10      	cmp	r3, #16
 8002978:	d111      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800297a:	4b77      	ldr	r3, [pc, #476]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297e:	4a76      	ldr	r2, [pc, #472]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002984:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002986:	e011      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800298c:	3308      	adds	r3, #8
 800298e:	2102      	movs	r1, #2
 8002990:	4618      	mov	r0, r3
 8002992:	f001 fac5 	bl	8003f20 <RCCEx_PLL2_Config>
 8002996:	4603      	mov	r3, r0
 8002998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800299c:	e006      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029a4:	e002      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80029a6:	bf00      	nop
 80029a8:	e000      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80029aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029b4:	4b68      	ldr	r3, [pc, #416]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80029bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c2:	4a65      	ldr	r2, [pc, #404]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c4:	430b      	orrs	r3, r1
 80029c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029c8:	e003      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80029d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029da:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80029de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80029e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4313      	orrs	r3, r2
 80029f0:	d051      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80029f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029fc:	d035      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80029fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a02:	d82e      	bhi.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a08:	d031      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002a0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a0e:	d828      	bhi.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a14:	d01a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a1a:	d822      	bhi.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a24:	d007      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002a26:	e01c      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a28:	4b4b      	ldr	r3, [pc, #300]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a34:	e01c      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a3a:	3308      	adds	r3, #8
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f001 fa6e 	bl	8003f20 <RCCEx_PLL2_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a4a:	e011      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a50:	3328      	adds	r3, #40	@ 0x28
 8002a52:	2100      	movs	r1, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f001 fb15 	bl	8004084 <RCCEx_PLL3_Config>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a60:	e006      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a68:	e002      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002a6a:	bf00      	nop
 8002a6c:	e000      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10a      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a78:	4b37      	ldr	r3, [pc, #220]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a7c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a86:	4a34      	ldr	r2, [pc, #208]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a8c:	e003      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002aac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	d056      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac0:	d033      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002ac2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac6:	d82c      	bhi.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ac8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002acc:	d02f      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002ace:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ad2:	d826      	bhi.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ad4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ad8:	d02b      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002ada:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ade:	d820      	bhi.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ae0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ae4:	d012      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002ae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002aea:	d81a      	bhi.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d022      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af4:	d115      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002afa:	3308      	adds	r3, #8
 8002afc:	2101      	movs	r1, #1
 8002afe:	4618      	mov	r0, r3
 8002b00:	f001 fa0e 	bl	8003f20 <RCCEx_PLL2_Config>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b0a:	e015      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b10:	3328      	adds	r3, #40	@ 0x28
 8002b12:	2101      	movs	r1, #1
 8002b14:	4618      	mov	r0, r3
 8002b16:	f001 fab5 	bl	8004084 <RCCEx_PLL3_Config>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b20:	e00a      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b28:	e006      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b2a:	bf00      	nop
 8002b2c:	e004      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b2e:	bf00      	nop
 8002b30:	e002      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10d      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b44:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b4e:	4a02      	ldr	r2, [pc, #8]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b50:	430b      	orrs	r3, r1
 8002b52:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b54:	e006      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b56:	bf00      	nop
 8002b58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002b70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b7a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4313      	orrs	r3, r2
 8002b82:	d055      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b90:	d033      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b96:	d82c      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b9c:	d02f      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba2:	d826      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ba4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ba8:	d02b      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002baa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002bae:	d820      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bb4:	d012      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002bb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bba:	d81a      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d022      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002bc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bc4:	d115      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bca:	3308      	adds	r3, #8
 8002bcc:	2101      	movs	r1, #1
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f001 f9a6 	bl	8003f20 <RCCEx_PLL2_Config>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002bda:	e015      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be0:	3328      	adds	r3, #40	@ 0x28
 8002be2:	2101      	movs	r1, #1
 8002be4:	4618      	mov	r0, r3
 8002be6:	f001 fa4d 	bl	8004084 <RCCEx_PLL3_Config>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002bf0:	e00a      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bf8:	e006      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bfa:	bf00      	nop
 8002bfc:	e004      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bfe:	bf00      	nop
 8002c00:	e002      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c02:	bf00      	nop
 8002c04:	e000      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10b      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c10:	4ba3      	ldr	r3, [pc, #652]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c14:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002c20:	4a9f      	ldr	r2, [pc, #636]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c22:	430b      	orrs	r3, r1
 8002c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c26:	e003      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c38:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c40:	2300      	movs	r3, #0
 8002c42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	d037      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c5a:	d00e      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002c5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c60:	d816      	bhi.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d018      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002c66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c6a:	d111      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c6c:	4b8c      	ldr	r3, [pc, #560]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c70:	4a8b      	ldr	r2, [pc, #556]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c78:	e00f      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c7e:	3308      	adds	r3, #8
 8002c80:	2101      	movs	r1, #1
 8002c82:	4618      	mov	r0, r3
 8002c84:	f001 f94c 	bl	8003f20 <RCCEx_PLL2_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c8e:	e004      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c96:	e000      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10a      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb0:	4a7b      	ldr	r2, [pc, #492]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cb6:	e003      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002cd6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	d039      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d81c      	bhi.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002cea:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf0:	08002d2d 	.word	0x08002d2d
 8002cf4:	08002d01 	.word	0x08002d01
 8002cf8:	08002d0f 	.word	0x08002d0f
 8002cfc:	08002d2d 	.word	0x08002d2d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d00:	4b67      	ldr	r3, [pc, #412]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	4a66      	ldr	r2, [pc, #408]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d0c:	e00f      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d12:	3308      	adds	r3, #8
 8002d14:	2102      	movs	r1, #2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 f902 	bl	8003f20 <RCCEx_PLL2_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d22:	e004      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d2a:	e000      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d36:	4b5a      	ldr	r3, [pc, #360]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3a:	f023 0103 	bic.w	r1, r3, #3
 8002d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d44:	4a56      	ldr	r2, [pc, #344]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d46:	430b      	orrs	r3, r1
 8002d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d4a:	e003      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002d60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f000 809f 	beq.w	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d76:	4b4b      	ldr	r3, [pc, #300]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d82:	f7fe f88d 	bl	8000ea0 <HAL_GetTick>
 8002d86:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8c:	f7fe f888 	bl	8000ea0 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b64      	cmp	r3, #100	@ 0x64
 8002d9a:	d903      	bls.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002da2:	e005      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002da4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ed      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d179      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002db8:	4b39      	ldr	r3, [pc, #228]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002dc4:	4053      	eors	r3, r2
 8002dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d015      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dce:	4b34      	ldr	r3, [pc, #208]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dd6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dda:	4b31      	ldr	r3, [pc, #196]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dde:	4a30      	ldr	r2, [pc, #192]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002de6:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dea:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002df0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002df2:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002df4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002df8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e06:	d118      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe f84a 	bl	8000ea0 <HAL_GetTick>
 8002e0c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e10:	e00d      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e12:	f7fe f845 	bl	8000ea0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e1c:	1ad2      	subs	r2, r2, r3
 8002e1e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d903      	bls.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002e2c:	e005      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0eb      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d129      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e52:	d10e      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002e54:	4b12      	ldr	r3, [pc, #72]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e64:	091a      	lsrs	r2, r3, #4
 8002e66:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	6113      	str	r3, [r2, #16]
 8002e70:	e005      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002e72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e7c:	6113      	str	r3, [r2, #16]
 8002e7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e80:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8e:	4a04      	ldr	r2, [pc, #16]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e94:	e00e      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002e9e:	e009      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002ea0:	58024400 	.word	0x58024400
 8002ea4:	58024800 	.word	0x58024800
 8002ea8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f002 0301 	and.w	r3, r2, #1
 8002ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002eca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f000 8089 	beq.w	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002edc:	2b28      	cmp	r3, #40	@ 0x28
 8002ede:	d86b      	bhi.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002fc1 	.word	0x08002fc1
 8002eec:	08002fb9 	.word	0x08002fb9
 8002ef0:	08002fb9 	.word	0x08002fb9
 8002ef4:	08002fb9 	.word	0x08002fb9
 8002ef8:	08002fb9 	.word	0x08002fb9
 8002efc:	08002fb9 	.word	0x08002fb9
 8002f00:	08002fb9 	.word	0x08002fb9
 8002f04:	08002fb9 	.word	0x08002fb9
 8002f08:	08002f8d 	.word	0x08002f8d
 8002f0c:	08002fb9 	.word	0x08002fb9
 8002f10:	08002fb9 	.word	0x08002fb9
 8002f14:	08002fb9 	.word	0x08002fb9
 8002f18:	08002fb9 	.word	0x08002fb9
 8002f1c:	08002fb9 	.word	0x08002fb9
 8002f20:	08002fb9 	.word	0x08002fb9
 8002f24:	08002fb9 	.word	0x08002fb9
 8002f28:	08002fa3 	.word	0x08002fa3
 8002f2c:	08002fb9 	.word	0x08002fb9
 8002f30:	08002fb9 	.word	0x08002fb9
 8002f34:	08002fb9 	.word	0x08002fb9
 8002f38:	08002fb9 	.word	0x08002fb9
 8002f3c:	08002fb9 	.word	0x08002fb9
 8002f40:	08002fb9 	.word	0x08002fb9
 8002f44:	08002fb9 	.word	0x08002fb9
 8002f48:	08002fc1 	.word	0x08002fc1
 8002f4c:	08002fb9 	.word	0x08002fb9
 8002f50:	08002fb9 	.word	0x08002fb9
 8002f54:	08002fb9 	.word	0x08002fb9
 8002f58:	08002fb9 	.word	0x08002fb9
 8002f5c:	08002fb9 	.word	0x08002fb9
 8002f60:	08002fb9 	.word	0x08002fb9
 8002f64:	08002fb9 	.word	0x08002fb9
 8002f68:	08002fc1 	.word	0x08002fc1
 8002f6c:	08002fb9 	.word	0x08002fb9
 8002f70:	08002fb9 	.word	0x08002fb9
 8002f74:	08002fb9 	.word	0x08002fb9
 8002f78:	08002fb9 	.word	0x08002fb9
 8002f7c:	08002fb9 	.word	0x08002fb9
 8002f80:	08002fb9 	.word	0x08002fb9
 8002f84:	08002fb9 	.word	0x08002fb9
 8002f88:	08002fc1 	.word	0x08002fc1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f90:	3308      	adds	r3, #8
 8002f92:	2101      	movs	r1, #1
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 ffc3 	bl	8003f20 <RCCEx_PLL2_Config>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002fa0:	e00f      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa6:	3328      	adds	r3, #40	@ 0x28
 8002fa8:	2101      	movs	r1, #1
 8002faa:	4618      	mov	r0, r3
 8002fac:	f001 f86a 	bl	8004084 <RCCEx_PLL3_Config>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002fb6:	e004      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10a      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002fca:	4bbf      	ldr	r3, [pc, #764]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fd8:	4abb      	ldr	r2, [pc, #748]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	6553      	str	r3, [r2, #84]	@ 0x54
 8002fde:	e003      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fe4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	f002 0302 	and.w	r3, r2, #2
 8002ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002ffe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003002:	460b      	mov	r3, r1
 8003004:	4313      	orrs	r3, r2
 8003006:	d041      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800300e:	2b05      	cmp	r3, #5
 8003010:	d824      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003012:	a201      	add	r2, pc, #4	@ (adr r2, 8003018 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003018:	08003065 	.word	0x08003065
 800301c:	08003031 	.word	0x08003031
 8003020:	08003047 	.word	0x08003047
 8003024:	08003065 	.word	0x08003065
 8003028:	08003065 	.word	0x08003065
 800302c:	08003065 	.word	0x08003065
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003034:	3308      	adds	r3, #8
 8003036:	2101      	movs	r1, #1
 8003038:	4618      	mov	r0, r3
 800303a:	f000 ff71 	bl	8003f20 <RCCEx_PLL2_Config>
 800303e:	4603      	mov	r3, r0
 8003040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003044:	e00f      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304a:	3328      	adds	r3, #40	@ 0x28
 800304c:	2101      	movs	r1, #1
 800304e:	4618      	mov	r0, r3
 8003050:	f001 f818 	bl	8004084 <RCCEx_PLL3_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800305a:	e004      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003062:	e000      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10a      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800306e:	4b96      	ldr	r3, [pc, #600]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003072:	f023 0107 	bic.w	r1, r3, #7
 8003076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800307c:	4a92      	ldr	r2, [pc, #584]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800307e:	430b      	orrs	r3, r1
 8003080:	6553      	str	r3, [r2, #84]	@ 0x54
 8003082:	e003      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800308c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f002 0304 	and.w	r3, r2, #4
 8003098:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800309c:	2300      	movs	r3, #0
 800309e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030a2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4313      	orrs	r3, r2
 80030aa:	d044      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80030ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030b4:	2b05      	cmp	r3, #5
 80030b6:	d825      	bhi.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80030b8:	a201      	add	r2, pc, #4	@ (adr r2, 80030c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	0800310d 	.word	0x0800310d
 80030c4:	080030d9 	.word	0x080030d9
 80030c8:	080030ef 	.word	0x080030ef
 80030cc:	0800310d 	.word	0x0800310d
 80030d0:	0800310d 	.word	0x0800310d
 80030d4:	0800310d 	.word	0x0800310d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030dc:	3308      	adds	r3, #8
 80030de:	2101      	movs	r1, #1
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 ff1d 	bl	8003f20 <RCCEx_PLL2_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030ec:	e00f      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f2:	3328      	adds	r3, #40	@ 0x28
 80030f4:	2101      	movs	r1, #1
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 ffc4 	bl	8004084 <RCCEx_PLL3_Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003102:	e004      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800310a:	e000      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800310c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800310e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003116:	4b6c      	ldr	r3, [pc, #432]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311a:	f023 0107 	bic.w	r1, r3, #7
 800311e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003126:	4a68      	ldr	r2, [pc, #416]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003128:	430b      	orrs	r3, r1
 800312a:	6593      	str	r3, [r2, #88]	@ 0x58
 800312c:	e003      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003132:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313e:	f002 0320 	and.w	r3, r2, #32
 8003142:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003146:	2300      	movs	r3, #0
 8003148:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800314c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003150:	460b      	mov	r3, r1
 8003152:	4313      	orrs	r3, r2
 8003154:	d055      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003162:	d033      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003164:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003168:	d82c      	bhi.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800316e:	d02f      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003174:	d826      	bhi.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003176:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800317a:	d02b      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800317c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003180:	d820      	bhi.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003182:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003186:	d012      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003188:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800318c:	d81a      	bhi.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800318e:	2b00      	cmp	r3, #0
 8003190:	d022      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003196:	d115      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800319c:	3308      	adds	r3, #8
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 febd 	bl	8003f20 <RCCEx_PLL2_Config>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031ac:	e015      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b2:	3328      	adds	r3, #40	@ 0x28
 80031b4:	2102      	movs	r1, #2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 ff64 	bl	8004084 <RCCEx_PLL3_Config>
 80031bc:	4603      	mov	r3, r0
 80031be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031c2:	e00a      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031ca:	e006      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80031cc:	bf00      	nop
 80031ce:	e004      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80031d0:	bf00      	nop
 80031d2:	e002      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80031d4:	bf00      	nop
 80031d6:	e000      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80031d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10b      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031e2:	4b39      	ldr	r3, [pc, #228]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80031ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f2:	4a35      	ldr	r2, [pc, #212]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031f4:	430b      	orrs	r3, r1
 80031f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80031f8:	e003      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800320e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003212:	2300      	movs	r3, #0
 8003214:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003218:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800321c:	460b      	mov	r3, r1
 800321e:	4313      	orrs	r3, r2
 8003220:	d058      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003226:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800322a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800322e:	d033      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003230:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003234:	d82c      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800323a:	d02f      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800323c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003240:	d826      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003242:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003246:	d02b      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003248:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800324c:	d820      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800324e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003252:	d012      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003254:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003258:	d81a      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800325a:	2b00      	cmp	r3, #0
 800325c:	d022      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800325e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003262:	d115      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003268:	3308      	adds	r3, #8
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fe57 	bl	8003f20 <RCCEx_PLL2_Config>
 8003272:	4603      	mov	r3, r0
 8003274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003278:	e015      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800327a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327e:	3328      	adds	r3, #40	@ 0x28
 8003280:	2102      	movs	r1, #2
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fefe 	bl	8004084 <RCCEx_PLL3_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800328e:	e00a      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003296:	e006      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003298:	bf00      	nop
 800329a:	e004      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800329c:	bf00      	nop
 800329e:	e002      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032a0:	bf00      	nop
 80032a2:	e000      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10e      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032ae:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80032b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032be:	4a02      	ldr	r2, [pc, #8]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032c4:	e006      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80032c6:	bf00      	nop
 80032c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80032d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80032e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032e4:	2300      	movs	r3, #0
 80032e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80032ee:	460b      	mov	r3, r1
 80032f0:	4313      	orrs	r3, r2
 80032f2:	d055      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80032f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80032fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003300:	d033      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003302:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003306:	d82c      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003308:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800330c:	d02f      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800330e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003312:	d826      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003314:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003318:	d02b      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800331a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800331e:	d820      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003320:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003324:	d012      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003326:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800332a:	d81a      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800332c:	2b00      	cmp	r3, #0
 800332e:	d022      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003334:	d115      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333a:	3308      	adds	r3, #8
 800333c:	2100      	movs	r1, #0
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fdee 	bl	8003f20 <RCCEx_PLL2_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800334a:	e015      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800334c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003350:	3328      	adds	r3, #40	@ 0x28
 8003352:	2102      	movs	r1, #2
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fe95 	bl	8004084 <RCCEx_PLL3_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003360:	e00a      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003368:	e006      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800336a:	bf00      	nop
 800336c:	e004      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800336e:	bf00      	nop
 8003370:	e002      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003372:	bf00      	nop
 8003374:	e000      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003380:	4ba1      	ldr	r3, [pc, #644]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003384:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003390:	4a9d      	ldr	r2, [pc, #628]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003392:	430b      	orrs	r3, r1
 8003394:	6593      	str	r3, [r2, #88]	@ 0x58
 8003396:	e003      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800339c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80033a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f002 0308 	and.w	r3, r2, #8
 80033ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033b0:	2300      	movs	r3, #0
 80033b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80033ba:	460b      	mov	r3, r1
 80033bc:	4313      	orrs	r3, r2
 80033be:	d01e      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80033c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d2:	3328      	adds	r3, #40	@ 0x28
 80033d4:	2102      	movs	r1, #2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fe54 	bl	8004084 <RCCEx_PLL3_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033e8:	4b87      	ldr	r3, [pc, #540]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033f8:	4a83      	ldr	r2, [pc, #524]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033fa:	430b      	orrs	r3, r1
 80033fc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f002 0310 	and.w	r3, r2, #16
 800340a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800340e:	2300      	movs	r3, #0
 8003410:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003414:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003418:	460b      	mov	r3, r1
 800341a:	4313      	orrs	r3, r2
 800341c:	d01e      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800341e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003422:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800342a:	d10c      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800342c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003430:	3328      	adds	r3, #40	@ 0x28
 8003432:	2102      	movs	r1, #2
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fe25 	bl	8004084 <RCCEx_PLL3_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003446:	4b70      	ldr	r3, [pc, #448]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800344e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003452:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003456:	4a6c      	ldr	r2, [pc, #432]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003458:	430b      	orrs	r3, r1
 800345a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800345c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003468:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800346c:	2300      	movs	r3, #0
 800346e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003472:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003476:	460b      	mov	r3, r1
 8003478:	4313      	orrs	r3, r2
 800347a:	d03e      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800347c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003480:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003484:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003488:	d022      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800348a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800348e:	d81b      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003498:	d00b      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800349a:	e015      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800349c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a0:	3308      	adds	r3, #8
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fd3b 	bl	8003f20 <RCCEx_PLL2_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034b0:	e00f      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b6:	3328      	adds	r3, #40	@ 0x28
 80034b8:	2102      	movs	r1, #2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fde2 	bl	8004084 <RCCEx_PLL3_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034c6:	e004      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034ce:	e000      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80034d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10b      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034da:	4b4b      	ldr	r3, [pc, #300]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80034e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034ea:	4a47      	ldr	r2, [pc, #284]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034ec:	430b      	orrs	r3, r1
 80034ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80034f0:	e003      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003506:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003508:	2300      	movs	r3, #0
 800350a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800350c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003510:	460b      	mov	r3, r1
 8003512:	4313      	orrs	r3, r2
 8003514:	d03b      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003522:	d01f      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003524:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003528:	d818      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800352a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800352e:	d003      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003530:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003534:	d007      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003536:	e011      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003538:	4b33      	ldr	r3, [pc, #204]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	4a32      	ldr	r2, [pc, #200]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800353e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003544:	e00f      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354a:	3328      	adds	r3, #40	@ 0x28
 800354c:	2101      	movs	r1, #1
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fd98 	bl	8004084 <RCCEx_PLL3_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800355a:	e004      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003562:	e000      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10b      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800356e:	4b26      	ldr	r3, [pc, #152]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003572:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357e:	4a22      	ldr	r2, [pc, #136]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003580:	430b      	orrs	r3, r1
 8003582:	6553      	str	r3, [r2, #84]	@ 0x54
 8003584:	e003      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800358a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800359a:	673b      	str	r3, [r7, #112]	@ 0x70
 800359c:	2300      	movs	r3, #0
 800359e:	677b      	str	r3, [r7, #116]	@ 0x74
 80035a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80035a4:	460b      	mov	r3, r1
 80035a6:	4313      	orrs	r3, r2
 80035a8:	d034      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80035aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b8:	d007      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80035ba:	e011      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035bc:	4b12      	ldr	r3, [pc, #72]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c0:	4a11      	ldr	r2, [pc, #68]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035c8:	e00e      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ce:	3308      	adds	r3, #8
 80035d0:	2102      	movs	r1, #2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fca4 	bl	8003f20 <RCCEx_PLL2_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035de:	e003      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10d      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80035f0:	4b05      	ldr	r3, [pc, #20]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035fe:	4a02      	ldr	r2, [pc, #8]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003600:	430b      	orrs	r3, r1
 8003602:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003604:	e006      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003606:	bf00      	nop
 8003608:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003620:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003622:	2300      	movs	r3, #0
 8003624:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003626:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800362a:	460b      	mov	r3, r1
 800362c:	4313      	orrs	r3, r2
 800362e:	d00c      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003634:	3328      	adds	r3, #40	@ 0x28
 8003636:	2102      	movs	r1, #2
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fd23 	bl	8004084 <RCCEx_PLL3_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003656:	663b      	str	r3, [r7, #96]	@ 0x60
 8003658:	2300      	movs	r3, #0
 800365a:	667b      	str	r3, [r7, #100]	@ 0x64
 800365c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003660:	460b      	mov	r3, r1
 8003662:	4313      	orrs	r3, r2
 8003664:	d038      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800366e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003672:	d018      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003674:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003678:	d811      	bhi.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800367a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800367e:	d014      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003684:	d80b      	bhi.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d011      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800368a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800368e:	d106      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003690:	4bc3      	ldr	r3, [pc, #780]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	4ac2      	ldr	r2, [pc, #776]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800369a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800369c:	e008      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036a4:	e004      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036a6:	bf00      	nop
 80036a8:	e002      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036aa:	bf00      	nop
 80036ac:	e000      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10b      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b8:	4bb9      	ldr	r3, [pc, #740]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036bc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036c8:	4ab5      	ldr	r2, [pc, #724]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036ca:	430b      	orrs	r3, r1
 80036cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80036ce:	e003      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80036e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036e6:	2300      	movs	r3, #0
 80036e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036ea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80036ee:	460b      	mov	r3, r1
 80036f0:	4313      	orrs	r3, r2
 80036f2:	d009      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036f4:	4baa      	ldr	r3, [pc, #680]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80036fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003702:	4aa7      	ldr	r2, [pc, #668]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003704:	430b      	orrs	r3, r1
 8003706:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003714:	653b      	str	r3, [r7, #80]	@ 0x50
 8003716:	2300      	movs	r3, #0
 8003718:	657b      	str	r3, [r7, #84]	@ 0x54
 800371a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800371e:	460b      	mov	r3, r1
 8003720:	4313      	orrs	r3, r2
 8003722:	d00a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003724:	4b9e      	ldr	r3, [pc, #632]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003730:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003734:	4a9a      	ldr	r2, [pc, #616]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003736:	430b      	orrs	r3, r1
 8003738:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003748:	2300      	movs	r3, #0
 800374a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800374c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003750:	460b      	mov	r3, r1
 8003752:	4313      	orrs	r3, r2
 8003754:	d009      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003756:	4b92      	ldr	r3, [pc, #584]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800375a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003764:	4a8e      	ldr	r2, [pc, #568]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003766:	430b      	orrs	r3, r1
 8003768:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003776:	643b      	str	r3, [r7, #64]	@ 0x40
 8003778:	2300      	movs	r3, #0
 800377a:	647b      	str	r3, [r7, #68]	@ 0x44
 800377c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003780:	460b      	mov	r3, r1
 8003782:	4313      	orrs	r3, r2
 8003784:	d00e      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003786:	4b86      	ldr	r3, [pc, #536]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	4a85      	ldr	r2, [pc, #532]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800378c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003790:	6113      	str	r3, [r2, #16]
 8003792:	4b83      	ldr	r3, [pc, #524]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003794:	6919      	ldr	r1, [r3, #16]
 8003796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800379e:	4a80      	ldr	r2, [pc, #512]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80037b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037b2:	2300      	movs	r3, #0
 80037b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037b6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80037ba:	460b      	mov	r3, r1
 80037bc:	4313      	orrs	r3, r2
 80037be:	d009      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80037c0:	4b77      	ldr	r3, [pc, #476]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80037c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ce:	4a74      	ldr	r2, [pc, #464]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037d0:	430b      	orrs	r3, r1
 80037d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80037e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80037e2:	2300      	movs	r3, #0
 80037e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80037e6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80037ea:	460b      	mov	r3, r1
 80037ec:	4313      	orrs	r3, r2
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037f0:	4b6b      	ldr	r3, [pc, #428]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80037f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003800:	4a67      	ldr	r2, [pc, #412]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003802:	430b      	orrs	r3, r1
 8003804:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	2100      	movs	r1, #0
 8003810:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003818:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800381c:	460b      	mov	r3, r1
 800381e:	4313      	orrs	r3, r2
 8003820:	d011      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003826:	3308      	adds	r3, #8
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fb78 	bl	8003f20 <RCCEx_PLL2_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	2100      	movs	r1, #0
 8003850:	6239      	str	r1, [r7, #32]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	627b      	str	r3, [r7, #36]	@ 0x24
 8003858:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800385c:	460b      	mov	r3, r1
 800385e:	4313      	orrs	r3, r2
 8003860:	d011      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003866:	3308      	adds	r3, #8
 8003868:	2101      	movs	r1, #1
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fb58 	bl	8003f20 <RCCEx_PLL2_Config>
 8003870:	4603      	mov	r3, r0
 8003872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003882:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	2100      	movs	r1, #0
 8003890:	61b9      	str	r1, [r7, #24]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	61fb      	str	r3, [r7, #28]
 8003898:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d011      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a6:	3308      	adds	r3, #8
 80038a8:	2102      	movs	r1, #2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fb38 	bl	8003f20 <RCCEx_PLL2_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80038b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80038c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	2100      	movs	r1, #0
 80038d0:	6139      	str	r1, [r7, #16]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038dc:	460b      	mov	r3, r1
 80038de:	4313      	orrs	r3, r2
 80038e0:	d011      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e6:	3328      	adds	r3, #40	@ 0x28
 80038e8:	2100      	movs	r1, #0
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fbca 	bl	8004084 <RCCEx_PLL3_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80038f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	2100      	movs	r1, #0
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800391c:	460b      	mov	r3, r1
 800391e:	4313      	orrs	r3, r2
 8003920:	d011      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003926:	3328      	adds	r3, #40	@ 0x28
 8003928:	2101      	movs	r1, #1
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fbaa 	bl	8004084 <RCCEx_PLL3_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003942:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	2100      	movs	r1, #0
 8003950:	6039      	str	r1, [r7, #0]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	e9d7 1200 	ldrd	r1, r2, [r7]
 800395c:	460b      	mov	r3, r1
 800395e:	4313      	orrs	r3, r2
 8003960:	d011      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003966:	3328      	adds	r3, #40	@ 0x28
 8003968:	2102      	movs	r1, #2
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fb8a 	bl	8004084 <RCCEx_PLL3_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003986:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	e000      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
}
 8003994:	4618      	mov	r0, r3
 8003996:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800399a:	46bd      	mov	sp, r7
 800399c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a0:	58024400 	.word	0x58024400

080039a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80039a8:	f7fe fd96 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b06      	ldr	r3, [pc, #24]	@ (80039c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4904      	ldr	r1, [pc, #16]	@ (80039cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	58024400 	.word	0x58024400
 80039cc:	08005c08 	.word	0x08005c08

080039d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b089      	sub	sp, #36	@ 0x24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039d8:	4ba1      	ldr	r3, [pc, #644]	@ (8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80039e2:	4b9f      	ldr	r3, [pc, #636]	@ (8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e6:	0b1b      	lsrs	r3, r3, #12
 80039e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80039ee:	4b9c      	ldr	r3, [pc, #624]	@ (8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80039fa:	4b99      	ldr	r3, [pc, #612]	@ (8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fe:	08db      	lsrs	r3, r3, #3
 8003a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 8111 	beq.w	8003c40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	f000 8083 	beq.w	8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	f200 80a1 	bhi.w	8003b70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d056      	beq.n	8003ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a3a:	e099      	b.n	8003b70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a3c:	4b88      	ldr	r3, [pc, #544]	@ (8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d02d      	beq.n	8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a48:	4b85      	ldr	r3, [pc, #532]	@ (8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	08db      	lsrs	r3, r3, #3
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	4a84      	ldr	r2, [pc, #528]	@ (8003c64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
 8003a58:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	ee07 3a90 	vmov	s15, r3
 8003a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a72:	4b7b      	ldr	r3, [pc, #492]	@ (8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a86:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003aa2:	e087      	b.n	8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003c6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003aca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ae6:	e065      	b.n	8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afa:	4b59      	ldr	r3, [pc, #356]	@ (8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b0e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b2a:	e043      	b.n	8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b36:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3e:	4b48      	ldr	r3, [pc, #288]	@ (8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b52:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b6e:	e021      	b.n	8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b82:	4b37      	ldr	r3, [pc, #220]	@ (8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b96:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bb2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb8:	0a5b      	lsrs	r3, r3, #9
 8003bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bda:	ee17 2a90 	vmov	r2, s15
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003be2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bec:	ee07 3a90 	vmov	s15, r3
 8003bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c08:	ee17 2a90 	vmov	r2, s15
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003c10:	4b13      	ldr	r3, [pc, #76]	@ (8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c14:	0e1b      	lsrs	r3, r3, #24
 8003c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c36:	ee17 2a90 	vmov	r2, s15
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c3e:	e008      	b.n	8003c52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
}
 8003c52:	bf00      	nop
 8003c54:	3724      	adds	r7, #36	@ 0x24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	58024400 	.word	0x58024400
 8003c64:	03d09000 	.word	0x03d09000
 8003c68:	46000000 	.word	0x46000000
 8003c6c:	4c742400 	.word	0x4c742400
 8003c70:	4a742400 	.word	0x4a742400
 8003c74:	4bbebc20 	.word	0x4bbebc20

08003c78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	@ 0x24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c80:	4ba1      	ldr	r3, [pc, #644]	@ (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003c8a:	4b9f      	ldr	r3, [pc, #636]	@ (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8e:	0d1b      	lsrs	r3, r3, #20
 8003c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003c96:	4b9c      	ldr	r3, [pc, #624]	@ (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003ca2:	4b99      	ldr	r3, [pc, #612]	@ (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca6:	08db      	lsrs	r3, r3, #3
 8003ca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	fb02 f303 	mul.w	r3, r2, r3
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8111 	beq.w	8003ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	f000 8083 	beq.w	8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	f200 80a1 	bhi.w	8003e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d056      	beq.n	8003d90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003ce2:	e099      	b.n	8003e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ce4:	4b88      	ldr	r3, [pc, #544]	@ (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d02d      	beq.n	8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cf0:	4b85      	ldr	r3, [pc, #532]	@ (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	08db      	lsrs	r3, r3, #3
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	4a84      	ldr	r2, [pc, #528]	@ (8003f0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003d00:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	ee07 3a90 	vmov	s15, r3
 8003d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	ee07 3a90 	vmov	s15, r3
 8003d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d1a:	4b7b      	ldr	r3, [pc, #492]	@ (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d4a:	e087      	b.n	8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003f14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d8e:	e065      	b.n	8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	ee07 3a90 	vmov	s15, r3
 8003d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003da2:	4b59      	ldr	r3, [pc, #356]	@ (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003db6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dd2:	e043      	b.n	8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dde:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003f1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003de6:	4b48      	ldr	r3, [pc, #288]	@ (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dfa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e16:	e021      	b.n	8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2a:	4b37      	ldr	r3, [pc, #220]	@ (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e60:	0a5b      	lsrs	r3, r3, #9
 8003e62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e82:	ee17 2a90 	vmov	r2, s15
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	0c1b      	lsrs	r3, r3, #16
 8003e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e94:	ee07 3a90 	vmov	s15, r3
 8003e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ea0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ea4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eb0:	ee17 2a90 	vmov	r2, s15
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003eb8:	4b13      	ldr	r3, [pc, #76]	@ (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	0e1b      	lsrs	r3, r3, #24
 8003ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ece:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ed2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ede:	ee17 2a90 	vmov	r2, s15
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003ee6:	e008      	b.n	8003efa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
}
 8003efa:	bf00      	nop
 8003efc:	3724      	adds	r7, #36	@ 0x24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	58024400 	.word	0x58024400
 8003f0c:	03d09000 	.word	0x03d09000
 8003f10:	46000000 	.word	0x46000000
 8003f14:	4c742400 	.word	0x4c742400
 8003f18:	4a742400 	.word	0x4a742400
 8003f1c:	4bbebc20 	.word	0x4bbebc20

08003f20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f2e:	4b53      	ldr	r3, [pc, #332]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8003f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d101      	bne.n	8003f3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e099      	b.n	8004072 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f3e:	4b4f      	ldr	r3, [pc, #316]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a4e      	ldr	r2, [pc, #312]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8003f44:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f4a:	f7fc ffa9 	bl	8000ea0 <HAL_GetTick>
 8003f4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f50:	e008      	b.n	8003f64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f52:	f7fc ffa5 	bl	8000ea0 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e086      	b.n	8004072 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f64:	4b45      	ldr	r3, [pc, #276]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f0      	bne.n	8003f52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f70:	4b42      	ldr	r3, [pc, #264]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8003f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f74:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	031b      	lsls	r3, r3, #12
 8003f7e:	493f      	ldr	r1, [pc, #252]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	025b      	lsls	r3, r3, #9
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	041b      	lsls	r3, r3, #16
 8003fa2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	061b      	lsls	r3, r3, #24
 8003fb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003fb4:	4931      	ldr	r1, [pc, #196]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003fba:	4b30      	ldr	r3, [pc, #192]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8003fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	492d      	ldr	r1, [pc, #180]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	f023 0220 	bic.w	r2, r3, #32
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	4928      	ldr	r1, [pc, #160]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003fde:	4b27      	ldr	r3, [pc, #156]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8003fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe2:	4a26      	ldr	r2, [pc, #152]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8003fe4:	f023 0310 	bic.w	r3, r3, #16
 8003fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003fea:	4b24      	ldr	r3, [pc, #144]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8003fec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fee:	4b24      	ldr	r3, [pc, #144]	@ (8004080 <RCCEx_PLL2_Config+0x160>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	69d2      	ldr	r2, [r2, #28]
 8003ff6:	00d2      	lsls	r2, r2, #3
 8003ff8:	4920      	ldr	r1, [pc, #128]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8004000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004002:	4a1e      	ldr	r2, [pc, #120]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8004004:	f043 0310 	orr.w	r3, r3, #16
 8004008:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d106      	bne.n	800401e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004010:	4b1a      	ldr	r3, [pc, #104]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8004012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004014:	4a19      	ldr	r2, [pc, #100]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8004016:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800401a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800401c:	e00f      	b.n	800403e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d106      	bne.n	8004032 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004024:	4b15      	ldr	r3, [pc, #84]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	4a14      	ldr	r2, [pc, #80]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 800402a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800402e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004030:	e005      	b.n	800403e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004032:	4b12      	ldr	r3, [pc, #72]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8004034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004036:	4a11      	ldr	r2, [pc, #68]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8004038:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800403c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800403e:	4b0f      	ldr	r3, [pc, #60]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a0e      	ldr	r2, [pc, #56]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8004044:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800404a:	f7fc ff29 	bl	8000ea0 <HAL_GetTick>
 800404e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004050:	e008      	b.n	8004064 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004052:	f7fc ff25 	bl	8000ea0 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e006      	b.n	8004072 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004064:	4b05      	ldr	r3, [pc, #20]	@ (800407c <RCCEx_PLL2_Config+0x15c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004070:	7bfb      	ldrb	r3, [r7, #15]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	58024400 	.word	0x58024400
 8004080:	ffff0007 	.word	0xffff0007

08004084 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004092:	4b53      	ldr	r3, [pc, #332]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 8004094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	2b03      	cmp	r3, #3
 800409c:	d101      	bne.n	80040a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e099      	b.n	80041d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80040a2:	4b4f      	ldr	r3, [pc, #316]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a4e      	ldr	r2, [pc, #312]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 80040a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ae:	f7fc fef7 	bl	8000ea0 <HAL_GetTick>
 80040b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040b4:	e008      	b.n	80040c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040b6:	f7fc fef3 	bl	8000ea0 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e086      	b.n	80041d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040c8:	4b45      	ldr	r3, [pc, #276]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f0      	bne.n	80040b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80040d4:	4b42      	ldr	r3, [pc, #264]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 80040d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	051b      	lsls	r3, r3, #20
 80040e2:	493f      	ldr	r1, [pc, #252]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	025b      	lsls	r3, r3, #9
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	3b01      	subs	r3, #1
 8004104:	041b      	lsls	r3, r3, #16
 8004106:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	3b01      	subs	r3, #1
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004118:	4931      	ldr	r1, [pc, #196]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 800411a:	4313      	orrs	r3, r2
 800411c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800411e:	4b30      	ldr	r3, [pc, #192]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 8004120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004122:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	492d      	ldr	r1, [pc, #180]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 800412c:	4313      	orrs	r3, r2
 800412e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004130:	4b2b      	ldr	r3, [pc, #172]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 8004132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004134:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	4928      	ldr	r1, [pc, #160]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 800413e:	4313      	orrs	r3, r2
 8004140:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004142:	4b27      	ldr	r3, [pc, #156]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 8004144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004146:	4a26      	ldr	r2, [pc, #152]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 8004148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800414c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800414e:	4b24      	ldr	r3, [pc, #144]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 8004150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004152:	4b24      	ldr	r3, [pc, #144]	@ (80041e4 <RCCEx_PLL3_Config+0x160>)
 8004154:	4013      	ands	r3, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	69d2      	ldr	r2, [r2, #28]
 800415a:	00d2      	lsls	r2, r2, #3
 800415c:	4920      	ldr	r1, [pc, #128]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 800415e:	4313      	orrs	r3, r2
 8004160:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004162:	4b1f      	ldr	r3, [pc, #124]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 8004164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004166:	4a1e      	ldr	r2, [pc, #120]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 8004168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800416c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d106      	bne.n	8004182 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004174:	4b1a      	ldr	r3, [pc, #104]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 8004176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004178:	4a19      	ldr	r2, [pc, #100]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 800417a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800417e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004180:	e00f      	b.n	80041a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d106      	bne.n	8004196 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004188:	4b15      	ldr	r3, [pc, #84]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	4a14      	ldr	r2, [pc, #80]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 800418e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004192:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004194:	e005      	b.n	80041a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004196:	4b12      	ldr	r3, [pc, #72]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 8004198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419a:	4a11      	ldr	r2, [pc, #68]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 800419c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80041a2:	4b0f      	ldr	r3, [pc, #60]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a0e      	ldr	r2, [pc, #56]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 80041a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ae:	f7fc fe77 	bl	8000ea0 <HAL_GetTick>
 80041b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041b4:	e008      	b.n	80041c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041b6:	f7fc fe73 	bl	8000ea0 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e006      	b.n	80041d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041c8:	4b05      	ldr	r3, [pc, #20]	@ (80041e0 <RCCEx_PLL3_Config+0x15c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	58024400 	.word	0x58024400
 80041e4:	ffff0007 	.word	0xffff0007

080041e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e10f      	b.n	800441a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a87      	ldr	r2, [pc, #540]	@ (8004424 <HAL_SPI_Init+0x23c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00f      	beq.n	800422a <HAL_SPI_Init+0x42>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a86      	ldr	r2, [pc, #536]	@ (8004428 <HAL_SPI_Init+0x240>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00a      	beq.n	800422a <HAL_SPI_Init+0x42>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a84      	ldr	r2, [pc, #528]	@ (800442c <HAL_SPI_Init+0x244>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d005      	beq.n	800422a <HAL_SPI_Init+0x42>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	2b0f      	cmp	r3, #15
 8004224:	d901      	bls.n	800422a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e0f7      	b.n	800441a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fbbc 	bl	80049a8 <SPI_GetPacketSize>
 8004230:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a7b      	ldr	r2, [pc, #492]	@ (8004424 <HAL_SPI_Init+0x23c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00c      	beq.n	8004256 <HAL_SPI_Init+0x6e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a79      	ldr	r2, [pc, #484]	@ (8004428 <HAL_SPI_Init+0x240>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <HAL_SPI_Init+0x6e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a78      	ldr	r2, [pc, #480]	@ (800442c <HAL_SPI_Init+0x244>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d002      	beq.n	8004256 <HAL_SPI_Init+0x6e>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b08      	cmp	r3, #8
 8004254:	d811      	bhi.n	800427a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800425a:	4a72      	ldr	r2, [pc, #456]	@ (8004424 <HAL_SPI_Init+0x23c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d009      	beq.n	8004274 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a70      	ldr	r2, [pc, #448]	@ (8004428 <HAL_SPI_Init+0x240>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d004      	beq.n	8004274 <HAL_SPI_Init+0x8c>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a6f      	ldr	r2, [pc, #444]	@ (800442c <HAL_SPI_Init+0x244>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d104      	bne.n	800427e <HAL_SPI_Init+0x96>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b10      	cmp	r3, #16
 8004278:	d901      	bls.n	800427e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e0cd      	b.n	800441a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fc fba2 	bl	80009dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0201 	bic.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80042ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042c4:	d119      	bne.n	80042fa <HAL_SPI_Init+0x112>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ce:	d103      	bne.n	80042d8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10c      	bne.n	80042fa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80042e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042e8:	d107      	bne.n	80042fa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00f      	beq.n	8004326 <HAL_SPI_Init+0x13e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	2b06      	cmp	r3, #6
 800430c:	d90b      	bls.n	8004326 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e007      	b.n	8004336 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004334:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69da      	ldr	r2, [r3, #28]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433e:	431a      	orrs	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004348:	ea42 0103 	orr.w	r1, r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004396:	ea42 0103 	orr.w	r1, r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d113      	bne.n	80043d6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0201 	bic.w	r2, r2, #1
 80043e4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40013000 	.word	0x40013000
 8004428:	40003800 	.word	0x40003800
 800442c:	40003c00 	.word	0x40003c00

08004430 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3320      	adds	r3, #32
 8004446:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004448:	f7fc fd2a 	bl	8000ea0 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b01      	cmp	r3, #1
 8004458:	d001      	beq.n	800445e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800445a:	2302      	movs	r3, #2
 800445c:	e1d1      	b.n	8004802 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_SPI_Transmit+0x3a>
 8004464:	88fb      	ldrh	r3, [r7, #6]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e1c9      	b.n	8004802 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_SPI_Transmit+0x4c>
 8004478:	2302      	movs	r3, #2
 800447a:	e1c2      	b.n	8004802 <HAL_SPI_Transmit+0x3d2>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2203      	movs	r2, #3
 8004488:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	88fa      	ldrh	r2, [r7, #6]
 800449e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	88fa      	ldrh	r2, [r7, #6]
 80044a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80044d4:	d108      	bne.n	80044e8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	e009      	b.n	80044fc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80044fa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	4b96      	ldr	r3, [pc, #600]	@ (800475c <HAL_SPI_Transmit+0x32c>)
 8004504:	4013      	ands	r3, r2
 8004506:	88f9      	ldrh	r1, [r7, #6]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	430b      	orrs	r3, r1
 800450e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004528:	d107      	bne.n	800453a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004538:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b0f      	cmp	r3, #15
 8004540:	d947      	bls.n	80045d2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004542:	e03f      	b.n	80045c4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b02      	cmp	r3, #2
 8004550:	d114      	bne.n	800457c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004562:	1d1a      	adds	r2, r3, #4
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800457a:	e023      	b.n	80045c4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800457c:	f7fc fc90 	bl	8000ea0 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d803      	bhi.n	8004594 <HAL_SPI_Transmit+0x164>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004592:	d102      	bne.n	800459a <HAL_SPI_Transmit+0x16a>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d114      	bne.n	80045c4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f936 	bl	800480c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e11e      	b.n	8004802 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1b9      	bne.n	8004544 <HAL_SPI_Transmit+0x114>
 80045d0:	e0f1      	b.n	80047b6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b07      	cmp	r3, #7
 80045d8:	f240 80e6 	bls.w	80047a8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80045dc:	e05d      	b.n	800469a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d132      	bne.n	8004652 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d918      	bls.n	800462a <HAL_SPI_Transmit+0x1fa>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d014      	beq.n	800462a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004610:	1d1a      	adds	r2, r3, #4
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b02      	subs	r3, #2
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004628:	e037      	b.n	800469a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462e:	881a      	ldrh	r2, [r3, #0]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004638:	1c9a      	adds	r2, r3, #2
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004650:	e023      	b.n	800469a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004652:	f7fc fc25 	bl	8000ea0 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d803      	bhi.n	800466a <HAL_SPI_Transmit+0x23a>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004668:	d102      	bne.n	8004670 <HAL_SPI_Transmit+0x240>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d114      	bne.n	800469a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f8cb 	bl	800480c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800467c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0b3      	b.n	8004802 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d19b      	bne.n	80045de <HAL_SPI_Transmit+0x1ae>
 80046a6:	e086      	b.n	80047b6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d154      	bne.n	8004760 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d918      	bls.n	80046f4 <HAL_SPI_Transmit+0x2c4>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c6:	2b40      	cmp	r3, #64	@ 0x40
 80046c8:	d914      	bls.n	80046f4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046da:	1d1a      	adds	r2, r3, #4
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b04      	subs	r3, #4
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80046f2:	e059      	b.n	80047a8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d917      	bls.n	8004730 <HAL_SPI_Transmit+0x300>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004704:	2b00      	cmp	r3, #0
 8004706:	d013      	beq.n	8004730 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470c:	881a      	ldrh	r2, [r3, #0]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004716:	1c9a      	adds	r2, r3, #2
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b02      	subs	r3, #2
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800472e:	e03b      	b.n	80047a8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3320      	adds	r3, #32
 800473a:	7812      	ldrb	r2, [r2, #0]
 800473c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800475a:	e025      	b.n	80047a8 <HAL_SPI_Transmit+0x378>
 800475c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004760:	f7fc fb9e 	bl	8000ea0 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d803      	bhi.n	8004778 <HAL_SPI_Transmit+0x348>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d102      	bne.n	800477e <HAL_SPI_Transmit+0x34e>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d114      	bne.n	80047a8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f844 	bl	800480c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800478a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e02c      	b.n	8004802 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f47f af79 	bne.w	80046a8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2200      	movs	r2, #0
 80047be:	2108      	movs	r1, #8
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f8c3 	bl	800494c <SPI_WaitOnFlagUntilTimeout>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047d2:	f043 0220 	orr.w	r2, r3, #32
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f815 	bl	800480c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8004800:	2300      	movs	r3, #0
  }
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop

0800480c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0208 	orr.w	r2, r2, #8
 800482a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0210 	orr.w	r2, r2, #16
 800483a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0201 	bic.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6919      	ldr	r1, [r3, #16]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b3c      	ldr	r3, [pc, #240]	@ (8004948 <SPI_CloseTransfer+0x13c>)
 8004858:	400b      	ands	r3, r1
 800485a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800486a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b04      	cmp	r3, #4
 8004876:	d014      	beq.n	80048a2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 0320 	and.w	r3, r3, #32
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00f      	beq.n	80048a2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004888:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699a      	ldr	r2, [r3, #24]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0220 	orr.w	r2, r2, #32
 80048a0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d014      	beq.n	80048d8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00f      	beq.n	80048d8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048be:	f043 0204 	orr.w	r2, r3, #4
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048d6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00f      	beq.n	8004902 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048e8:	f043 0201 	orr.w	r2, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699a      	ldr	r2, [r3, #24]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004900:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00f      	beq.n	800492c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004912:	f043 0208 	orr.w	r2, r3, #8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699a      	ldr	r2, [r3, #24]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800492a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	fffffc90 	.word	0xfffffc90

0800494c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	4613      	mov	r3, r2
 800495a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800495c:	e010      	b.n	8004980 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800495e:	f7fc fa9f 	bl	8000ea0 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d803      	bhi.n	8004976 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d102      	bne.n	800497c <SPI_WaitOnFlagUntilTimeout+0x30>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e00f      	b.n	80049a0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695a      	ldr	r2, [r3, #20]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	4013      	ands	r3, r2
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	429a      	cmp	r2, r3
 800498e:	bf0c      	ite	eq
 8004990:	2301      	moveq	r3, #1
 8004992:	2300      	movne	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	461a      	mov	r2, r3
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	429a      	cmp	r2, r3
 800499c:	d0df      	beq.n	800495e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	3301      	adds	r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	3301      	adds	r3, #1
 80049c0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	3307      	adds	r3, #7
 80049c6:	08db      	lsrs	r3, r3, #3
 80049c8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	fb02 f303 	mul.w	r3, r2, r3
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e042      	b.n	8004a76 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fc f952 	bl	8000cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2224      	movs	r2, #36	@ 0x24
 8004a0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0201 	bic.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fd91 	bl	8005550 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f826 	bl	8004a80 <UART_SetConfig>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e01b      	b.n	8004a76 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0201 	orr.w	r2, r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fe10 	bl	8005694 <UART_CheckIdleState>
 8004a74:	4603      	mov	r3, r0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a84:	b092      	sub	sp, #72	@ 0x48
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4bbe      	ldr	r3, [pc, #760]	@ (8004da8 <UART_SetConfig+0x328>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4ab3      	ldr	r2, [pc, #716]	@ (8004dac <UART_SetConfig+0x32c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	4baf      	ldr	r3, [pc, #700]	@ (8004db0 <UART_SetConfig+0x330>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b06:	f023 010f 	bic.w	r1, r3, #15
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4aa6      	ldr	r2, [pc, #664]	@ (8004db4 <UART_SetConfig+0x334>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d177      	bne.n	8004c10 <UART_SetConfig+0x190>
 8004b20:	4ba5      	ldr	r3, [pc, #660]	@ (8004db8 <UART_SetConfig+0x338>)
 8004b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b28:	2b28      	cmp	r3, #40	@ 0x28
 8004b2a:	d86d      	bhi.n	8004c08 <UART_SetConfig+0x188>
 8004b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b34 <UART_SetConfig+0xb4>)
 8004b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004bd9 	.word	0x08004bd9
 8004b38:	08004c09 	.word	0x08004c09
 8004b3c:	08004c09 	.word	0x08004c09
 8004b40:	08004c09 	.word	0x08004c09
 8004b44:	08004c09 	.word	0x08004c09
 8004b48:	08004c09 	.word	0x08004c09
 8004b4c:	08004c09 	.word	0x08004c09
 8004b50:	08004c09 	.word	0x08004c09
 8004b54:	08004be1 	.word	0x08004be1
 8004b58:	08004c09 	.word	0x08004c09
 8004b5c:	08004c09 	.word	0x08004c09
 8004b60:	08004c09 	.word	0x08004c09
 8004b64:	08004c09 	.word	0x08004c09
 8004b68:	08004c09 	.word	0x08004c09
 8004b6c:	08004c09 	.word	0x08004c09
 8004b70:	08004c09 	.word	0x08004c09
 8004b74:	08004be9 	.word	0x08004be9
 8004b78:	08004c09 	.word	0x08004c09
 8004b7c:	08004c09 	.word	0x08004c09
 8004b80:	08004c09 	.word	0x08004c09
 8004b84:	08004c09 	.word	0x08004c09
 8004b88:	08004c09 	.word	0x08004c09
 8004b8c:	08004c09 	.word	0x08004c09
 8004b90:	08004c09 	.word	0x08004c09
 8004b94:	08004bf1 	.word	0x08004bf1
 8004b98:	08004c09 	.word	0x08004c09
 8004b9c:	08004c09 	.word	0x08004c09
 8004ba0:	08004c09 	.word	0x08004c09
 8004ba4:	08004c09 	.word	0x08004c09
 8004ba8:	08004c09 	.word	0x08004c09
 8004bac:	08004c09 	.word	0x08004c09
 8004bb0:	08004c09 	.word	0x08004c09
 8004bb4:	08004bf9 	.word	0x08004bf9
 8004bb8:	08004c09 	.word	0x08004c09
 8004bbc:	08004c09 	.word	0x08004c09
 8004bc0:	08004c09 	.word	0x08004c09
 8004bc4:	08004c09 	.word	0x08004c09
 8004bc8:	08004c09 	.word	0x08004c09
 8004bcc:	08004c09 	.word	0x08004c09
 8004bd0:	08004c09 	.word	0x08004c09
 8004bd4:	08004c01 	.word	0x08004c01
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bde:	e222      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004be0:	2304      	movs	r3, #4
 8004be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004be6:	e21e      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004be8:	2308      	movs	r3, #8
 8004bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bee:	e21a      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bf6:	e216      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004bf8:	2320      	movs	r3, #32
 8004bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bfe:	e212      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004c00:	2340      	movs	r3, #64	@ 0x40
 8004c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c06:	e20e      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004c08:	2380      	movs	r3, #128	@ 0x80
 8004c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c0e:	e20a      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a69      	ldr	r2, [pc, #420]	@ (8004dbc <UART_SetConfig+0x33c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d130      	bne.n	8004c7c <UART_SetConfig+0x1fc>
 8004c1a:	4b67      	ldr	r3, [pc, #412]	@ (8004db8 <UART_SetConfig+0x338>)
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	2b05      	cmp	r3, #5
 8004c24:	d826      	bhi.n	8004c74 <UART_SetConfig+0x1f4>
 8004c26:	a201      	add	r2, pc, #4	@ (adr r2, 8004c2c <UART_SetConfig+0x1ac>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c45 	.word	0x08004c45
 8004c30:	08004c4d 	.word	0x08004c4d
 8004c34:	08004c55 	.word	0x08004c55
 8004c38:	08004c5d 	.word	0x08004c5d
 8004c3c:	08004c65 	.word	0x08004c65
 8004c40:	08004c6d 	.word	0x08004c6d
 8004c44:	2300      	movs	r3, #0
 8004c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c4a:	e1ec      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c52:	e1e8      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004c54:	2308      	movs	r3, #8
 8004c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c5a:	e1e4      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c62:	e1e0      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004c64:	2320      	movs	r3, #32
 8004c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6a:	e1dc      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004c6c:	2340      	movs	r3, #64	@ 0x40
 8004c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c72:	e1d8      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004c74:	2380      	movs	r3, #128	@ 0x80
 8004c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c7a:	e1d4      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a4f      	ldr	r2, [pc, #316]	@ (8004dc0 <UART_SetConfig+0x340>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d130      	bne.n	8004ce8 <UART_SetConfig+0x268>
 8004c86:	4b4c      	ldr	r3, [pc, #304]	@ (8004db8 <UART_SetConfig+0x338>)
 8004c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	2b05      	cmp	r3, #5
 8004c90:	d826      	bhi.n	8004ce0 <UART_SetConfig+0x260>
 8004c92:	a201      	add	r2, pc, #4	@ (adr r2, 8004c98 <UART_SetConfig+0x218>)
 8004c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c98:	08004cb1 	.word	0x08004cb1
 8004c9c:	08004cb9 	.word	0x08004cb9
 8004ca0:	08004cc1 	.word	0x08004cc1
 8004ca4:	08004cc9 	.word	0x08004cc9
 8004ca8:	08004cd1 	.word	0x08004cd1
 8004cac:	08004cd9 	.word	0x08004cd9
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cb6:	e1b6      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cbe:	e1b2      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004cc0:	2308      	movs	r3, #8
 8004cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cc6:	e1ae      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004cc8:	2310      	movs	r3, #16
 8004cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cce:	e1aa      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004cd0:	2320      	movs	r3, #32
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cd6:	e1a6      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004cd8:	2340      	movs	r3, #64	@ 0x40
 8004cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cde:	e1a2      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004ce0:	2380      	movs	r3, #128	@ 0x80
 8004ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ce6:	e19e      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a35      	ldr	r2, [pc, #212]	@ (8004dc4 <UART_SetConfig+0x344>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d130      	bne.n	8004d54 <UART_SetConfig+0x2d4>
 8004cf2:	4b31      	ldr	r3, [pc, #196]	@ (8004db8 <UART_SetConfig+0x338>)
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	2b05      	cmp	r3, #5
 8004cfc:	d826      	bhi.n	8004d4c <UART_SetConfig+0x2cc>
 8004cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8004d04 <UART_SetConfig+0x284>)
 8004d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d04:	08004d1d 	.word	0x08004d1d
 8004d08:	08004d25 	.word	0x08004d25
 8004d0c:	08004d2d 	.word	0x08004d2d
 8004d10:	08004d35 	.word	0x08004d35
 8004d14:	08004d3d 	.word	0x08004d3d
 8004d18:	08004d45 	.word	0x08004d45
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d22:	e180      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004d24:	2304      	movs	r3, #4
 8004d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d2a:	e17c      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d32:	e178      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004d34:	2310      	movs	r3, #16
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d3a:	e174      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004d3c:	2320      	movs	r3, #32
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d42:	e170      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004d44:	2340      	movs	r3, #64	@ 0x40
 8004d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d4a:	e16c      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004d4c:	2380      	movs	r3, #128	@ 0x80
 8004d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d52:	e168      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc8 <UART_SetConfig+0x348>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d142      	bne.n	8004de4 <UART_SetConfig+0x364>
 8004d5e:	4b16      	ldr	r3, [pc, #88]	@ (8004db8 <UART_SetConfig+0x338>)
 8004d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	2b05      	cmp	r3, #5
 8004d68:	d838      	bhi.n	8004ddc <UART_SetConfig+0x35c>
 8004d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d70 <UART_SetConfig+0x2f0>)
 8004d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d70:	08004d89 	.word	0x08004d89
 8004d74:	08004d91 	.word	0x08004d91
 8004d78:	08004d99 	.word	0x08004d99
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004dcd 	.word	0x08004dcd
 8004d84:	08004dd5 	.word	0x08004dd5
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d8e:	e14a      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004d90:	2304      	movs	r3, #4
 8004d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d96:	e146      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004d98:	2308      	movs	r3, #8
 8004d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d9e:	e142      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004da0:	2310      	movs	r3, #16
 8004da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004da6:	e13e      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004da8:	cfff69f3 	.word	0xcfff69f3
 8004dac:	58000c00 	.word	0x58000c00
 8004db0:	11fff4ff 	.word	0x11fff4ff
 8004db4:	40011000 	.word	0x40011000
 8004db8:	58024400 	.word	0x58024400
 8004dbc:	40004400 	.word	0x40004400
 8004dc0:	40004800 	.word	0x40004800
 8004dc4:	40004c00 	.word	0x40004c00
 8004dc8:	40005000 	.word	0x40005000
 8004dcc:	2320      	movs	r3, #32
 8004dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dd2:	e128      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004dd4:	2340      	movs	r3, #64	@ 0x40
 8004dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dda:	e124      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004ddc:	2380      	movs	r3, #128	@ 0x80
 8004dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004de2:	e120      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4acb      	ldr	r2, [pc, #812]	@ (8005118 <UART_SetConfig+0x698>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d176      	bne.n	8004edc <UART_SetConfig+0x45c>
 8004dee:	4bcb      	ldr	r3, [pc, #812]	@ (800511c <UART_SetConfig+0x69c>)
 8004df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004df6:	2b28      	cmp	r3, #40	@ 0x28
 8004df8:	d86c      	bhi.n	8004ed4 <UART_SetConfig+0x454>
 8004dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8004e00 <UART_SetConfig+0x380>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004ea5 	.word	0x08004ea5
 8004e04:	08004ed5 	.word	0x08004ed5
 8004e08:	08004ed5 	.word	0x08004ed5
 8004e0c:	08004ed5 	.word	0x08004ed5
 8004e10:	08004ed5 	.word	0x08004ed5
 8004e14:	08004ed5 	.word	0x08004ed5
 8004e18:	08004ed5 	.word	0x08004ed5
 8004e1c:	08004ed5 	.word	0x08004ed5
 8004e20:	08004ead 	.word	0x08004ead
 8004e24:	08004ed5 	.word	0x08004ed5
 8004e28:	08004ed5 	.word	0x08004ed5
 8004e2c:	08004ed5 	.word	0x08004ed5
 8004e30:	08004ed5 	.word	0x08004ed5
 8004e34:	08004ed5 	.word	0x08004ed5
 8004e38:	08004ed5 	.word	0x08004ed5
 8004e3c:	08004ed5 	.word	0x08004ed5
 8004e40:	08004eb5 	.word	0x08004eb5
 8004e44:	08004ed5 	.word	0x08004ed5
 8004e48:	08004ed5 	.word	0x08004ed5
 8004e4c:	08004ed5 	.word	0x08004ed5
 8004e50:	08004ed5 	.word	0x08004ed5
 8004e54:	08004ed5 	.word	0x08004ed5
 8004e58:	08004ed5 	.word	0x08004ed5
 8004e5c:	08004ed5 	.word	0x08004ed5
 8004e60:	08004ebd 	.word	0x08004ebd
 8004e64:	08004ed5 	.word	0x08004ed5
 8004e68:	08004ed5 	.word	0x08004ed5
 8004e6c:	08004ed5 	.word	0x08004ed5
 8004e70:	08004ed5 	.word	0x08004ed5
 8004e74:	08004ed5 	.word	0x08004ed5
 8004e78:	08004ed5 	.word	0x08004ed5
 8004e7c:	08004ed5 	.word	0x08004ed5
 8004e80:	08004ec5 	.word	0x08004ec5
 8004e84:	08004ed5 	.word	0x08004ed5
 8004e88:	08004ed5 	.word	0x08004ed5
 8004e8c:	08004ed5 	.word	0x08004ed5
 8004e90:	08004ed5 	.word	0x08004ed5
 8004e94:	08004ed5 	.word	0x08004ed5
 8004e98:	08004ed5 	.word	0x08004ed5
 8004e9c:	08004ed5 	.word	0x08004ed5
 8004ea0:	08004ecd 	.word	0x08004ecd
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eaa:	e0bc      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004eac:	2304      	movs	r3, #4
 8004eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eb2:	e0b8      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004eb4:	2308      	movs	r3, #8
 8004eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eba:	e0b4      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ec2:	e0b0      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004ec4:	2320      	movs	r3, #32
 8004ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eca:	e0ac      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004ecc:	2340      	movs	r3, #64	@ 0x40
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ed2:	e0a8      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004ed4:	2380      	movs	r3, #128	@ 0x80
 8004ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eda:	e0a4      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a8f      	ldr	r2, [pc, #572]	@ (8005120 <UART_SetConfig+0x6a0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d130      	bne.n	8004f48 <UART_SetConfig+0x4c8>
 8004ee6:	4b8d      	ldr	r3, [pc, #564]	@ (800511c <UART_SetConfig+0x69c>)
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	2b05      	cmp	r3, #5
 8004ef0:	d826      	bhi.n	8004f40 <UART_SetConfig+0x4c0>
 8004ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef8 <UART_SetConfig+0x478>)
 8004ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef8:	08004f11 	.word	0x08004f11
 8004efc:	08004f19 	.word	0x08004f19
 8004f00:	08004f21 	.word	0x08004f21
 8004f04:	08004f29 	.word	0x08004f29
 8004f08:	08004f31 	.word	0x08004f31
 8004f0c:	08004f39 	.word	0x08004f39
 8004f10:	2300      	movs	r3, #0
 8004f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f16:	e086      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004f18:	2304      	movs	r3, #4
 8004f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f1e:	e082      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004f20:	2308      	movs	r3, #8
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f26:	e07e      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004f28:	2310      	movs	r3, #16
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f2e:	e07a      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004f30:	2320      	movs	r3, #32
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f36:	e076      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004f38:	2340      	movs	r3, #64	@ 0x40
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f3e:	e072      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004f40:	2380      	movs	r3, #128	@ 0x80
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f46:	e06e      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a75      	ldr	r2, [pc, #468]	@ (8005124 <UART_SetConfig+0x6a4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d130      	bne.n	8004fb4 <UART_SetConfig+0x534>
 8004f52:	4b72      	ldr	r3, [pc, #456]	@ (800511c <UART_SetConfig+0x69c>)
 8004f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	2b05      	cmp	r3, #5
 8004f5c:	d826      	bhi.n	8004fac <UART_SetConfig+0x52c>
 8004f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f64 <UART_SetConfig+0x4e4>)
 8004f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f64:	08004f7d 	.word	0x08004f7d
 8004f68:	08004f85 	.word	0x08004f85
 8004f6c:	08004f8d 	.word	0x08004f8d
 8004f70:	08004f95 	.word	0x08004f95
 8004f74:	08004f9d 	.word	0x08004f9d
 8004f78:	08004fa5 	.word	0x08004fa5
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f82:	e050      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004f84:	2304      	movs	r3, #4
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8a:	e04c      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f92:	e048      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004f94:	2310      	movs	r3, #16
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f9a:	e044      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004f9c:	2320      	movs	r3, #32
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fa2:	e040      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004fa4:	2340      	movs	r3, #64	@ 0x40
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004faa:	e03c      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004fac:	2380      	movs	r3, #128	@ 0x80
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fb2:	e038      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a5b      	ldr	r2, [pc, #364]	@ (8005128 <UART_SetConfig+0x6a8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d130      	bne.n	8005020 <UART_SetConfig+0x5a0>
 8004fbe:	4b57      	ldr	r3, [pc, #348]	@ (800511c <UART_SetConfig+0x69c>)
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	2b05      	cmp	r3, #5
 8004fc8:	d826      	bhi.n	8005018 <UART_SetConfig+0x598>
 8004fca:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd0 <UART_SetConfig+0x550>)
 8004fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd0:	08004fe9 	.word	0x08004fe9
 8004fd4:	08004ff1 	.word	0x08004ff1
 8004fd8:	08004ff9 	.word	0x08004ff9
 8004fdc:	08005001 	.word	0x08005001
 8004fe0:	08005009 	.word	0x08005009
 8004fe4:	08005011 	.word	0x08005011
 8004fe8:	2302      	movs	r3, #2
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fee:	e01a      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff6:	e016      	b.n	8005026 <UART_SetConfig+0x5a6>
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffe:	e012      	b.n	8005026 <UART_SetConfig+0x5a6>
 8005000:	2310      	movs	r3, #16
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005006:	e00e      	b.n	8005026 <UART_SetConfig+0x5a6>
 8005008:	2320      	movs	r3, #32
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800500e:	e00a      	b.n	8005026 <UART_SetConfig+0x5a6>
 8005010:	2340      	movs	r3, #64	@ 0x40
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005016:	e006      	b.n	8005026 <UART_SetConfig+0x5a6>
 8005018:	2380      	movs	r3, #128	@ 0x80
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800501e:	e002      	b.n	8005026 <UART_SetConfig+0x5a6>
 8005020:	2380      	movs	r3, #128	@ 0x80
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a3f      	ldr	r2, [pc, #252]	@ (8005128 <UART_SetConfig+0x6a8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	f040 80f8 	bne.w	8005222 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005032:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005036:	2b20      	cmp	r3, #32
 8005038:	dc46      	bgt.n	80050c8 <UART_SetConfig+0x648>
 800503a:	2b02      	cmp	r3, #2
 800503c:	f2c0 8082 	blt.w	8005144 <UART_SetConfig+0x6c4>
 8005040:	3b02      	subs	r3, #2
 8005042:	2b1e      	cmp	r3, #30
 8005044:	d87e      	bhi.n	8005144 <UART_SetConfig+0x6c4>
 8005046:	a201      	add	r2, pc, #4	@ (adr r2, 800504c <UART_SetConfig+0x5cc>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	080050cf 	.word	0x080050cf
 8005050:	08005145 	.word	0x08005145
 8005054:	080050d7 	.word	0x080050d7
 8005058:	08005145 	.word	0x08005145
 800505c:	08005145 	.word	0x08005145
 8005060:	08005145 	.word	0x08005145
 8005064:	080050e7 	.word	0x080050e7
 8005068:	08005145 	.word	0x08005145
 800506c:	08005145 	.word	0x08005145
 8005070:	08005145 	.word	0x08005145
 8005074:	08005145 	.word	0x08005145
 8005078:	08005145 	.word	0x08005145
 800507c:	08005145 	.word	0x08005145
 8005080:	08005145 	.word	0x08005145
 8005084:	080050f7 	.word	0x080050f7
 8005088:	08005145 	.word	0x08005145
 800508c:	08005145 	.word	0x08005145
 8005090:	08005145 	.word	0x08005145
 8005094:	08005145 	.word	0x08005145
 8005098:	08005145 	.word	0x08005145
 800509c:	08005145 	.word	0x08005145
 80050a0:	08005145 	.word	0x08005145
 80050a4:	08005145 	.word	0x08005145
 80050a8:	08005145 	.word	0x08005145
 80050ac:	08005145 	.word	0x08005145
 80050b0:	08005145 	.word	0x08005145
 80050b4:	08005145 	.word	0x08005145
 80050b8:	08005145 	.word	0x08005145
 80050bc:	08005145 	.word	0x08005145
 80050c0:	08005145 	.word	0x08005145
 80050c4:	08005137 	.word	0x08005137
 80050c8:	2b40      	cmp	r3, #64	@ 0x40
 80050ca:	d037      	beq.n	800513c <UART_SetConfig+0x6bc>
 80050cc:	e03a      	b.n	8005144 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80050ce:	f7fe fc69 	bl	80039a4 <HAL_RCCEx_GetD3PCLK1Freq>
 80050d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050d4:	e03c      	b.n	8005150 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe fc78 	bl	80039d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050e4:	e034      	b.n	8005150 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050e6:	f107 0318 	add.w	r3, r7, #24
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fe fdc4 	bl	8003c78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050f4:	e02c      	b.n	8005150 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050f6:	4b09      	ldr	r3, [pc, #36]	@ (800511c <UART_SetConfig+0x69c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d016      	beq.n	8005130 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005102:	4b06      	ldr	r3, [pc, #24]	@ (800511c <UART_SetConfig+0x69c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	08db      	lsrs	r3, r3, #3
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	4a07      	ldr	r2, [pc, #28]	@ (800512c <UART_SetConfig+0x6ac>)
 800510e:	fa22 f303 	lsr.w	r3, r2, r3
 8005112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005114:	e01c      	b.n	8005150 <UART_SetConfig+0x6d0>
 8005116:	bf00      	nop
 8005118:	40011400 	.word	0x40011400
 800511c:	58024400 	.word	0x58024400
 8005120:	40007800 	.word	0x40007800
 8005124:	40007c00 	.word	0x40007c00
 8005128:	58000c00 	.word	0x58000c00
 800512c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005130:	4b9d      	ldr	r3, [pc, #628]	@ (80053a8 <UART_SetConfig+0x928>)
 8005132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005134:	e00c      	b.n	8005150 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005136:	4b9d      	ldr	r3, [pc, #628]	@ (80053ac <UART_SetConfig+0x92c>)
 8005138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800513a:	e009      	b.n	8005150 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800513c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005142:	e005      	b.n	8005150 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800514e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 81de 	beq.w	8005514 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	4a94      	ldr	r2, [pc, #592]	@ (80053b0 <UART_SetConfig+0x930>)
 800515e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005162:	461a      	mov	r2, r3
 8005164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005166:	fbb3 f3f2 	udiv	r3, r3, r2
 800516a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	4613      	mov	r3, r2
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	4413      	add	r3, r2
 8005176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005178:	429a      	cmp	r2, r3
 800517a:	d305      	bcc.n	8005188 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005182:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005184:	429a      	cmp	r2, r3
 8005186:	d903      	bls.n	8005190 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800518e:	e1c1      	b.n	8005514 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005192:	2200      	movs	r2, #0
 8005194:	60bb      	str	r3, [r7, #8]
 8005196:	60fa      	str	r2, [r7, #12]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519c:	4a84      	ldr	r2, [pc, #528]	@ (80053b0 <UART_SetConfig+0x930>)
 800519e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2200      	movs	r2, #0
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051b2:	f7fb f891 	bl	80002d8 <__aeabi_uldivmod>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4610      	mov	r0, r2
 80051bc:	4619      	mov	r1, r3
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	020b      	lsls	r3, r1, #8
 80051c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051cc:	0202      	lsls	r2, r0, #8
 80051ce:	6979      	ldr	r1, [r7, #20]
 80051d0:	6849      	ldr	r1, [r1, #4]
 80051d2:	0849      	lsrs	r1, r1, #1
 80051d4:	2000      	movs	r0, #0
 80051d6:	460c      	mov	r4, r1
 80051d8:	4605      	mov	r5, r0
 80051da:	eb12 0804 	adds.w	r8, r2, r4
 80051de:	eb43 0905 	adc.w	r9, r3, r5
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	469a      	mov	sl, r3
 80051ea:	4693      	mov	fp, r2
 80051ec:	4652      	mov	r2, sl
 80051ee:	465b      	mov	r3, fp
 80051f0:	4640      	mov	r0, r8
 80051f2:	4649      	mov	r1, r9
 80051f4:	f7fb f870 	bl	80002d8 <__aeabi_uldivmod>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4613      	mov	r3, r2
 80051fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005202:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005206:	d308      	bcc.n	800521a <UART_SetConfig+0x79a>
 8005208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800520e:	d204      	bcs.n	800521a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005216:	60da      	str	r2, [r3, #12]
 8005218:	e17c      	b.n	8005514 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005220:	e178      	b.n	8005514 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800522a:	f040 80c5 	bne.w	80053b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800522e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005232:	2b20      	cmp	r3, #32
 8005234:	dc48      	bgt.n	80052c8 <UART_SetConfig+0x848>
 8005236:	2b00      	cmp	r3, #0
 8005238:	db7b      	blt.n	8005332 <UART_SetConfig+0x8b2>
 800523a:	2b20      	cmp	r3, #32
 800523c:	d879      	bhi.n	8005332 <UART_SetConfig+0x8b2>
 800523e:	a201      	add	r2, pc, #4	@ (adr r2, 8005244 <UART_SetConfig+0x7c4>)
 8005240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005244:	080052cf 	.word	0x080052cf
 8005248:	080052d7 	.word	0x080052d7
 800524c:	08005333 	.word	0x08005333
 8005250:	08005333 	.word	0x08005333
 8005254:	080052df 	.word	0x080052df
 8005258:	08005333 	.word	0x08005333
 800525c:	08005333 	.word	0x08005333
 8005260:	08005333 	.word	0x08005333
 8005264:	080052ef 	.word	0x080052ef
 8005268:	08005333 	.word	0x08005333
 800526c:	08005333 	.word	0x08005333
 8005270:	08005333 	.word	0x08005333
 8005274:	08005333 	.word	0x08005333
 8005278:	08005333 	.word	0x08005333
 800527c:	08005333 	.word	0x08005333
 8005280:	08005333 	.word	0x08005333
 8005284:	080052ff 	.word	0x080052ff
 8005288:	08005333 	.word	0x08005333
 800528c:	08005333 	.word	0x08005333
 8005290:	08005333 	.word	0x08005333
 8005294:	08005333 	.word	0x08005333
 8005298:	08005333 	.word	0x08005333
 800529c:	08005333 	.word	0x08005333
 80052a0:	08005333 	.word	0x08005333
 80052a4:	08005333 	.word	0x08005333
 80052a8:	08005333 	.word	0x08005333
 80052ac:	08005333 	.word	0x08005333
 80052b0:	08005333 	.word	0x08005333
 80052b4:	08005333 	.word	0x08005333
 80052b8:	08005333 	.word	0x08005333
 80052bc:	08005333 	.word	0x08005333
 80052c0:	08005333 	.word	0x08005333
 80052c4:	08005325 	.word	0x08005325
 80052c8:	2b40      	cmp	r3, #64	@ 0x40
 80052ca:	d02e      	beq.n	800532a <UART_SetConfig+0x8aa>
 80052cc:	e031      	b.n	8005332 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ce:	f7fd f933 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 80052d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80052d4:	e033      	b.n	800533e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d6:	f7fd f945 	bl	8002564 <HAL_RCC_GetPCLK2Freq>
 80052da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80052dc:	e02f      	b.n	800533e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fe fb74 	bl	80039d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052ec:	e027      	b.n	800533e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052ee:	f107 0318 	add.w	r3, r7, #24
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fcc0 	bl	8003c78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052fc:	e01f      	b.n	800533e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052fe:	4b2d      	ldr	r3, [pc, #180]	@ (80053b4 <UART_SetConfig+0x934>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800530a:	4b2a      	ldr	r3, [pc, #168]	@ (80053b4 <UART_SetConfig+0x934>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	08db      	lsrs	r3, r3, #3
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	4a24      	ldr	r2, [pc, #144]	@ (80053a8 <UART_SetConfig+0x928>)
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800531c:	e00f      	b.n	800533e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800531e:	4b22      	ldr	r3, [pc, #136]	@ (80053a8 <UART_SetConfig+0x928>)
 8005320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005322:	e00c      	b.n	800533e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005324:	4b21      	ldr	r3, [pc, #132]	@ (80053ac <UART_SetConfig+0x92c>)
 8005326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005328:	e009      	b.n	800533e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800532a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800532e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005330:	e005      	b.n	800533e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800533c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800533e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 80e7 	beq.w	8005514 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534a:	4a19      	ldr	r2, [pc, #100]	@ (80053b0 <UART_SetConfig+0x930>)
 800534c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005350:	461a      	mov	r2, r3
 8005352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005354:	fbb3 f3f2 	udiv	r3, r3, r2
 8005358:	005a      	lsls	r2, r3, #1
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	085b      	lsrs	r3, r3, #1
 8005360:	441a      	add	r2, r3
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	fbb2 f3f3 	udiv	r3, r2, r3
 800536a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800536c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536e:	2b0f      	cmp	r3, #15
 8005370:	d916      	bls.n	80053a0 <UART_SetConfig+0x920>
 8005372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005378:	d212      	bcs.n	80053a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800537a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537c:	b29b      	uxth	r3, r3
 800537e:	f023 030f 	bic.w	r3, r3, #15
 8005382:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005386:	085b      	lsrs	r3, r3, #1
 8005388:	b29b      	uxth	r3, r3
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	b29a      	uxth	r2, r3
 8005390:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005392:	4313      	orrs	r3, r2
 8005394:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800539c:	60da      	str	r2, [r3, #12]
 800539e:	e0b9      	b.n	8005514 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80053a6:	e0b5      	b.n	8005514 <UART_SetConfig+0xa94>
 80053a8:	03d09000 	.word	0x03d09000
 80053ac:	003d0900 	.word	0x003d0900
 80053b0:	08005c18 	.word	0x08005c18
 80053b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80053b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80053bc:	2b20      	cmp	r3, #32
 80053be:	dc49      	bgt.n	8005454 <UART_SetConfig+0x9d4>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	db7c      	blt.n	80054be <UART_SetConfig+0xa3e>
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d87a      	bhi.n	80054be <UART_SetConfig+0xa3e>
 80053c8:	a201      	add	r2, pc, #4	@ (adr r2, 80053d0 <UART_SetConfig+0x950>)
 80053ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ce:	bf00      	nop
 80053d0:	0800545b 	.word	0x0800545b
 80053d4:	08005463 	.word	0x08005463
 80053d8:	080054bf 	.word	0x080054bf
 80053dc:	080054bf 	.word	0x080054bf
 80053e0:	0800546b 	.word	0x0800546b
 80053e4:	080054bf 	.word	0x080054bf
 80053e8:	080054bf 	.word	0x080054bf
 80053ec:	080054bf 	.word	0x080054bf
 80053f0:	0800547b 	.word	0x0800547b
 80053f4:	080054bf 	.word	0x080054bf
 80053f8:	080054bf 	.word	0x080054bf
 80053fc:	080054bf 	.word	0x080054bf
 8005400:	080054bf 	.word	0x080054bf
 8005404:	080054bf 	.word	0x080054bf
 8005408:	080054bf 	.word	0x080054bf
 800540c:	080054bf 	.word	0x080054bf
 8005410:	0800548b 	.word	0x0800548b
 8005414:	080054bf 	.word	0x080054bf
 8005418:	080054bf 	.word	0x080054bf
 800541c:	080054bf 	.word	0x080054bf
 8005420:	080054bf 	.word	0x080054bf
 8005424:	080054bf 	.word	0x080054bf
 8005428:	080054bf 	.word	0x080054bf
 800542c:	080054bf 	.word	0x080054bf
 8005430:	080054bf 	.word	0x080054bf
 8005434:	080054bf 	.word	0x080054bf
 8005438:	080054bf 	.word	0x080054bf
 800543c:	080054bf 	.word	0x080054bf
 8005440:	080054bf 	.word	0x080054bf
 8005444:	080054bf 	.word	0x080054bf
 8005448:	080054bf 	.word	0x080054bf
 800544c:	080054bf 	.word	0x080054bf
 8005450:	080054b1 	.word	0x080054b1
 8005454:	2b40      	cmp	r3, #64	@ 0x40
 8005456:	d02e      	beq.n	80054b6 <UART_SetConfig+0xa36>
 8005458:	e031      	b.n	80054be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800545a:	f7fd f86d 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 800545e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005460:	e033      	b.n	80054ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005462:	f7fd f87f 	bl	8002564 <HAL_RCC_GetPCLK2Freq>
 8005466:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005468:	e02f      	b.n	80054ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800546a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe faae 	bl	80039d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005478:	e027      	b.n	80054ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800547a:	f107 0318 	add.w	r3, r7, #24
 800547e:	4618      	mov	r0, r3
 8005480:	f7fe fbfa 	bl	8003c78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005488:	e01f      	b.n	80054ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800548a:	4b2d      	ldr	r3, [pc, #180]	@ (8005540 <UART_SetConfig+0xac0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005496:	4b2a      	ldr	r3, [pc, #168]	@ (8005540 <UART_SetConfig+0xac0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	08db      	lsrs	r3, r3, #3
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	4a28      	ldr	r2, [pc, #160]	@ (8005544 <UART_SetConfig+0xac4>)
 80054a2:	fa22 f303 	lsr.w	r3, r2, r3
 80054a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054a8:	e00f      	b.n	80054ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80054aa:	4b26      	ldr	r3, [pc, #152]	@ (8005544 <UART_SetConfig+0xac4>)
 80054ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054ae:	e00c      	b.n	80054ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054b0:	4b25      	ldr	r3, [pc, #148]	@ (8005548 <UART_SetConfig+0xac8>)
 80054b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054b4:	e009      	b.n	80054ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054bc:	e005      	b.n	80054ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80054c8:	bf00      	nop
    }

    if (pclk != 0U)
 80054ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d021      	beq.n	8005514 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d4:	4a1d      	ldr	r2, [pc, #116]	@ (800554c <UART_SetConfig+0xacc>)
 80054d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054da:	461a      	mov	r2, r3
 80054dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054de:	fbb3 f2f2 	udiv	r2, r3, r2
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	085b      	lsrs	r3, r3, #1
 80054e8:	441a      	add	r2, r3
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f6:	2b0f      	cmp	r3, #15
 80054f8:	d909      	bls.n	800550e <UART_SetConfig+0xa8e>
 80054fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005500:	d205      	bcs.n	800550e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005504:	b29a      	uxth	r2, r3
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60da      	str	r2, [r3, #12]
 800550c:	e002      	b.n	8005514 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2201      	movs	r2, #1
 8005518:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2201      	movs	r2, #1
 8005520:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	2200      	movs	r2, #0
 8005528:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2200      	movs	r2, #0
 800552e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005530:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005534:	4618      	mov	r0, r3
 8005536:	3748      	adds	r7, #72	@ 0x48
 8005538:	46bd      	mov	sp, r7
 800553a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800553e:	bf00      	nop
 8005540:	58024400 	.word	0x58024400
 8005544:	03d09000 	.word	0x03d09000
 8005548:	003d0900 	.word	0x003d0900
 800554c:	08005c18 	.word	0x08005c18

08005550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01a      	beq.n	8005666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800564e:	d10a      	bne.n	8005666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	605a      	str	r2, [r3, #4]
  }
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b098      	sub	sp, #96	@ 0x60
 8005698:	af02      	add	r7, sp, #8
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056a4:	f7fb fbfc 	bl	8000ea0 <HAL_GetTick>
 80056a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d12f      	bne.n	8005718 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c0:	2200      	movs	r2, #0
 80056c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f88e 	bl	80057e8 <UART_WaitOnFlagUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d022      	beq.n	8005718 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e6      	bne.n	80056d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e063      	b.n	80057e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b04      	cmp	r3, #4
 8005724:	d149      	bne.n	80057ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005726:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800572e:	2200      	movs	r2, #0
 8005730:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f857 	bl	80057e8 <UART_WaitOnFlagUntilTimeout>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d03c      	beq.n	80057ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	623b      	str	r3, [r7, #32]
   return(result);
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005754:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800575e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005760:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005764:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800576c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e6      	bne.n	8005740 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3308      	adds	r3, #8
 8005778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	60fb      	str	r3, [r7, #12]
   return(result);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f023 0301 	bic.w	r3, r3, #1
 8005788:	64bb      	str	r3, [r7, #72]	@ 0x48
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3308      	adds	r3, #8
 8005790:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005792:	61fa      	str	r2, [r7, #28]
 8005794:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	69b9      	ldr	r1, [r7, #24]
 8005798:	69fa      	ldr	r2, [r7, #28]
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	617b      	str	r3, [r7, #20]
   return(result);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e5      	bne.n	8005772 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e012      	b.n	80057e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2220      	movs	r2, #32
 80057be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3758      	adds	r7, #88	@ 0x58
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	4613      	mov	r3, r2
 80057f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f8:	e04f      	b.n	800589a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005800:	d04b      	beq.n	800589a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005802:	f7fb fb4d 	bl	8000ea0 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	429a      	cmp	r2, r3
 8005810:	d302      	bcc.n	8005818 <UART_WaitOnFlagUntilTimeout+0x30>
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e04e      	b.n	80058ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	d037      	beq.n	800589a <UART_WaitOnFlagUntilTimeout+0xb2>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b80      	cmp	r3, #128	@ 0x80
 800582e:	d034      	beq.n	800589a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2b40      	cmp	r3, #64	@ 0x40
 8005834:	d031      	beq.n	800589a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b08      	cmp	r3, #8
 8005842:	d110      	bne.n	8005866 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2208      	movs	r2, #8
 800584a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 f839 	bl	80058c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2208      	movs	r2, #8
 8005856:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e029      	b.n	80058ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005874:	d111      	bne.n	800589a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800587e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f81f 	bl	80058c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e00f      	b.n	80058ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4013      	ands	r3, r2
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	bf0c      	ite	eq
 80058aa:	2301      	moveq	r3, #1
 80058ac:	2300      	movne	r3, #0
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	461a      	mov	r2, r3
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d0a0      	beq.n	80057fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b095      	sub	sp, #84	@ 0x54
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80058ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e6      	bne.n	80058cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3308      	adds	r3, #8
 8005904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	61fb      	str	r3, [r7, #28]
   return(result);
 800590e:	69fa      	ldr	r2, [r7, #28]
 8005910:	4b1e      	ldr	r3, [pc, #120]	@ (800598c <UART_EndRxTransfer+0xc8>)
 8005912:	4013      	ands	r3, r2
 8005914:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3308      	adds	r3, #8
 800591c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800591e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005920:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005922:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005926:	e841 2300 	strex	r3, r2, [r1]
 800592a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800592c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1e5      	bne.n	80058fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005936:	2b01      	cmp	r3, #1
 8005938:	d118      	bne.n	800596c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	e853 3f00 	ldrex	r3, [r3]
 8005946:	60bb      	str	r3, [r7, #8]
   return(result);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f023 0310 	bic.w	r3, r3, #16
 800594e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	461a      	mov	r2, r3
 8005956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595c:	6979      	ldr	r1, [r7, #20]
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	e841 2300 	strex	r3, r2, [r1]
 8005964:	613b      	str	r3, [r7, #16]
   return(result);
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e6      	bne.n	800593a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005980:	bf00      	nop
 8005982:	3754      	adds	r7, #84	@ 0x54
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	effffffe 	.word	0xeffffffe

08005990 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e027      	b.n	80059f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2224      	movs	r2, #36	@ 0x24
 80059b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0201 	bic.w	r2, r2, #1
 80059cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80059d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a16:	2302      	movs	r3, #2
 8005a18:	e02d      	b.n	8005a76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2224      	movs	r2, #36	@ 0x24
 8005a26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0201 	bic.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f850 	bl	8005afc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e02d      	b.n	8005af2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2224      	movs	r2, #36	@ 0x24
 8005aa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0201 	bic.w	r2, r2, #1
 8005abc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f812 	bl	8005afc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d108      	bne.n	8005b1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b1c:	e031      	b.n	8005b82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b1e:	2310      	movs	r3, #16
 8005b20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b22:	2310      	movs	r3, #16
 8005b24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	0e5b      	lsrs	r3, r3, #25
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	0f5b      	lsrs	r3, r3, #29
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b46:	7bbb      	ldrb	r3, [r7, #14]
 8005b48:	7b3a      	ldrb	r2, [r7, #12]
 8005b4a:	4911      	ldr	r1, [pc, #68]	@ (8005b90 <UARTEx_SetNbDataToProcess+0x94>)
 8005b4c:	5c8a      	ldrb	r2, [r1, r2]
 8005b4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b52:	7b3a      	ldrb	r2, [r7, #12]
 8005b54:	490f      	ldr	r1, [pc, #60]	@ (8005b94 <UARTEx_SetNbDataToProcess+0x98>)
 8005b56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b58:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
 8005b66:	7b7a      	ldrb	r2, [r7, #13]
 8005b68:	4909      	ldr	r1, [pc, #36]	@ (8005b90 <UARTEx_SetNbDataToProcess+0x94>)
 8005b6a:	5c8a      	ldrb	r2, [r1, r2]
 8005b6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b70:	7b7a      	ldrb	r2, [r7, #13]
 8005b72:	4908      	ldr	r1, [pc, #32]	@ (8005b94 <UARTEx_SetNbDataToProcess+0x98>)
 8005b74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b76:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005b82:	bf00      	nop
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	08005c30 	.word	0x08005c30
 8005b94:	08005c38 	.word	0x08005c38

08005b98 <memset>:
 8005b98:	4402      	add	r2, r0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d100      	bne.n	8005ba2 <memset+0xa>
 8005ba0:	4770      	bx	lr
 8005ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ba6:	e7f9      	b.n	8005b9c <memset+0x4>

08005ba8 <__libc_init_array>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	4d0d      	ldr	r5, [pc, #52]	@ (8005be0 <__libc_init_array+0x38>)
 8005bac:	4c0d      	ldr	r4, [pc, #52]	@ (8005be4 <__libc_init_array+0x3c>)
 8005bae:	1b64      	subs	r4, r4, r5
 8005bb0:	10a4      	asrs	r4, r4, #2
 8005bb2:	2600      	movs	r6, #0
 8005bb4:	42a6      	cmp	r6, r4
 8005bb6:	d109      	bne.n	8005bcc <__libc_init_array+0x24>
 8005bb8:	4d0b      	ldr	r5, [pc, #44]	@ (8005be8 <__libc_init_array+0x40>)
 8005bba:	4c0c      	ldr	r4, [pc, #48]	@ (8005bec <__libc_init_array+0x44>)
 8005bbc:	f000 f818 	bl	8005bf0 <_init>
 8005bc0:	1b64      	subs	r4, r4, r5
 8005bc2:	10a4      	asrs	r4, r4, #2
 8005bc4:	2600      	movs	r6, #0
 8005bc6:	42a6      	cmp	r6, r4
 8005bc8:	d105      	bne.n	8005bd6 <__libc_init_array+0x2e>
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd0:	4798      	blx	r3
 8005bd2:	3601      	adds	r6, #1
 8005bd4:	e7ee      	b.n	8005bb4 <__libc_init_array+0xc>
 8005bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bda:	4798      	blx	r3
 8005bdc:	3601      	adds	r6, #1
 8005bde:	e7f2      	b.n	8005bc6 <__libc_init_array+0x1e>
 8005be0:	08005c48 	.word	0x08005c48
 8005be4:	08005c48 	.word	0x08005c48
 8005be8:	08005c48 	.word	0x08005c48
 8005bec:	08005c4c 	.word	0x08005c4c

08005bf0 <_init>:
 8005bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf2:	bf00      	nop
 8005bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf6:	bc08      	pop	{r3}
 8005bf8:	469e      	mov	lr, r3
 8005bfa:	4770      	bx	lr

08005bfc <_fini>:
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	bf00      	nop
 8005c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c02:	bc08      	pop	{r3}
 8005c04:	469e      	mov	lr, r3
 8005c06:	4770      	bx	lr
