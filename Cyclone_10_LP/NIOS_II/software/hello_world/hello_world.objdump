
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000bf0 memsz 0x00000bf0 flags r-x
    LOAD off    0x00001c10 vaddr 0x00000c10 paddr 0x00000d00 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001df0 vaddr 0x00000df0 paddr 0x00000df0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001d00  2**0
                  CONTENTS
  2 .text         00000bd4  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000001c  00000bf4  00000bf4  00001bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00000c10  00000d00  00001c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00000df0  00000df0  00001df0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000e00  00000e00  00001d00  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002a8  00000000  00000000  00001d28  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000035c8  00000000  00000000  00001fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000012ce  00000000  00000000  00005598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000159f  00000000  00000000  00006866  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000394  00000000  00000000  00007e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f87  00000000  00000000  0000819c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000132a  00000000  00000000  00009123  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000a450  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000220  00000000  00000000  0000a460  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000b6e6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000b6e9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000b6f5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000b6f6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000b6f7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000b702  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000b70d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0000b718  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000033  00000000  00000000  0000b71f  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e23  00000000  00000000  0000b752  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00037ea1  00000000  00000000  00010575  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000bf4 l    d  .rodata	00000000 .rodata
00000c10 l    d  .rwdata	00000000 .rwdata
00000df0 l    d  .bss	00000000 .bss
00000e00 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000012c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00000c10 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000ac8 g     F .text	0000002c alt_main
00000d00 g       *ABS*	00000000 __flash_rwdata_start
000000e0 g     F .text	0000004c printf
00000af4 g     F .text	00000038 alt_putstr
00000bec g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000df0 g     O .bss	00000004 errno
00000df8 g     O .bss	00000004 alt_argv
00008cf0 g       *ABS*	00000000 _gp
000000a4 g     F .text	0000003c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00000904 g     F .text	00000064 .hidden __udivsi3
00000cf0 g     O .rwdata	00000004 _global_impure_ptr
00000e00 g       *ABS*	00000000 __bss_end
00000be4 g     F .text	00000004 alt_dcache_flush_all
00000d00 g       *ABS*	00000000 __ram_rwdata_end
00000b2c g     F .text	00000060 write
00000c10 g       *ABS*	00000000 __ram_rodata_end
00000cf8 g     O .rwdata	00000004 jtag_uart_0
00000968 g     F .text	00000058 .hidden __umodsi3
00000e00 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00000bb0 g     F .text	00000034 altera_avalon_jtag_uart_write
00000198 g     F .text	0000052c ___vfprintf_internal_r
00000020 g     F .text	0000003c _start
00000bac g     F .text	00000004 alt_sys_init
000009c0 g     F .text	00000028 .hidden __mulsi3
00000c10 g       *ABS*	00000000 __ram_rwdata_start
00000bf4 g       *ABS*	00000000 __ram_rodata_start
00000e00 g       *ABS*	00000000 __alt_stack_base
000006e0 g     F .text	000000b8 __sfvwrite_small_dev
00000df0 g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000048 main
00000df4 g     O .bss	00000004 alt_envp
00000cfc g     O .rwdata	00000004 alt_errno
0000080c g     F .text	00000084 .hidden __divsi3
00000bf4 g       *ABS*	00000000 __flash_rodata_start
00000b8c g     F .text	00000020 alt_irq_init
000007b4 g     F .text	00000058 _write_r
00000cf4 g     O .rwdata	00000004 _impure_ptr
00000dfc g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000d00 g       *ABS*	00000000 _edata
00000e00 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000890 g     F .text	00000074 .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000798 g     F .text	0000001c strlen
00000be8 g     F .text	00000004 alt_icache_flush_all
000006c4 g     F .text	0000001c __vfprintf_internal
000009e8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a33c14 	ori	gp,gp,36080
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10837c14 	ori	r2,r2,3568

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c38014 	ori	r3,r3,3584

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff7354>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00009e80 	call	9e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	0000ac80 	call	ac8 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7368>

0000005c <main>:
#include <time.h>

int main()
{ 
	int switch_datain = 0;
  alt_putstr("Hello from Nios II!\n");
  5c:	01000034 	movhi	r4,0
#include "altera_avalon_pio_regs.h"
#include <system.h>
#include <time.h>

int main()
{ 
  60:	defffd04 	addi	sp,sp,-12
	int switch_datain = 0;
  alt_putstr("Hello from Nios II!\n");
  64:	2102fd04 	addi	r4,r4,3060
#include "altera_avalon_pio_regs.h"
#include <system.h>
#include <time.h>

int main()
{ 
  68:	dc000015 	stw	r16,0(sp)
  6c:	dfc00215 	stw	ra,8(sp)
  70:	dc400115 	stw	r17,4(sp)
	int switch_datain = 0;
  74:	0021883a 	mov	r16,zero
  alt_putstr("Hello from Nios II!\n");
  78:	0000af40 	call	af4 <alt_putstr>

  /* Event loop never exits. */
  while (1){
	  //switch_datain = IORD_ALTERA_AVALON_PIO_DATA(base);
	  alt_putstr("Hello from Nios II!\n");
  7c:	01000034 	movhi	r4,0
  80:	2102fd04 	addi	r4,r4,3060
  84:	0000af40 	call	af4 <alt_putstr>
	  printf("%d\n",switch_datain++);
  88:	01000034 	movhi	r4,0
  8c:	800b883a 	mov	r5,r16
  90:	84400044 	addi	r17,r16,1
  94:	21030304 	addi	r4,r4,3084
  98:	00000e00 	call	e0 <printf>
  9c:	8821883a 	mov	r16,r17
  a0:	003ff606 	br	7c <_gp+0xffff738c>

000000a4 <_printf_r>:
  a4:	defffd04 	addi	sp,sp,-12
  a8:	dfc00015 	stw	ra,0(sp)
  ac:	d9800115 	stw	r6,4(sp)
  b0:	d9c00215 	stw	r7,8(sp)
  b4:	20c00217 	ldw	r3,8(r4)
  b8:	01800034 	movhi	r6,0
  bc:	3181b804 	addi	r6,r6,1760
  c0:	19800115 	stw	r6,4(r3)
  c4:	280d883a 	mov	r6,r5
  c8:	21400217 	ldw	r5,8(r4)
  cc:	d9c00104 	addi	r7,sp,4
  d0:	00001980 	call	198 <___vfprintf_internal_r>
  d4:	dfc00017 	ldw	ra,0(sp)
  d8:	dec00304 	addi	sp,sp,12
  dc:	f800283a 	ret

000000e0 <printf>:
  e0:	defffc04 	addi	sp,sp,-16
  e4:	dfc00015 	stw	ra,0(sp)
  e8:	d9400115 	stw	r5,4(sp)
  ec:	d9800215 	stw	r6,8(sp)
  f0:	d9c00315 	stw	r7,12(sp)
  f4:	00800034 	movhi	r2,0
  f8:	10833d04 	addi	r2,r2,3316
  fc:	10800017 	ldw	r2,0(r2)
 100:	01400034 	movhi	r5,0
 104:	2941b804 	addi	r5,r5,1760
 108:	10c00217 	ldw	r3,8(r2)
 10c:	d9800104 	addi	r6,sp,4
 110:	19400115 	stw	r5,4(r3)
 114:	200b883a 	mov	r5,r4
 118:	11000217 	ldw	r4,8(r2)
 11c:	00006c40 	call	6c4 <__vfprintf_internal>
 120:	dfc00017 	ldw	ra,0(sp)
 124:	dec00404 	addi	sp,sp,16
 128:	f800283a 	ret

0000012c <print_repeat>:
 12c:	defffb04 	addi	sp,sp,-20
 130:	dc800315 	stw	r18,12(sp)
 134:	dc400215 	stw	r17,8(sp)
 138:	dc000115 	stw	r16,4(sp)
 13c:	dfc00415 	stw	ra,16(sp)
 140:	2025883a 	mov	r18,r4
 144:	2823883a 	mov	r17,r5
 148:	d9800005 	stb	r6,0(sp)
 14c:	3821883a 	mov	r16,r7
 150:	04000a0e 	bge	zero,r16,17c <print_repeat+0x50>
 154:	88800117 	ldw	r2,4(r17)
 158:	01c00044 	movi	r7,1
 15c:	d80d883a 	mov	r6,sp
 160:	880b883a 	mov	r5,r17
 164:	9009883a 	mov	r4,r18
 168:	103ee83a 	callr	r2
 16c:	843fffc4 	addi	r16,r16,-1
 170:	103ff726 	beq	r2,zero,150 <_gp+0xffff7460>
 174:	00bfffc4 	movi	r2,-1
 178:	00000106 	br	180 <print_repeat+0x54>
 17c:	0005883a 	mov	r2,zero
 180:	dfc00417 	ldw	ra,16(sp)
 184:	dc800317 	ldw	r18,12(sp)
 188:	dc400217 	ldw	r17,8(sp)
 18c:	dc000117 	ldw	r16,4(sp)
 190:	dec00504 	addi	sp,sp,20
 194:	f800283a 	ret

00000198 <___vfprintf_internal_r>:
 198:	deffe504 	addi	sp,sp,-108
 19c:	d8c00804 	addi	r3,sp,32
 1a0:	ddc01815 	stw	r23,96(sp)
 1a4:	dd801715 	stw	r22,92(sp)
 1a8:	dd401615 	stw	r21,88(sp)
 1ac:	dd001515 	stw	r20,84(sp)
 1b0:	dcc01415 	stw	r19,80(sp)
 1b4:	dc801315 	stw	r18,76(sp)
 1b8:	dc401215 	stw	r17,72(sp)
 1bc:	dc001115 	stw	r16,68(sp)
 1c0:	dfc01a15 	stw	ra,104(sp)
 1c4:	df001915 	stw	fp,100(sp)
 1c8:	2029883a 	mov	r20,r4
 1cc:	2823883a 	mov	r17,r5
 1d0:	382d883a 	mov	r22,r7
 1d4:	d9800f15 	stw	r6,60(sp)
 1d8:	0021883a 	mov	r16,zero
 1dc:	d8000e15 	stw	zero,56(sp)
 1e0:	d8000a15 	stw	zero,40(sp)
 1e4:	002b883a 	mov	r21,zero
 1e8:	0027883a 	mov	r19,zero
 1ec:	0025883a 	mov	r18,zero
 1f0:	d8000c15 	stw	zero,48(sp)
 1f4:	d8000b15 	stw	zero,44(sp)
 1f8:	002f883a 	mov	r23,zero
 1fc:	d8c00915 	stw	r3,36(sp)
 200:	d8c00f17 	ldw	r3,60(sp)
 204:	19000003 	ldbu	r4,0(r3)
 208:	20803fcc 	andi	r2,r4,255
 20c:	1080201c 	xori	r2,r2,128
 210:	10bfe004 	addi	r2,r2,-128
 214:	10011e26 	beq	r2,zero,690 <___vfprintf_internal_r+0x4f8>
 218:	00c00044 	movi	r3,1
 21c:	b8c01426 	beq	r23,r3,270 <___vfprintf_internal_r+0xd8>
 220:	1dc00216 	blt	r3,r23,22c <___vfprintf_internal_r+0x94>
 224:	b8000626 	beq	r23,zero,240 <___vfprintf_internal_r+0xa8>
 228:	00011506 	br	680 <___vfprintf_internal_r+0x4e8>
 22c:	01400084 	movi	r5,2
 230:	b9401d26 	beq	r23,r5,2a8 <___vfprintf_internal_r+0x110>
 234:	014000c4 	movi	r5,3
 238:	b9402b26 	beq	r23,r5,2e8 <___vfprintf_internal_r+0x150>
 23c:	00011006 	br	680 <___vfprintf_internal_r+0x4e8>
 240:	01400944 	movi	r5,37
 244:	1140fc26 	beq	r2,r5,638 <___vfprintf_internal_r+0x4a0>
 248:	88800117 	ldw	r2,4(r17)
 24c:	d9000005 	stb	r4,0(sp)
 250:	01c00044 	movi	r7,1
 254:	d80d883a 	mov	r6,sp
 258:	880b883a 	mov	r5,r17
 25c:	a009883a 	mov	r4,r20
 260:	103ee83a 	callr	r2
 264:	1000d81e 	bne	r2,zero,5c8 <___vfprintf_internal_r+0x430>
 268:	84000044 	addi	r16,r16,1
 26c:	00010406 	br	680 <___vfprintf_internal_r+0x4e8>
 270:	01400c04 	movi	r5,48
 274:	1140fa26 	beq	r2,r5,660 <___vfprintf_internal_r+0x4c8>
 278:	01400944 	movi	r5,37
 27c:	11400a1e 	bne	r2,r5,2a8 <___vfprintf_internal_r+0x110>
 280:	d8800005 	stb	r2,0(sp)
 284:	88800117 	ldw	r2,4(r17)
 288:	b80f883a 	mov	r7,r23
 28c:	d80d883a 	mov	r6,sp
 290:	880b883a 	mov	r5,r17
 294:	a009883a 	mov	r4,r20
 298:	103ee83a 	callr	r2
 29c:	1000ca1e 	bne	r2,zero,5c8 <___vfprintf_internal_r+0x430>
 2a0:	84000044 	addi	r16,r16,1
 2a4:	0000f506 	br	67c <___vfprintf_internal_r+0x4e4>
 2a8:	25fff404 	addi	r23,r4,-48
 2ac:	bdc03fcc 	andi	r23,r23,255
 2b0:	00c00244 	movi	r3,9
 2b4:	1dc00936 	bltu	r3,r23,2dc <___vfprintf_internal_r+0x144>
 2b8:	00bfffc4 	movi	r2,-1
 2bc:	90800426 	beq	r18,r2,2d0 <___vfprintf_internal_r+0x138>
 2c0:	01400284 	movi	r5,10
 2c4:	9009883a 	mov	r4,r18
 2c8:	00009c00 	call	9c0 <__mulsi3>
 2cc:	00000106 	br	2d4 <___vfprintf_internal_r+0x13c>
 2d0:	0005883a 	mov	r2,zero
 2d4:	b8a5883a 	add	r18,r23,r2
 2d8:	0000e206 	br	664 <___vfprintf_internal_r+0x4cc>
 2dc:	01400b84 	movi	r5,46
 2e0:	1140e426 	beq	r2,r5,674 <___vfprintf_internal_r+0x4dc>
 2e4:	05c00084 	movi	r23,2
 2e8:	213ff404 	addi	r4,r4,-48
 2ec:	27003fcc 	andi	fp,r4,255
 2f0:	00c00244 	movi	r3,9
 2f4:	1f000936 	bltu	r3,fp,31c <___vfprintf_internal_r+0x184>
 2f8:	00bfffc4 	movi	r2,-1
 2fc:	98800426 	beq	r19,r2,310 <___vfprintf_internal_r+0x178>
 300:	01400284 	movi	r5,10
 304:	9809883a 	mov	r4,r19
 308:	00009c00 	call	9c0 <__mulsi3>
 30c:	00000106 	br	314 <___vfprintf_internal_r+0x17c>
 310:	0005883a 	mov	r2,zero
 314:	e0a7883a 	add	r19,fp,r2
 318:	0000d906 	br	680 <___vfprintf_internal_r+0x4e8>
 31c:	00c01b04 	movi	r3,108
 320:	10c0d226 	beq	r2,r3,66c <___vfprintf_internal_r+0x4d4>
 324:	013fffc4 	movi	r4,-1
 328:	99000226 	beq	r19,r4,334 <___vfprintf_internal_r+0x19c>
 32c:	d8000b15 	stw	zero,44(sp)
 330:	00000106 	br	338 <___vfprintf_internal_r+0x1a0>
 334:	04c00044 	movi	r19,1
 338:	01001a44 	movi	r4,105
 33c:	11001626 	beq	r2,r4,398 <___vfprintf_internal_r+0x200>
 340:	20800916 	blt	r4,r2,368 <___vfprintf_internal_r+0x1d0>
 344:	010018c4 	movi	r4,99
 348:	11008826 	beq	r2,r4,56c <___vfprintf_internal_r+0x3d4>
 34c:	01001904 	movi	r4,100
 350:	11001126 	beq	r2,r4,398 <___vfprintf_internal_r+0x200>
 354:	01001604 	movi	r4,88
 358:	1100c81e 	bne	r2,r4,67c <___vfprintf_internal_r+0x4e4>
 35c:	00c00044 	movi	r3,1
 360:	d8c00e15 	stw	r3,56(sp)
 364:	00001506 	br	3bc <___vfprintf_internal_r+0x224>
 368:	01001cc4 	movi	r4,115
 36c:	11009826 	beq	r2,r4,5d0 <___vfprintf_internal_r+0x438>
 370:	20800416 	blt	r4,r2,384 <___vfprintf_internal_r+0x1ec>
 374:	01001bc4 	movi	r4,111
 378:	1100c01e 	bne	r2,r4,67c <___vfprintf_internal_r+0x4e4>
 37c:	05400204 	movi	r21,8
 380:	00000f06 	br	3c0 <___vfprintf_internal_r+0x228>
 384:	01001d44 	movi	r4,117
 388:	11000d26 	beq	r2,r4,3c0 <___vfprintf_internal_r+0x228>
 38c:	01001e04 	movi	r4,120
 390:	11000a26 	beq	r2,r4,3bc <___vfprintf_internal_r+0x224>
 394:	0000b906 	br	67c <___vfprintf_internal_r+0x4e4>
 398:	d8c00a17 	ldw	r3,40(sp)
 39c:	b7000104 	addi	fp,r22,4
 3a0:	18000726 	beq	r3,zero,3c0 <___vfprintf_internal_r+0x228>
 3a4:	df000d15 	stw	fp,52(sp)
 3a8:	b5c00017 	ldw	r23,0(r22)
 3ac:	b800080e 	bge	r23,zero,3d0 <___vfprintf_internal_r+0x238>
 3b0:	05efc83a 	sub	r23,zero,r23
 3b4:	02400044 	movi	r9,1
 3b8:	00000606 	br	3d4 <___vfprintf_internal_r+0x23c>
 3bc:	05400404 	movi	r21,16
 3c0:	b0c00104 	addi	r3,r22,4
 3c4:	d8c00d15 	stw	r3,52(sp)
 3c8:	b5c00017 	ldw	r23,0(r22)
 3cc:	d8000a15 	stw	zero,40(sp)
 3d0:	0013883a 	mov	r9,zero
 3d4:	d839883a 	mov	fp,sp
 3d8:	b8001726 	beq	r23,zero,438 <___vfprintf_internal_r+0x2a0>
 3dc:	a80b883a 	mov	r5,r21
 3e0:	b809883a 	mov	r4,r23
 3e4:	da401015 	stw	r9,64(sp)
 3e8:	00009040 	call	904 <__udivsi3>
 3ec:	a80b883a 	mov	r5,r21
 3f0:	1009883a 	mov	r4,r2
 3f4:	102d883a 	mov	r22,r2
 3f8:	00009c00 	call	9c0 <__mulsi3>
 3fc:	b885c83a 	sub	r2,r23,r2
 400:	00c00244 	movi	r3,9
 404:	da401017 	ldw	r9,64(sp)
 408:	18800216 	blt	r3,r2,414 <___vfprintf_internal_r+0x27c>
 40c:	10800c04 	addi	r2,r2,48
 410:	00000506 	br	428 <___vfprintf_internal_r+0x290>
 414:	d8c00e17 	ldw	r3,56(sp)
 418:	18000226 	beq	r3,zero,424 <___vfprintf_internal_r+0x28c>
 41c:	10800dc4 	addi	r2,r2,55
 420:	00000106 	br	428 <___vfprintf_internal_r+0x290>
 424:	108015c4 	addi	r2,r2,87
 428:	e0800005 	stb	r2,0(fp)
 42c:	b02f883a 	mov	r23,r22
 430:	e7000044 	addi	fp,fp,1
 434:	003fe806 	br	3d8 <_gp+0xffff76e8>
 438:	e6efc83a 	sub	r23,fp,sp
 43c:	9dc5c83a 	sub	r2,r19,r23
 440:	0080090e 	bge	zero,r2,468 <___vfprintf_internal_r+0x2d0>
 444:	e085883a 	add	r2,fp,r2
 448:	01400c04 	movi	r5,48
 44c:	d8c00917 	ldw	r3,36(sp)
 450:	e009883a 	mov	r4,fp
 454:	e0c0032e 	bgeu	fp,r3,464 <___vfprintf_internal_r+0x2cc>
 458:	e7000044 	addi	fp,fp,1
 45c:	21400005 	stb	r5,0(r4)
 460:	e0bffa1e 	bne	fp,r2,44c <_gp+0xffff775c>
 464:	e6efc83a 	sub	r23,fp,sp
 468:	d8c00b17 	ldw	r3,44(sp)
 46c:	4dd1883a 	add	r8,r9,r23
 470:	922dc83a 	sub	r22,r18,r8
 474:	18001626 	beq	r3,zero,4d0 <___vfprintf_internal_r+0x338>
 478:	48000a26 	beq	r9,zero,4a4 <___vfprintf_internal_r+0x30c>
 47c:	00800b44 	movi	r2,45
 480:	d8800805 	stb	r2,32(sp)
 484:	88800117 	ldw	r2,4(r17)
 488:	01c00044 	movi	r7,1
 48c:	d9800804 	addi	r6,sp,32
 490:	880b883a 	mov	r5,r17
 494:	a009883a 	mov	r4,r20
 498:	103ee83a 	callr	r2
 49c:	10004a1e 	bne	r2,zero,5c8 <___vfprintf_internal_r+0x430>
 4a0:	84000044 	addi	r16,r16,1
 4a4:	0580070e 	bge	zero,r22,4c4 <___vfprintf_internal_r+0x32c>
 4a8:	b00f883a 	mov	r7,r22
 4ac:	01800c04 	movi	r6,48
 4b0:	880b883a 	mov	r5,r17
 4b4:	a009883a 	mov	r4,r20
 4b8:	000012c0 	call	12c <print_repeat>
 4bc:	1000421e 	bne	r2,zero,5c8 <___vfprintf_internal_r+0x430>
 4c0:	85a1883a 	add	r16,r16,r22
 4c4:	e02d883a 	mov	r22,fp
 4c8:	bf2fc83a 	sub	r23,r23,fp
 4cc:	00002006 	br	550 <___vfprintf_internal_r+0x3b8>
 4d0:	0580090e 	bge	zero,r22,4f8 <___vfprintf_internal_r+0x360>
 4d4:	b00f883a 	mov	r7,r22
 4d8:	01800804 	movi	r6,32
 4dc:	880b883a 	mov	r5,r17
 4e0:	a009883a 	mov	r4,r20
 4e4:	da401015 	stw	r9,64(sp)
 4e8:	000012c0 	call	12c <print_repeat>
 4ec:	da401017 	ldw	r9,64(sp)
 4f0:	1000351e 	bne	r2,zero,5c8 <___vfprintf_internal_r+0x430>
 4f4:	85a1883a 	add	r16,r16,r22
 4f8:	483ff226 	beq	r9,zero,4c4 <_gp+0xffff77d4>
 4fc:	00800b44 	movi	r2,45
 500:	d8800805 	stb	r2,32(sp)
 504:	88800117 	ldw	r2,4(r17)
 508:	01c00044 	movi	r7,1
 50c:	d9800804 	addi	r6,sp,32
 510:	880b883a 	mov	r5,r17
 514:	a009883a 	mov	r4,r20
 518:	103ee83a 	callr	r2
 51c:	10002a1e 	bne	r2,zero,5c8 <___vfprintf_internal_r+0x430>
 520:	84000044 	addi	r16,r16,1
 524:	003fe706 	br	4c4 <_gp+0xffff77d4>
 528:	b5bfffc4 	addi	r22,r22,-1
 52c:	b0800003 	ldbu	r2,0(r22)
 530:	01c00044 	movi	r7,1
 534:	d9800804 	addi	r6,sp,32
 538:	d8800805 	stb	r2,32(sp)
 53c:	88800117 	ldw	r2,4(r17)
 540:	880b883a 	mov	r5,r17
 544:	a009883a 	mov	r4,r20
 548:	103ee83a 	callr	r2
 54c:	10001e1e 	bne	r2,zero,5c8 <___vfprintf_internal_r+0x430>
 550:	8585c83a 	sub	r2,r16,r22
 554:	b5c9883a 	add	r4,r22,r23
 558:	e085883a 	add	r2,fp,r2
 55c:	013ff216 	blt	zero,r4,528 <_gp+0xffff7838>
 560:	1021883a 	mov	r16,r2
 564:	dd800d17 	ldw	r22,52(sp)
 568:	00004406 	br	67c <___vfprintf_internal_r+0x4e4>
 56c:	00800044 	movi	r2,1
 570:	1480080e 	bge	r2,r18,594 <___vfprintf_internal_r+0x3fc>
 574:	95ffffc4 	addi	r23,r18,-1
 578:	b80f883a 	mov	r7,r23
 57c:	01800804 	movi	r6,32
 580:	880b883a 	mov	r5,r17
 584:	a009883a 	mov	r4,r20
 588:	000012c0 	call	12c <print_repeat>
 58c:	10000e1e 	bne	r2,zero,5c8 <___vfprintf_internal_r+0x430>
 590:	85e1883a 	add	r16,r16,r23
 594:	b0800017 	ldw	r2,0(r22)
 598:	01c00044 	movi	r7,1
 59c:	d80d883a 	mov	r6,sp
 5a0:	d8800005 	stb	r2,0(sp)
 5a4:	88800117 	ldw	r2,4(r17)
 5a8:	880b883a 	mov	r5,r17
 5ac:	a009883a 	mov	r4,r20
 5b0:	b5c00104 	addi	r23,r22,4
 5b4:	103ee83a 	callr	r2
 5b8:	1000031e 	bne	r2,zero,5c8 <___vfprintf_internal_r+0x430>
 5bc:	84000044 	addi	r16,r16,1
 5c0:	b82d883a 	mov	r22,r23
 5c4:	00002d06 	br	67c <___vfprintf_internal_r+0x4e4>
 5c8:	00bfffc4 	movi	r2,-1
 5cc:	00003106 	br	694 <___vfprintf_internal_r+0x4fc>
 5d0:	b5c00017 	ldw	r23,0(r22)
 5d4:	b7000104 	addi	fp,r22,4
 5d8:	b809883a 	mov	r4,r23
 5dc:	00007980 	call	798 <strlen>
 5e0:	9091c83a 	sub	r8,r18,r2
 5e4:	102d883a 	mov	r22,r2
 5e8:	0200090e 	bge	zero,r8,610 <___vfprintf_internal_r+0x478>
 5ec:	400f883a 	mov	r7,r8
 5f0:	01800804 	movi	r6,32
 5f4:	880b883a 	mov	r5,r17
 5f8:	a009883a 	mov	r4,r20
 5fc:	da001015 	stw	r8,64(sp)
 600:	000012c0 	call	12c <print_repeat>
 604:	da001017 	ldw	r8,64(sp)
 608:	103fef1e 	bne	r2,zero,5c8 <_gp+0xffff78d8>
 60c:	8221883a 	add	r16,r16,r8
 610:	88800117 	ldw	r2,4(r17)
 614:	b00f883a 	mov	r7,r22
 618:	b80d883a 	mov	r6,r23
 61c:	880b883a 	mov	r5,r17
 620:	a009883a 	mov	r4,r20
 624:	103ee83a 	callr	r2
 628:	103fe71e 	bne	r2,zero,5c8 <_gp+0xffff78d8>
 62c:	85a1883a 	add	r16,r16,r22
 630:	e02d883a 	mov	r22,fp
 634:	00001106 	br	67c <___vfprintf_internal_r+0x4e4>
 638:	00c00044 	movi	r3,1
 63c:	04ffffc4 	movi	r19,-1
 640:	d8000e15 	stw	zero,56(sp)
 644:	d8c00a15 	stw	r3,40(sp)
 648:	05400284 	movi	r21,10
 64c:	9825883a 	mov	r18,r19
 650:	d8000c15 	stw	zero,48(sp)
 654:	d8000b15 	stw	zero,44(sp)
 658:	182f883a 	mov	r23,r3
 65c:	00000806 	br	680 <___vfprintf_internal_r+0x4e8>
 660:	ddc00b15 	stw	r23,44(sp)
 664:	05c00084 	movi	r23,2
 668:	00000506 	br	680 <___vfprintf_internal_r+0x4e8>
 66c:	00c00044 	movi	r3,1
 670:	d8c00c15 	stw	r3,48(sp)
 674:	05c000c4 	movi	r23,3
 678:	00000106 	br	680 <___vfprintf_internal_r+0x4e8>
 67c:	002f883a 	mov	r23,zero
 680:	d8c00f17 	ldw	r3,60(sp)
 684:	18c00044 	addi	r3,r3,1
 688:	d8c00f15 	stw	r3,60(sp)
 68c:	003edc06 	br	200 <_gp+0xffff7510>
 690:	8005883a 	mov	r2,r16
 694:	dfc01a17 	ldw	ra,104(sp)
 698:	df001917 	ldw	fp,100(sp)
 69c:	ddc01817 	ldw	r23,96(sp)
 6a0:	dd801717 	ldw	r22,92(sp)
 6a4:	dd401617 	ldw	r21,88(sp)
 6a8:	dd001517 	ldw	r20,84(sp)
 6ac:	dcc01417 	ldw	r19,80(sp)
 6b0:	dc801317 	ldw	r18,76(sp)
 6b4:	dc401217 	ldw	r17,72(sp)
 6b8:	dc001117 	ldw	r16,68(sp)
 6bc:	dec01b04 	addi	sp,sp,108
 6c0:	f800283a 	ret

000006c4 <__vfprintf_internal>:
 6c4:	00800034 	movhi	r2,0
 6c8:	10833d04 	addi	r2,r2,3316
 6cc:	300f883a 	mov	r7,r6
 6d0:	280d883a 	mov	r6,r5
 6d4:	200b883a 	mov	r5,r4
 6d8:	11000017 	ldw	r4,0(r2)
 6dc:	00001981 	jmpi	198 <___vfprintf_internal_r>

000006e0 <__sfvwrite_small_dev>:
 6e0:	2880000b 	ldhu	r2,0(r5)
 6e4:	1080020c 	andi	r2,r2,8
 6e8:	10002126 	beq	r2,zero,770 <__sfvwrite_small_dev+0x90>
 6ec:	2880008f 	ldh	r2,2(r5)
 6f0:	defffa04 	addi	sp,sp,-24
 6f4:	dc000015 	stw	r16,0(sp)
 6f8:	dfc00515 	stw	ra,20(sp)
 6fc:	dd000415 	stw	r20,16(sp)
 700:	dcc00315 	stw	r19,12(sp)
 704:	dc800215 	stw	r18,8(sp)
 708:	dc400115 	stw	r17,4(sp)
 70c:	2821883a 	mov	r16,r5
 710:	10001216 	blt	r2,zero,75c <__sfvwrite_small_dev+0x7c>
 714:	2027883a 	mov	r19,r4
 718:	3025883a 	mov	r18,r6
 71c:	3823883a 	mov	r17,r7
 720:	05010004 	movi	r20,1024
 724:	04400b0e 	bge	zero,r17,754 <__sfvwrite_small_dev+0x74>
 728:	880f883a 	mov	r7,r17
 72c:	a440010e 	bge	r20,r17,734 <__sfvwrite_small_dev+0x54>
 730:	01c10004 	movi	r7,1024
 734:	8140008f 	ldh	r5,2(r16)
 738:	900d883a 	mov	r6,r18
 73c:	9809883a 	mov	r4,r19
 740:	00007b40 	call	7b4 <_write_r>
 744:	0080050e 	bge	zero,r2,75c <__sfvwrite_small_dev+0x7c>
 748:	88a3c83a 	sub	r17,r17,r2
 74c:	90a5883a 	add	r18,r18,r2
 750:	003ff406 	br	724 <_gp+0xffff7a34>
 754:	0005883a 	mov	r2,zero
 758:	00000706 	br	778 <__sfvwrite_small_dev+0x98>
 75c:	8080000b 	ldhu	r2,0(r16)
 760:	10801014 	ori	r2,r2,64
 764:	8080000d 	sth	r2,0(r16)
 768:	00bfffc4 	movi	r2,-1
 76c:	00000206 	br	778 <__sfvwrite_small_dev+0x98>
 770:	00bfffc4 	movi	r2,-1
 774:	f800283a 	ret
 778:	dfc00517 	ldw	ra,20(sp)
 77c:	dd000417 	ldw	r20,16(sp)
 780:	dcc00317 	ldw	r19,12(sp)
 784:	dc800217 	ldw	r18,8(sp)
 788:	dc400117 	ldw	r17,4(sp)
 78c:	dc000017 	ldw	r16,0(sp)
 790:	dec00604 	addi	sp,sp,24
 794:	f800283a 	ret

00000798 <strlen>:
 798:	2005883a 	mov	r2,r4
 79c:	10c00007 	ldb	r3,0(r2)
 7a0:	18000226 	beq	r3,zero,7ac <strlen+0x14>
 7a4:	10800044 	addi	r2,r2,1
 7a8:	003ffc06 	br	79c <_gp+0xffff7aac>
 7ac:	1105c83a 	sub	r2,r2,r4
 7b0:	f800283a 	ret

000007b4 <_write_r>:
 7b4:	defffd04 	addi	sp,sp,-12
 7b8:	dc000015 	stw	r16,0(sp)
 7bc:	04000034 	movhi	r16,0
 7c0:	dc400115 	stw	r17,4(sp)
 7c4:	84037c04 	addi	r16,r16,3568
 7c8:	2023883a 	mov	r17,r4
 7cc:	2809883a 	mov	r4,r5
 7d0:	300b883a 	mov	r5,r6
 7d4:	380d883a 	mov	r6,r7
 7d8:	dfc00215 	stw	ra,8(sp)
 7dc:	80000015 	stw	zero,0(r16)
 7e0:	0000b2c0 	call	b2c <write>
 7e4:	00ffffc4 	movi	r3,-1
 7e8:	10c0031e 	bne	r2,r3,7f8 <_write_r+0x44>
 7ec:	80c00017 	ldw	r3,0(r16)
 7f0:	18000126 	beq	r3,zero,7f8 <_write_r+0x44>
 7f4:	88c00015 	stw	r3,0(r17)
 7f8:	dfc00217 	ldw	ra,8(sp)
 7fc:	dc400117 	ldw	r17,4(sp)
 800:	dc000017 	ldw	r16,0(sp)
 804:	dec00304 	addi	sp,sp,12
 808:	f800283a 	ret

0000080c <__divsi3>:
 80c:	20001b16 	blt	r4,zero,87c <__divsi3+0x70>
 810:	000f883a 	mov	r7,zero
 814:	28001616 	blt	r5,zero,870 <__divsi3+0x64>
 818:	200d883a 	mov	r6,r4
 81c:	29001a2e 	bgeu	r5,r4,888 <__divsi3+0x7c>
 820:	00800804 	movi	r2,32
 824:	00c00044 	movi	r3,1
 828:	00000106 	br	830 <__divsi3+0x24>
 82c:	10000d26 	beq	r2,zero,864 <__divsi3+0x58>
 830:	294b883a 	add	r5,r5,r5
 834:	10bfffc4 	addi	r2,r2,-1
 838:	18c7883a 	add	r3,r3,r3
 83c:	293ffb36 	bltu	r5,r4,82c <_gp+0xffff7b3c>
 840:	0005883a 	mov	r2,zero
 844:	18000726 	beq	r3,zero,864 <__divsi3+0x58>
 848:	0005883a 	mov	r2,zero
 84c:	31400236 	bltu	r6,r5,858 <__divsi3+0x4c>
 850:	314dc83a 	sub	r6,r6,r5
 854:	10c4b03a 	or	r2,r2,r3
 858:	1806d07a 	srli	r3,r3,1
 85c:	280ad07a 	srli	r5,r5,1
 860:	183ffa1e 	bne	r3,zero,84c <_gp+0xffff7b5c>
 864:	38000126 	beq	r7,zero,86c <__divsi3+0x60>
 868:	0085c83a 	sub	r2,zero,r2
 86c:	f800283a 	ret
 870:	014bc83a 	sub	r5,zero,r5
 874:	39c0005c 	xori	r7,r7,1
 878:	003fe706 	br	818 <_gp+0xffff7b28>
 87c:	0109c83a 	sub	r4,zero,r4
 880:	01c00044 	movi	r7,1
 884:	003fe306 	br	814 <_gp+0xffff7b24>
 888:	00c00044 	movi	r3,1
 88c:	003fee06 	br	848 <_gp+0xffff7b58>

00000890 <__modsi3>:
 890:	20001716 	blt	r4,zero,8f0 <__modsi3+0x60>
 894:	000f883a 	mov	r7,zero
 898:	2005883a 	mov	r2,r4
 89c:	28001216 	blt	r5,zero,8e8 <__modsi3+0x58>
 8a0:	2900162e 	bgeu	r5,r4,8fc <__modsi3+0x6c>
 8a4:	01800804 	movi	r6,32
 8a8:	00c00044 	movi	r3,1
 8ac:	00000106 	br	8b4 <__modsi3+0x24>
 8b0:	30000a26 	beq	r6,zero,8dc <__modsi3+0x4c>
 8b4:	294b883a 	add	r5,r5,r5
 8b8:	31bfffc4 	addi	r6,r6,-1
 8bc:	18c7883a 	add	r3,r3,r3
 8c0:	293ffb36 	bltu	r5,r4,8b0 <_gp+0xffff7bc0>
 8c4:	18000526 	beq	r3,zero,8dc <__modsi3+0x4c>
 8c8:	1806d07a 	srli	r3,r3,1
 8cc:	11400136 	bltu	r2,r5,8d4 <__modsi3+0x44>
 8d0:	1145c83a 	sub	r2,r2,r5
 8d4:	280ad07a 	srli	r5,r5,1
 8d8:	183ffb1e 	bne	r3,zero,8c8 <_gp+0xffff7bd8>
 8dc:	38000126 	beq	r7,zero,8e4 <__modsi3+0x54>
 8e0:	0085c83a 	sub	r2,zero,r2
 8e4:	f800283a 	ret
 8e8:	014bc83a 	sub	r5,zero,r5
 8ec:	003fec06 	br	8a0 <_gp+0xffff7bb0>
 8f0:	0109c83a 	sub	r4,zero,r4
 8f4:	01c00044 	movi	r7,1
 8f8:	003fe706 	br	898 <_gp+0xffff7ba8>
 8fc:	00c00044 	movi	r3,1
 900:	003ff106 	br	8c8 <_gp+0xffff7bd8>

00000904 <__udivsi3>:
 904:	200d883a 	mov	r6,r4
 908:	2900152e 	bgeu	r5,r4,960 <__udivsi3+0x5c>
 90c:	28001416 	blt	r5,zero,960 <__udivsi3+0x5c>
 910:	00800804 	movi	r2,32
 914:	00c00044 	movi	r3,1
 918:	00000206 	br	924 <__udivsi3+0x20>
 91c:	10000e26 	beq	r2,zero,958 <__udivsi3+0x54>
 920:	28000516 	blt	r5,zero,938 <__udivsi3+0x34>
 924:	294b883a 	add	r5,r5,r5
 928:	10bfffc4 	addi	r2,r2,-1
 92c:	18c7883a 	add	r3,r3,r3
 930:	293ffa36 	bltu	r5,r4,91c <_gp+0xffff7c2c>
 934:	18000826 	beq	r3,zero,958 <__udivsi3+0x54>
 938:	0005883a 	mov	r2,zero
 93c:	31400236 	bltu	r6,r5,948 <__udivsi3+0x44>
 940:	314dc83a 	sub	r6,r6,r5
 944:	10c4b03a 	or	r2,r2,r3
 948:	1806d07a 	srli	r3,r3,1
 94c:	280ad07a 	srli	r5,r5,1
 950:	183ffa1e 	bne	r3,zero,93c <_gp+0xffff7c4c>
 954:	f800283a 	ret
 958:	0005883a 	mov	r2,zero
 95c:	f800283a 	ret
 960:	00c00044 	movi	r3,1
 964:	003ff406 	br	938 <_gp+0xffff7c48>

00000968 <__umodsi3>:
 968:	2005883a 	mov	r2,r4
 96c:	2900122e 	bgeu	r5,r4,9b8 <__umodsi3+0x50>
 970:	28001116 	blt	r5,zero,9b8 <__umodsi3+0x50>
 974:	01800804 	movi	r6,32
 978:	00c00044 	movi	r3,1
 97c:	00000206 	br	988 <__umodsi3+0x20>
 980:	30000c26 	beq	r6,zero,9b4 <__umodsi3+0x4c>
 984:	28000516 	blt	r5,zero,99c <__umodsi3+0x34>
 988:	294b883a 	add	r5,r5,r5
 98c:	31bfffc4 	addi	r6,r6,-1
 990:	18c7883a 	add	r3,r3,r3
 994:	293ffa36 	bltu	r5,r4,980 <_gp+0xffff7c90>
 998:	18000626 	beq	r3,zero,9b4 <__umodsi3+0x4c>
 99c:	1806d07a 	srli	r3,r3,1
 9a0:	11400136 	bltu	r2,r5,9a8 <__umodsi3+0x40>
 9a4:	1145c83a 	sub	r2,r2,r5
 9a8:	280ad07a 	srli	r5,r5,1
 9ac:	183ffb1e 	bne	r3,zero,99c <_gp+0xffff7cac>
 9b0:	f800283a 	ret
 9b4:	f800283a 	ret
 9b8:	00c00044 	movi	r3,1
 9bc:	003ff706 	br	99c <_gp+0xffff7cac>

000009c0 <__mulsi3>:
 9c0:	0005883a 	mov	r2,zero
 9c4:	20000726 	beq	r4,zero,9e4 <__mulsi3+0x24>
 9c8:	20c0004c 	andi	r3,r4,1
 9cc:	2008d07a 	srli	r4,r4,1
 9d0:	18000126 	beq	r3,zero,9d8 <__mulsi3+0x18>
 9d4:	1145883a 	add	r2,r2,r5
 9d8:	294b883a 	add	r5,r5,r5
 9dc:	203ffa1e 	bne	r4,zero,9c8 <_gp+0xffff7cd8>
 9e0:	f800283a 	ret
 9e4:	f800283a 	ret

000009e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 9e8:	deffff04 	addi	sp,sp,-4
 9ec:	01000034 	movhi	r4,0
 9f0:	01400034 	movhi	r5,0
 9f4:	dfc00015 	stw	ra,0(sp)
 9f8:	21030404 	addi	r4,r4,3088
 9fc:	29434004 	addi	r5,r5,3328

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 a00:	2140061e 	bne	r4,r5,a1c <alt_load+0x34>
 a04:	01000034 	movhi	r4,0
 a08:	01400034 	movhi	r5,0
 a0c:	21000804 	addi	r4,r4,32
 a10:	29400804 	addi	r5,r5,32
 a14:	2140121e 	bne	r4,r5,a60 <alt_load+0x78>
 a18:	00000b06 	br	a48 <alt_load+0x60>
 a1c:	00c00034 	movhi	r3,0
 a20:	18c34004 	addi	r3,r3,3328
 a24:	1907c83a 	sub	r3,r3,r4
 a28:	0005883a 	mov	r2,zero
  {
    while( to != end )
 a2c:	10fff526 	beq	r2,r3,a04 <_gp+0xffff7d14>
    {
      *to++ = *from++;
 a30:	114f883a 	add	r7,r2,r5
 a34:	39c00017 	ldw	r7,0(r7)
 a38:	110d883a 	add	r6,r2,r4
 a3c:	10800104 	addi	r2,r2,4
 a40:	31c00015 	stw	r7,0(r6)
 a44:	003ff906 	br	a2c <_gp+0xffff7d3c>
 a48:	01000034 	movhi	r4,0
 a4c:	01400034 	movhi	r5,0
 a50:	2102fd04 	addi	r4,r4,3060
 a54:	2942fd04 	addi	r5,r5,3060

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 a58:	2140101e 	bne	r4,r5,a9c <alt_load+0xb4>
 a5c:	00000b06 	br	a8c <alt_load+0xa4>
 a60:	00c00034 	movhi	r3,0
 a64:	18c00804 	addi	r3,r3,32
 a68:	1907c83a 	sub	r3,r3,r4
 a6c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 a70:	10fff526 	beq	r2,r3,a48 <_gp+0xffff7d58>
    {
      *to++ = *from++;
 a74:	114f883a 	add	r7,r2,r5
 a78:	39c00017 	ldw	r7,0(r7)
 a7c:	110d883a 	add	r6,r2,r4
 a80:	10800104 	addi	r2,r2,4
 a84:	31c00015 	stw	r7,0(r6)
 a88:	003ff906 	br	a70 <_gp+0xffff7d80>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 a8c:	0000be40 	call	be4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 a90:	dfc00017 	ldw	ra,0(sp)
 a94:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 a98:	0000be81 	jmpi	be8 <alt_icache_flush_all>
 a9c:	00c00034 	movhi	r3,0
 aa0:	18c30404 	addi	r3,r3,3088
 aa4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 aa8:	0005883a 	mov	r2,zero
  {
    while( to != end )
 aac:	18bff726 	beq	r3,r2,a8c <_gp+0xffff7d9c>
    {
      *to++ = *from++;
 ab0:	114f883a 	add	r7,r2,r5
 ab4:	39c00017 	ldw	r7,0(r7)
 ab8:	110d883a 	add	r6,r2,r4
 abc:	10800104 	addi	r2,r2,4
 ac0:	31c00015 	stw	r7,0(r6)
 ac4:	003ff906 	br	aac <_gp+0xffff7dbc>

00000ac8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 ac8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 acc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 ad0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 ad4:	0000b8c0 	call	b8c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 ad8:	0000bac0 	call	bac <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 adc:	d1a04117 	ldw	r6,-32508(gp)
 ae0:	d1604217 	ldw	r5,-32504(gp)
 ae4:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 ae8:	dfc00017 	ldw	ra,0(sp)
 aec:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 af0:	000005c1 	jmpi	5c <main>

00000af4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 af4:	defffe04 	addi	sp,sp,-8
 af8:	dc000015 	stw	r16,0(sp)
 afc:	dfc00115 	stw	ra,4(sp)
 b00:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 b04:	00007980 	call	798 <strlen>
 b08:	01000034 	movhi	r4,0
 b0c:	000f883a 	mov	r7,zero
 b10:	100d883a 	mov	r6,r2
 b14:	800b883a 	mov	r5,r16
 b18:	21033e04 	addi	r4,r4,3320
#else
    return fputs(str, stdout);
#endif
#endif
}
 b1c:	dfc00117 	ldw	ra,4(sp)
 b20:	dc000017 	ldw	r16,0(sp)
 b24:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 b28:	0000bb01 	jmpi	bb0 <altera_avalon_jtag_uart_write>

00000b2c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 b2c:	00800044 	movi	r2,1
 b30:	20800226 	beq	r4,r2,b3c <write+0x10>
 b34:	00800084 	movi	r2,2
 b38:	2080041e 	bne	r4,r2,b4c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 b3c:	01000034 	movhi	r4,0
 b40:	000f883a 	mov	r7,zero
 b44:	21033e04 	addi	r4,r4,3320
 b48:	0000bb01 	jmpi	bb0 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 b4c:	d0a00317 	ldw	r2,-32756(gp)
 b50:	10000926 	beq	r2,zero,b78 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 b54:	deffff04 	addi	sp,sp,-4
 b58:	dfc00015 	stw	ra,0(sp)
 b5c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 b60:	00c01444 	movi	r3,81
 b64:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 b68:	00bfffc4 	movi	r2,-1
 b6c:	dfc00017 	ldw	ra,0(sp)
 b70:	dec00104 	addi	sp,sp,4
 b74:	f800283a 	ret
 b78:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 b7c:	00c01444 	movi	r3,81
 b80:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 b84:	00bfffc4 	movi	r2,-1
 b88:	f800283a 	ret

00000b8c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 b8c:	deffff04 	addi	sp,sp,-4
 b90:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 b94:	0000bec0 	call	bec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 b98:	00800044 	movi	r2,1
 b9c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 ba0:	dfc00017 	ldw	ra,0(sp)
 ba4:	dec00104 	addi	sp,sp,4
 ba8:	f800283a 	ret

00000bac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 bac:	f800283a 	ret

00000bb0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 bb0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 bb4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 bb8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 bbc:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 bc0:	2980072e 	bgeu	r5,r6,be0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 bc4:	38c00037 	ldwio	r3,0(r7)
 bc8:	18ffffec 	andhi	r3,r3,65535
 bcc:	183ffc26 	beq	r3,zero,bc0 <_gp+0xffff7ed0>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 bd0:	28c00007 	ldb	r3,0(r5)
 bd4:	20c00035 	stwio	r3,0(r4)
 bd8:	29400044 	addi	r5,r5,1
 bdc:	003ff806 	br	bc0 <_gp+0xffff7ed0>

  return count;
}
 be0:	f800283a 	ret

00000be4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 be4:	f800283a 	ret

00000be8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 be8:	f800283a 	ret

00000bec <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 bec:	000170fa 	wrctl	ienable,zero
 bf0:	f800283a 	ret
