
HelloNios_II.elf:     file format elf32-littlenios2
HelloNios_II.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001180

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000564 memsz 0x00000564 flags r-x
    LOAD off    0x00001584 vaddr 0x00001584 paddr 0x0000158c align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x00001594 vaddr 0x00001594 paddr 0x00001594 align 2**12
         filesz 0x00000000 memsz 0x00000118 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000003ec  00001180  00001180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0000156c  0000156c  0000156c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  00001584  0000158c  00001584  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000118  00001594  00001594  00001594  2**2
                  ALLOC, SMALL_DATA
  6 .SRAM         00000000  000016ac  000016ac  0000158c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000278  00000000  00000000  000015b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000171b  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000c4e  00000000  00000000  00002f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000c1e  00000000  00000000  00003b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002a0  00000000  00000000  000047b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c73  00000000  00000000  00004a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000507  00000000  00000000  000056c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00005bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000110  00000000  00000000  00005be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00006d52  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  00006d55  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00006d5e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00006d5f  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000005  00000000  00000000  00006d60  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000005  00000000  00000000  00006d65  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000005  00000000  00000000  00006d6a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000022  00000000  00000000  00006d6f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000004c  00000000  00000000  00006d91  2**0
                  CONTENTS, READONLY
 26 .jdi          000063f2  00000000  00000000  00006ddd  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003f797  00000000  00000000  0000d1cf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001180 l    d  .text	00000000 .text
0000156c l    d  .rodata	00000000 .rodata
00001584 l    d  .rwdata	00000000 .rwdata
00001594 l    d  .bss	00000000 .bss
000016ac l    d  .SRAM	00000000 .SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HelloNios_II_bsp//obj/HAL/src/crt0.o
000011b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00001594 l     O .bss	00000004 led_state.1819
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000015a8 g     O .bss	00000004 alt_instruction_exception_handler
00001410 g     F .text	0000002c alt_main
000015ac g     O .bss	00000100 alt_irq
0000158c g       *ABS*	00000000 __flash_rwdata_start
0000143c g     F .text	00000038 alt_putstr
00001548 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
000015a0 g     O .bss	00000004 alt_argv
00009584 g       *ABS*	00000000 _gp
000014d4 g     F .text	00000074 alt_exception_cause_generated_bad_addr
000011f0 g     F .text	0000003c init_timer
000016ac g       *ABS*	00000000 __bss_end
000012c8 g     F .text	00000068 alt_iic_isr_register
000012b0 g     F .text	00000018 alt_ic_irq_enabled
00001598 g     O .bss	00000004 alt_irq_active
000010fc g     F .exceptions	00000060 alt_irq_handler
000014cc g     F .text	00000004 alt_dcache_flush_all
0000158c g       *ABS*	00000000 __ram_rwdata_end
00001584 g       *ABS*	00000000 __ram_rodata_end
00001588 g     O .rwdata	00000004 DEBUG
000016ac g       *ABS*	00000000 end
0000115c g     F .exceptions	00000024 alt_instruction_exception_entry
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001498 g     F .text	00000034 altera_avalon_jtag_uart_write
00001180 g     F .text	0000003c _start
00001494 g     F .text	00000004 alt_sys_init
00001584 g       *ABS*	00000000 __ram_rwdata_start
0000156c g       *ABS*	00000000 __ram_rodata_start
000016ac g       *ABS*	00000000 __alt_stack_base
00001594 g       *ABS*	00000000 __bss_start
0000122c g     F .text	00000010 main
0000159c g     O .bss	00000004 alt_envp
0000156c g       *ABS*	00000000 __flash_rodata_start
00001474 g     F .text	00000020 alt_irq_init
000015a4 g     O .bss	00000004 alt_argc
00001020 g       .exceptions	00000000 alt_irq_entry
00001020 g       *ABS*	00000000 __ram_exceptions_start
0000123c g     F .text	00000004 alt_ic_isr_register
0000158c g       *ABS*	00000000 _edata
000016ac g       *ABS*	00000000 _end
00001180 g       *ABS*	00000000 __ram_exceptions_end
00001278 g     F .text	00000038 alt_ic_irq_disable
00002000 g       *ABS*	00000000 __alt_data_end
00001020 g     F .exceptions	00000000 alt_exception
0000100c g       .entry	00000000 _exit
000011bc g     F .text	00000034 timer_isr
00001550 g     F .text	0000001c strlen
00001000 g       *ABS*	00000000 __alt_mem_SRAM
000014d0 g     F .text	00000004 alt_icache_flush_all
00001584 g     O .rwdata	00000004 alt_priority_mask
00001240 g     F .text	00000038 alt_ic_irq_enable
00001330 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08446014 	ori	at,at,4480
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .exceptions:

00001020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    1020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    1024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    1028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    102c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    1030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    1034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    1038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    103c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    1040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    1044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    1048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    104c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    1050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    1054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    1058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    105c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    1060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    1064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    1068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    106c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    1070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    1074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    1078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    107c:	10000326 	beq	r2,zero,108c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    1080:	20000226 	beq	r4,zero,108c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    1084:	00010fc0 	call	10fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    1088:	00000706 	br	10a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    108c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    1090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    1094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    1098:	000115c0 	call	115c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    109c:	1000021e 	bne	r2,zero,10a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    10a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    10a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    10a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    10ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    10b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    10b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    10b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    10bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    10c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    10c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    10c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    10cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    10d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    10d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    10d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    10dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    10e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    10e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    10e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    10ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    10f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    10f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    10f8:	ef80083a 	eret

000010fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    10fc:	defffe04 	addi	sp,sp,-8
    1100:	dfc00115 	stw	ra,4(sp)
    1104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    1108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    110c:	04000034 	movhi	r16,0
    1110:	84056b04 	addi	r16,r16,5548

  active = alt_irq_pending ();

  do
  {
    i = 0;
    1114:	0005883a 	mov	r2,zero
    mask = 1;
    1118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    111c:	20ca703a 	and	r5,r4,r3
    1120:	28000b26 	beq	r5,zero,1150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    1124:	100490fa 	slli	r2,r2,3
    1128:	8085883a 	add	r2,r16,r2
    112c:	10c00017 	ldw	r3,0(r2)
    1130:	11000117 	ldw	r4,4(r2)
    1134:	183ee83a 	callr	r3
    1138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    113c:	203ff51e 	bne	r4,zero,1114 <_gp+0xffff7b90>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	dc000017 	ldw	r16,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    1150:	18c7883a 	add	r3,r3,r3
      i++;
    1154:	10800044 	addi	r2,r2,1

    } while (1);
    1158:	003ff006 	br	111c <_gp+0xffff7b98>

0000115c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    115c:	d0a00917 	ldw	r2,-32732(gp)
    1160:	10000426 	beq	r2,zero,1174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    1164:	200b883a 	mov	r5,r4
    1168:	000d883a 	mov	r6,zero
    116c:	013fffc4 	movi	r4,-1
    1170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    1174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    1178:	0005883a 	mov	r2,zero
    117c:	f800283a 	ret

Disassembly of section .text:

00001180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1184:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    118c:	d6a56114 	ori	gp,gp,38276
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1194:	10856514 	ori	r2,r2,5524

    movhi r3, %hi(__bss_end)
    1198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    119c:	18c5ab14 	ori	r3,r3,5804

    beq r2, r3, 1f
    11a0:	10c00326 	beq	r2,r3,11b0 <_start+0x30>

0:
    stw zero, (r2)
    11a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    11a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    11ac:	10fffd36 	bltu	r2,r3,11a4 <_gp+0xffff7c20>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    11b0:	00013300 	call	1330 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    11b4:	00014100 	call	1410 <alt_main>

000011b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    11b8:	003fff06 	br	11b8 <_gp+0xffff7c34>

000011bc <timer_isr>:
// timer ISR - Triggers every period of the timer
void timer_isr(void *context) {
    static int led_state = 0;

    // Toggle LED state
    led_state = !led_state;
    11bc:	d0a00417 	ldw	r2,-32752(gp)
    IOWR_ALTERA_AVALON_PIO_DATA(GPIO_BASE, led_state);
    11c0:	00cc1004 	movi	r3,12352
// timer ISR - Triggers every period of the timer
void timer_isr(void *context) {
    static int led_state = 0;

    // Toggle LED state
    led_state = !led_state;
    11c4:	1005003a 	cmpeq	r2,r2,zero
    11c8:	d0a00415 	stw	r2,-32752(gp)
    IOWR_ALTERA_AVALON_PIO_DATA(GPIO_BASE, led_state);
    11cc:	18800035 	stwio	r2,0(r3)

    // Clear the timer interrupt
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
    11d0:	008c0804 	movi	r2,12320
    11d4:	10000035 	stwio	zero,0(r2)

    // Prints the message on Console (UART to Console is established through a USB Blaster)
    // Such that the message appears in synchronous with the LED
    if(led_state==0){
    11d8:	d0a00417 	ldw	r2,-32752(gp)
    11dc:	1000031e 	bne	r2,zero,11ec <timer_isr+0x30>
    	alt_putstr("Hello from Nios II!\n");
    11e0:	01000034 	movhi	r4,0
    11e4:	21055b04 	addi	r4,r4,5484
    11e8:	000143c1 	jmpi	143c <alt_putstr>
    11ec:	f800283a 	ret

000011f0 <init_timer>:
    }
}

// Initializes and Starts the Timer
void init_timer (void) {
    11f0:	defffe04 	addi	sp,sp,-8
    11f4:	dfc00115 	stw	ra,4(sp)
IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE,
    11f8:	008c0904 	movi	r2,12324
    11fc:	00c001c4 	movi	r3,7
    1200:	10c00035 	stwio	r3,0(r2)
                                 ALTERA_AVALON_TIMER_CONTROL_START_MSK |	//starts the timer
                                 ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |		//timer will restart after reaching the period value
                                 ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);		//timer generates an interrupt when reaching timeout value

// Register the ISR
alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID,
    1204:	01800034 	movhi	r6,0
    1208:	d8000015 	stw	zero,0(sp)
    120c:	000f883a 	mov	r7,zero
    1210:	31846f04 	addi	r6,r6,4540
    1214:	01400044 	movi	r5,1
    1218:	0009883a 	mov	r4,zero
    121c:	000123c0 	call	123c <alt_ic_isr_register>
					TIMER_IRQ,
					timer_isr,
					NULL,
					NULL);
}
    1220:	dfc00117 	ldw	ra,4(sp)
    1224:	dec00204 	addi	sp,sp,8
    1228:	f800283a 	ret

0000122c <main>:


int main()
{ 
    122c:	deffff04 	addi	sp,sp,-4
    1230:	dfc00015 	stw	ra,0(sp)
  init_timer();
    1234:	00011f00 	call	11f0 <init_timer>
    1238:	003fff06 	br	1238 <_gp+0xffff7cb4>

0000123c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    123c:	00012c81 	jmpi	12c8 <alt_iic_isr_register>

00001240 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1240:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1244:	00bfff84 	movi	r2,-2
    1248:	2084703a 	and	r2,r4,r2
    124c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    1250:	00c00044 	movi	r3,1
    1254:	d0a00517 	ldw	r2,-32748(gp)
    1258:	194a983a 	sll	r5,r3,r5
    125c:	288ab03a 	or	r5,r5,r2
    1260:	d1600515 	stw	r5,-32748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1264:	d0a00517 	ldw	r2,-32748(gp)
    1268:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    126c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    1270:	0005883a 	mov	r2,zero
    1274:	f800283a 	ret

00001278 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1278:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    127c:	00bfff84 	movi	r2,-2
    1280:	2084703a 	and	r2,r4,r2
    1284:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    1288:	00ffff84 	movi	r3,-2
    128c:	d0a00517 	ldw	r2,-32748(gp)
    1290:	194a183a 	rol	r5,r3,r5
    1294:	288a703a 	and	r5,r5,r2
    1298:	d1600515 	stw	r5,-32748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    129c:	d0a00517 	ldw	r2,-32748(gp)
    12a0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    12a4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    12a8:	0005883a 	mov	r2,zero
    12ac:	f800283a 	ret

000012b0 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    12b0:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    12b4:	00800044 	movi	r2,1
    12b8:	1144983a 	sll	r2,r2,r5
    12bc:	10c4703a 	and	r2,r2,r3
}
    12c0:	1004c03a 	cmpne	r2,r2,zero
    12c4:	f800283a 	ret

000012c8 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    12c8:	00c007c4 	movi	r3,31
    12cc:	19401616 	blt	r3,r5,1328 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    12d0:	defffe04 	addi	sp,sp,-8
    12d4:	dfc00115 	stw	ra,4(sp)
    12d8:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    12dc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    12e0:	00ffff84 	movi	r3,-2
    12e4:	80c6703a 	and	r3,r16,r3
    12e8:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    12ec:	280490fa 	slli	r2,r5,3
    12f0:	00c00034 	movhi	r3,0
    12f4:	18c56b04 	addi	r3,r3,5548
    12f8:	1885883a 	add	r2,r3,r2
    12fc:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    1300:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    1304:	30000226 	beq	r6,zero,1310 <alt_iic_isr_register+0x48>
    1308:	00012400 	call	1240 <alt_ic_irq_enable>
    130c:	00000106 	br	1314 <alt_iic_isr_register+0x4c>
    1310:	00012780 	call	1278 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1314:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    1318:	dfc00117 	ldw	ra,4(sp)
    131c:	dc000017 	ldw	r16,0(sp)
    1320:	dec00204 	addi	sp,sp,8
    1324:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    1328:	00bffa84 	movi	r2,-22
    132c:	f800283a 	ret

00001330 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1330:	deffff04 	addi	sp,sp,-4
    1334:	01000034 	movhi	r4,0
    1338:	01400034 	movhi	r5,0
    133c:	dfc00015 	stw	ra,0(sp)
    1340:	21056104 	addi	r4,r4,5508
    1344:	29456304 	addi	r5,r5,5516

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1348:	2140061e 	bne	r4,r5,1364 <alt_load+0x34>
    134c:	01000034 	movhi	r4,0
    1350:	01400034 	movhi	r5,0
    1354:	21040804 	addi	r4,r4,4128
    1358:	29440804 	addi	r5,r5,4128
    135c:	2140121e 	bne	r4,r5,13a8 <alt_load+0x78>
    1360:	00000b06 	br	1390 <alt_load+0x60>
    1364:	00c00034 	movhi	r3,0
    1368:	18c56304 	addi	r3,r3,5516
    136c:	1907c83a 	sub	r3,r3,r4
    1370:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1374:	10fff526 	beq	r2,r3,134c <_gp+0xffff7dc8>
    {
      *to++ = *from++;
    1378:	114f883a 	add	r7,r2,r5
    137c:	39c00017 	ldw	r7,0(r7)
    1380:	110d883a 	add	r6,r2,r4
    1384:	10800104 	addi	r2,r2,4
    1388:	31c00015 	stw	r7,0(r6)
    138c:	003ff906 	br	1374 <_gp+0xffff7df0>
    1390:	01000034 	movhi	r4,0
    1394:	01400034 	movhi	r5,0
    1398:	21055b04 	addi	r4,r4,5484
    139c:	29455b04 	addi	r5,r5,5484

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    13a0:	2140101e 	bne	r4,r5,13e4 <alt_load+0xb4>
    13a4:	00000b06 	br	13d4 <alt_load+0xa4>
    13a8:	00c00034 	movhi	r3,0
    13ac:	18c46004 	addi	r3,r3,4480
    13b0:	1907c83a 	sub	r3,r3,r4
    13b4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    13b8:	10fff526 	beq	r2,r3,1390 <_gp+0xffff7e0c>
    {
      *to++ = *from++;
    13bc:	114f883a 	add	r7,r2,r5
    13c0:	39c00017 	ldw	r7,0(r7)
    13c4:	110d883a 	add	r6,r2,r4
    13c8:	10800104 	addi	r2,r2,4
    13cc:	31c00015 	stw	r7,0(r6)
    13d0:	003ff906 	br	13b8 <_gp+0xffff7e34>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    13d4:	00014cc0 	call	14cc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    13d8:	dfc00017 	ldw	ra,0(sp)
    13dc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    13e0:	00014d01 	jmpi	14d0 <alt_icache_flush_all>
    13e4:	00c00034 	movhi	r3,0
    13e8:	18c56104 	addi	r3,r3,5508
    13ec:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    13f0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    13f4:	18bff726 	beq	r3,r2,13d4 <_gp+0xffff7e50>
    {
      *to++ = *from++;
    13f8:	114f883a 	add	r7,r2,r5
    13fc:	39c00017 	ldw	r7,0(r7)
    1400:	110d883a 	add	r6,r2,r4
    1404:	10800104 	addi	r2,r2,4
    1408:	31c00015 	stw	r7,0(r6)
    140c:	003ff906 	br	13f4 <_gp+0xffff7e70>

00001410 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1410:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1414:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1418:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    141c:	00014740 	call	1474 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1420:	00014940 	call	1494 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1424:	d1a00617 	ldw	r6,-32744(gp)
    1428:	d1600717 	ldw	r5,-32740(gp)
    142c:	d1200817 	ldw	r4,-32736(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1430:	dfc00017 	ldw	ra,0(sp)
    1434:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1438:	000122c1 	jmpi	122c <main>

0000143c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    143c:	defffe04 	addi	sp,sp,-8
    1440:	dc000015 	stw	r16,0(sp)
    1444:	dfc00115 	stw	ra,4(sp)
    1448:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    144c:	00015500 	call	1550 <strlen>
    1450:	01000034 	movhi	r4,0
    1454:	000f883a 	mov	r7,zero
    1458:	100d883a 	mov	r6,r2
    145c:	800b883a 	mov	r5,r16
    1460:	21056204 	addi	r4,r4,5512
#else
    return fputs(str, stdout);
#endif
#endif
}
    1464:	dfc00117 	ldw	ra,4(sp)
    1468:	dc000017 	ldw	r16,0(sp)
    146c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1470:	00014981 	jmpi	1498 <altera_avalon_jtag_uart_write>

00001474 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1474:	deffff04 	addi	sp,sp,-4
    1478:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( HELLONIOS, HelloNios);
    147c:	00015480 	call	1548 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1480:	00800044 	movi	r2,1
    1484:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1488:	dfc00017 	ldw	ra,0(sp)
    148c:	dec00104 	addi	sp,sp,4
    1490:	f800283a 	ret

00001494 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1494:	f800283a 	ret

00001498 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1498:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    149c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    14a0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    14a4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    14a8:	2980072e 	bgeu	r5,r6,14c8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    14ac:	38c00037 	ldwio	r3,0(r7)
    14b0:	18ffffec 	andhi	r3,r3,65535
    14b4:	183ffc26 	beq	r3,zero,14a8 <_gp+0xffff7f24>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    14b8:	28c00007 	ldb	r3,0(r5)
    14bc:	20c00035 	stwio	r3,0(r4)
    14c0:	29400044 	addi	r5,r5,1
    14c4:	003ff806 	br	14a8 <_gp+0xffff7f24>

  return count;
}
    14c8:	f800283a 	ret

000014cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    14cc:	f800283a 	ret

000014d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    14d0:	f800283a 	ret

000014d4 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    14d4:	213ffe84 	addi	r4,r4,-6
    14d8:	008003c4 	movi	r2,15
    14dc:	11001636 	bltu	r2,r4,1538 <alt_exception_cause_generated_bad_addr+0x64>
    14e0:	200890ba 	slli	r4,r4,2
    14e4:	00800034 	movhi	r2,0
    14e8:	10853e04 	addi	r2,r2,5368
    14ec:	2089883a 	add	r4,r4,r2
    14f0:	20800017 	ldw	r2,0(r4)
    14f4:	1000683a 	jmp	r2
    14f8:	00001540 	call	154 <__reset-0xeac>
    14fc:	00001540 	call	154 <__reset-0xeac>
    1500:	00001538 	rdprs	zero,zero,84
    1504:	00001538 	rdprs	zero,zero,84
    1508:	00001538 	rdprs	zero,zero,84
    150c:	00001540 	call	154 <__reset-0xeac>
    1510:	00001538 	rdprs	zero,zero,84
    1514:	00001538 	rdprs	zero,zero,84
    1518:	00001540 	call	154 <__reset-0xeac>
    151c:	00001540 	call	154 <__reset-0xeac>
    1520:	00001538 	rdprs	zero,zero,84
    1524:	00001540 	call	154 <__reset-0xeac>
    1528:	00001538 	rdprs	zero,zero,84
    152c:	00001538 	rdprs	zero,zero,84
    1530:	00001538 	rdprs	zero,zero,84
    1534:	00001540 	call	154 <__reset-0xeac>
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    1538:	0005883a 	mov	r2,zero
    153c:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    1540:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    1544:	f800283a 	ret

00001548 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1548:	000170fa 	wrctl	ienable,zero
    154c:	f800283a 	ret

00001550 <strlen>:
    1550:	2005883a 	mov	r2,r4
    1554:	10c00007 	ldb	r3,0(r2)
    1558:	18000226 	beq	r3,zero,1564 <strlen+0x14>
    155c:	10800044 	addi	r2,r2,1
    1560:	003ffc06 	br	1554 <_gp+0xffff7fd0>
    1564:	1105c83a 	sub	r2,r2,r4
    1568:	f800283a 	ret
