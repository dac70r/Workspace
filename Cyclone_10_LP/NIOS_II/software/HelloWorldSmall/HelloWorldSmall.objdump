
HelloWorldSmall.elf:     file format elf32-littlenios2
HelloWorldSmall.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x0000018c memsz 0x00000198 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  000011ac  2**0
                  CONTENTS
  2 .text         00000170  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  00001190  00001190  00001190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000011a8  000011a8  000011a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000011ac  000011ac  000011ac  2**2
                  ALLOC, SMALL_DATA
  6 .SRAM         00000000  000011b8  000011b8  000011ac  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000108  00000000  00000000  000011d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000086d  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000004fb  00000000  00000000  00001b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000061b  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000120  00000000  00000000  0000265c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000480  00000000  00000000  0000277c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000014b  00000000  00000000  00002bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00002d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000040  00000000  00000000  00002d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00003906  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  00003909  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00003912  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00003913  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000005  00000000  00000000  00003914  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000005  00000000  00000000  00003919  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000005  00000000  00000000  0000391e  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000022  00000000  00000000  00003923  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003b  00000000  00000000  00003945  2**0
                  CONTENTS, READONLY
 26 .jdi          000063f2  00000000  00000000  00003980  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00032633  00000000  00000000  00009d72  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001190 l    d  .rodata	00000000 .rodata
000011a8 l    d  .rwdata	00000000 .rwdata
000011ac l    d  .bss	00000000 .bss
000011b8 l    d  .SRAM	00000000 .SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HelloWorldSmall_bsp//obj/HAL/src/crt0.o
00001064 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000010b0 g     F .text	0000002c alt_main
000010dc g     F .text	00000038 alt_putstr
0000116c g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000001c __reset
000011b0 g     O .bss	00000004 alt_argv
000091a8 g       *ABS*	00000000 _gp
000011b8 g       *ABS*	00000000 __bss_end
000011a8 g     O .rwdata	00000004 DEBUG
000011b8 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001138 g     F .text	00000034 altera_avalon_jtag_uart_write
00001020 g     F .text	00000048 _start
00001134 g     F .text	00000004 alt_sys_init
000011b8 g       *ABS*	00000000 __alt_stack_base
000011ac g       *ABS*	00000000 __bss_start
00001068 g     F .text	00000048 main
000011ac g     O .bss	00000004 alt_envp
00001114 g     F .text	00000020 alt_irq_init
000011b4 g     O .bss	00000004 alt_argc
000011ac g       *ABS*	00000000 _edata
000011b8 g       *ABS*	00000000 _end
00002000 g       *ABS*	00000000 __alt_data_end
0000101c g       .entry	00000000 _exit
00001174 g     F .text	0000001c strlen
00001000 g       *ABS*	00000000 __alt_mem_SRAM



Disassembly of section .entry:

00001000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    1000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    1004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    1008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    100c:	00bffd16 	blt	zero,r2,1004 <_gp+0xffff7e5c>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1014:	08440814 	ori	at,at,4128
    jmp r1
    1018:	0800683a 	jmp	at

0000101c <_exit>:
    101c:	00000000 	call	0 <__alt_mem_SRAM-0x1000>

Disassembly of section .text:

00001020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    1020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    1024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    1028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    102c:	00bffd16 	blt	zero,r2,1024 <_gp+0xffff7e7c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1034:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1038:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    103c:	d6a46a14 	ori	gp,gp,37288
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1044:	10846b14 	ori	r2,r2,4524

    movhi r3, %hi(__bss_end)
    1048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    104c:	18c46e14 	ori	r3,r3,4536

    beq r2, r3, 1f
    1050:	10c00326 	beq	r2,r3,1060 <_start+0x40>

0:
    stw zero, (r2)
    1054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    105c:	10fffd36 	bltu	r2,r3,1054 <_gp+0xffff7eac>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1060:	00010b00 	call	10b0 <alt_main>

00001064 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1064:	003fff06 	br	1064 <_gp+0xffff7ebc>

00001068 <main>:
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    1068:	01000034 	movhi	r4,0
#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{ 
    106c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    1070:	21046404 	addi	r4,r4,4496
#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{ 
    1074:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    1078:	00010dc0 	call	10dc <alt_putstr>
  int delay = 0;

  /* Event loop never exits. */
  while (1){

	  if(count<=2500000){
    107c:	014009b4 	movhi	r5,38

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  int count = 0;
  int delay = 0;
    1080:	0007883a 	mov	r3,zero
#include "altera_avalon_pio_regs.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  int count = 0;
    1084:	0005883a 	mov	r2,zero
  int delay = 0;

  /* Event loop never exits. */
  while (1){

	  if(count<=2500000){
    1088:	29496804 	addi	r5,r5,9632
		  count++;
	  }
	  else{
		  IOWR_ALTERA_AVALON_PIO_DATA(GPIO_BASE, ~(delay));
    108c:	010c0004 	movi	r4,12288
  int delay = 0;

  /* Event loop never exits. */
  while (1){

	  if(count<=2500000){
    1090:	28800216 	blt	r5,r2,109c <main+0x34>
		  count++;
    1094:	10800044 	addi	r2,r2,1
    1098:	003ffd06 	br	1090 <_gp+0xffff7ee8>
	  }
	  else{
		  IOWR_ALTERA_AVALON_PIO_DATA(GPIO_BASE, ~(delay));
    109c:	00c4303a 	nor	r2,zero,r3
    10a0:	20800035 	stwio	r2,0(r4)
		  delay++;
    10a4:	18c00044 	addi	r3,r3,1
		  count = 0;
    10a8:	0005883a 	mov	r2,zero
    10ac:	003ff806 	br	1090 <_gp+0xffff7ee8>

000010b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    10b0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    10b4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    10b8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    10bc:	00011140 	call	1114 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    10c0:	00011340 	call	1134 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    10c4:	d1a00117 	ldw	r6,-32764(gp)
    10c8:	d1600217 	ldw	r5,-32760(gp)
    10cc:	d1200317 	ldw	r4,-32756(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    10d0:	dfc00017 	ldw	ra,0(sp)
    10d4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    10d8:	00010681 	jmpi	1068 <main>

000010dc <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    10dc:	defffe04 	addi	sp,sp,-8
    10e0:	dc000015 	stw	r16,0(sp)
    10e4:	dfc00115 	stw	ra,4(sp)
    10e8:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    10ec:	00011740 	call	1174 <strlen>
    10f0:	01000034 	movhi	r4,0
    10f4:	000f883a 	mov	r7,zero
    10f8:	100d883a 	mov	r6,r2
    10fc:	800b883a 	mov	r5,r16
    1100:	21046a04 	addi	r4,r4,4520
#else
    return fputs(str, stdout);
#endif
#endif
}
    1104:	dfc00117 	ldw	ra,4(sp)
    1108:	dc000017 	ldw	r16,0(sp)
    110c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1110:	00011381 	jmpi	1138 <altera_avalon_jtag_uart_write>

00001114 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1114:	deffff04 	addi	sp,sp,-4
    1118:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( HELLONIOS, HelloNios);
    111c:	000116c0 	call	116c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1120:	00800044 	movi	r2,1
    1124:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1128:	dfc00017 	ldw	ra,0(sp)
    112c:	dec00104 	addi	sp,sp,4
    1130:	f800283a 	ret

00001134 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1134:	f800283a 	ret

00001138 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1138:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    113c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1140:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1144:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1148:	2980072e 	bgeu	r5,r6,1168 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    114c:	38c00037 	ldwio	r3,0(r7)
    1150:	18ffffec 	andhi	r3,r3,65535
    1154:	183ffc26 	beq	r3,zero,1148 <_gp+0xffff7fa0>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1158:	28c00007 	ldb	r3,0(r5)
    115c:	20c00035 	stwio	r3,0(r4)
    1160:	29400044 	addi	r5,r5,1
    1164:	003ff806 	br	1148 <_gp+0xffff7fa0>

  return count;
}
    1168:	f800283a 	ret

0000116c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    116c:	000170fa 	wrctl	ienable,zero
    1170:	f800283a 	ret

00001174 <strlen>:
    1174:	2005883a 	mov	r2,r4
    1178:	10c00007 	ldb	r3,0(r2)
    117c:	18000226 	beq	r3,zero,1188 <strlen+0x14>
    1180:	10800044 	addi	r2,r2,1
    1184:	003ffc06 	br	1178 <_gp+0xffff7fd0>
    1188:	1105c83a 	sub	r2,r2,r4
    118c:	f800283a 	ret
